<suite>

<suite.member href="attrcreatedocumentfragment.xml" fleur="attrcreatedocumentfragment" native="attrcreatedocumentfragment"><Fleur>(function(){
	var success;
	try {
		var doc;
		var docFragment;
		var newOne;
		var domesticNode;
		var domesticAttr;
		var attrs;
		var attrName;
		var appendedChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		docFragment = doc.createDocumentFragment();
		newOne = doc.createElement("newElement");
		newOne.setAttribute("newdomestic", "Yes");
		appendedChild = docFragment.appendChild(newOne);
		domesticNode = docFragment.firstChild;
		domesticAttr = domesticNode.attributes;
		attrs = domesticAttr.item(0);
		attrName = attrs.name;
		if ("newdomestic" !== attrName) {
			return "attrCreateDocumentFragment: #attrCreateDocumentFragmentAssert 'attrName' equals '" + attrName + "' not '" + "newdomestic" + "'";
		}
		return "attrCreateDocumentFragment: OK";
	} catch (e) {
		return "attrCreateDocumentFragment: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var docFragment;
		var newOne;
		var domesticNode;
		var domesticAttr;
		var attrs;
		var attrName;
		var appendedChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		docFragment = doc.createDocumentFragment();
		newOne = doc.createElement("newElement");
		newOne.setAttribute("newdomestic", "Yes");
		appendedChild = docFragment.appendChild(newOne);
		domesticNode = docFragment.firstChild;
		domesticAttr = domesticNode.attributes;
		attrs = domesticAttr.item(0);
		attrName = attrs.name;
		if ("newdomestic" !== attrName) {
			return "attrCreateDocumentFragment: #attrCreateDocumentFragmentAssert 'attrName' equals '" + attrName + "' not '" + "newdomestic" + "'";
		}
		return "attrCreateDocumentFragment: OK";
	} catch (e) {
		return "attrCreateDocumentFragment: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="attrcreatetextnode.xml" fleur="attrcreatetextnode" native="attrcreatetextnode"><Fleur>(function(){
	var success;
	try {
		var doc;
		var addressList;
		var testNode;
		var attributes;
		var streetAttr;
		var value;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		addressList = doc.getElementsByTagName("address");
		testNode = addressList.item(3);
		attributes = testNode.attributes;
		streetAttr = attributes.getNamedItem("street");
		streetAttr.value = "Y&amp;ent1;";
		value = streetAttr.value;
		if ("Y&amp;ent1;" !== value) {
			return "attrCreateTextNode: #value 'value' equals '" + value + "' not '" + "Y&amp;ent1;" + "'";
		}
		value = streetAttr.nodeValue;
		if ("Y&amp;ent1;" !== value) {
			return "attrCreateTextNode: #nodeValue 'value' equals '" + value + "' not '" + "Y&amp;ent1;" + "'";
		}
		return "attrCreateTextNode: OK";
	} catch (e) {
		return "attrCreateTextNode: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var addressList;
		var testNode;
		var attributes;
		var streetAttr;
		var value;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		addressList = doc.getElementsByTagName("address");
		testNode = addressList.item(3);
		attributes = testNode.attributes;
		streetAttr = attributes.getNamedItem("street");
		streetAttr.value = "Y&amp;ent1;";
		value = streetAttr.value;
		if ("Y&amp;ent1;" !== value) {
			return "attrCreateTextNode: #value 'value' equals '" + value + "' not '" + "Y&amp;ent1;" + "'";
		}
		value = streetAttr.nodeValue;
		if ("Y&amp;ent1;" !== value) {
			return "attrCreateTextNode: #nodeValue 'value' equals '" + value + "' not '" + "Y&amp;ent1;" + "'";
		}
		return "attrCreateTextNode: OK";
	} catch (e) {
		return "attrCreateTextNode: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="attrcreatetextnode2.xml" fleur="attrcreatetextnode2" native="attrcreatetextnode2"><Fleur>(function(){
	var success;
	try {
		var doc;
		var addressList;
		var testNode;
		var attributes;
		var streetAttr;
		var value;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		addressList = doc.getElementsByTagName("address");
		testNode = addressList.item(3);
		attributes = testNode.attributes;
		streetAttr = attributes.getNamedItem("street");
		streetAttr.nodeValue = "Y&amp;ent1;";
		value = streetAttr.value;
		if ("Y&amp;ent1;" !== value) {
			return "attrCreateTextNode2: #value 'value' equals '" + value + "' not '" + "Y&amp;ent1;" + "'";
		}
		value = streetAttr.nodeValue;
		if ("Y&amp;ent1;" !== value) {
			return "attrCreateTextNode2: #nodeValue 'value' equals '" + value + "' not '" + "Y&amp;ent1;" + "'";
		}
		return "attrCreateTextNode2: OK";
	} catch (e) {
		return "attrCreateTextNode2: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var addressList;
		var testNode;
		var attributes;
		var streetAttr;
		var value;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		addressList = doc.getElementsByTagName("address");
		testNode = addressList.item(3);
		attributes = testNode.attributes;
		streetAttr = attributes.getNamedItem("street");
		streetAttr.nodeValue = "Y&amp;ent1;";
		value = streetAttr.value;
		if ("Y&amp;ent1;" !== value) {
			return "attrCreateTextNode2: #value 'value' equals '" + value + "' not '" + "Y&amp;ent1;" + "'";
		}
		value = streetAttr.nodeValue;
		if ("Y&amp;ent1;" !== value) {
			return "attrCreateTextNode2: #nodeValue 'value' equals '" + value + "' not '" + "Y&amp;ent1;" + "'";
		}
		return "attrCreateTextNode2: OK";
	} catch (e) {
		return "attrCreateTextNode2: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="attrdefaultvalue.xml" fleur="attrdefaultvalue" native="attrdefaultvalue"><Fleur>(function(){
	var success;
	try {
		var doc;
		var addressList;
		var testNode;
		var attributes;
		var streetAttr;
		var value;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		addressList = doc.getElementsByTagName("address");
		testNode = addressList.item(1);
		attributes = testNode.attributes;
		streetAttr = attributes.getNamedItem("street");
		value = streetAttr.nodeValue;
		if ("Yes" !== value) {
			return "attrDefaultValue: #attrDefaultValueAssert 'value' equals '" + value + "' not '" + "Yes" + "'";
		}
		return "attrDefaultValue: OK";
	} catch (e) {
		return "attrDefaultValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var addressList;
		var testNode;
		var attributes;
		var streetAttr;
		var value;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		addressList = doc.getElementsByTagName("address");
		testNode = addressList.item(1);
		attributes = testNode.attributes;
		streetAttr = attributes.getNamedItem("street");
		value = streetAttr.nodeValue;
		if ("Yes" !== value) {
			return "attrDefaultValue: #attrDefaultValueAssert 'value' equals '" + value + "' not '" + "Yes" + "'";
		}
		return "attrDefaultValue: OK";
	} catch (e) {
		return "attrDefaultValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="attreffectivevalue.xml" fleur="attreffectivevalue" native="attreffectivevalue"><Fleur>(function(){
	var success;
	try {
		var doc;
		var addressList;
		var testNode;
		var attributes;
		var domesticAttr;
		var value;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		addressList = doc.getElementsByTagName("address");
		testNode = addressList.item(0);
		attributes = testNode.attributes;
		domesticAttr = attributes.getNamedItem("domestic");
		value = domesticAttr.nodeValue;
		if ("Yes" !== value) {
			return "attrEffectiveValue: #attrEffectiveValueAssert 'value' equals '" + value + "' not '" + "Yes" + "'";
		}
		return "attrEffectiveValue: OK";
	} catch (e) {
		return "attrEffectiveValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var addressList;
		var testNode;
		var attributes;
		var domesticAttr;
		var value;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		addressList = doc.getElementsByTagName("address");
		testNode = addressList.item(0);
		attributes = testNode.attributes;
		domesticAttr = attributes.getNamedItem("domestic");
		value = domesticAttr.nodeValue;
		if ("Yes" !== value) {
			return "attrEffectiveValue: #attrEffectiveValueAssert 'value' equals '" + value + "' not '" + "Yes" + "'";
		}
		return "attrEffectiveValue: OK";
	} catch (e) {
		return "attrEffectiveValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="attrentityreplacement.xml" fleur="attrentityreplacement" native="attrentityreplacement"><Fleur>(function(){
	var success;
	try {
		var doc;
		var addressList;
		var testNode;
		var attributes;
		var streetAttr;
		var value;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		addressList = doc.getElementsByTagName("address");
		testNode = addressList.item(3);
		attributes = testNode.attributes;
		streetAttr = attributes.getNamedItem("street");
		value = streetAttr.value;
		if ("Yes" !== value) {
			return "attrEntityReplacement: #streetYes 'value' equals '" + value + "' not '" + "Yes" + "'";
		}
		return "attrEntityReplacement: OK";
	} catch (e) {
		return "attrEntityReplacement: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var addressList;
		var testNode;
		var attributes;
		var streetAttr;
		var value;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		addressList = doc.getElementsByTagName("address");
		testNode = addressList.item(3);
		attributes = testNode.attributes;
		streetAttr = attributes.getNamedItem("street");
		value = streetAttr.value;
		if ("Yes" !== value) {
			return "attrEntityReplacement: #streetYes 'value' equals '" + value + "' not '" + "Yes" + "'";
		}
		return "attrEntityReplacement: OK";
	} catch (e) {
		return "attrEntityReplacement: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="attrname.xml" fleur="attrname" native="attrname"><Fleur>(function(){
	var success;
	try {
		var doc;
		var addressList;
		var testNode;
		var attributes;
		var streetAttr;
		var name;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		addressList = doc.getElementsByTagName("address");
		testNode = addressList.item(1);
		attributes = testNode.attributes;
		streetAttr = attributes.getNamedItem("street");
		name = streetAttr.nodeName;
		if ("street" !== name) {
			return "attrName: #nodeName 'name' equals '" + name + "' not '" + "street" + "'";
		}
		name = streetAttr.name;
		if ("street" !== name) {
			return "attrName: #name 'name' equals '" + name + "' not '" + "street" + "'";
		}
		return "attrName: OK";
	} catch (e) {
		return "attrName: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var addressList;
		var testNode;
		var attributes;
		var streetAttr;
		var name;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		addressList = doc.getElementsByTagName("address");
		testNode = addressList.item(1);
		attributes = testNode.attributes;
		streetAttr = attributes.getNamedItem("street");
		name = streetAttr.nodeName;
		if ("street" !== name) {
			return "attrName: #nodeName 'name' equals '" + name + "' not '" + "street" + "'";
		}
		name = streetAttr.name;
		if ("street" !== name) {
			return "attrName: #name 'name' equals '" + name + "' not '" + "street" + "'";
		}
		return "attrName: OK";
	} catch (e) {
		return "attrName: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="attrnextsiblingnull.xml" fleur="attrnextsiblingnull" native="attrnextsiblingnull"><Fleur>(function(){
	var success;
	try {
		var doc;
		var addressList;
		var testNode;
		var attributes;
		var domesticAttr;
		var s;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		addressList = doc.getElementsByTagName("address");
		testNode = addressList.item(0);
		attributes = testNode.attributes;
		domesticAttr = attributes.getNamedItem("domestic");
		s = domesticAttr.nextSibling;
		if (s != null) {
			return "attrNextSiblingNull: #attrNextSiblingNullAssert 's' equals '" + s + "' not null";
		}
		return "attrNextSiblingNull: OK";
	} catch (e) {
		return "attrNextSiblingNull: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var addressList;
		var testNode;
		var attributes;
		var domesticAttr;
		var s;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		addressList = doc.getElementsByTagName("address");
		testNode = addressList.item(0);
		attributes = testNode.attributes;
		domesticAttr = attributes.getNamedItem("domestic");
		s = domesticAttr.nextSibling;
		if (s != null) {
			return "attrNextSiblingNull: #attrNextSiblingNullAssert 's' equals '" + s + "' not null";
		}
		return "attrNextSiblingNull: OK";
	} catch (e) {
		return "attrNextSiblingNull: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="attrnotspecifiedvalue.xml" fleur="attrnotspecifiedvalue" native="attrnotspecifiedvalue"><Fleur>(function(){
	var success;
	try {
		var doc;
		var addressList;
		var testNode;
		var attributes;
		var streetAttr;
		var state;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		addressList = doc.getElementsByTagName("address");
		testNode = addressList.item(0);
		attributes = testNode.attributes;
		streetAttr = attributes.getNamedItem("street");
		state = streetAttr.specified;
		if (state !== false) {
			return "streetNotSpecified: 'state' equals '" + state + "' not false";
		}
		return "attrNotSpecifiedValue: OK";
	} catch (e) {
		return "attrNotSpecifiedValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var addressList;
		var testNode;
		var attributes;
		var streetAttr;
		var state;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		addressList = doc.getElementsByTagName("address");
		testNode = addressList.item(0);
		attributes = testNode.attributes;
		streetAttr = attributes.getNamedItem("street");
		state = streetAttr.specified;
		if (state !== false) {
			return "streetNotSpecified: 'state' equals '" + state + "' not false";
		}
		return "attrNotSpecifiedValue: OK";
	} catch (e) {
		return "attrNotSpecifiedValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="attrparentnodenull.xml" fleur="attrparentnodenull" native="attrparentnodenull"><Fleur>(function(){
	var success;
	try {
		var doc;
		var addressList;
		var testNode;
		var attributes;
		var domesticAttr;
		var s;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		addressList = doc.getElementsByTagName("address");
		testNode = addressList.item(0);
		attributes = testNode.attributes;
		domesticAttr = attributes.getNamedItem("domestic");
		s = domesticAttr.parentNode;
		if (s != null) {
			return "attrParentNodeNull: #attrParentNodeNullAssert 's' equals '" + s + "' not null";
		}
		return "attrParentNodeNull: OK";
	} catch (e) {
		return "attrParentNodeNull: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var addressList;
		var testNode;
		var attributes;
		var domesticAttr;
		var s;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		addressList = doc.getElementsByTagName("address");
		testNode = addressList.item(0);
		attributes = testNode.attributes;
		domesticAttr = attributes.getNamedItem("domestic");
		s = domesticAttr.parentNode;
		if (s != null) {
			return "attrParentNodeNull: #attrParentNodeNullAssert 's' equals '" + s + "' not null";
		}
		return "attrParentNodeNull: OK";
	} catch (e) {
		return "attrParentNodeNull: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="attrprevioussiblingnull.xml" fleur="attrprevioussiblingnull" native="attrprevioussiblingnull"><Fleur>(function(){
	var success;
	try {
		var doc;
		var addressList;
		var testNode;
		var attributes;
		var domesticAttr;
		var s;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		addressList = doc.getElementsByTagName("address");
		testNode = addressList.item(0);
		attributes = testNode.attributes;
		domesticAttr = attributes.getNamedItem("domestic");
		s = domesticAttr.previousSibling;
		if (s != null) {
			return "attrPreviousSiblingNull: #attrPreviousSiblingNullAssert 's' equals '" + s + "' not null";
		}
		return "attrPreviousSiblingNull: OK";
	} catch (e) {
		return "attrPreviousSiblingNull: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var addressList;
		var testNode;
		var attributes;
		var domesticAttr;
		var s;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		addressList = doc.getElementsByTagName("address");
		testNode = addressList.item(0);
		attributes = testNode.attributes;
		domesticAttr = attributes.getNamedItem("domestic");
		s = domesticAttr.previousSibling;
		if (s != null) {
			return "attrPreviousSiblingNull: #attrPreviousSiblingNullAssert 's' equals '" + s + "' not null";
		}
		return "attrPreviousSiblingNull: OK";
	} catch (e) {
		return "attrPreviousSiblingNull: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="attrsetvaluenomodificationallowederr.xml" fleur="attrsetvaluenomodificationallowederr" native="attrsetvaluenomodificationallowederr"><Fleur>(function(){
	var success;
	try {
		var doc;
		var genderList;
		var gender;
		var genList;
		var gen;
		var gList;
		var g;
		var attrList;
		var attrNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		genderList = doc.getElementsByTagName("gender");
		gender = genderList.item(2);
		if (gender == null) {
			return "attrSetValueNoModificationAllowedErr: #genderNotNull 'gender' is null";
		}
		genList = gender.childNodes;
		gen = genList.item(0);
		if (gen == null) {
			return "attrSetValueNoModificationAllowedErr: #genderFirstChildNotNull 'gen' is null";
		}
		gList = gen.childNodes;
		g = gList.item(0);
		if (g == null) {
			return "attrSetValueNoModificationAllowedErr: #genderFirstGrandchildNotNull 'g' is null";
		}
		attrList = g.attributes;
		if (attrList == null) {
			return "attrSetValueNoModificationAllowedErr: #attributesNotNull 'attrList' is null";
		}
		attrNode = attrList.getNamedItem("domestic");
		if (attrNode == null) {
			return "attrSetValueNoModificationAllowedErr: #attrNotNull 'attrNode' is null";
		}
		success = false;
		try {
			attrNode.value = "newvalue";
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "attrSetValueNoModificationAllowedErr: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		success = false;
		try {
			attrNode.nodeValue = "newvalue2";
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "attrSetValueNoModificationAllowedErr: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "attrSetValueNoModificationAllowedErr: OK";
	} catch (e) {
		return "attrSetValueNoModificationAllowedErr: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var genderList;
		var gender;
		var genList;
		var gen;
		var gList;
		var g;
		var attrList;
		var attrNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		genderList = doc.getElementsByTagName("gender");
		gender = genderList.item(2);
		if (gender == null) {
			return "attrSetValueNoModificationAllowedErr: #genderNotNull 'gender' is null";
		}
		genList = gender.childNodes;
		gen = genList.item(0);
		if (gen == null) {
			return "attrSetValueNoModificationAllowedErr: #genderFirstChildNotNull 'gen' is null";
		}
		gList = gen.childNodes;
		g = gList.item(0);
		if (g == null) {
			return "attrSetValueNoModificationAllowedErr: #genderFirstGrandchildNotNull 'g' is null";
		}
		attrList = g.attributes;
		if (attrList == null) {
			return "attrSetValueNoModificationAllowedErr: #attributesNotNull 'attrList' is null";
		}
		attrNode = attrList.getNamedItem("domestic");
		if (attrNode == null) {
			return "attrSetValueNoModificationAllowedErr: #attrNotNull 'attrNode' is null";
		}
		success = false;
		try {
			attrNode.value = "newvalue";
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "attrSetValueNoModificationAllowedErr: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		success = false;
		try {
			attrNode.nodeValue = "newvalue2";
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "attrSetValueNoModificationAllowedErr: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "attrSetValueNoModificationAllowedErr: OK";
	} catch (e) {
		return "attrSetValueNoModificationAllowedErr: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="attrsetvaluenomodificationallowederrEE.xml" fleur="attrsetvaluenomodificationallowederrEE" native="attrsetvaluenomodificationallowederrEE"><Fleur>(function(){
	var success;
	try {
		var doc;
		var entRef;
		var entElement;
		var attrList;
		var attrNode;
		var gender;
		var genderList;
		var appendedChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		genderList = doc.getElementsByTagName("gender");
		gender = genderList.item(2);
		if (gender == null) {
			return "attrSetValueNoModificationAllowedErrEE: #genderNotNull 'gender' is null";
		}
		entRef = doc.createEntityReference("ent4");
		if (entRef == null) {
			return "attrSetValueNoModificationAllowedErrEE: #entRefNotNull 'entRef' is null";
		}
		appendedChild = gender.appendChild(entRef);
		entElement = entRef.firstChild;
		if (entElement == null) {
			return "attrSetValueNoModificationAllowedErrEE: #entElementNotNull 'entElement' is null";
		}
		attrList = entElement.attributes;
		attrNode = attrList.getNamedItem("domestic");
		success = false;
		try {
			attrNode.value = "newvalue";
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "attrSetValueNoModificationAllowedErrEE: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		success = false;
		try {
			attrNode.nodeValue = "newvalue2";
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "attrSetValueNoModificationAllowedErrEE: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "attrSetValueNoModificationAllowedErrEE: OK";
	} catch (e) {
		return "attrSetValueNoModificationAllowedErrEE: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var entRef;
		var entElement;
		var attrList;
		var attrNode;
		var gender;
		var genderList;
		var appendedChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		genderList = doc.getElementsByTagName("gender");
		gender = genderList.item(2);
		if (gender == null) {
			return "attrSetValueNoModificationAllowedErrEE: #genderNotNull 'gender' is null";
		}
		entRef = doc.createEntityReference("ent4");
		if (entRef == null) {
			return "attrSetValueNoModificationAllowedErrEE: #entRefNotNull 'entRef' is null";
		}
		appendedChild = gender.appendChild(entRef);
		entElement = entRef.firstChild;
		if (entElement == null) {
			return "attrSetValueNoModificationAllowedErrEE: #entElementNotNull 'entElement' is null";
		}
		attrList = entElement.attributes;
		attrNode = attrList.getNamedItem("domestic");
		success = false;
		try {
			attrNode.value = "newvalue";
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "attrSetValueNoModificationAllowedErrEE: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		success = false;
		try {
			attrNode.nodeValue = "newvalue2";
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "attrSetValueNoModificationAllowedErrEE: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "attrSetValueNoModificationAllowedErrEE: OK";
	} catch (e) {
		return "attrSetValueNoModificationAllowedErrEE: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="attrspecifiedvalue.xml" fleur="attrspecifiedvalue" native="attrspecifiedvalue"><Fleur>(function(){
	var success;
	try {
		var doc;
		var addressList;
		var testNode;
		var attributes;
		var domesticAttr;
		var state;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		addressList = doc.getElementsByTagName("address");
		testNode = addressList.item(0);
		attributes = testNode.attributes;
		domesticAttr = attributes.getNamedItem("domestic");
		state = domesticAttr.specified;
		if (state !== true) {
			return "domesticSpecified: 'state' equals '" + state + "' not true";
		}
		return "attrSpecifiedValue: OK";
	} catch (e) {
		return "attrSpecifiedValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var addressList;
		var testNode;
		var attributes;
		var domesticAttr;
		var state;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		addressList = doc.getElementsByTagName("address");
		testNode = addressList.item(0);
		attributes = testNode.attributes;
		domesticAttr = attributes.getNamedItem("domestic");
		state = domesticAttr.specified;
		if (state !== true) {
			return "domesticSpecified: 'state' equals '" + state + "' not true";
		}
		return "attrSpecifiedValue: OK";
	} catch (e) {
		return "attrSpecifiedValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="attrspecifiedvaluechanged.xml" fleur="attrspecifiedvaluechanged" native="attrspecifiedvaluechanged"><Fleur>(function(){
	var success;
	try {
		var doc;
		var addressList;
		var testNode;
		var attributes;
		var streetAttr;
		var state;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		addressList = doc.getElementsByTagName("address");
		testNode = addressList.item(2);
		testNode.setAttribute("street", "Yes");
		attributes = testNode.attributes;
		streetAttr = attributes.getNamedItem("street");
		state = streetAttr.specified;
		if (state !== true) {
			return "streetSpecified: 'state' equals '" + state + "' not true";
		}
		return "attrSpecifiedValueChanged: OK";
	} catch (e) {
		return "attrSpecifiedValueChanged: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var addressList;
		var testNode;
		var attributes;
		var streetAttr;
		var state;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		addressList = doc.getElementsByTagName("address");
		testNode = addressList.item(2);
		testNode.setAttribute("street", "Yes");
		attributes = testNode.attributes;
		streetAttr = attributes.getNamedItem("street");
		state = streetAttr.specified;
		if (state !== true) {
			return "streetSpecified: 'state' equals '" + state + "' not true";
		}
		return "attrSpecifiedValueChanged: OK";
	} catch (e) {
		return "attrSpecifiedValueChanged: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="attrspecifiedvalueremove.xml" fleur="attrspecifiedvalueremove" native="attrspecifiedvalueremove"><Fleur>(function(){
	var success;
	try {
		var doc;
		var addressList;
		var testNode;
		var attributes;
		var streetAttr;
		var state;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		addressList = doc.getElementsByTagName("address");
		testNode = addressList.item(2);
		testNode.removeAttribute("street");
		attributes = testNode.attributes;
		streetAttr = attributes.getNamedItem("street");
		if (streetAttr == null) {
			return "attrSpecifiedValueRemove: #streetAttrNotNull 'streetAttr' is null";
		}
		state = streetAttr.specified;
		if (state !== false) {
			return "attrSpecifiedValueRemoveAssert: 'state' equals '" + state + "' not false";
		}
		return "attrSpecifiedValueRemove: OK";
	} catch (e) {
		return "attrSpecifiedValueRemove: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var addressList;
		var testNode;
		var attributes;
		var streetAttr;
		var state;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		addressList = doc.getElementsByTagName("address");
		testNode = addressList.item(2);
		testNode.removeAttribute("street");
		attributes = testNode.attributes;
		streetAttr = attributes.getNamedItem("street");
		if (streetAttr == null) {
			return "attrSpecifiedValueRemove: #streetAttrNotNull 'streetAttr' is null";
		}
		state = streetAttr.specified;
		if (state !== false) {
			return "attrSpecifiedValueRemoveAssert: 'state' equals '" + state + "' not false";
		}
		return "attrSpecifiedValueRemove: OK";
	} catch (e) {
		return "attrSpecifiedValueRemove: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="cdatasectiongetdata.xml" fleur="cdatasectiongetdata" native="cdatasectiongetdata"><Fleur>(function(){
	var success;
	try {
		var doc;
		var nameList;
		var child;
		var lastChild;
		var data;
		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		nameList = doc.getElementsByTagName("name");
		child = nameList.item(1);
		lastChild = child.lastChild;
		nodeType = lastChild.nodeType;
		if (4 !== nodeType) {
			return "cdataSectionGetValue: #isCDATA 'nodeType' equals '" + nodeType + "' not '" + 4 + "'";
		}
		data = lastChild.data;
		if ("This is an adjacent CDATASection with a reference to a tab &amp;tab;" !== data) {
			return "cdataSectionGetValue: #data 'data' equals '" + data + "' not '" + "This is an adjacent CDATASection with a reference to a tab &amp;tab;" + "'";
		}
		return "cdataSectionGetValue: OK";
	} catch (e) {
		return "cdataSectionGetValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var nameList;
		var child;
		var lastChild;
		var data;
		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		nameList = doc.getElementsByTagName("name");
		child = nameList.item(1);
		lastChild = child.lastChild;
		nodeType = lastChild.nodeType;
		if (4 !== nodeType) {
			return "cdataSectionGetValue: #isCDATA 'nodeType' equals '" + nodeType + "' not '" + 4 + "'";
		}
		data = lastChild.data;
		if ("This is an adjacent CDATASection with a reference to a tab &amp;tab;" !== data) {
			return "cdataSectionGetValue: #data 'data' equals '" + data + "' not '" + "This is an adjacent CDATASection with a reference to a tab &amp;tab;" + "'";
		}
		return "cdataSectionGetValue: OK";
	} catch (e) {
		return "cdataSectionGetValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="cdatasectionnormalize.xml" fleur="cdatasectionnormalize" native="cdatasectionnormalize"><Fleur>(function(){
	var success;
	try {
		var doc;
		var nameList;
		var lChild;
		var childNodes;
		var cdataN;
		var data;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		nameList = doc.getElementsByTagName("name");
		lChild = nameList.item(1);
		lChild.normalize();
		childNodes = lChild.childNodes;
		cdataN = childNodes.item(1);
		if (cdataN == null) {
			return "cdataSectionNormalize: #firstCDATASection 'cdataN' is null";
		}
		data = cdataN.data;
		if ("This is a CDATASection with EntityReference number 2 &amp;ent2;" !== data) {
			return "cdataSectionNormalize: #data1 'data' equals '" + data + "' not '" + "This is a CDATASection with EntityReference number 2 &amp;ent2;" + "'";
		}
		cdataN = childNodes.item(3);
		if (cdataN == null) {
			return "cdataSectionNormalize: #secondCDATASection 'cdataN' is null";
		}
		data = cdataN.data;
		if ("This is an adjacent CDATASection with a reference to a tab &amp;tab;" !== data) {
			return "cdataSectionNormalize: #data3 'data' equals '" + data + "' not '" + "This is an adjacent CDATASection with a reference to a tab &amp;tab;" + "'";
		}
		return "cdataSectionNormalize: OK";
	} catch (e) {
		return "cdataSectionNormalize: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var nameList;
		var lChild;
		var childNodes;
		var cdataN;
		var data;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		nameList = doc.getElementsByTagName("name");
		lChild = nameList.item(1);
		lChild.normalize();
		childNodes = lChild.childNodes;
		cdataN = childNodes.item(1);
		if (cdataN == null) {
			return "cdataSectionNormalize: #firstCDATASection 'cdataN' is null";
		}
		data = cdataN.data;
		if ("This is a CDATASection with EntityReference number 2 &amp;ent2;" !== data) {
			return "cdataSectionNormalize: #data1 'data' equals '" + data + "' not '" + "This is a CDATASection with EntityReference number 2 &amp;ent2;" + "'";
		}
		cdataN = childNodes.item(3);
		if (cdataN == null) {
			return "cdataSectionNormalize: #secondCDATASection 'cdataN' is null";
		}
		data = cdataN.data;
		if ("This is an adjacent CDATASection with a reference to a tab &amp;tab;" !== data) {
			return "cdataSectionNormalize: #data3 'data' equals '" + data + "' not '" + "This is an adjacent CDATASection with a reference to a tab &amp;tab;" + "'";
		}
		return "cdataSectionNormalize: OK";
	} catch (e) {
		return "cdataSectionNormalize: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="characterdataappenddata.xml" fleur="characterdataappenddata" native="characterdataappenddata"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var childValue;
		var childLength;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("name");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		child.appendData(", Esquire");
		childValue = child.data;
		childLength = childValue.length;
		if (24 !== childLength) {
			return "characterdataAppendData: #characterdataAppendDataAssert 'childLength' equals '" + childLength + "' not '" + 24 + "'";
		}
		return "characterdataAppendData: OK";
	} catch (e) {
		return "characterdataAppendData: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var childValue;
		var childLength;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("name");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		child.appendData(", Esquire");
		childValue = child.data;
		childLength = childValue.length;
		if (24 !== childLength) {
			return "characterdataAppendData: #characterdataAppendDataAssert 'childLength' equals '" + childLength + "' not '" + 24 + "'";
		}
		return "characterdataAppendData: OK";
	} catch (e) {
		return "characterdataAppendData: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="characterdataappenddatagetdata.xml" fleur="characterdataappenddatagetdata" native="characterdataappenddatagetdata"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var childData;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("name");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		child.appendData(", Esquire");
		childData = child.data;
		if ("Margaret Martin, Esquire" !== childData) {
			return "characterdataAppendDataGetData: #characterdataAppendDataGetDataAssert 'childData' equals '" + childData + "' not '" + "Margaret Martin, Esquire" + "'";
		}
		return "characterdataAppendDataGetData: OK";
	} catch (e) {
		return "characterdataAppendDataGetData: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var childData;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("name");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		child.appendData(", Esquire");
		childData = child.data;
		if ("Margaret Martin, Esquire" !== childData) {
			return "characterdataAppendDataGetData: #characterdataAppendDataGetDataAssert 'childData' equals '" + childData + "' not '" + "Margaret Martin, Esquire" + "'";
		}
		return "characterdataAppendDataGetData: OK";
	} catch (e) {
		return "characterdataAppendDataGetData: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="characterdataappenddatanomodificationallowederr.xml" fleur="characterdataappenddatanomodificationallowederr" native="characterdataappenddatanomodificationallowederr"><Fleur>(function(){
	var success;
	try {
		var doc;
		var genderList;
		var genderNode;
		var entElement;
		var entElementContent;
		var entReference;
		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		genderList = doc.getElementsByTagName("gender");
		genderNode = genderList.item(2);
		entReference = genderNode.firstChild;
		if (entReference == null) {
			return "characterdataAppendDataNoModificationAllowedErr: #entReferenceNotNull 'entReference' is null";
		}
		nodeType = entReference.nodeType;
		if ((1 == nodeType)) {
			entReference = doc.createEntityReference("ent4");
			if (entReference == null) {
				return "characterdataAppendDataNoModificationAllowedErr: #createdEntRefNotNull 'entReference' is null";
			}
		}
		entElement = entReference.firstChild;
		if (entElement == null) {
			return "characterdataAppendDataNoModificationAllowedErr: #entElementNotNull 'entElement' is null";
		}
		entElementContent = entElement.firstChild;
		if (entElementContent == null) {
			return "characterdataAppendDataNoModificationAllowedErr: #entElementContentNotNull 'entElementContent' is null";
		}
		success = false;
		try {
			entElementContent.appendData("newString");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "characterdataAppendDataNoModificationAllowedErr: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "characterdataAppendDataNoModificationAllowedErr: OK";
	} catch (e) {
		return "characterdataAppendDataNoModificationAllowedErr: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var genderList;
		var genderNode;
		var entElement;
		var entElementContent;
		var entReference;
		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		genderList = doc.getElementsByTagName("gender");
		genderNode = genderList.item(2);
		entReference = genderNode.firstChild;
		if (entReference == null) {
			return "characterdataAppendDataNoModificationAllowedErr: #entReferenceNotNull 'entReference' is null";
		}
		nodeType = entReference.nodeType;
		if ((1 == nodeType)) {
			entReference = doc.createEntityReference("ent4");
			if (entReference == null) {
				return "characterdataAppendDataNoModificationAllowedErr: #createdEntRefNotNull 'entReference' is null";
			}
		}
		entElement = entReference.firstChild;
		if (entElement == null) {
			return "characterdataAppendDataNoModificationAllowedErr: #entElementNotNull 'entElement' is null";
		}
		entElementContent = entElement.firstChild;
		if (entElementContent == null) {
			return "characterdataAppendDataNoModificationAllowedErr: #entElementContentNotNull 'entElementContent' is null";
		}
		success = false;
		try {
			entElementContent.appendData("newString");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "characterdataAppendDataNoModificationAllowedErr: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "characterdataAppendDataNoModificationAllowedErr: OK";
	} catch (e) {
		return "characterdataAppendDataNoModificationAllowedErr: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="characterdataappenddatanomodificationallowederrEE.xml" fleur="characterdataappenddatanomodificationallowederrEE" native="characterdataappenddatanomodificationallowederrEE"><Fleur>(function(){
	var success;
	try {
		var doc;
		var genderList;
		var genderNode;
		var entText;
		var entReference;
		var appendedChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		genderList = doc.getElementsByTagName("gender");
		genderNode = genderList.item(2);
		entReference = doc.createEntityReference("ent3");
		if (entReference == null) {
			return "characterdataAppendDataNoModificationAllowedErrEE: #createdEntRefNotNull 'entReference' is null";
		}
		appendedChild = genderNode.appendChild(entReference);
		entText = entReference.firstChild;
		if (entText == null) {
			return "characterdataAppendDataNoModificationAllowedErrEE: #entTextNotNull 'entText' is null";
		}
		success = false;
		try {
			entText.appendData("newString");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "characterdataAppendDataNoModificationAllowedErrEE: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "characterdataAppendDataNoModificationAllowedErrEE: OK";
	} catch (e) {
		return "characterdataAppendDataNoModificationAllowedErrEE: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var genderList;
		var genderNode;
		var entText;
		var entReference;
		var appendedChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		genderList = doc.getElementsByTagName("gender");
		genderNode = genderList.item(2);
		entReference = doc.createEntityReference("ent3");
		if (entReference == null) {
			return "characterdataAppendDataNoModificationAllowedErrEE: #createdEntRefNotNull 'entReference' is null";
		}
		appendedChild = genderNode.appendChild(entReference);
		entText = entReference.firstChild;
		if (entText == null) {
			return "characterdataAppendDataNoModificationAllowedErrEE: #entTextNotNull 'entText' is null";
		}
		success = false;
		try {
			entText.appendData("newString");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "characterdataAppendDataNoModificationAllowedErrEE: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "characterdataAppendDataNoModificationAllowedErrEE: OK";
	} catch (e) {
		return "characterdataAppendDataNoModificationAllowedErrEE: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="characterdatadeletedatabegining.xml" fleur="characterdatadeletedatabegining" native="characterdatadeletedatabegining"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var childData;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		child.deleteData(0, 16);
		childData = child.data;
		if ("Dallas, Texas 98551" !== childData) {
			return "characterdataDeleteDataBeginning: #characterdataDeleteDataBeginingAssert 'childData' equals '" + childData + "' not '" + "Dallas, Texas 98551" + "'";
		}
		return "characterdataDeleteDataBeginning: OK";
	} catch (e) {
		return "characterdataDeleteDataBeginning: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var childData;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		child.deleteData(0, 16);
		childData = child.data;
		if ("Dallas, Texas 98551" !== childData) {
			return "characterdataDeleteDataBeginning: #characterdataDeleteDataBeginingAssert 'childData' equals '" + childData + "' not '" + "Dallas, Texas 98551" + "'";
		}
		return "characterdataDeleteDataBeginning: OK";
	} catch (e) {
		return "characterdataDeleteDataBeginning: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="characterdatadeletedataend.xml" fleur="characterdatadeletedataend" native="characterdatadeletedataend"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var childData;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		child.deleteData(30, 5);
		childData = child.data;
		if ("1230 North Ave. Dallas, Texas " !== childData) {
			return "characterdataDeleteDataEnd: #characterdataDeleteDataEndAssert 'childData' equals '" + childData + "' not '" + "1230 North Ave. Dallas, Texas " + "'";
		}
		return "characterdataDeleteDataEnd: OK";
	} catch (e) {
		return "characterdataDeleteDataEnd: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var childData;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		child.deleteData(30, 5);
		childData = child.data;
		if ("1230 North Ave. Dallas, Texas " !== childData) {
			return "characterdataDeleteDataEnd: #characterdataDeleteDataEndAssert 'childData' equals '" + childData + "' not '" + "1230 North Ave. Dallas, Texas " + "'";
		}
		return "characterdataDeleteDataEnd: OK";
	} catch (e) {
		return "characterdataDeleteDataEnd: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="characterdatadeletedataexceedslength.xml" fleur="characterdatadeletedataexceedslength" native="characterdatadeletedataexceedslength"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var childData;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		child.deleteData(4, 50);
		childData = child.data;
		if ("1230" !== childData) {
			return "characterdataDeleteDataExceedsLength: #characterdataDeleteDataExceedsLengthAssert 'childData' equals '" + childData + "' not '" + "1230" + "'";
		}
		return "characterdataDeleteDataExceedsLength: OK";
	} catch (e) {
		return "characterdataDeleteDataExceedsLength: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var childData;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		child.deleteData(4, 50);
		childData = child.data;
		if ("1230" !== childData) {
			return "characterdataDeleteDataExceedsLength: #characterdataDeleteDataExceedsLengthAssert 'childData' equals '" + childData + "' not '" + "1230" + "'";
		}
		return "characterdataDeleteDataExceedsLength: OK";
	} catch (e) {
		return "characterdataDeleteDataExceedsLength: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="characterdatadeletedatagetlengthanddata.xml" fleur="characterdatadeletedatagetlengthanddata" native="characterdatadeletedatagetlengthanddata"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var childData;
		var childLength;
		var result = new Array();

		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		child.deleteData(30, 5);
		childData = child.data;
		if ("1230 North Ave. Dallas, Texas " !== childData) {
			return "characterdataDeleteDataGetLengthAndData: #data 'childData' equals '" + childData + "' not '" + "1230 North Ave. Dallas, Texas " + "'";
		}
		childLength = child.length;
		if (30 !== childLength) {
			return "characterdataDeleteDataGetLengthAndData: #length 'childLength' equals '" + childLength + "' not '" + 30 + "'";
		}
		return "characterdataDeleteDataGetLengthAndData: OK";
	} catch (e) {
		return "characterdataDeleteDataGetLengthAndData: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var childData;
		var childLength;
		var result = new Array();

		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		child.deleteData(30, 5);
		childData = child.data;
		if ("1230 North Ave. Dallas, Texas " !== childData) {
			return "characterdataDeleteDataGetLengthAndData: #data 'childData' equals '" + childData + "' not '" + "1230 North Ave. Dallas, Texas " + "'";
		}
		childLength = child.length;
		if (30 !== childLength) {
			return "characterdataDeleteDataGetLengthAndData: #length 'childLength' equals '" + childLength + "' not '" + 30 + "'";
		}
		return "characterdataDeleteDataGetLengthAndData: OK";
	} catch (e) {
		return "characterdataDeleteDataGetLengthAndData: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="characterdatadeletedatamiddle.xml" fleur="characterdatadeletedatamiddle" native="characterdatadeletedatamiddle"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var childData;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		child.deleteData(16, 8);
		childData = child.data;
		if ("1230 North Ave. Texas 98551" !== childData) {
			return "characterdataDeleteDataMiddle: #characterdataDeleteDataMiddleAssert 'childData' equals '" + childData + "' not '" + "1230 North Ave. Texas 98551" + "'";
		}
		return "characterdataDeleteDataMiddle: OK";
	} catch (e) {
		return "characterdataDeleteDataMiddle: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var childData;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		child.deleteData(16, 8);
		childData = child.data;
		if ("1230 North Ave. Texas 98551" !== childData) {
			return "characterdataDeleteDataMiddle: #characterdataDeleteDataMiddleAssert 'childData' equals '" + childData + "' not '" + "1230 North Ave. Texas 98551" + "'";
		}
		return "characterdataDeleteDataMiddle: OK";
	} catch (e) {
		return "characterdataDeleteDataMiddle: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="characterdatadeletedatanomodificationallowederr.xml" fleur="characterdatadeletedatanomodificationallowederr" native="characterdatadeletedatanomodificationallowederr"><Fleur>(function(){
	var success;
	try {
		var doc;
		var genderList;
		var genderNode;
		var entElement;
		var entElementContent;
		var nodeType;
		var entReference;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		genderList = doc.getElementsByTagName("gender");
		genderNode = genderList.item(2);
		entReference = genderNode.firstChild;
		if (entReference == null) {
			return "characterdataDeleteDataNoModificationAllowedErr: #entReferenceNotNull 'entReference' is null";
		}
		nodeType = entReference.nodeType;
		if ((3 == nodeType)) {
			entReference = doc.createEntityReference("ent4");
			if (entReference == null) {
				return "characterdataDeleteDataNoModificationAllowedErr: #createdEntRefNotNull 'entReference' is null";
			}
		}
		entElement = entReference.firstChild;
		if (entElement == null) {
			return "characterdataDeleteDataNoModificationAllowedErr: #entElementNotNull 'entElement' is null";
		}
		entElementContent = entElement.firstChild;
		if (entElementContent == null) {
			return "characterdataDeleteDataNoModificationAllowedErr: #entElementContentNotNull 'entElementContent' is null";
		}
		success = false;
		try {
			entElementContent.deleteData(1, 3);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "characterdataDeleteDataNoModificationAllowedErr: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "characterdataDeleteDataNoModificationAllowedErr: OK";
	} catch (e) {
		return "characterdataDeleteDataNoModificationAllowedErr: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var genderList;
		var genderNode;
		var entElement;
		var entElementContent;
		var nodeType;
		var entReference;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		genderList = doc.getElementsByTagName("gender");
		genderNode = genderList.item(2);
		entReference = genderNode.firstChild;
		if (entReference == null) {
			return "characterdataDeleteDataNoModificationAllowedErr: #entReferenceNotNull 'entReference' is null";
		}
		nodeType = entReference.nodeType;
		if ((3 == nodeType)) {
			entReference = doc.createEntityReference("ent4");
			if (entReference == null) {
				return "characterdataDeleteDataNoModificationAllowedErr: #createdEntRefNotNull 'entReference' is null";
			}
		}
		entElement = entReference.firstChild;
		if (entElement == null) {
			return "characterdataDeleteDataNoModificationAllowedErr: #entElementNotNull 'entElement' is null";
		}
		entElementContent = entElement.firstChild;
		if (entElementContent == null) {
			return "characterdataDeleteDataNoModificationAllowedErr: #entElementContentNotNull 'entElementContent' is null";
		}
		success = false;
		try {
			entElementContent.deleteData(1, 3);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "characterdataDeleteDataNoModificationAllowedErr: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "characterdataDeleteDataNoModificationAllowedErr: OK";
	} catch (e) {
		return "characterdataDeleteDataNoModificationAllowedErr: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="characterdatadeletedatanomodificationallowederrEE.xml" fleur="characterdatadeletedatanomodificationallowederrEE" native="characterdatadeletedatanomodificationallowederrEE"><Fleur>(function(){
	var success;
	try {
		var doc;
		var genderList;
		var genderNode;
		var entText;
		var entReference;
		var appendedChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		genderList = doc.getElementsByTagName("gender");
		genderNode = genderList.item(2);
		entReference = doc.createEntityReference("ent3");
		if (entReference == null) {
			return "characterdataDeleteDataNoModificationAllowedErrEE: #createdEntRefNotNull 'entReference' is null";
		}
		appendedChild = genderNode.appendChild(entReference);
		entText = entReference.firstChild;
		if (entText == null) {
			return "characterdataDeleteDataNoModificationAllowedErrEE: #entTextNotNull 'entText' is null";
		}
		success = false;
		try {
			entText.deleteData(1, 3);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "characterdataDeleteDataNoModificationAllowedErrEE: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "characterdataDeleteDataNoModificationAllowedErrEE: OK";
	} catch (e) {
		return "characterdataDeleteDataNoModificationAllowedErrEE: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var genderList;
		var genderNode;
		var entText;
		var entReference;
		var appendedChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		genderList = doc.getElementsByTagName("gender");
		genderNode = genderList.item(2);
		entReference = doc.createEntityReference("ent3");
		if (entReference == null) {
			return "characterdataDeleteDataNoModificationAllowedErrEE: #createdEntRefNotNull 'entReference' is null";
		}
		appendedChild = genderNode.appendChild(entReference);
		entText = entReference.firstChild;
		if (entText == null) {
			return "characterdataDeleteDataNoModificationAllowedErrEE: #entTextNotNull 'entText' is null";
		}
		success = false;
		try {
			entText.deleteData(1, 3);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "characterdataDeleteDataNoModificationAllowedErrEE: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "characterdataDeleteDataNoModificationAllowedErrEE: OK";
	} catch (e) {
		return "characterdataDeleteDataNoModificationAllowedErrEE: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="characterdatagetdata.xml" fleur="characterdatagetdata" native="characterdatagetdata"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var childData;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("name");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		childData = child.data;
		if ("Margaret Martin" !== childData) {
			return "characterdataGetData: #characterdataGetDataAssert 'childData' equals '" + childData + "' not '" + "Margaret Martin" + "'";
		}
		return "characterdataGetData: OK";
	} catch (e) {
		return "characterdataGetData: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var childData;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("name");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		childData = child.data;
		if ("Margaret Martin" !== childData) {
			return "characterdataGetData: #characterdataGetDataAssert 'childData' equals '" + childData + "' not '" + "Margaret Martin" + "'";
		}
		return "characterdataGetData: OK";
	} catch (e) {
		return "characterdataGetData: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="characterdatagetlength.xml" fleur="characterdatagetlength" native="characterdatagetlength"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var childValue;
		var childLength;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("name");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		childValue = child.data;
		childLength = childValue.length;
		if (15 !== childLength) {
			return "characterdataGetLength: #characterdataGetLengthAssert 'childLength' equals '" + childLength + "' not '" + 15 + "'";
		}
		return "characterdataGetLength: OK";
	} catch (e) {
		return "characterdataGetLength: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var childValue;
		var childLength;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("name");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		childValue = child.data;
		childLength = childValue.length;
		if (15 !== childLength) {
			return "characterdataGetLength: #characterdataGetLengthAssert 'childLength' equals '" + childLength + "' not '" + 15 + "'";
		}
		return "characterdataGetLength: OK";
	} catch (e) {
		return "characterdataGetLength: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="characterdataindexsizeerrdeletedatacountnegative.xml" fleur="characterdataindexsizeerrdeletedatacountnegative" native="characterdataindexsizeerrdeletedatacountnegative"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		success = false;
		try {
			child.deleteData(10, -3);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 1;
			}
		}
		if (!success) {
			return "characterdataIndexSizeErrDeleteDataCountNegative: Exception INDEX_SIZE_ERR expected";
		}
		return "characterdataIndexSizeErrDeleteDataCountNegative: OK";
	} catch (e) {
		return "characterdataIndexSizeErrDeleteDataCountNegative: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		success = false;
		try {
			child.deleteData(10, -3);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 1;
			}
		}
		if (!success) {
			return "characterdataIndexSizeErrDeleteDataCountNegative: Exception INDEX_SIZE_ERR expected";
		}
		return "characterdataIndexSizeErrDeleteDataCountNegative: OK";
	} catch (e) {
		return "characterdataIndexSizeErrDeleteDataCountNegative: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="characterdataindexsizeerrdeletedataoffsetgreater.xml" fleur="characterdataindexsizeerrdeletedataoffsetgreater" native="characterdataindexsizeerrdeletedataoffsetgreater"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		success = false;
		try {
			child.deleteData(40, 3);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 1;
			}
		}
		if (!success) {
			return "characterdataIndexSizeErrDeleteDataOffsetGreater: Exception INDEX_SIZE_ERR expected";
		}
		return "characterdataIndexSizeErrDeleteDataOffsetGreater: OK";
	} catch (e) {
		return "characterdataIndexSizeErrDeleteDataOffsetGreater: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		success = false;
		try {
			child.deleteData(40, 3);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 1;
			}
		}
		if (!success) {
			return "characterdataIndexSizeErrDeleteDataOffsetGreater: Exception INDEX_SIZE_ERR expected";
		}
		return "characterdataIndexSizeErrDeleteDataOffsetGreater: OK";
	} catch (e) {
		return "characterdataIndexSizeErrDeleteDataOffsetGreater: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="characterdataindexsizeerrdeletedataoffsetnegative.xml" fleur="characterdataindexsizeerrdeletedataoffsetnegative" native="characterdataindexsizeerrdeletedataoffsetnegative"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		success = false;
		try {
			child.deleteData(-5, 3);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 1;
			}
		}
		if (!success) {
			return "characterdataIndexSizeErrDeleteDataOffsetNegative: Exception INDEX_SIZE_ERR expected";
		}
		return "characterdataIndexSizeErrDeleteDataOffsetNegative: OK";
	} catch (e) {
		return "characterdataIndexSizeErrDeleteDataOffsetNegative: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		success = false;
		try {
			child.deleteData(-5, 3);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 1;
			}
		}
		if (!success) {
			return "characterdataIndexSizeErrDeleteDataOffsetNegative: Exception INDEX_SIZE_ERR expected";
		}
		return "characterdataIndexSizeErrDeleteDataOffsetNegative: OK";
	} catch (e) {
		return "characterdataIndexSizeErrDeleteDataOffsetNegative: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="characterdataindexsizeerrinsertdataoffsetgreater.xml" fleur="characterdataindexsizeerrinsertdataoffsetgreater" native="characterdataindexsizeerrinsertdataoffsetgreater"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		success = false;
		try {
			child.insertData(40, "ABC");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 1;
			}
		}
		if (!success) {
			return "characterdataIndexSizeErrInsertDataOffsetGreater: Exception INDEX_SIZE_ERR expected";
		}
		return "characterdataIndexSizeErrInsertDataOffsetGreater: OK";
	} catch (e) {
		return "characterdataIndexSizeErrInsertDataOffsetGreater: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		success = false;
		try {
			child.insertData(40, "ABC");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 1;
			}
		}
		if (!success) {
			return "characterdataIndexSizeErrInsertDataOffsetGreater: Exception INDEX_SIZE_ERR expected";
		}
		return "characterdataIndexSizeErrInsertDataOffsetGreater: OK";
	} catch (e) {
		return "characterdataIndexSizeErrInsertDataOffsetGreater: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="characterdataindexsizeerrinsertdataoffsetnegative.xml" fleur="characterdataindexsizeerrinsertdataoffsetnegative" native="characterdataindexsizeerrinsertdataoffsetnegative"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		success = false;
		try {
			child.insertData(-5, "ABC");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 1;
			}
		}
		if (!success) {
			return "characterdataIndexSizeErrInsertDataOffsetNegative: Exception INDEX_SIZE_ERR expected";
		}
		return "characterdataIndexSizeErrInsertDataOffsetNegative: OK";
	} catch (e) {
		return "characterdataIndexSizeErrInsertDataOffsetNegative: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		success = false;
		try {
			child.insertData(-5, "ABC");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 1;
			}
		}
		if (!success) {
			return "characterdataIndexSizeErrInsertDataOffsetNegative: Exception INDEX_SIZE_ERR expected";
		}
		return "characterdataIndexSizeErrInsertDataOffsetNegative: OK";
	} catch (e) {
		return "characterdataIndexSizeErrInsertDataOffsetNegative: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="characterdataindexsizeerrreplacedatacountnegative.xml" fleur="characterdataindexsizeerrreplacedatacountnegative" native="characterdataindexsizeerrreplacedatacountnegative"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		success = false;
		try {
			child.replaceData(10, -3, "ABC");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 1;
			}
		}
		if (!success) {
			return "characterdataIndexSizeErrReplaceDataCountNegative: Exception INDEX_SIZE_ERR expected";
		}
		return "characterdataIndexSizeErrReplaceDataCountNegative: OK";
	} catch (e) {
		return "characterdataIndexSizeErrReplaceDataCountNegative: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		success = false;
		try {
			child.replaceData(10, -3, "ABC");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 1;
			}
		}
		if (!success) {
			return "characterdataIndexSizeErrReplaceDataCountNegative: Exception INDEX_SIZE_ERR expected";
		}
		return "characterdataIndexSizeErrReplaceDataCountNegative: OK";
	} catch (e) {
		return "characterdataIndexSizeErrReplaceDataCountNegative: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="characterdataindexsizeerrreplacedataoffsetgreater.xml" fleur="characterdataindexsizeerrreplacedataoffsetgreater" native="characterdataindexsizeerrreplacedataoffsetgreater"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		success = false;
		try {
			child.replaceData(40, 3, "ABC");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 1;
			}
		}
		if (!success) {
			return "characterdataIndexSizeErrReplaceDataOffsetGreater: Exception INDEX_SIZE_ERR expected";
		}
		return "characterdataIndexSizeErrReplaceDataOffsetGreater: OK";
	} catch (e) {
		return "characterdataIndexSizeErrReplaceDataOffsetGreater: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		success = false;
		try {
			child.replaceData(40, 3, "ABC");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 1;
			}
		}
		if (!success) {
			return "characterdataIndexSizeErrReplaceDataOffsetGreater: Exception INDEX_SIZE_ERR expected";
		}
		return "characterdataIndexSizeErrReplaceDataOffsetGreater: OK";
	} catch (e) {
		return "characterdataIndexSizeErrReplaceDataOffsetGreater: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="characterdataindexsizeerrreplacedataoffsetnegative.xml" fleur="characterdataindexsizeerrreplacedataoffsetnegative" native="characterdataindexsizeerrreplacedataoffsetnegative"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		success = false;
		try {
			child.replaceData(-5, 3, "ABC");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 1;
			}
		}
		if (!success) {
			return "characterdataIndexSizeErrReplaceDataOffsetNegative: Exception INDEX_SIZE_ERR expected";
		}
		return "characterdataIndexSizeErrReplaceDataOffsetNegative: OK";
	} catch (e) {
		return "characterdataIndexSizeErrReplaceDataOffsetNegative: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		success = false;
		try {
			child.replaceData(-5, 3, "ABC");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 1;
			}
		}
		if (!success) {
			return "characterdataIndexSizeErrReplaceDataOffsetNegative: Exception INDEX_SIZE_ERR expected";
		}
		return "characterdataIndexSizeErrReplaceDataOffsetNegative: OK";
	} catch (e) {
		return "characterdataIndexSizeErrReplaceDataOffsetNegative: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="characterdataindexsizeerrsubstringcountnegative.xml" fleur="characterdataindexsizeerrsubstringcountnegative" native="characterdataindexsizeerrsubstringcountnegative"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var badSubstring;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		success = false;
		try {
			badSubstring = child.substringData(10, -3);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 1;
			}
		}
		if (!success) {
			return "characterdataIndexSizeErrSubstringCountNegative: Exception INDEX_SIZE_ERR expected";
		}
		return "characterdataIndexSizeErrSubstringCountNegative: OK";
	} catch (e) {
		return "characterdataIndexSizeErrSubstringCountNegative: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var badSubstring;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		success = false;
		try {
			badSubstring = child.substringData(10, -3);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 1;
			}
		}
		if (!success) {
			return "characterdataIndexSizeErrSubstringCountNegative: Exception INDEX_SIZE_ERR expected";
		}
		return "characterdataIndexSizeErrSubstringCountNegative: OK";
	} catch (e) {
		return "characterdataIndexSizeErrSubstringCountNegative: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="characterdataindexsizeerrsubstringnegativeoffset.xml" fleur="characterdataindexsizeerrsubstringnegativeoffset" native="characterdataindexsizeerrsubstringnegativeoffset"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var badString;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		success = false;
		try {
			badString = child.substringData(-5, 3);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 1;
			}
		}
		if (!success) {
			return "characterdataIndexSizeErrSubstringNegativeOffset: Exception INDEX_SIZE_ERR expected";
		}
		return "characterdataIndexSizeErrSubstringNegativeOffset: OK";
	} catch (e) {
		return "characterdataIndexSizeErrSubstringNegativeOffset: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var badString;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		success = false;
		try {
			badString = child.substringData(-5, 3);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 1;
			}
		}
		if (!success) {
			return "characterdataIndexSizeErrSubstringNegativeOffset: Exception INDEX_SIZE_ERR expected";
		}
		return "characterdataIndexSizeErrSubstringNegativeOffset: OK";
	} catch (e) {
		return "characterdataIndexSizeErrSubstringNegativeOffset: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="characterdataindexsizeerrsubstringoffsetgreater.xml" fleur="characterdataindexsizeerrsubstringoffsetgreater" native="characterdataindexsizeerrsubstringoffsetgreater"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var badString;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		success = false;
		try {
			badString = child.substringData(40, 3);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 1;
			}
		}
		if (!success) {
			return "characterdataIndexSizeErrSubstringOffsetGreater: Exception INDEX_SIZE_ERR expected";
		}
		return "characterdataIndexSizeErrSubstringOffsetGreater: OK";
	} catch (e) {
		return "characterdataIndexSizeErrSubstringOffsetGreater: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var badString;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		success = false;
		try {
			badString = child.substringData(40, 3);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 1;
			}
		}
		if (!success) {
			return "characterdataIndexSizeErrSubstringOffsetGreater: Exception INDEX_SIZE_ERR expected";
		}
		return "characterdataIndexSizeErrSubstringOffsetGreater: OK";
	} catch (e) {
		return "characterdataIndexSizeErrSubstringOffsetGreater: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="characterdatainsertdatabeginning.xml" fleur="characterdatainsertdatabeginning" native="characterdatainsertdatabeginning"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var childData;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("name");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		child.insertData(0, "Mss. ");
		childData = child.data;
		if ("Mss. Margaret Martin" !== childData) {
			return "characterdataInsertDataBeginning: #characterdataInsertDataBeginningAssert 'childData' equals '" + childData + "' not '" + "Mss. Margaret Martin" + "'";
		}
		return "characterdataInsertDataBeginning: OK";
	} catch (e) {
		return "characterdataInsertDataBeginning: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var childData;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("name");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		child.insertData(0, "Mss. ");
		childData = child.data;
		if ("Mss. Margaret Martin" !== childData) {
			return "characterdataInsertDataBeginning: #characterdataInsertDataBeginningAssert 'childData' equals '" + childData + "' not '" + "Mss. Margaret Martin" + "'";
		}
		return "characterdataInsertDataBeginning: OK";
	} catch (e) {
		return "characterdataInsertDataBeginning: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="characterdatainsertdataend.xml" fleur="characterdatainsertdataend" native="characterdatainsertdataend"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var childData;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("name");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		child.insertData(15, ", Esquire");
		childData = child.data;
		if ("Margaret Martin, Esquire" !== childData) {
			return "characterdataInsertDataEnd: #characterdataInsertDataEndAssert 'childData' equals '" + childData + "' not '" + "Margaret Martin, Esquire" + "'";
		}
		return "characterdataInsertDataEnd: OK";
	} catch (e) {
		return "characterdataInsertDataEnd: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var childData;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("name");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		child.insertData(15, ", Esquire");
		childData = child.data;
		if ("Margaret Martin, Esquire" !== childData) {
			return "characterdataInsertDataEnd: #characterdataInsertDataEndAssert 'childData' equals '" + childData + "' not '" + "Margaret Martin, Esquire" + "'";
		}
		return "characterdataInsertDataEnd: OK";
	} catch (e) {
		return "characterdataInsertDataEnd: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="characterdatainsertdatamiddle.xml" fleur="characterdatainsertdatamiddle" native="characterdatainsertdatamiddle"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var childData;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("name");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		child.insertData(9, "Ann ");
		childData = child.data;
		if ("Margaret Ann Martin" !== childData) {
			return "characterdataInsertDataMiddle: #characterdataInsertDataMiddleAssert 'childData' equals '" + childData + "' not '" + "Margaret Ann Martin" + "'";
		}
		return "characterdataInsertDataMiddle: OK";
	} catch (e) {
		return "characterdataInsertDataMiddle: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var childData;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("name");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		child.insertData(9, "Ann ");
		childData = child.data;
		if ("Margaret Ann Martin" !== childData) {
			return "characterdataInsertDataMiddle: #characterdataInsertDataMiddleAssert 'childData' equals '" + childData + "' not '" + "Margaret Ann Martin" + "'";
		}
		return "characterdataInsertDataMiddle: OK";
	} catch (e) {
		return "characterdataInsertDataMiddle: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="characterdatainsertdatanomodificationallowederr.xml" fleur="characterdatainsertdatanomodificationallowederr" native="characterdatainsertdatanomodificationallowederr"><Fleur>(function(){
	var success;
	try {
		var doc;
		var genderList;
		var genderNode;
		var entElement;
		var nodeType;
		var entElementContent;
		var entReference;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		genderList = doc.getElementsByTagName("gender");
		genderNode = genderList.item(2);
		entReference = genderNode.firstChild;
		if (entReference == null) {
			return "characterdataInsertDataNoModificationAllowedErr: #entReferenceNotNull 'entReference' is null";
		}
		nodeType = entReference.nodeType;
		if ((1 == nodeType)) {
			entReference = doc.createEntityReference("ent4");
			if (entReference == null) {
				return "characterdataInsertDataNoModificationAllowedErr: #createdEntRefNotNull 'entReference' is null";
			}
		}
		entElement = entReference.firstChild;
		if (entElement == null) {
			return "characterdataInsertDataNoModificationAllowedErr: #entElementNotNull 'entElement' is null";
		}
		entElementContent = entElement.firstChild;
		if (entElementContent == null) {
			return "characterdataInsertDataNoModificationAllowedErr: #entElementContentNotNull 'entElementContent' is null";
		}
		success = false;
		try {
			entElementContent.insertData(1, "newArg");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "characterdataInsertDataNoModificationAllowedErr: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "characterdataInsertDataNoModificationAllowedErr: OK";
	} catch (e) {
		return "characterdataInsertDataNoModificationAllowedErr: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var genderList;
		var genderNode;
		var entElement;
		var nodeType;
		var entElementContent;
		var entReference;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		genderList = doc.getElementsByTagName("gender");
		genderNode = genderList.item(2);
		entReference = genderNode.firstChild;
		if (entReference == null) {
			return "characterdataInsertDataNoModificationAllowedErr: #entReferenceNotNull 'entReference' is null";
		}
		nodeType = entReference.nodeType;
		if ((1 == nodeType)) {
			entReference = doc.createEntityReference("ent4");
			if (entReference == null) {
				return "characterdataInsertDataNoModificationAllowedErr: #createdEntRefNotNull 'entReference' is null";
			}
		}
		entElement = entReference.firstChild;
		if (entElement == null) {
			return "characterdataInsertDataNoModificationAllowedErr: #entElementNotNull 'entElement' is null";
		}
		entElementContent = entElement.firstChild;
		if (entElementContent == null) {
			return "characterdataInsertDataNoModificationAllowedErr: #entElementContentNotNull 'entElementContent' is null";
		}
		success = false;
		try {
			entElementContent.insertData(1, "newArg");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "characterdataInsertDataNoModificationAllowedErr: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "characterdataInsertDataNoModificationAllowedErr: OK";
	} catch (e) {
		return "characterdataInsertDataNoModificationAllowedErr: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="characterdatainsertdatanomodificationallowederrEE.xml" fleur="characterdatainsertdatanomodificationallowederrEE" native="characterdatainsertdatanomodificationallowederrEE"><Fleur>(function(){
	var success;
	try {
		var doc;
		var genderList;
		var genderNode;
		var entText;
		var entReference;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		genderList = doc.getElementsByTagName("gender");
		genderNode = genderList.item(2);
		entReference = doc.createEntityReference("ent3");
		if (entReference == null) {
			return "characterdataInsertDataNoModificationAllowedErrEE: #createdEntRefNotNull 'entReference' is null";
		}
		entText = entReference.firstChild;
		if (entText == null) {
			return "characterdataInsertDataNoModificationAllowedErrEE: #entTextNotNull 'entText' is null";
		}
		success = false;
		try {
			entText.insertData(1, "newArg");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "characterdataInsertDataNoModificationAllowedErrEE: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "characterdataInsertDataNoModificationAllowedErrEE: OK";
	} catch (e) {
		return "characterdataInsertDataNoModificationAllowedErrEE: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var genderList;
		var genderNode;
		var entText;
		var entReference;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		genderList = doc.getElementsByTagName("gender");
		genderNode = genderList.item(2);
		entReference = doc.createEntityReference("ent3");
		if (entReference == null) {
			return "characterdataInsertDataNoModificationAllowedErrEE: #createdEntRefNotNull 'entReference' is null";
		}
		entText = entReference.firstChild;
		if (entText == null) {
			return "characterdataInsertDataNoModificationAllowedErrEE: #entTextNotNull 'entText' is null";
		}
		success = false;
		try {
			entText.insertData(1, "newArg");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "characterdataInsertDataNoModificationAllowedErrEE: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "characterdataInsertDataNoModificationAllowedErrEE: OK";
	} catch (e) {
		return "characterdataInsertDataNoModificationAllowedErrEE: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="characterdatareplacedatabegining.xml" fleur="characterdatareplacedatabegining" native="characterdatareplacedatabegining"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var childData;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		child.replaceData(0, 4, "2500");
		childData = child.data;
		if ("2500 North Ave. Dallas, Texas 98551" !== childData) {
			return "characterdataReplaceDataBeginning: #characterdataReplaceDataBeginingAssert 'childData' equals '" + childData + "' not '" + "2500 North Ave. Dallas, Texas 98551" + "'";
		}
		return "characterdataReplaceDataBeginning: OK";
	} catch (e) {
		return "characterdataReplaceDataBeginning: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var childData;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		child.replaceData(0, 4, "2500");
		childData = child.data;
		if ("2500 North Ave. Dallas, Texas 98551" !== childData) {
			return "characterdataReplaceDataBeginning: #characterdataReplaceDataBeginingAssert 'childData' equals '" + childData + "' not '" + "2500 North Ave. Dallas, Texas 98551" + "'";
		}
		return "characterdataReplaceDataBeginning: OK";
	} catch (e) {
		return "characterdataReplaceDataBeginning: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="characterdatareplacedataend.xml" fleur="characterdatareplacedataend" native="characterdatareplacedataend"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var childData;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		child.replaceData(30, 5, "98665");
		childData = child.data;
		if ("1230 North Ave. Dallas, Texas 98665" !== childData) {
			return "characterdataReplaceDataEnd: #characterdataReplaceDataEndAssert 'childData' equals '" + childData + "' not '" + "1230 North Ave. Dallas, Texas 98665" + "'";
		}
		return "characterdataReplaceDataEnd: OK";
	} catch (e) {
		return "characterdataReplaceDataEnd: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var childData;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		child.replaceData(30, 5, "98665");
		childData = child.data;
		if ("1230 North Ave. Dallas, Texas 98665" !== childData) {
			return "characterdataReplaceDataEnd: #characterdataReplaceDataEndAssert 'childData' equals '" + childData + "' not '" + "1230 North Ave. Dallas, Texas 98665" + "'";
		}
		return "characterdataReplaceDataEnd: OK";
	} catch (e) {
		return "characterdataReplaceDataEnd: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="characterdatareplacedataexceedslengthofarg.xml" fleur="characterdatareplacedataexceedslengthofarg" native="characterdatareplacedataexceedslengthofarg"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var childData;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		child.replaceData(0, 4, "260030");
		childData = child.data;
		if ("260030 North Ave. Dallas, Texas 98551" !== childData) {
			return "characterdataReplaceDataExceedsLengthOfArg: #characterdataReplaceDataExceedsLengthOfArgAssert 'childData' equals '" + childData + "' not '" + "260030 North Ave. Dallas, Texas 98551" + "'";
		}
		return "characterdataReplaceDataExceedsLengthOfArg: OK";
	} catch (e) {
		return "characterdataReplaceDataExceedsLengthOfArg: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var childData;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		child.replaceData(0, 4, "260030");
		childData = child.data;
		if ("260030 North Ave. Dallas, Texas 98551" !== childData) {
			return "characterdataReplaceDataExceedsLengthOfArg: #characterdataReplaceDataExceedsLengthOfArgAssert 'childData' equals '" + childData + "' not '" + "260030 North Ave. Dallas, Texas 98551" + "'";
		}
		return "characterdataReplaceDataExceedsLengthOfArg: OK";
	} catch (e) {
		return "characterdataReplaceDataExceedsLengthOfArg: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="characterdatareplacedataexceedslengthofdata.xml" fleur="characterdatareplacedataexceedslengthofdata" native="characterdatareplacedataexceedslengthofdata"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var childData;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		child.replaceData(0, 50, "2600");
		childData = child.data;
		if ("2600" !== childData) {
			return "characterdataReplaceDataExceedsLengthOfData: #characterdataReplaceDataExceedsLengthOfDataAssert 'childData' equals '" + childData + "' not '" + "2600" + "'";
		}
		return "characterdataReplaceDataExceedsLengthOfData: OK";
	} catch (e) {
		return "characterdataReplaceDataExceedsLengthOfData: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var childData;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		child.replaceData(0, 50, "2600");
		childData = child.data;
		if ("2600" !== childData) {
			return "characterdataReplaceDataExceedsLengthOfData: #characterdataReplaceDataExceedsLengthOfDataAssert 'childData' equals '" + childData + "' not '" + "2600" + "'";
		}
		return "characterdataReplaceDataExceedsLengthOfData: OK";
	} catch (e) {
		return "characterdataReplaceDataExceedsLengthOfData: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="characterdatareplacedatamiddle.xml" fleur="characterdatareplacedatamiddle" native="characterdatareplacedatamiddle"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var childData;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		child.replaceData(5, 5, "South");
		childData = child.data;
		if ("1230 South Ave. Dallas, Texas 98551" !== childData) {
			return "characterdataReplaceDataMiddle: #characterdataReplaceDataMiddleAssert 'childData' equals '" + childData + "' not '" + "1230 South Ave. Dallas, Texas 98551" + "'";
		}
		return "characterdataReplaceDataMiddle: OK";
	} catch (e) {
		return "characterdataReplaceDataMiddle: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var childData;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		child.replaceData(5, 5, "South");
		childData = child.data;
		if ("1230 South Ave. Dallas, Texas 98551" !== childData) {
			return "characterdataReplaceDataMiddle: #characterdataReplaceDataMiddleAssert 'childData' equals '" + childData + "' not '" + "1230 South Ave. Dallas, Texas 98551" + "'";
		}
		return "characterdataReplaceDataMiddle: OK";
	} catch (e) {
		return "characterdataReplaceDataMiddle: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="characterdatareplacedatanomodificationallowederr.xml" fleur="characterdatareplacedatanomodificationallowederr" native="characterdatareplacedatanomodificationallowederr"><Fleur>(function(){
	var success;
	try {
		var doc;
		var genderList;
		var genderNode;
		var entElement;
		var entElementContent;
		var entReference;
		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		genderList = doc.getElementsByTagName("gender");
		genderNode = genderList.item(2);
		entReference = genderNode.firstChild;
		if (entReference == null) {
			return "characterdataReplaceDataNoModificationAllowedErr: #entReferenceNotNull 'entReference' is null";
		}
		nodeType = entReference.nodeType;
		if ((1 == nodeType)) {
			entReference = doc.createEntityReference("ent4");
			if (entReference == null) {
				return "characterdataReplaceDataNoModificationAllowedErr: #createdEntRefNotNull 'entReference' is null";
			}
		}
		entElement = entReference.firstChild;
		if (entElement == null) {
			return "characterdataReplaceDataNoModificationAllowedErr: #entElementNotNull 'entElement' is null";
		}
		entElementContent = entElement.firstChild;
		if (entElementContent == null) {
			return "characterdataReplaceDataNoModificationAllowedErr: #entElementContentNotNull 'entElementContent' is null";
		}
		success = false;
		try {
			entElementContent.replaceData(1, 3, "newArg");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "characterdataReplaceDataNoModificationAllowedErr: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "characterdataReplaceDataNoModificationAllowedErr: OK";
	} catch (e) {
		return "characterdataReplaceDataNoModificationAllowedErr: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var genderList;
		var genderNode;
		var entElement;
		var entElementContent;
		var entReference;
		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		genderList = doc.getElementsByTagName("gender");
		genderNode = genderList.item(2);
		entReference = genderNode.firstChild;
		if (entReference == null) {
			return "characterdataReplaceDataNoModificationAllowedErr: #entReferenceNotNull 'entReference' is null";
		}
		nodeType = entReference.nodeType;
		if ((1 == nodeType)) {
			entReference = doc.createEntityReference("ent4");
			if (entReference == null) {
				return "characterdataReplaceDataNoModificationAllowedErr: #createdEntRefNotNull 'entReference' is null";
			}
		}
		entElement = entReference.firstChild;
		if (entElement == null) {
			return "characterdataReplaceDataNoModificationAllowedErr: #entElementNotNull 'entElement' is null";
		}
		entElementContent = entElement.firstChild;
		if (entElementContent == null) {
			return "characterdataReplaceDataNoModificationAllowedErr: #entElementContentNotNull 'entElementContent' is null";
		}
		success = false;
		try {
			entElementContent.replaceData(1, 3, "newArg");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "characterdataReplaceDataNoModificationAllowedErr: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "characterdataReplaceDataNoModificationAllowedErr: OK";
	} catch (e) {
		return "characterdataReplaceDataNoModificationAllowedErr: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="characterdatareplacedatanomodificationallowederrEE.xml" fleur="characterdatareplacedatanomodificationallowederrEE" native="characterdatareplacedatanomodificationallowederrEE"><Fleur>(function(){
	var success;
	try {
		var doc;
		var genderList;
		var genderNode;
		var entText;
		var entReference;
		var appendedNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		genderList = doc.getElementsByTagName("gender");
		genderNode = genderList.item(2);
		entReference = doc.createEntityReference("ent3");
		if (entReference == null) {
			return "characterdataReplaceDataNoModificationAllowedErrEE: #createdEntRefNotNull 'entReference' is null";
		}
		appendedNode = genderNode.appendChild(entReference);
		entText = entReference.firstChild;
		if (entText == null) {
			return "characterdataReplaceDataNoModificationAllowedErrEE: #entTextNotNull 'entText' is null";
		}
		success = false;
		try {
			entText.replaceData(1, 3, "newArg");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "characterdataReplaceDataNoModificationAllowedErrEE: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "characterdataReplaceDataNoModificationAllowedErrEE: OK";
	} catch (e) {
		return "characterdataReplaceDataNoModificationAllowedErrEE: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var genderList;
		var genderNode;
		var entText;
		var entReference;
		var appendedNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		genderList = doc.getElementsByTagName("gender");
		genderNode = genderList.item(2);
		entReference = doc.createEntityReference("ent3");
		if (entReference == null) {
			return "characterdataReplaceDataNoModificationAllowedErrEE: #createdEntRefNotNull 'entReference' is null";
		}
		appendedNode = genderNode.appendChild(entReference);
		entText = entReference.firstChild;
		if (entText == null) {
			return "characterdataReplaceDataNoModificationAllowedErrEE: #entTextNotNull 'entText' is null";
		}
		success = false;
		try {
			entText.replaceData(1, 3, "newArg");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "characterdataReplaceDataNoModificationAllowedErrEE: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "characterdataReplaceDataNoModificationAllowedErrEE: OK";
	} catch (e) {
		return "characterdataReplaceDataNoModificationAllowedErrEE: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="characterdatasetdatanomodificationallowederr.xml" fleur="characterdatasetdatanomodificationallowederr" native="characterdatasetdatanomodificationallowederr"><Fleur>(function(){
	var success;
	try {
		var doc;
		var genderList;
		var genderNode;
		var entElement;
		var entElementContent;
		var entReference;
		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		genderList = doc.getElementsByTagName("gender");
		genderNode = genderList.item(2);
		entReference = genderNode.firstChild;
		if (entReference == null) {
			return "characterdataSetDataNoModificationAllowedErr: #entReferenceNotNull 'entReference' is null";
		}
		nodeType = entReference.nodeType;
		if ((1 == nodeType)) {
			entReference = doc.createEntityReference("ent4");
			if (entReference == null) {
				return "characterdataSetDataNoModificationAllowedErr: #createdEntRefNotNull 'entReference' is null";
			}
		}
		entElement = entReference.firstChild;
		if (entElement == null) {
			return "characterdataSetDataNoModificationAllowedErr: #entElementNotNull 'entElement' is null";
		}
		entElementContent = entElement.firstChild;
		if (entElementContent == null) {
			return "characterdataSetDataNoModificationAllowedErr: #entElementContentNotNull 'entElementContent' is null";
		}
		success = false;
		try {
			entElementContent.data = "newData";
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "characterdataSetDataNoModificationAllowedErr: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "characterdataSetDataNoModificationAllowedErr: OK";
	} catch (e) {
		return "characterdataSetDataNoModificationAllowedErr: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var genderList;
		var genderNode;
		var entElement;
		var entElementContent;
		var entReference;
		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		genderList = doc.getElementsByTagName("gender");
		genderNode = genderList.item(2);
		entReference = genderNode.firstChild;
		if (entReference == null) {
			return "characterdataSetDataNoModificationAllowedErr: #entReferenceNotNull 'entReference' is null";
		}
		nodeType = entReference.nodeType;
		if ((1 == nodeType)) {
			entReference = doc.createEntityReference("ent4");
			if (entReference == null) {
				return "characterdataSetDataNoModificationAllowedErr: #createdEntRefNotNull 'entReference' is null";
			}
		}
		entElement = entReference.firstChild;
		if (entElement == null) {
			return "characterdataSetDataNoModificationAllowedErr: #entElementNotNull 'entElement' is null";
		}
		entElementContent = entElement.firstChild;
		if (entElementContent == null) {
			return "characterdataSetDataNoModificationAllowedErr: #entElementContentNotNull 'entElementContent' is null";
		}
		success = false;
		try {
			entElementContent.data = "newData";
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "characterdataSetDataNoModificationAllowedErr: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "characterdataSetDataNoModificationAllowedErr: OK";
	} catch (e) {
		return "characterdataSetDataNoModificationAllowedErr: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="characterdatasetdatanomodificationallowederrEE.xml" fleur="characterdatasetdatanomodificationallowederrEE" native="characterdatasetdatanomodificationallowederrEE"><Fleur>(function(){
	var success;
	try {
		var doc;
		var genderList;
		var genderNode;
		var entText;
		var entReference;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		genderList = doc.getElementsByTagName("gender");
		genderNode = genderList.item(4);
		entReference = doc.createEntityReference("ent3");
		if (entReference == null) {
			return "characterdataSetDataNoModificationAllowedErrEE: #createdEntRefNotNull 'entReference' is null";
		}
		entText = entReference.firstChild;
		if (entText == null) {
			return "characterdataSetDataNoModificationAllowedErrEE: #entTextNotNull 'entText' is null";
		}
		success = false;
		try {
			entText.data = "newData";
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "characterdataSetDataNoModificationAllowedErrEE: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "characterdataSetDataNoModificationAllowedErrEE: OK";
	} catch (e) {
		return "characterdataSetDataNoModificationAllowedErrEE: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var genderList;
		var genderNode;
		var entText;
		var entReference;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		genderList = doc.getElementsByTagName("gender");
		genderNode = genderList.item(4);
		entReference = doc.createEntityReference("ent3");
		if (entReference == null) {
			return "characterdataSetDataNoModificationAllowedErrEE: #createdEntRefNotNull 'entReference' is null";
		}
		entText = entReference.firstChild;
		if (entText == null) {
			return "characterdataSetDataNoModificationAllowedErrEE: #entTextNotNull 'entText' is null";
		}
		success = false;
		try {
			entText.data = "newData";
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "characterdataSetDataNoModificationAllowedErrEE: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "characterdataSetDataNoModificationAllowedErrEE: OK";
	} catch (e) {
		return "characterdataSetDataNoModificationAllowedErrEE: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="characterdatasetnodevalue.xml" fleur="characterdatasetnodevalue" native="characterdatasetnodevalue"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var childData;
		var childValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("name");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		child.nodeValue = "Marilyn Martin";
		childData = child.data;
		if ("Marilyn Martin" !== childData) {
			return "characterdataSetNodeValue: #data 'childData' equals '" + childData + "' not '" + "Marilyn Martin" + "'";
		}
		childValue = child.nodeValue;
		if ("Marilyn Martin" !== childValue) {
			return "characterdataSetNodeValue: #value 'childValue' equals '" + childValue + "' not '" + "Marilyn Martin" + "'";
		}
		return "characterdataSetNodeValue: OK";
	} catch (e) {
		return "characterdataSetNodeValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var childData;
		var childValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("name");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		child.nodeValue = "Marilyn Martin";
		childData = child.data;
		if ("Marilyn Martin" !== childData) {
			return "characterdataSetNodeValue: #data 'childData' equals '" + childData + "' not '" + "Marilyn Martin" + "'";
		}
		childValue = child.nodeValue;
		if ("Marilyn Martin" !== childValue) {
			return "characterdataSetNodeValue: #value 'childValue' equals '" + childValue + "' not '" + "Marilyn Martin" + "'";
		}
		return "characterdataSetNodeValue: OK";
	} catch (e) {
		return "characterdataSetNodeValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="characterdatasubstringexceedsvalue.xml" fleur="characterdatasubstringexceedsvalue" native="characterdatasubstringexceedsvalue"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var substring;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("name");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		substring = child.substringData(9, 10);
		if ("Martin" !== substring) {
			return "characterdataSubStringExceedsValue: #characterdataSubStringExceedsValueAssert 'substring' equals '" + substring + "' not '" + "Martin" + "'";
		}
		return "characterdataSubStringExceedsValue: OK";
	} catch (e) {
		return "characterdataSubStringExceedsValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var substring;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("name");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		substring = child.substringData(9, 10);
		if ("Martin" !== substring) {
			return "characterdataSubStringExceedsValue: #characterdataSubStringExceedsValueAssert 'substring' equals '" + substring + "' not '" + "Martin" + "'";
		}
		return "characterdataSubStringExceedsValue: OK";
	} catch (e) {
		return "characterdataSubStringExceedsValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="characterdatasubstringvalue.xml" fleur="characterdatasubstringvalue" native="characterdatasubstringvalue"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var substring;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("name");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		substring = child.substringData(0, 8);
		if ("Margaret" !== substring) {
			return "characterdataSubStringValue: #characterdataSubStringValueAssert 'substring' equals '" + substring + "' not '" + "Margaret" + "'";
		}
		return "characterdataSubStringValue: OK";
	} catch (e) {
		return "characterdataSubStringValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var substring;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("name");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		substring = child.substringData(0, 8);
		if ("Margaret" !== substring) {
			return "characterdataSubStringValue: #characterdataSubStringValueAssert 'substring' equals '" + substring + "' not '" + "Margaret" + "'";
		}
		return "characterdataSubStringValue: OK";
	} catch (e) {
		return "characterdataSubStringValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="commentgetcomment.xml" fleur="commentgetcomment" native="commentgetcomment"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var child;
		var childName;
		var childValue;
		var commentCount = 0;
		var childType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.childNodes;
		for (var index_id0x0ca63790 = 0; index_id0x0ca63790 &lt; elementList.length; index_id0x0ca63790++) {
			child = elementList.item(index_id0x0ca63790);
			childType = child.nodeType;
			if ((8 == childType)) {
				childName = child.nodeName;
				if ("#comment" !== childName) {
					return "commentGetComment: #nodeName 'childName' equals '" + childName + "' not '" + "#comment" + "'";
				}
				childValue = child.nodeValue;
				if (" This is comment number 1." !== childValue) {
					return "commentGetComment: #nodeValue 'childValue' equals '" + childValue + "' not '" + " This is comment number 1." + "'";
				}
				commentCount = commentCount + 1;
			}
		}
		if (1 !== commentCount) {
			return "commentGetComment: #commentCount 'commentCount' equals '" + commentCount + "' not '" + 1 + "'";
		}
		return "commentGetComment: OK";
	} catch (e) {
		return "commentGetComment: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var child;
		var childName;
		var childValue;
		var commentCount = 0;
		var childType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.childNodes;
		for (var index_id0x0ca63790 = 0; index_id0x0ca63790 &lt; elementList.length; index_id0x0ca63790++) {
			child = elementList.item(index_id0x0ca63790);
			childType = child.nodeType;
			if ((8 == childType)) {
				childName = child.nodeName;
				if ("#comment" !== childName) {
					return "commentGetComment: #nodeName 'childName' equals '" + childName + "' not '" + "#comment" + "'";
				}
				childValue = child.nodeValue;
				if (" This is comment number 1." !== childValue) {
					return "commentGetComment: #nodeValue 'childValue' equals '" + childValue + "' not '" + " This is comment number 1." + "'";
				}
				commentCount = commentCount + 1;
			}
		}
		if (1 !== commentCount) {
			return "commentGetComment: #commentCount 'commentCount' equals '" + commentCount + "' not '" + 1 + "'";
		}
		return "commentGetComment: OK";
	} catch (e) {
		return "commentGetComment: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="documentcreateattribute.xml" fleur="documentcreateattribute" native="documentcreateattribute"><Fleur>(function(){
	var success;
	try {
		var doc;
		var newAttrNode;
		var attrValue;
		var attrName;
		var attrType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		newAttrNode = doc.createAttribute("district");
		attrValue = newAttrNode.nodeValue;
		if ("" !== attrValue) {
			return "documentCreateAttribute: #value 'attrValue' equals '" + attrValue + "' not '" + "" + "'";
		}
		attrName = newAttrNode.nodeName;
		if ("district" !== attrName) {
			return "documentCreateAttribute: #name 'attrName' equals '" + attrName + "' not '" + "district" + "'";
		}
		attrType = newAttrNode.nodeType;
		if (2 !== attrType) {
			return "documentCreateAttribute: #type 'attrType' equals '" + attrType + "' not '" + 2 + "'";
		}
		return "documentCreateAttribute: OK";
	} catch (e) {
		return "documentCreateAttribute: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var newAttrNode;
		var attrValue;
		var attrName;
		var attrType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		newAttrNode = doc.createAttribute("district");
		attrValue = newAttrNode.nodeValue;
		if ("" !== attrValue) {
			return "documentCreateAttribute: #value 'attrValue' equals '" + attrValue + "' not '" + "" + "'";
		}
		attrName = newAttrNode.nodeName;
		if ("district" !== attrName) {
			return "documentCreateAttribute: #name 'attrName' equals '" + attrName + "' not '" + "district" + "'";
		}
		attrType = newAttrNode.nodeType;
		if (2 !== attrType) {
			return "documentCreateAttribute: #type 'attrType' equals '" + attrType + "' not '" + 2 + "'";
		}
		return "documentCreateAttribute: OK";
	} catch (e) {
		return "documentCreateAttribute: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="documentcreatecdatasection.xml" fleur="documentcreatecdatasection" native="documentcreatecdatasection"><Fleur>(function(){
	var success;
	try {
		var doc;
		var newCDATASectionNode;
		var newCDATASectionValue;
		var newCDATASectionName;
		var newCDATASectionType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		newCDATASectionNode = doc.createCDATASection("This is a new CDATASection node");
		newCDATASectionValue = newCDATASectionNode.nodeValue;
		if ("This is a new CDATASection node" !== newCDATASectionValue) {
			return "documentCreateCDATASection: #nodeValue 'newCDATASectionValue' equals '" + newCDATASectionValue + "' not '" + "This is a new CDATASection node" + "'";
		}
		newCDATASectionName = newCDATASectionNode.nodeName;
		if ("#cdata-section" !== newCDATASectionName) {
			return "documentCreateCDATASection: #nodeName 'newCDATASectionName' equals '" + newCDATASectionName + "' not '" + "#cdata-section" + "'";
		}
		newCDATASectionType = newCDATASectionNode.nodeType;
		if (4 !== newCDATASectionType) {
			return "documentCreateCDATASection: #nodeType 'newCDATASectionType' equals '" + newCDATASectionType + "' not '" + 4 + "'";
		}
		return "documentCreateCDATASection: OK";
	} catch (e) {
		return "documentCreateCDATASection: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var newCDATASectionNode;
		var newCDATASectionValue;
		var newCDATASectionName;
		var newCDATASectionType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		newCDATASectionNode = doc.createCDATASection("This is a new CDATASection node");
		newCDATASectionValue = newCDATASectionNode.nodeValue;
		if ("This is a new CDATASection node" !== newCDATASectionValue) {
			return "documentCreateCDATASection: #nodeValue 'newCDATASectionValue' equals '" + newCDATASectionValue + "' not '" + "This is a new CDATASection node" + "'";
		}
		newCDATASectionName = newCDATASectionNode.nodeName;
		if ("#cdata-section" !== newCDATASectionName) {
			return "documentCreateCDATASection: #nodeName 'newCDATASectionName' equals '" + newCDATASectionName + "' not '" + "#cdata-section" + "'";
		}
		newCDATASectionType = newCDATASectionNode.nodeType;
		if (4 !== newCDATASectionType) {
			return "documentCreateCDATASection: #nodeType 'newCDATASectionType' equals '" + newCDATASectionType + "' not '" + 4 + "'";
		}
		return "documentCreateCDATASection: OK";
	} catch (e) {
		return "documentCreateCDATASection: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="documentcreatecomment.xml" fleur="documentcreatecomment" native="documentcreatecomment"><Fleur>(function(){
	var success;
	try {
		var doc;
		var newCommentNode;
		var newCommentValue;
		var newCommentName;
		var newCommentType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		newCommentNode = doc.createComment("This is a new Comment node");
		newCommentValue = newCommentNode.nodeValue;
		if ("This is a new Comment node" !== newCommentValue) {
			return "documentCreateComment: #value 'newCommentValue' equals '" + newCommentValue + "' not '" + "This is a new Comment node" + "'";
		}
		newCommentName = newCommentNode.nodeName;
		if ("#comment" !== newCommentName) {
			return "documentCreateComment: #name 'newCommentName' equals '" + newCommentName + "' not '" + "#comment" + "'";
		}
		newCommentType = newCommentNode.nodeType;
		if (8 !== newCommentType) {
			return "documentCreateComment: #type 'newCommentType' equals '" + newCommentType + "' not '" + 8 + "'";
		}
		return "documentCreateComment: OK";
	} catch (e) {
		return "documentCreateComment: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var newCommentNode;
		var newCommentValue;
		var newCommentName;
		var newCommentType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		newCommentNode = doc.createComment("This is a new Comment node");
		newCommentValue = newCommentNode.nodeValue;
		if ("This is a new Comment node" !== newCommentValue) {
			return "documentCreateComment: #value 'newCommentValue' equals '" + newCommentValue + "' not '" + "This is a new Comment node" + "'";
		}
		newCommentName = newCommentNode.nodeName;
		if ("#comment" !== newCommentName) {
			return "documentCreateComment: #name 'newCommentName' equals '" + newCommentName + "' not '" + "#comment" + "'";
		}
		newCommentType = newCommentNode.nodeType;
		if (8 !== newCommentType) {
			return "documentCreateComment: #type 'newCommentType' equals '" + newCommentType + "' not '" + 8 + "'";
		}
		return "documentCreateComment: OK";
	} catch (e) {
		return "documentCreateComment: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="documentcreatedocumentfragment.xml" fleur="documentcreatedocumentfragment" native="documentcreatedocumentfragment"><Fleur>(function(){
	var success;
	try {
		var doc;
		var newDocFragment;
		var children;
		var length;
		var newDocFragmentName;
		var newDocFragmentType;
		var newDocFragmentValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		newDocFragment = doc.createDocumentFragment();
		children = newDocFragment.childNodes;
		length = children.length;
		if (0 !== length) {
			return "documentCreateDocumentFragment: #length 'length' equals '" + length + "' not '" + 0 + "'";
		}
		newDocFragmentName = newDocFragment.nodeName;
		if ("#document-fragment" !== newDocFragmentName) {
			return "documentCreateDocumentFragment: #name 'newDocFragmentName' equals '" + newDocFragmentName + "' not '" + "#document-fragment" + "'";
		}
		newDocFragmentType = newDocFragment.nodeType;
		if (11 !== newDocFragmentType) {
			return "documentCreateDocumentFragment: #type 'newDocFragmentType' equals '" + newDocFragmentType + "' not '" + 11 + "'";
		}
		newDocFragmentValue = newDocFragment.nodeValue;
		if (newDocFragmentValue != null) {
			return "documentCreateDocumentFragment: #value 'newDocFragmentValue' equals '" + newDocFragmentValue + "' not null";
		}
		return "documentCreateDocumentFragment: OK";
	} catch (e) {
		return "documentCreateDocumentFragment: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var newDocFragment;
		var children;
		var length;
		var newDocFragmentName;
		var newDocFragmentType;
		var newDocFragmentValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		newDocFragment = doc.createDocumentFragment();
		children = newDocFragment.childNodes;
		length = children.length;
		if (0 !== length) {
			return "documentCreateDocumentFragment: #length 'length' equals '" + length + "' not '" + 0 + "'";
		}
		newDocFragmentName = newDocFragment.nodeName;
		if ("#document-fragment" !== newDocFragmentName) {
			return "documentCreateDocumentFragment: #name 'newDocFragmentName' equals '" + newDocFragmentName + "' not '" + "#document-fragment" + "'";
		}
		newDocFragmentType = newDocFragment.nodeType;
		if (11 !== newDocFragmentType) {
			return "documentCreateDocumentFragment: #type 'newDocFragmentType' equals '" + newDocFragmentType + "' not '" + 11 + "'";
		}
		newDocFragmentValue = newDocFragment.nodeValue;
		if (newDocFragmentValue != null) {
			return "documentCreateDocumentFragment: #value 'newDocFragmentValue' equals '" + newDocFragmentValue + "' not null";
		}
		return "documentCreateDocumentFragment: OK";
	} catch (e) {
		return "documentCreateDocumentFragment: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="documentcreateelement.xml" fleur="documentcreateelement" native="documentcreateelement"><Fleur>(function(){
	var success;
	try {
		var doc;
		var newElement;
		var newElementName;
		var newElementType;
		var newElementValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		newElement = doc.createElement("address");
		newElementName = newElement.nodeName;
		if ("address" !== newElementName) {
			return "documentCreateElement: #name 'newElementName' equals '" + newElementName + "' not '" + "address" + "'";
		}
		newElementType = newElement.nodeType;
		if (1 !== newElementType) {
			return "documentCreateElement: #type 'newElementType' equals '" + newElementType + "' not '" + 1 + "'";
		}
		newElementValue = newElement.nodeValue;
		if (newElementValue != null) {
			return "documentCreateElement: #valueInitiallyNull 'newElementValue' equals '" + newElementValue + "' not null";
		}
		return "documentCreateElement: OK";
	} catch (e) {
		return "documentCreateElement: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var newElement;
		var newElementName;
		var newElementType;
		var newElementValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		newElement = doc.createElement("address");
		newElementName = newElement.nodeName;
		if ("address" !== newElementName) {
			return "documentCreateElement: #name 'newElementName' equals '" + newElementName + "' not '" + "address" + "'";
		}
		newElementType = newElement.nodeType;
		if (1 !== newElementType) {
			return "documentCreateElement: #type 'newElementType' equals '" + newElementType + "' not '" + 1 + "'";
		}
		newElementValue = newElement.nodeValue;
		if (newElementValue != null) {
			return "documentCreateElement: #valueInitiallyNull 'newElementValue' equals '" + newElementValue + "' not null";
		}
		return "documentCreateElement: OK";
	} catch (e) {
		return "documentCreateElement: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="documentcreateelementcasesensitive.xml" fleur="documentcreateelementcasesensitive" native="documentcreateelementcasesensitive"><Fleur>(function(){
	var success;
	try {
		var doc;
		var newElement1;
		var newElement2;
		var attribute1;
		var attribute2;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		newElement1 = doc.createElement("ADDRESS");
		newElement2 = doc.createElement("address");
		newElement1.setAttribute("district", "Fort Worth");
		newElement2.setAttribute("county", "Dallas");
		attribute1 = newElement1.getAttribute("district");
		attribute2 = newElement2.getAttribute("county");
		if ("Fort Worth" !== attribute1) {
			return "documentCreateElementCaseSensitive: #attrib1 'attribute1' equals '" + attribute1 + "' not '" + "Fort Worth" + "'";
		}
		if ("Dallas" !== attribute2) {
			return "documentCreateElementCaseSensitive: #attrib2 'attribute2' equals '" + attribute2 + "' not '" + "Dallas" + "'";
		}
		return "documentCreateElementCaseSensitive: OK";
	} catch (e) {
		return "documentCreateElementCaseSensitive: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var newElement1;
		var newElement2;
		var attribute1;
		var attribute2;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		newElement1 = doc.createElement("ADDRESS");
		newElement2 = doc.createElement("address");
		newElement1.setAttribute("district", "Fort Worth");
		newElement2.setAttribute("county", "Dallas");
		attribute1 = newElement1.getAttribute("district");
		attribute2 = newElement2.getAttribute("county");
		if ("Fort Worth" !== attribute1) {
			return "documentCreateElementCaseSensitive: #attrib1 'attribute1' equals '" + attribute1 + "' not '" + "Fort Worth" + "'";
		}
		if ("Dallas" !== attribute2) {
			return "documentCreateElementCaseSensitive: #attrib2 'attribute2' equals '" + attribute2 + "' not '" + "Dallas" + "'";
		}
		return "documentCreateElementCaseSensitive: OK";
	} catch (e) {
		return "documentCreateElementCaseSensitive: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="documentcreateelementdefaultattr.xml" fleur="documentcreateelementdefaultattr" native="documentcreateelementdefaultattr"><Fleur>(function(){
	var success;
	try {
		var doc;
		var newElement;
		var defaultAttr;
		var child;
		var name;
		var value;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		newElement = doc.createElement("address");
		defaultAttr = newElement.attributes;
		child = defaultAttr.item(0);
		if (child == null) {
			return "documentCreateElementDefaultAttr: #defaultAttrNotNull 'child' is null";
		}
		name = child.nodeName;
		if ("street" !== name) {
			return "documentCreateElementDefaultAttr: #attrName 'name' equals '" + name + "' not '" + "street" + "'";
		}
		value = child.nodeValue;
		if ("Yes" !== value) {
			return "documentCreateElementDefaultAttr: #attrValue 'value' equals '" + value + "' not '" + "Yes" + "'";
		}
		if (defaultAttr.length !== 1) {
			return "documentCreateElementDefaultAttr: #attrCount 'defaultAttr.length' equals " + defaultAttr.length + " not 1";
		}
		return "documentCreateElementDefaultAttr: OK";
	} catch (e) {
		return "documentCreateElementDefaultAttr: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var newElement;
		var defaultAttr;
		var child;
		var name;
		var value;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		newElement = doc.createElement("address");
		defaultAttr = newElement.attributes;
		child = defaultAttr.item(0);
		if (child == null) {
			return "documentCreateElementDefaultAttr: #defaultAttrNotNull 'child' is null";
		}
		name = child.nodeName;
		if ("street" !== name) {
			return "documentCreateElementDefaultAttr: #attrName 'name' equals '" + name + "' not '" + "street" + "'";
		}
		value = child.nodeValue;
		if ("Yes" !== value) {
			return "documentCreateElementDefaultAttr: #attrValue 'value' equals '" + value + "' not '" + "Yes" + "'";
		}
		if (defaultAttr.length !== 1) {
			return "documentCreateElementDefaultAttr: #attrCount 'defaultAttr.length' equals " + defaultAttr.length + " not 1";
		}
		return "documentCreateElementDefaultAttr: OK";
	} catch (e) {
		return "documentCreateElementDefaultAttr: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="documentcreateentityreference.xml" fleur="documentcreateentityreference" native="documentcreateentityreference"><Fleur>(function(){
	var success;
	try {
		var doc;
		var newEntRefNode;
		var entRefValue;
		var entRefName;
		var entRefType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		newEntRefNode = doc.createEntityReference("ent1");
		if (newEntRefNode == null) {
			return "documentCreateEntityReference: #createdEntRefNotNull 'newEntRefNode' is null";
		}
		entRefValue = newEntRefNode.nodeValue;
		if (entRefValue != null) {
			return "documentCreateEntityReference: #value 'entRefValue' equals '" + entRefValue + "' not null";
		}
		entRefName = newEntRefNode.nodeName;
		if ("ent1" !== entRefName) {
			return "documentCreateEntityReference: #name 'entRefName' equals '" + entRefName + "' not '" + "ent1" + "'";
		}
		entRefType = newEntRefNode.nodeType;
		if (5 !== entRefType) {
			return "documentCreateEntityReference: #type 'entRefType' equals '" + entRefType + "' not '" + 5 + "'";
		}
		return "documentCreateEntityReference: OK";
	} catch (e) {
		return "documentCreateEntityReference: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var newEntRefNode;
		var entRefValue;
		var entRefName;
		var entRefType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		newEntRefNode = doc.createEntityReference("ent1");
		if (newEntRefNode == null) {
			return "documentCreateEntityReference: #createdEntRefNotNull 'newEntRefNode' is null";
		}
		entRefValue = newEntRefNode.nodeValue;
		if (entRefValue != null) {
			return "documentCreateEntityReference: #value 'entRefValue' equals '" + entRefValue + "' not null";
		}
		entRefName = newEntRefNode.nodeName;
		if ("ent1" !== entRefName) {
			return "documentCreateEntityReference: #name 'entRefName' equals '" + entRefName + "' not '" + "ent1" + "'";
		}
		entRefType = newEntRefNode.nodeType;
		if (5 !== entRefType) {
			return "documentCreateEntityReference: #type 'entRefType' equals '" + entRefType + "' not '" + 5 + "'";
		}
		return "documentCreateEntityReference: OK";
	} catch (e) {
		return "documentCreateEntityReference: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="documentcreateentityreferenceknown.xml" fleur="documentcreateentityreferenceknown" native="documentcreateentityreferenceknown"><Fleur>(function(){
	var success;
	try {
		var doc;
		var newEntRefNode;
		var newEntRefList;
		var child;
		var name;
		var value;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		newEntRefNode = doc.createEntityReference("ent3");
		if (newEntRefNode == null) {
			return "documentCreateEntityReferenceKnown: #createdEntRefNotNull 'newEntRefNode' is null";
		}
		newEntRefList = newEntRefNode.childNodes;
		if (newEntRefList.length !== 1) {
			return "documentCreateEntityReferenceKnown: #size 'newEntRefList.length' equals " + newEntRefList.length + " not 1";
		}
		child = newEntRefNode.firstChild;
		name = child.nodeName;
		if ("#text" !== name) {
			return "documentCreateEntityReferenceKnown: #name 'name' equals '" + name + "' not '" + "#text" + "'";
		}
		value = child.nodeValue;
		if ("Texas" !== value) {
			return "documentCreateEntityReferenceKnown: #value 'value' equals '" + value + "' not '" + "Texas" + "'";
		}
		return "documentCreateEntityReferenceKnown: OK";
	} catch (e) {
		return "documentCreateEntityReferenceKnown: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var newEntRefNode;
		var newEntRefList;
		var child;
		var name;
		var value;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		newEntRefNode = doc.createEntityReference("ent3");
		if (newEntRefNode == null) {
			return "documentCreateEntityReferenceKnown: #createdEntRefNotNull 'newEntRefNode' is null";
		}
		newEntRefList = newEntRefNode.childNodes;
		if (newEntRefList.length !== 1) {
			return "documentCreateEntityReferenceKnown: #size 'newEntRefList.length' equals " + newEntRefList.length + " not 1";
		}
		child = newEntRefNode.firstChild;
		name = child.nodeName;
		if ("#text" !== name) {
			return "documentCreateEntityReferenceKnown: #name 'name' equals '" + name + "' not '" + "#text" + "'";
		}
		value = child.nodeValue;
		if ("Texas" !== value) {
			return "documentCreateEntityReferenceKnown: #value 'value' equals '" + value + "' not '" + "Texas" + "'";
		}
		return "documentCreateEntityReferenceKnown: OK";
	} catch (e) {
		return "documentCreateEntityReferenceKnown: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="documentcreateprocessinginstruction.xml" fleur="documentcreateprocessinginstruction" native="documentcreateprocessinginstruction"><Fleur>(function(){
	var success;
	try {
		var doc;
		var newPINode;
		var piValue;
		var piName;
		var piType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		newPINode = doc.createProcessingInstruction("TESTPI", "This is a new PI node");
		if (newPINode == null) {
			return "documentCreateProcessingInstruction: #createdPINotNull 'newPINode' is null";
		}
		piName = newPINode.nodeName;
		if ("TESTPI" !== piName) {
			return "documentCreateProcessingInstruction: #name 'piName' equals '" + piName + "' not '" + "TESTPI" + "'";
		}
		piValue = newPINode.nodeValue;
		if ("This is a new PI node" !== piValue) {
			return "documentCreateProcessingInstruction: #value 'piValue' equals '" + piValue + "' not '" + "This is a new PI node" + "'";
		}
		piType = newPINode.nodeType;
		if (7 !== piType) {
			return "documentCreateProcessingInstruction: #type 'piType' equals '" + piType + "' not '" + 7 + "'";
		}
		return "documentCreateProcessingInstruction: OK";
	} catch (e) {
		return "documentCreateProcessingInstruction: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var newPINode;
		var piValue;
		var piName;
		var piType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		newPINode = doc.createProcessingInstruction("TESTPI", "This is a new PI node");
		if (newPINode == null) {
			return "documentCreateProcessingInstruction: #createdPINotNull 'newPINode' is null";
		}
		piName = newPINode.nodeName;
		if ("TESTPI" !== piName) {
			return "documentCreateProcessingInstruction: #name 'piName' equals '" + piName + "' not '" + "TESTPI" + "'";
		}
		piValue = newPINode.nodeValue;
		if ("This is a new PI node" !== piValue) {
			return "documentCreateProcessingInstruction: #value 'piValue' equals '" + piValue + "' not '" + "This is a new PI node" + "'";
		}
		piType = newPINode.nodeType;
		if (7 !== piType) {
			return "documentCreateProcessingInstruction: #type 'piType' equals '" + piType + "' not '" + 7 + "'";
		}
		return "documentCreateProcessingInstruction: OK";
	} catch (e) {
		return "documentCreateProcessingInstruction: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="documentcreatetextnode.xml" fleur="documentcreatetextnode" native="documentcreatetextnode"><Fleur>(function(){
	var success;
	try {
		var doc;
		var newTextNode;
		var newTextName;
		var newTextValue;
		var newTextType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		newTextNode = doc.createTextNode("This is a new Text node");
		newTextValue = newTextNode.nodeValue;
		if ("This is a new Text node" !== newTextValue) {
			return "documentCreateTextNode: #value 'newTextValue' equals '" + newTextValue + "' not '" + "This is a new Text node" + "'";
		}
		newTextName = newTextNode.nodeName;
		if ("#text" !== newTextName) {
			return "documentCreateTextNode: #name 'newTextName' equals '" + newTextName + "' not '" + "#text" + "'";
		}
		newTextType = newTextNode.nodeType;
		if (3 !== newTextType) {
			return "documentCreateTextNode: #type 'newTextType' equals '" + newTextType + "' not '" + 3 + "'";
		}
		return "documentCreateTextNode: OK";
	} catch (e) {
		return "documentCreateTextNode: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var newTextNode;
		var newTextName;
		var newTextValue;
		var newTextType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		newTextNode = doc.createTextNode("This is a new Text node");
		newTextValue = newTextNode.nodeValue;
		if ("This is a new Text node" !== newTextValue) {
			return "documentCreateTextNode: #value 'newTextValue' equals '" + newTextValue + "' not '" + "This is a new Text node" + "'";
		}
		newTextName = newTextNode.nodeName;
		if ("#text" !== newTextName) {
			return "documentCreateTextNode: #name 'newTextName' equals '" + newTextName + "' not '" + "#text" + "'";
		}
		newTextType = newTextNode.nodeType;
		if (3 !== newTextType) {
			return "documentCreateTextNode: #type 'newTextType' equals '" + newTextType + "' not '" + 3 + "'";
		}
		return "documentCreateTextNode: OK";
	} catch (e) {
		return "documentCreateTextNode: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="documentgetdoctype.xml" fleur="documentgetdoctype" native="documentgetdoctype"><Fleur>(function(){
	var success;
	try {
		var doc;
		var docType;
		var docTypeName;
		var nodeValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		if (docType == null) {
			return "documentGetDocType: #docTypeNotNull 'docType' is null";
		}
		docTypeName = docType.name;
		if (("text/xml" === "image/svg+xml")) {
			if ("svg" !== docTypeName) {
				return "documentGetDocType: #doctypeNameSVG 'docTypeName' equals '" + docTypeName + "' not '" + "svg" + "'";
			}
		} else {
			if ("staff" !== docTypeName) {
				return "documentGetDocType: #doctypeName 'docTypeName' equals '" + docTypeName + "' not '" + "staff" + "'";
			}
		}
		nodeValue = docType.nodeValue;
		if (nodeValue != null) {
			return "documentGetDocType: #initiallyNull 'nodeValue' equals '" + nodeValue + "' not null";
		}
		return "documentGetDocType: OK";
	} catch (e) {
		return "documentGetDocType: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var docType;
		var docTypeName;
		var nodeValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		if (docType == null) {
			return "documentGetDocType: #docTypeNotNull 'docType' is null";
		}
		docTypeName = docType.name;
		if (("text/xml" === "image/svg+xml")) {
			if ("svg" !== docTypeName) {
				return "documentGetDocType: #doctypeNameSVG 'docTypeName' equals '" + docTypeName + "' not '" + "svg" + "'";
			}
		} else {
			if ("staff" !== docTypeName) {
				return "documentGetDocType: #doctypeName 'docTypeName' equals '" + docTypeName + "' not '" + "staff" + "'";
			}
		}
		nodeValue = docType.nodeValue;
		if (nodeValue != null) {
			return "documentGetDocType: #initiallyNull 'nodeValue' equals '" + nodeValue + "' not null";
		}
		return "documentGetDocType: OK";
	} catch (e) {
		return "documentGetDocType: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="documentgetdoctypenodtd.xml" fleur="documentgetdoctypenodtd" native="documentgetdoctypenodtd"><Fleur>(function(){
	var success;
	try {
		var doc;
		var docType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_nodtdstaff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		if (docType != null) {
			return "documentGetDocTypeNoDTD: #documentGetDocTypeNoDTDAssert 'docType' equals '" + docType + "' not null";
		}
		return "documentGetDocTypeNoDTD: OK";
	} catch (e) {
		return "documentGetDocTypeNoDTD: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var docType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_nodtdstaff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		if (docType != null) {
			return "documentGetDocTypeNoDTD: #documentGetDocTypeNoDTDAssert 'docType' equals '" + docType + "' not null";
		}
		return "documentGetDocTypeNoDTD: OK";
	} catch (e) {
		return "documentGetDocTypeNoDTD: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="documentgetelementsbytagnamelength.xml" fleur="documentgetelementsbytagnamelength" native="documentgetelementsbytagnamelength"><Fleur>(function(){
	var success;
	try {
		var doc;
		var nameList;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		nameList = doc.getElementsByTagName("name");
		if (nameList.length !== 5) {
			return "documentGetElementsByTagNameLength: #documentGetElementsByTagNameLengthAssert 'nameList.length' equals " + nameList.length + " not 5";
		}
		return "documentGetElementsByTagNameLength: OK";
	} catch (e) {
		return "documentGetElementsByTagNameLength: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var nameList;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		nameList = doc.getElementsByTagName("name");
		if (nameList.length !== 5) {
			return "documentGetElementsByTagNameLength: #documentGetElementsByTagNameLengthAssert 'nameList.length' equals " + nameList.length + " not 5";
		}
		return "documentGetElementsByTagNameLength: OK";
	} catch (e) {
		return "documentGetElementsByTagNameLength: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="documentgetelementsbytagnametotallength.xml" fleur="documentgetelementsbytagnametotallength" native="documentgetelementsbytagnametotallength"><Fleur>(function(){
	var success;
	try {
		var doc;
		var nameList;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		nameList = doc.getElementsByTagName("*");
		if (("text/xml" === "image/svg+xml")) {
			if (nameList.length !== 39) {
				return "documentGetElementsByTagNameTotalLength: #elementCountSVG 'nameList.length' equals " + nameList.length + " not 39";
			}
		} else {
			if (nameList.length !== 37) {
				return "documentGetElementsByTagNameTotalLength: #documentGetElementsByTagNameTotalLengthAssert 'nameList.length' equals " + nameList.length + " not 37";
			}
		}
		return "documentGetElementsByTagNameTotalLength: OK";
	} catch (e) {
		return "documentGetElementsByTagNameTotalLength: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var nameList;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		nameList = doc.getElementsByTagName("*");
		if (("text/xml" === "image/svg+xml")) {
			if (nameList.length !== 39) {
				return "documentGetElementsByTagNameTotalLength: #elementCountSVG 'nameList.length' equals " + nameList.length + " not 39";
			}
		} else {
			if (nameList.length !== 37) {
				return "documentGetElementsByTagNameTotalLength: #documentGetElementsByTagNameTotalLengthAssert 'nameList.length' equals " + nameList.length + " not 37";
			}
		}
		return "documentGetElementsByTagNameTotalLength: OK";
	} catch (e) {
		return "documentGetElementsByTagNameTotalLength: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="documentgetelementsbytagnamevalue.xml" fleur="documentgetelementsbytagnamevalue" native="documentgetelementsbytagnamevalue"><Fleur>(function(){
	var success;
	try {
		var doc;
		var nameList;
		var nameNode;
		var firstChild;
		var childValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		nameList = doc.getElementsByTagName("name");
		nameNode = nameList.item(3);
		firstChild = nameNode.firstChild;
		childValue = firstChild.nodeValue;
		if ("Jeny Oconnor" !== childValue) {
			return "documentGetElementsByTagNameValue: #documentGetElementsByTagNameValueAssert 'childValue' equals '" + childValue + "' not '" + "Jeny Oconnor" + "'";
		}
		return "documentGetElementsByTagNameValue: OK";
	} catch (e) {
		return "documentGetElementsByTagNameValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var nameList;
		var nameNode;
		var firstChild;
		var childValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		nameList = doc.getElementsByTagName("name");
		nameNode = nameList.item(3);
		firstChild = nameNode.firstChild;
		childValue = firstChild.nodeValue;
		if ("Jeny Oconnor" !== childValue) {
			return "documentGetElementsByTagNameValue: #documentGetElementsByTagNameValueAssert 'childValue' equals '" + childValue + "' not '" + "Jeny Oconnor" + "'";
		}
		return "documentGetElementsByTagNameValue: OK";
	} catch (e) {
		return "documentGetElementsByTagNameValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="documentgetimplementation.xml" fleur="documentgetimplementation" native="documentgetimplementation"><Fleur>(function(){
	var success;
	try {
		var doc;
		var docImpl;
		var state;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		docImpl = doc.implementation;
		state = docImpl.hasFeature("XML","1.0");
		if (state !== true) {
			return "documentGetImplementationAssert: 'state' equals '" + state + "' not true";
		}
		return "documentGetImplementation: OK";
	} catch (e) {
		return "documentGetImplementation: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var docImpl;
		var state;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		docImpl = doc.implementation;
		state = docImpl.hasFeature("XML","1.0");
		if (state !== true) {
			return "documentGetImplementationAssert: 'state' equals '" + state + "' not true";
		}
		return "documentGetImplementation: OK";
	} catch (e) {
		return "documentGetImplementation: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="documentgetrootnode.xml" fleur="documentgetrootnode" native="documentgetrootnode"><Fleur>(function(){
	var success;
	try {
		var doc;
		var root;
		var rootName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		root = doc.documentElement;
		rootName = root.nodeName;
		if (("text/xml" === "image/svg+xml")) {
			if ("svg" !== rootName) {
				return "documentGetRootNode: #svgRootNode 'rootName' equals '" + rootName + "' not '" + "svg" + "'";
			}
		} else {
			if ("staff" !== rootName) {
				return "documentGetRootNode: #documentGetRootNodeAssert 'rootName' equals '" + rootName + "' not '" + "staff" + "'";
			}
		}
		return "documentGetRootNode: OK";
	} catch (e) {
		return "documentGetRootNode: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var root;
		var rootName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		root = doc.documentElement;
		rootName = root.nodeName;
		if (("text/xml" === "image/svg+xml")) {
			if ("svg" !== rootName) {
				return "documentGetRootNode: #svgRootNode 'rootName' equals '" + rootName + "' not '" + "svg" + "'";
			}
		} else {
			if ("staff" !== rootName) {
				return "documentGetRootNode: #documentGetRootNodeAssert 'rootName' equals '" + rootName + "' not '" + "staff" + "'";
			}
		}
		return "documentGetRootNode: OK";
	} catch (e) {
		return "documentGetRootNode: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="documentinvalidcharacterexceptioncreateattribute.xml" fleur="documentinvalidcharacterexceptioncreateattribute" native="documentinvalidcharacterexceptioncreateattribute"><Fleur>(function(){
	var success;
	try {
		var doc;
		var createdAttr;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		success = false;
		try {
			createdAttr = doc.createAttribute("invalid^Name");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 5;
			}
		}
		if (!success) {
			return "documentInvalidCharacterExceptionCreateAttribute: Exception INVALID_CHARACTER_ERR expected";
		}
		return "documentInvalidCharacterExceptionCreateAttribute: OK";
	} catch (e) {
		return "documentInvalidCharacterExceptionCreateAttribute: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var createdAttr;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		success = false;
		try {
			createdAttr = doc.createAttribute("invalid^Name");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 5;
			}
		}
		if (!success) {
			return "documentInvalidCharacterExceptionCreateAttribute: Exception INVALID_CHARACTER_ERR expected";
		}
		return "documentInvalidCharacterExceptionCreateAttribute: OK";
	} catch (e) {
		return "documentInvalidCharacterExceptionCreateAttribute: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="documentinvalidcharacterexceptioncreateelement.xml" fleur="documentinvalidcharacterexceptioncreateelement" native="documentinvalidcharacterexceptioncreateelement"><Fleur>(function(){
	var success;
	try {
		var doc;
		var badElement;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		success = false;
		try {
			badElement = doc.createElement("invalid^Name");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 5;
			}
		}
		if (!success) {
			return "documentInvalidCharacterExceptionCreateElement: Exception INVALID_CHARACTER_ERR expected";
		}
		return "documentInvalidCharacterExceptionCreateElement: OK";
	} catch (e) {
		return "documentInvalidCharacterExceptionCreateElement: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var badElement;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		success = false;
		try {
			badElement = doc.createElement("invalid^Name");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 5;
			}
		}
		if (!success) {
			return "documentInvalidCharacterExceptionCreateElement: Exception INVALID_CHARACTER_ERR expected";
		}
		return "documentInvalidCharacterExceptionCreateElement: OK";
	} catch (e) {
		return "documentInvalidCharacterExceptionCreateElement: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="documentinvalidcharacterexceptioncreateentref.xml" fleur="documentinvalidcharacterexceptioncreateentref" native="documentinvalidcharacterexceptioncreateentref"><Fleur>(function(){
	var success;
	try {
				var doc;
		var badEntityRef;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		if (("text/xml" === "text/html")) {
			success = false;
			try {
				badEntityRef = doc.createEntityReference("foo");
			} catch (ex) {
				if (typeof ex.code != 'undefined') {
					success = ex.code === 9;
				}
			}
			if (!success) {
				return "documentInvalidCharacterExceptionCreateEntRef: Exception NOT_SUPPORTED_ERR expected";
			}
		} else {
			success = false;
			try {
				badEntityRef = doc.createEntityReference("invalid^Name");
			} catch (ex) {
				if (typeof ex.code != 'undefined') {
					success = ex.code === 5;
				}
			}
			if (!success) {
				return "documentInvalidCharacterExceptionCreateEntRef: Exception INVALID_CHARACTER_ERR expected";
			}
		}
		return "documentInvalidCharacterExceptionCreateEntRef: OK";
	} catch (e) {
		return "documentInvalidCharacterExceptionCreateEntRef: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
				var doc;
		var badEntityRef;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		if (("text/xml" === "text/html")) {
			success = false;
			try {
				badEntityRef = doc.createEntityReference("foo");
			} catch (ex) {
				if (typeof ex.code != 'undefined') {
					success = ex.code === 9;
				}
			}
			if (!success) {
				return "documentInvalidCharacterExceptionCreateEntRef: Exception NOT_SUPPORTED_ERR expected";
			}
		} else {
			success = false;
			try {
				badEntityRef = doc.createEntityReference("invalid^Name");
			} catch (ex) {
				if (typeof ex.code != 'undefined') {
					success = ex.code === 5;
				}
			}
			if (!success) {
				return "documentInvalidCharacterExceptionCreateEntRef: Exception INVALID_CHARACTER_ERR expected";
			}
		}
		return "documentInvalidCharacterExceptionCreateEntRef: OK";
	} catch (e) {
		return "documentInvalidCharacterExceptionCreateEntRef: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="documentinvalidcharacterexceptioncreateentref1.xml" fleur="documentinvalidcharacterexceptioncreateentref1" native="documentinvalidcharacterexceptioncreateentref1"><Fleur>(function(){
	var success;
	try {
				var doc;
		var badEntityRef;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		if (("text/xml" === "text/html")) {
			success = false;
			try {
				badEntityRef = doc.createEntityReference("foo");
			} catch (ex) {
				if (typeof ex.code != 'undefined') {
					success = ex.code === 9;
				}
			}
			if (!success) {
				return "documentinvalidcharacterexceptioncreateentref1: Exception NOT_SUPPORTED_ERR expected";
			}
		} else {
			success = false;
			try {
				badEntityRef = doc.createEntityReference("");
			} catch (ex) {
				if (typeof ex.code != 'undefined') {
					success = ex.code === 5;
				}
			}
			if (!success) {
				return "documentinvalidcharacterexceptioncreateentref1: Exception INVALID_CHARACTER_ERR expected";
			}
		}
		return "documentinvalidcharacterexceptioncreateentref1: OK";
	} catch (e) {
		return "documentinvalidcharacterexceptioncreateentref1: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
				var doc;
		var badEntityRef;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		if (("text/xml" === "text/html")) {
			success = false;
			try {
				badEntityRef = doc.createEntityReference("foo");
			} catch (ex) {
				if (typeof ex.code != 'undefined') {
					success = ex.code === 9;
				}
			}
			if (!success) {
				return "documentinvalidcharacterexceptioncreateentref1: Exception NOT_SUPPORTED_ERR expected";
			}
		} else {
			success = false;
			try {
				badEntityRef = doc.createEntityReference("");
			} catch (ex) {
				if (typeof ex.code != 'undefined') {
					success = ex.code === 5;
				}
			}
			if (!success) {
				return "documentinvalidcharacterexceptioncreateentref1: Exception INVALID_CHARACTER_ERR expected";
			}
		}
		return "documentinvalidcharacterexceptioncreateentref1: OK";
	} catch (e) {
		return "documentinvalidcharacterexceptioncreateentref1: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="documentinvalidcharacterexceptioncreatepi.xml" fleur="documentinvalidcharacterexceptioncreatepi" native="documentinvalidcharacterexceptioncreatepi"><Fleur>(function(){
	var success;
	try {
				var doc;
		var badPI;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		if (("text/xml" === "text/html")) {
			success = false;
			try {
				badPI = doc.createProcessingInstruction("foo", "data");
			} catch (ex) {
				if (typeof ex.code != 'undefined') {
					success = ex.code === 9;
				}
			}
			if (!success) {
				return "documentInvalidCharacterExceptionCreatePI: Exception NOT_SUPPORTED_ERR expected";
			}
		} else {
			success = false;
			try {
				badPI = doc.createProcessingInstruction("invalid^Name", "data");
			} catch (ex) {
				if (typeof ex.code != 'undefined') {
					success = ex.code === 5;
				}
			}
			if (!success) {
				return "documentInvalidCharacterExceptionCreatePI: Exception INVALID_CHARACTER_ERR expected";
			}
		}
		return "documentInvalidCharacterExceptionCreatePI: OK";
	} catch (e) {
		return "documentInvalidCharacterExceptionCreatePI: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
				var doc;
		var badPI;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		if (("text/xml" === "text/html")) {
			success = false;
			try {
				badPI = doc.createProcessingInstruction("foo", "data");
			} catch (ex) {
				if (typeof ex.code != 'undefined') {
					success = ex.code === 9;
				}
			}
			if (!success) {
				return "documentInvalidCharacterExceptionCreatePI: Exception NOT_SUPPORTED_ERR expected";
			}
		} else {
			success = false;
			try {
				badPI = doc.createProcessingInstruction("invalid^Name", "data");
			} catch (ex) {
				if (typeof ex.code != 'undefined') {
					success = ex.code === 5;
				}
			}
			if (!success) {
				return "documentInvalidCharacterExceptionCreatePI: Exception INVALID_CHARACTER_ERR expected";
			}
		}
		return "documentInvalidCharacterExceptionCreatePI: OK";
	} catch (e) {
		return "documentInvalidCharacterExceptionCreatePI: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="documentinvalidcharacterexceptioncreatepi1.xml" fleur="documentinvalidcharacterexceptioncreatepi1" native="documentinvalidcharacterexceptioncreatepi1"><Fleur>(function(){
	var success;
	try {
				var doc;
		var badPI;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		if (("text/xml" === "text/html")) {
			success = false;
			try {
				badPI = doc.createProcessingInstruction("foo", "data");
			} catch (ex) {
				if (typeof ex.code != 'undefined') {
					success = ex.code === 9;
				}
			}
			if (!success) {
				return "documentinvalidcharacterexceptioncreatepi1: Exception NOT_SUPPORTED_ERR expected";
			}
		} else {
			success = false;
			try {
				badPI = doc.createProcessingInstruction("", "data");
			} catch (ex) {
				if (typeof ex.code != 'undefined') {
					success = ex.code === 5;
				}
			}
			if (!success) {
				return "documentinvalidcharacterexceptioncreatepi1: Exception INVALID_CHARACTER_ERR expected";
			}
		}
		return "documentinvalidcharacterexceptioncreatepi1: OK";
	} catch (e) {
		return "documentinvalidcharacterexceptioncreatepi1: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
				var doc;
		var badPI;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		if (("text/xml" === "text/html")) {
			success = false;
			try {
				badPI = doc.createProcessingInstruction("foo", "data");
			} catch (ex) {
				if (typeof ex.code != 'undefined') {
					success = ex.code === 9;
				}
			}
			if (!success) {
				return "documentinvalidcharacterexceptioncreatepi1: Exception NOT_SUPPORTED_ERR expected";
			}
		} else {
			success = false;
			try {
				badPI = doc.createProcessingInstruction("", "data");
			} catch (ex) {
				if (typeof ex.code != 'undefined') {
					success = ex.code === 5;
				}
			}
			if (!success) {
				return "documentinvalidcharacterexceptioncreatepi1: Exception INVALID_CHARACTER_ERR expected";
			}
		}
		return "documentinvalidcharacterexceptioncreatepi1: OK";
	} catch (e) {
		return "documentinvalidcharacterexceptioncreatepi1: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="documenttypegetdoctype.xml" fleur="documenttypegetdoctype" native="documenttypegetdoctype"><Fleur>(function(){
	var success;
	try {
		var doc;
		var docType;
		var name;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		if (docType == null) {
			return "documenttypeGetDocType: #docTypeNotNull 'docType' is null";
		}
		name = docType.name;
		if (("text/xml" === "image/svg+xml")) {
			if ("svg" !== name) {
				return "documenttypeGetDocType: #doctypeName 'name' equals '" + name + "' not '" + "svg" + "'";
			}
		} else {
			if ("staff" !== name) {
				return "documenttypeGetDocType: #documenttypeGetDocTypeAssert 'name' equals '" + name + "' not '" + "staff" + "'";
			}
		}
		return "documenttypeGetDocType: OK";
	} catch (e) {
		return "documenttypeGetDocType: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var docType;
		var name;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		if (docType == null) {
			return "documenttypeGetDocType: #docTypeNotNull 'docType' is null";
		}
		name = docType.name;
		if (("text/xml" === "image/svg+xml")) {
			if ("svg" !== name) {
				return "documenttypeGetDocType: #doctypeName 'name' equals '" + name + "' not '" + "svg" + "'";
			}
		} else {
			if ("staff" !== name) {
				return "documenttypeGetDocType: #documenttypeGetDocTypeAssert 'name' equals '" + name + "' not '" + "staff" + "'";
			}
		}
		return "documenttypeGetDocType: OK";
	} catch (e) {
		return "documenttypeGetDocType: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="documenttypegetentities.xml" fleur="documenttypegetentities" native="documenttypegetentities"><Fleur>(function(){
	var success;
	try {
		var doc;
		var docType;
		var entityList;
		var name;
		expectedResult = new Array();
		expectedResult[0] = "ent1";
		expectedResult[1] = "ent2";
		expectedResult[2] = "ent3";
		expectedResult[3] = "ent4";
		expectedResult[4] = "ent5";
		expectedResultSVG = new Array();
		expectedResultSVG[0] = "ent1";
		expectedResultSVG[1] = "ent2";
		expectedResultSVG[2] = "ent3";
		expectedResultSVG[3] = "ent4";
		expectedResultSVG[4] = "ent5";
		expectedResultSVG[5] = "svgunit";
		expectedResultSVG[6] = "svgtest";
		var nameList = new Array();

		var entity;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		if (docType == null) {
			return "documenttypeGetEntities: #docTypeNotNull 'docType' is null";
		}
		entityList = docType.entities;
		if (entityList == null) {
			return "documenttypeGetEntities: #entitiesNotNull 'entityList' is null";
		}
		for (var index_id0x0f61c7e0 = 0; index_id0x0f61c7e0 &lt; entityList.length; index_id0x0f61c7e0++) {
			entity = entityList.item(index_id0x0f61c7e0);
			name = entity.nodeName;
nameList[nameList.length] = name;
		}
		if (("text/xml" === "image/svg+xml")) {
			if (expectedResultSVG.join("|") !== nameList.join("|")) {
				return "documenttypeGetEntities: #entityNamesSVG 'nameList' equals '" + nameList.join("|") + "' not '" + expectedResultSVG.join("|") + "'";
			}
		} else {
			if (expectedResult.join("|") !== nameList.join("|")) {
				return "documenttypeGetEntities: #entityNames 'nameList' equals '" + nameList.join("|") + "' not '" + expectedResult.join("|") + "'";
			}
		}
		return "documenttypeGetEntities: OK";
	} catch (e) {
		return "documenttypeGetEntities: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var docType;
		var entityList;
		var name;
		expectedResult = new Array();
		expectedResult[0] = "ent1";
		expectedResult[1] = "ent2";
		expectedResult[2] = "ent3";
		expectedResult[3] = "ent4";
		expectedResult[4] = "ent5";
		expectedResultSVG = new Array();
		expectedResultSVG[0] = "ent1";
		expectedResultSVG[1] = "ent2";
		expectedResultSVG[2] = "ent3";
		expectedResultSVG[3] = "ent4";
		expectedResultSVG[4] = "ent5";
		expectedResultSVG[5] = "svgunit";
		expectedResultSVG[6] = "svgtest";
		var nameList = new Array();

		var entity;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		if (docType == null) {
			return "documenttypeGetEntities: #docTypeNotNull 'docType' is null";
		}
		entityList = docType.entities;
		if (entityList == null) {
			return "documenttypeGetEntities: #entitiesNotNull 'entityList' is null";
		}
		for (var index_id0x0f61c7e0 = 0; index_id0x0f61c7e0 &lt; entityList.length; index_id0x0f61c7e0++) {
			entity = entityList.item(index_id0x0f61c7e0);
			name = entity.nodeName;
nameList[nameList.length] = name;
		}
		if (("text/xml" === "image/svg+xml")) {
			if (expectedResultSVG.join("|") !== nameList.join("|")) {
				return "documenttypeGetEntities: #entityNamesSVG 'nameList' equals '" + nameList.join("|") + "' not '" + expectedResultSVG.join("|") + "'";
			}
		} else {
			if (expectedResult.join("|") !== nameList.join("|")) {
				return "documenttypeGetEntities: #entityNames 'nameList' equals '" + nameList.join("|") + "' not '" + expectedResult.join("|") + "'";
			}
		}
		return "documenttypeGetEntities: OK";
	} catch (e) {
		return "documenttypeGetEntities: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="documenttypegetentitieslength.xml" fleur="documenttypegetentitieslength" native="documenttypegetentitieslength"><Fleur>(function(){
	var success;
	try {
		var doc;
		var docType;
		var entityList;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		if (docType == null) {
			return "documenttypeGetEntitiesLength: #docTypeNotNull 'docType' is null";
		}
		entityList = docType.entities;
		if (entityList == null) {
			return "documenttypeGetEntitiesLength: #entitiesNotNull 'entityList' is null";
		}
		if (("text/xml" === "image/svg+xml")) {
			if (entityList.length !== 7) {
				return "documenttypeGetEntitiesLength: #entitySizeSVG 'entityList.length' equals " + entityList.length + " not 7";
			}
		} else {
			if (entityList.length !== 5) {
				return "documenttypeGetEntitiesLength: #entitySize 'entityList.length' equals " + entityList.length + " not 5";
			}
		}
		return "documenttypeGetEntitiesLength: OK";
	} catch (e) {
		return "documenttypeGetEntitiesLength: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var docType;
		var entityList;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		if (docType == null) {
			return "documenttypeGetEntitiesLength: #docTypeNotNull 'docType' is null";
		}
		entityList = docType.entities;
		if (entityList == null) {
			return "documenttypeGetEntitiesLength: #entitiesNotNull 'entityList' is null";
		}
		if (("text/xml" === "image/svg+xml")) {
			if (entityList.length !== 7) {
				return "documenttypeGetEntitiesLength: #entitySizeSVG 'entityList.length' equals " + entityList.length + " not 7";
			}
		} else {
			if (entityList.length !== 5) {
				return "documenttypeGetEntitiesLength: #entitySize 'entityList.length' equals " + entityList.length + " not 5";
			}
		}
		return "documenttypeGetEntitiesLength: OK";
	} catch (e) {
		return "documenttypeGetEntitiesLength: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="documenttypegetentitiestype.xml" fleur="documenttypegetentitiestype" native="documenttypegetentitiestype"><Fleur>(function(){
	var success;
	try {
		var doc;
		var docType;
		var entityList;
		var entity;
		var entityType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		if (docType == null) {
			return "documenttypeGetEntitiesType: #docTypeNotNull 'docType' is null";
		}
		entityList = docType.entities;
		if (entityList == null) {
			return "documenttypeGetEntitiesType: #entitiesNotNull 'entityList' is null";
		}
		for (var index_id0x0f6c11f0 = 0; index_id0x0f6c11f0 &lt; entityList.length; index_id0x0f6c11f0++) {
			entity = entityList.item(index_id0x0f6c11f0);
			entityType = entity.nodeType;
			if (6 !== entityType) {
				return "documenttypeGetEntitiesType: #documenttypeGetEntitiesTypeAssert 'entityType' equals '" + entityType + "' not '" + 6 + "'";
			}
		}
		return "documenttypeGetEntitiesType: OK";
	} catch (e) {
		return "documenttypeGetEntitiesType: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var docType;
		var entityList;
		var entity;
		var entityType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		if (docType == null) {
			return "documenttypeGetEntitiesType: #docTypeNotNull 'docType' is null";
		}
		entityList = docType.entities;
		if (entityList == null) {
			return "documenttypeGetEntitiesType: #entitiesNotNull 'entityList' is null";
		}
		for (var index_id0x0f6c11f0 = 0; index_id0x0f6c11f0 &lt; entityList.length; index_id0x0f6c11f0++) {
			entity = entityList.item(index_id0x0f6c11f0);
			entityType = entity.nodeType;
			if (6 !== entityType) {
				return "documenttypeGetEntitiesType: #documenttypeGetEntitiesTypeAssert 'entityType' equals '" + entityType + "' not '" + 6 + "'";
			}
		}
		return "documenttypeGetEntitiesType: OK";
	} catch (e) {
		return "documenttypeGetEntitiesType: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="documenttypegetnotations.xml" fleur="documenttypegetnotations" native="documenttypegetnotations"><Fleur>(function(){
	var success;
	try {
		var doc;
		var docType;
		var notationList;
		var notation;
		var notationName;
		var actual = new Array();

		expected = new Array();
		expected[0] = "notation1";
		expected[1] = "notation2";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		if (docType == null) {
			return "documenttypeGetNotations: #docTypeNotNull 'docType' is null";
		}
		notationList = docType.notations;
		if (notationList == null) {
			return "documenttypeGetNotations: #notationsNotNull 'notationList' is null";
		}
		for (var index_id0x0f6c85b0 = 0; index_id0x0f6c85b0 &lt; notationList.length; index_id0x0f6c85b0++) {
			notation = notationList.item(index_id0x0f6c85b0);
			notationName = notation.nodeName;
actual[actual.length] = notationName;
		}
		if (expected.join("|") !== actual.join("|")) {
			return "documenttypeGetNotations: #names 'actual' equals '" + actual.join("|") + "' not '" + expected.join("|") + "'";
		}
		return "documenttypeGetNotations: OK";
	} catch (e) {
		return "documenttypeGetNotations: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var docType;
		var notationList;
		var notation;
		var notationName;
		var actual = new Array();

		expected = new Array();
		expected[0] = "notation1";
		expected[1] = "notation2";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		if (docType == null) {
			return "documenttypeGetNotations: #docTypeNotNull 'docType' is null";
		}
		notationList = docType.notations;
		if (notationList == null) {
			return "documenttypeGetNotations: #notationsNotNull 'notationList' is null";
		}
		for (var index_id0x0f6c85b0 = 0; index_id0x0f6c85b0 &lt; notationList.length; index_id0x0f6c85b0++) {
			notation = notationList.item(index_id0x0f6c85b0);
			notationName = notation.nodeName;
actual[actual.length] = notationName;
		}
		if (expected.join("|") !== actual.join("|")) {
			return "documenttypeGetNotations: #names 'actual' equals '" + actual.join("|") + "' not '" + expected.join("|") + "'";
		}
		return "documenttypeGetNotations: OK";
	} catch (e) {
		return "documenttypeGetNotations: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="documenttypegetnotationstype.xml" fleur="documenttypegetnotationstype" native="documenttypegetnotationstype"><Fleur>(function(){
	var success;
	try {
		var doc;
		var docType;
		var notationList;
		var notation;
		var notationType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		if (docType == null) {
			return "documenttypeGetNotationsType: #docTypeNotNull 'docType' is null";
		}
		notationList = docType.notations;
		if (notationList == null) {
			return "documenttypeGetNotationsType: #notationsNotNull 'notationList' is null";
		}
		for (var index_id0x0f6d1a10 = 0; index_id0x0f6d1a10 &lt; notationList.length; index_id0x0f6d1a10++) {
			notation = notationList.item(index_id0x0f6d1a10);
			notationType = notation.nodeType;
			if (12 !== notationType) {
				return "documenttypeGetNotationsType: #documenttypeGetNotationsTypeAssert 'notationType' equals '" + notationType + "' not '" + 12 + "'";
			}
		}
		return "documenttypeGetNotationsType: OK";
	} catch (e) {
		return "documenttypeGetNotationsType: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var docType;
		var notationList;
		var notation;
		var notationType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		if (docType == null) {
			return "documenttypeGetNotationsType: #docTypeNotNull 'docType' is null";
		}
		notationList = docType.notations;
		if (notationList == null) {
			return "documenttypeGetNotationsType: #notationsNotNull 'notationList' is null";
		}
		for (var index_id0x0f6d1a10 = 0; index_id0x0f6d1a10 &lt; notationList.length; index_id0x0f6d1a10++) {
			notation = notationList.item(index_id0x0f6d1a10);
			notationType = notation.nodeType;
			if (12 !== notationType) {
				return "documenttypeGetNotationsType: #documenttypeGetNotationsTypeAssert 'notationType' equals '" + notationType + "' not '" + 12 + "'";
			}
		}
		return "documenttypeGetNotationsType: OK";
	} catch (e) {
		return "documenttypeGetNotationsType: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="domimplementationfeaturenoversion.xml" fleur="domimplementationfeaturenoversion" native="domimplementationfeaturenoversion"><Fleur>(function(){
	var success;
	try {
		var doc;
		var domImpl;
		var state;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		domImpl = doc.implementation;
		state = domImpl.hasFeature("XML","");
		if (state !== true) {
			return "hasXMLEmpty: 'state' equals '" + state + "' not true";
		}
		return "domimplementationFeatureNoVersion: OK";
	} catch (e) {
		return "domimplementationFeatureNoVersion: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var domImpl;
		var state;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		domImpl = doc.implementation;
		state = domImpl.hasFeature("XML","");
		if (state !== true) {
			return "hasXMLEmpty: 'state' equals '" + state + "' not true";
		}
		return "domimplementationFeatureNoVersion: OK";
	} catch (e) {
		return "domimplementationFeatureNoVersion: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="domimplementationfeaturenull.xml" fleur="domimplementationfeaturenull" native="domimplementationfeaturenull"><Fleur>(function(){
	var success;
	try {
		var doc;
		var domImpl;
		var state;
		var nullVersion = null;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		domImpl = doc.implementation;
		state = domImpl.hasFeature("XML",nullVersion);
		if (state !== true) {
			return "hasXMLnull: 'state' equals '" + state + "' not true";
		}
		return "domimplementationFeatureNull: OK";
	} catch (e) {
		return "domimplementationFeatureNull: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var domImpl;
		var state;
		var nullVersion = null;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		domImpl = doc.implementation;
		state = domImpl.hasFeature("XML",nullVersion);
		if (state !== true) {
			return "hasXMLnull: 'state' equals '" + state + "' not true";
		}
		return "domimplementationFeatureNull: OK";
	} catch (e) {
		return "domimplementationFeatureNull: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="domimplementationfeaturexml.xml" fleur="domimplementationfeaturexml" native="domimplementationfeaturexml"><Fleur>(function(){
	var success;
	try {
		var doc;
		var domImpl;
		var state;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		domImpl = doc.implementation;
		state = domImpl.hasFeature("xml","1.0");
		if (state !== true) {
			return "hasXML1: 'state' equals '" + state + "' not true";
		}
		return "domimplementationFeaturexml: OK";
	} catch (e) {
		return "domimplementationFeaturexml: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var domImpl;
		var state;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		domImpl = doc.implementation;
		state = domImpl.hasFeature("xml","1.0");
		if (state !== true) {
			return "hasXML1: 'state' equals '" + state + "' not true";
		}
		return "domimplementationFeaturexml: OK";
	} catch (e) {
		return "domimplementationFeaturexml: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="elementaddnewattribute.xml" fleur="elementaddnewattribute" native="elementaddnewattribute"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var attrValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testEmployee = elementList.item(4);
		testEmployee.setAttribute("district", "dallas");
		attrValue = testEmployee.getAttribute("district");
		if ("dallas" !== attrValue) {
			return "elementAddNewAttribute: #elementAddNewAttributeAssert 'attrValue' equals '" + attrValue + "' not '" + "dallas" + "'";
		}
		return "elementAddNewAttribute: OK";
	} catch (e) {
		return "elementAddNewAttribute: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var attrValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testEmployee = elementList.item(4);
		testEmployee.setAttribute("district", "dallas");
		attrValue = testEmployee.getAttribute("district");
		if ("dallas" !== attrValue) {
			return "elementAddNewAttribute: #elementAddNewAttributeAssert 'attrValue' equals '" + attrValue + "' not '" + "dallas" + "'";
		}
		return "elementAddNewAttribute: OK";
	} catch (e) {
		return "elementAddNewAttribute: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="elementassociatedattribute.xml" fleur="elementassociatedattribute" native="elementassociatedattribute"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var attributes;
		var domesticAttr;
		var specified;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testEmployee = elementList.item(0);
		attributes = testEmployee.attributes;
		domesticAttr = attributes.getNamedItem("domestic");
		specified = domesticAttr.specified;
		if (specified !== true) {
			return "domesticSpecified: 'specified' equals '" + specified + "' not true";
		}
		return "elementAssociatedAttribute: OK";
	} catch (e) {
		return "elementAssociatedAttribute: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var attributes;
		var domesticAttr;
		var specified;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testEmployee = elementList.item(0);
		attributes = testEmployee.attributes;
		domesticAttr = attributes.getNamedItem("domestic");
		specified = domesticAttr.specified;
		if (specified !== true) {
			return "domesticSpecified: 'specified' equals '" + specified + "' not true";
		}
		return "elementAssociatedAttribute: OK";
	} catch (e) {
		return "elementAssociatedAttribute: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="elementchangeattributevalue.xml" fleur="elementchangeattributevalue" native="elementchangeattributevalue"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var attrValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testEmployee = elementList.item(3);
		testEmployee.setAttribute("street", "Neither");
		attrValue = testEmployee.getAttribute("street");
		if ("Neither" !== attrValue) {
			return "elementChangeAttributeValue: #elementChangeAttributeValueAssert 'attrValue' equals '" + attrValue + "' not '" + "Neither" + "'";
		}
		return "elementChangeAttributeValue: OK";
	} catch (e) {
		return "elementChangeAttributeValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var attrValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testEmployee = elementList.item(3);
		testEmployee.setAttribute("street", "Neither");
		attrValue = testEmployee.getAttribute("street");
		if ("Neither" !== attrValue) {
			return "elementChangeAttributeValue: #elementChangeAttributeValueAssert 'attrValue' equals '" + attrValue + "' not '" + "Neither" + "'";
		}
		return "elementChangeAttributeValue: OK";
	} catch (e) {
		return "elementChangeAttributeValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="elementcreatenewattribute.xml" fleur="elementcreatenewattribute" native="elementcreatenewattribute"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testAddress;
		var newAttribute;
		var oldAttr;
		var districtAttr;
		var attrVal;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testAddress = elementList.item(0);
		newAttribute = doc.createAttribute("district");
		oldAttr = testAddress.setAttributeNode(newAttribute);
		if (oldAttr != null) {
			return "elementCreateNewAttribute: #old_attr_doesnt_exist 'oldAttr' equals '" + oldAttr + "' not null";
		}
		districtAttr = testAddress.getAttributeNode("district");
		if (districtAttr == null) {
			return "elementCreateNewAttribute: #new_district_accessible 'districtAttr' is null";
		}
		attrVal = testAddress.getAttribute("district");
		if ("" !== attrVal) {
			return "elementCreateNewAttribute: #attr_value 'attrVal' equals '" + attrVal + "' not '" + "" + "'";
		}
		return "elementCreateNewAttribute: OK";
	} catch (e) {
		return "elementCreateNewAttribute: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testAddress;
		var newAttribute;
		var oldAttr;
		var districtAttr;
		var attrVal;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testAddress = elementList.item(0);
		newAttribute = doc.createAttribute("district");
		oldAttr = testAddress.setAttributeNode(newAttribute);
		if (oldAttr != null) {
			return "elementCreateNewAttribute: #old_attr_doesnt_exist 'oldAttr' equals '" + oldAttr + "' not null";
		}
		districtAttr = testAddress.getAttributeNode("district");
		if (districtAttr == null) {
			return "elementCreateNewAttribute: #new_district_accessible 'districtAttr' is null";
		}
		attrVal = testAddress.getAttribute("district");
		if ("" !== attrVal) {
			return "elementCreateNewAttribute: #attr_value 'attrVal' equals '" + attrVal + "' not '" + "" + "'";
		}
		return "elementCreateNewAttribute: OK";
	} catch (e) {
		return "elementCreateNewAttribute: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="elementgetattributenode.xml" fleur="elementgetattributenode" native="elementgetattributenode"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var domesticAttr;
		var name;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testEmployee = elementList.item(0);
		domesticAttr = testEmployee.getAttributeNode("domestic");
		name = domesticAttr.nodeName;
		if ("domestic" !== name) {
			return "elementGetAttributeNode: #elementGetAttributeNodeAssert 'name' equals '" + name + "' not '" + "domestic" + "'";
		}
		return "elementGetAttributeNode: OK";
	} catch (e) {
		return "elementGetAttributeNode: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var domesticAttr;
		var name;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testEmployee = elementList.item(0);
		domesticAttr = testEmployee.getAttributeNode("domestic");
		name = domesticAttr.nodeName;
		if ("domestic" !== name) {
			return "elementGetAttributeNode: #elementGetAttributeNodeAssert 'name' equals '" + name + "' not '" + "domestic" + "'";
		}
		return "elementGetAttributeNode: OK";
	} catch (e) {
		return "elementGetAttributeNode: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="elementgetattributenodenull.xml" fleur="elementgetattributenodenull" native="elementgetattributenodenull"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var domesticAttr;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testEmployee = elementList.item(0);
		domesticAttr = testEmployee.getAttributeNode("invalidAttribute");
		if (domesticAttr != null) {
			return "elementGetAttributeNodeNull: #elementGetAttributeNodeNullAssert 'domesticAttr' equals '" + domesticAttr + "' not null";
		}
		return "elementGetAttributeNodeNull: OK";
	} catch (e) {
		return "elementGetAttributeNodeNull: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var domesticAttr;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testEmployee = elementList.item(0);
		domesticAttr = testEmployee.getAttributeNode("invalidAttribute");
		if (domesticAttr != null) {
			return "elementGetAttributeNodeNull: #elementGetAttributeNodeNullAssert 'domesticAttr' equals '" + domesticAttr + "' not null";
		}
		return "elementGetAttributeNodeNull: OK";
	} catch (e) {
		return "elementGetAttributeNodeNull: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="elementgetelementempty.xml" fleur="elementgetelementempty" native="elementgetelementempty"><Fleur>(function(){
	var success;
	try {
		var doc;
		var newAttribute;
		var elementList;
		var testEmployee;
		var domesticAttr;
		var attrValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		newAttribute = doc.createAttribute("district");
		elementList = doc.getElementsByTagName("address");
		testEmployee = elementList.item(3);
		domesticAttr = testEmployee.setAttributeNode(newAttribute);
		attrValue = testEmployee.getAttribute("district");
		if ("" !== attrValue) {
			return "elementGetElementEmpty: #elementGetElementEmptyAssert 'attrValue' equals '" + attrValue + "' not '" + "" + "'";
		}
		return "elementGetElementEmpty: OK";
	} catch (e) {
		return "elementGetElementEmpty: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var newAttribute;
		var elementList;
		var testEmployee;
		var domesticAttr;
		var attrValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		newAttribute = doc.createAttribute("district");
		elementList = doc.getElementsByTagName("address");
		testEmployee = elementList.item(3);
		domesticAttr = testEmployee.setAttributeNode(newAttribute);
		attrValue = testEmployee.getAttribute("district");
		if ("" !== attrValue) {
			return "elementGetElementEmpty: #elementGetElementEmptyAssert 'attrValue' equals '" + attrValue + "' not '" + "" + "'";
		}
		return "elementGetElementEmpty: OK";
	} catch (e) {
		return "elementGetElementEmpty: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="elementgetelementsbytagname.xml" fleur="elementgetelementsbytagname" native="elementgetelementsbytagname"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		if (elementList.length !== 5) {
			return "elementGetElementsByTagName: #elementGetElementsByTagNameAssert 'elementList.length' equals " + elementList.length + " not 5";
		}
		return "elementGetElementsByTagName: OK";
	} catch (e) {
		return "elementGetElementsByTagName: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		if (elementList.length !== 5) {
			return "elementGetElementsByTagName: #elementGetElementsByTagNameAssert 'elementList.length' equals " + elementList.length + " not 5";
		}
		return "elementGetElementsByTagName: OK";
	} catch (e) {
		return "elementGetElementsByTagName: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="elementgetelementsbytagnameaccessnodelist.xml" fleur="elementgetelementsbytagnameaccessnodelist" native="elementgetelementsbytagnameaccessnodelist"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var child;
		var childName;
		var childValue;
		var childType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		testEmployee = elementList.item(3);
		child = testEmployee.firstChild;
		childType = child.nodeType;
		if ((3 == childType)) {
			child = child.nextSibling;
		}
		childName = child.nodeName;
		if ("employeeId" !== childName) {
			return "elementgetelementsbytagnameaccessnodelist: #nodename 'childName' equals '" + childName + "' not '" + "employeeId" + "'";
		}
		child = child.firstChild;
		childValue = child.nodeValue;
		if ("EMP0004" !== childValue) {
			return "elementgetelementsbytagnameaccessnodelist: #emp0004 'childValue' equals '" + childValue + "' not '" + "EMP0004" + "'";
		}
		return "elementgetelementsbytagnameaccessnodelist: OK";
	} catch (e) {
		return "elementgetelementsbytagnameaccessnodelist: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var child;
		var childName;
		var childValue;
		var childType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		testEmployee = elementList.item(3);
		child = testEmployee.firstChild;
		childType = child.nodeType;
		if ((3 == childType)) {
			child = child.nextSibling;
		}
		childName = child.nodeName;
		if ("employeeId" !== childName) {
			return "elementgetelementsbytagnameaccessnodelist: #nodename 'childName' equals '" + childName + "' not '" + "employeeId" + "'";
		}
		child = child.firstChild;
		childValue = child.nodeValue;
		if ("EMP0004" !== childValue) {
			return "elementgetelementsbytagnameaccessnodelist: #emp0004 'childValue' equals '" + childValue + "' not '" + "EMP0004" + "'";
		}
		return "elementgetelementsbytagnameaccessnodelist: OK";
	} catch (e) {
		return "elementgetelementsbytagnameaccessnodelist: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="elementgetelementsbytagnamenomatch.xml" fleur="elementgetelementsbytagnamenomatch" native="elementgetelementsbytagnamenomatch"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("noMatch");
		if (elementList.length !== 0) {
			return "elementGetElementsByTagName: #elementGetElementsByTagNameNoMatchNoMatchAssert 'elementList.length' equals " + elementList.length + " not 0";
		}
		return "elementGetElementsByTagName: OK";
	} catch (e) {
		return "elementGetElementsByTagName: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("noMatch");
		if (elementList.length !== 0) {
			return "elementGetElementsByTagName: #elementGetElementsByTagNameNoMatchNoMatchAssert 'elementList.length' equals " + elementList.length + " not 0";
		}
		return "elementGetElementsByTagName: OK";
	} catch (e) {
		return "elementGetElementsByTagName: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="elementgetelementsbytagnamespecialvalue.xml" fleur="elementgetelementsbytagnamespecialvalue" native="elementgetelementsbytagnamespecialvalue"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var lastEmployee;
		var lastempList;
		var child;
		var childName;
		var result = new Array();

		expectedResult = new Array();
		expectedResult[0] = "employeeId";
		expectedResult[1] = "name";
		expectedResult[2] = "position";
		expectedResult[3] = "salary";
		expectedResult[4] = "gender";
		expectedResult[5] = "address";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		lastEmployee = elementList.item(4);
		lastempList = lastEmployee.getElementsByTagName("*");
		for (var index_id0x0fda01a0 = 0; index_id0x0fda01a0 &lt; lastempList.length; index_id0x0fda01a0++) {
			child = lastempList.item(index_id0x0fda01a0);
			childName = child.nodeName;
result[result.length] = childName;
		}
		if (expectedResult.join("|") !== result.join("|")) {
			return "elementGetElementsByTagNamesSpecialValue: #tagNames 'result' equals '" + result.join("|") + "' not '" + expectedResult.join("|") + "'";
		}
		return "elementGetElementsByTagNamesSpecialValue: OK";
	} catch (e) {
		return "elementGetElementsByTagNamesSpecialValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var lastEmployee;
		var lastempList;
		var child;
		var childName;
		var result = new Array();

		expectedResult = new Array();
		expectedResult[0] = "employeeId";
		expectedResult[1] = "name";
		expectedResult[2] = "position";
		expectedResult[3] = "salary";
		expectedResult[4] = "gender";
		expectedResult[5] = "address";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		lastEmployee = elementList.item(4);
		lastempList = lastEmployee.getElementsByTagName("*");
		for (var index_id0x0fda01a0 = 0; index_id0x0fda01a0 &lt; lastempList.length; index_id0x0fda01a0++) {
			child = lastempList.item(index_id0x0fda01a0);
			childName = child.nodeName;
result[result.length] = childName;
		}
		if (expectedResult.join("|") !== result.join("|")) {
			return "elementGetElementsByTagNamesSpecialValue: #tagNames 'result' equals '" + result.join("|") + "' not '" + expectedResult.join("|") + "'";
		}
		return "elementGetElementsByTagNamesSpecialValue: OK";
	} catch (e) {
		return "elementGetElementsByTagNamesSpecialValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="elementgettagname.xml" fleur="elementgettagname" native="elementgettagname"><Fleur>(function(){
	var success;
	try {
		var doc;
		var root;
		var tagname;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		root = doc.documentElement;
		tagname = root.tagName;
		if (("text/xml" === "image/svg+xml")) {
			if ("svg" !== tagname) {
				return "elementGetTagName: #svgTagName 'tagname' equals '" + tagname + "' not '" + "svg" + "'";
			}
		} else {
			if ("staff" !== tagname) {
				return "elementGetTagName: #elementGetTagNameAssert 'tagname' equals '" + tagname + "' not '" + "staff" + "'";
			}
		}
		return "elementGetTagName: OK";
	} catch (e) {
		return "elementGetTagName: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var root;
		var tagname;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		root = doc.documentElement;
		tagname = root.tagName;
		if (("text/xml" === "image/svg+xml")) {
			if ("svg" !== tagname) {
				return "elementGetTagName: #svgTagName 'tagname' equals '" + tagname + "' not '" + "svg" + "'";
			}
		} else {
			if ("staff" !== tagname) {
				return "elementGetTagName: #elementGetTagNameAssert 'tagname' equals '" + tagname + "' not '" + "staff" + "'";
			}
		}
		return "elementGetTagName: OK";
	} catch (e) {
		return "elementGetTagName: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="elementinuseattributeerr.xml" fleur="elementinuseattributeerr" native="elementinuseattributeerr"><Fleur>(function(){
	var success;
	try {
		var doc;
		var newAttribute;
		var addressElementList;
		var testAddress;
		var newElement;
		var appendedChild;
		var setAttr1;
		var setAttr2;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		addressElementList = doc.getElementsByTagName("address");
		testAddress = addressElementList.item(1);
		newElement = doc.createElement("newElement");
		appendedChild = testAddress.appendChild(newElement);
		newAttribute = doc.createAttribute("newAttribute");
		setAttr1 = newElement.setAttributeNode(newAttribute);
		success = false;
		try {
			setAttr2 = testAddress.setAttributeNode(newAttribute);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 10;
			}
		}
		if (!success) {
			return "elementInUseAttributeErr: Exception INUSE_ATTRIBUTE_ERR expected";
		}
		return "elementInUseAttributeErr: OK";
	} catch (e) {
		return "elementInUseAttributeErr: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var newAttribute;
		var addressElementList;
		var testAddress;
		var newElement;
		var appendedChild;
		var setAttr1;
		var setAttr2;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		addressElementList = doc.getElementsByTagName("address");
		testAddress = addressElementList.item(1);
		newElement = doc.createElement("newElement");
		appendedChild = testAddress.appendChild(newElement);
		newAttribute = doc.createAttribute("newAttribute");
		setAttr1 = newElement.setAttributeNode(newAttribute);
		success = false;
		try {
			setAttr2 = testAddress.setAttributeNode(newAttribute);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 10;
			}
		}
		if (!success) {
			return "elementInUseAttributeErr: Exception INUSE_ATTRIBUTE_ERR expected";
		}
		return "elementInUseAttributeErr: OK";
	} catch (e) {
		return "elementInUseAttributeErr: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="elementinvalidcharacterexception.xml" fleur="elementinvalidcharacterexception" native="elementinvalidcharacterexception"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testAddress;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testAddress = elementList.item(0);
		success = false;
		try {
			testAddress.setAttribute("invalid^Name", "value");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 5;
			}
		}
		if (!success) {
			return "elementInvalidCharacterException: Exception INVALID_CHARACTER_ERR expected";
		}
		return "elementInvalidCharacterException: OK";
	} catch (e) {
		return "elementInvalidCharacterException: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testAddress;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testAddress = elementList.item(0);
		success = false;
		try {
			testAddress.setAttribute("invalid^Name", "value");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 5;
			}
		}
		if (!success) {
			return "elementInvalidCharacterException: Exception INVALID_CHARACTER_ERR expected";
		}
		return "elementInvalidCharacterException: OK";
	} catch (e) {
		return "elementInvalidCharacterException: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="elementnormalize.xml" fleur="elementnormalize" native="elementnormalize"><Fleur>(function(){
	var success;
	try {
		var doc;
		var root;
		var elementList;
		var testName;
		var firstChild;
		var childValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		root = doc.documentElement;
		root.normalize();
		elementList = root.getElementsByTagName("name");
		testName = elementList.item(2);
		firstChild = testName.firstChild;
		childValue = firstChild.nodeValue;
		if ("Roger\n Jones" !== childValue) {
			return "elementNormalize: #elementNormalizeAssert 'childValue' equals '" + childValue + "' not '" + "Roger\n Jones" + "'";
		}
		return "elementNormalize: OK";
	} catch (e) {
		return "elementNormalize: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var root;
		var elementList;
		var testName;
		var firstChild;
		var childValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		root = doc.documentElement;
		root.normalize();
		elementList = root.getElementsByTagName("name");
		testName = elementList.item(2);
		firstChild = testName.firstChild;
		childValue = firstChild.nodeValue;
		if ("Roger\n Jones" !== childValue) {
			return "elementNormalize: #elementNormalizeAssert 'childValue' equals '" + childValue + "' not '" + "Roger\n Jones" + "'";
		}
		return "elementNormalize: OK";
	} catch (e) {
		return "elementNormalize: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="elementnotfounderr.xml" fleur="elementnotfounderr" native="elementnotfounderr"><Fleur>(function(){
	var success;
	try {
		var doc;
		var oldAttribute;
		var addressElementList;
		var testAddress;
		var attrAddress;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		addressElementList = doc.getElementsByTagName("address");
		testAddress = addressElementList.item(4);
		oldAttribute = doc.createAttribute("oldAttribute");
		success = false;
		try {
			attrAddress = testAddress.removeAttributeNode(oldAttribute);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 8;
			}
		}
		if (!success) {
			return "elementNotFoundErr: Exception NOT_FOUND_ERR expected";
		}
		return "elementNotFoundErr: OK";
	} catch (e) {
		return "elementNotFoundErr: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var oldAttribute;
		var addressElementList;
		var testAddress;
		var attrAddress;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		addressElementList = doc.getElementsByTagName("address");
		testAddress = addressElementList.item(4);
		oldAttribute = doc.createAttribute("oldAttribute");
		success = false;
		try {
			attrAddress = testAddress.removeAttributeNode(oldAttribute);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 8;
			}
		}
		if (!success) {
			return "elementNotFoundErr: Exception NOT_FOUND_ERR expected";
		}
		return "elementNotFoundErr: OK";
	} catch (e) {
		return "elementNotFoundErr: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="elementremoveattribute.xml" fleur="elementremoveattribute" native="elementremoveattribute"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var attrValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testEmployee = elementList.item(3);
		testEmployee.removeAttribute("street");
		attrValue = testEmployee.getAttribute("street");
		if ("Yes" !== attrValue) {
			return "elementRemoveAttribute: #streetYes 'attrValue' equals '" + attrValue + "' not '" + "Yes" + "'";
		}
		return "elementRemoveAttribute: OK";
	} catch (e) {
		return "elementRemoveAttribute: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var attrValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testEmployee = elementList.item(3);
		testEmployee.removeAttribute("street");
		attrValue = testEmployee.getAttribute("street");
		if ("Yes" !== attrValue) {
			return "elementRemoveAttribute: #streetYes 'attrValue' equals '" + attrValue + "' not '" + "Yes" + "'";
		}
		return "elementRemoveAttribute: OK";
	} catch (e) {
		return "elementRemoveAttribute: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="elementremoveattributeaftercreate.xml" fleur="elementremoveattributeaftercreate" native="elementremoveattributeaftercreate"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var newAttribute;
		var attributes;
		var districtAttr;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testEmployee = elementList.item(2);
		newAttribute = doc.createAttribute("district");
		districtAttr = testEmployee.setAttributeNode(newAttribute);
		districtAttr = testEmployee.removeAttributeNode(newAttribute);
		attributes = testEmployee.attributes;
		districtAttr = attributes.getNamedItem("district");
		if (districtAttr != null) {
			return "elementRemoveAttributeAfterCreate: #elementRemoveAttributeAfterCreateAssert 'districtAttr' equals '" + districtAttr + "' not null";
		}
		return "elementRemoveAttributeAfterCreate: OK";
	} catch (e) {
		return "elementRemoveAttributeAfterCreate: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var newAttribute;
		var attributes;
		var districtAttr;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testEmployee = elementList.item(2);
		newAttribute = doc.createAttribute("district");
		districtAttr = testEmployee.setAttributeNode(newAttribute);
		districtAttr = testEmployee.removeAttributeNode(newAttribute);
		attributes = testEmployee.attributes;
		districtAttr = attributes.getNamedItem("district");
		if (districtAttr != null) {
			return "elementRemoveAttributeAfterCreate: #elementRemoveAttributeAfterCreateAssert 'districtAttr' equals '" + districtAttr + "' not null";
		}
		return "elementRemoveAttributeAfterCreate: OK";
	} catch (e) {
		return "elementRemoveAttributeAfterCreate: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="elementremoveattributenode.xml" fleur="elementremoveattributenode" native="elementremoveattributenode"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var streetAttr;
		var removedAttr;
		var removedValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testEmployee = elementList.item(2);
		streetAttr = testEmployee.getAttributeNode("street");
		removedAttr = testEmployee.removeAttributeNode(streetAttr);
		removedValue = removedAttr.value;
		if ("No" !== removedValue) {
			return "elementRemoveAttributeNode: #elementRemoveAttributeNodeAssert 'removedValue' equals '" + removedValue + "' not '" + "No" + "'";
		}
		return "elementRemoveAttributeNode: OK";
	} catch (e) {
		return "elementRemoveAttributeNode: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var streetAttr;
		var removedAttr;
		var removedValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testEmployee = elementList.item(2);
		streetAttr = testEmployee.getAttributeNode("street");
		removedAttr = testEmployee.removeAttributeNode(streetAttr);
		removedValue = removedAttr.value;
		if ("No" !== removedValue) {
			return "elementRemoveAttributeNode: #elementRemoveAttributeNodeAssert 'removedValue' equals '" + removedValue + "' not '" + "No" + "'";
		}
		return "elementRemoveAttributeNode: OK";
	} catch (e) {
		return "elementRemoveAttributeNode: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="elementremoveattributenodenomodificationallowederr.xml" fleur="elementremoveattributenodenomodificationallowederr" native="elementremoveattributenodenomodificationallowederr"><Fleur>(function(){
	var success;
	try {
		var doc;
		var genderList;
		var gender;
		var genList;
		var gen;
		var nodeType;
		var gList;
		var genElement;
		var attrList;
		var attrNode;
		var removedAttr;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		genderList = doc.getElementsByTagName("gender");
		gender = genderList.item(2);
		genList = gender.childNodes;
		gen = genList.item(0);
		if (gen == null) {
			return "elementRemoveAttributeNodeNoModificationAllowedErr: #genNotNull 'gen' is null";
		}
		nodeType = gen.nodeType;
		if ((1 == nodeType)) {
			gen = doc.createEntityReference("ent4");
			if (gen == null) {
				return "elementRemoveAttributeNodeNoModificationAllowedErr: #createdEntRefNotNull 'gen' is null";
			}
		}
		gList = gen.childNodes;
		genElement = gList.item(0);
		if (genElement == null) {
			return "elementRemoveAttributeNodeNoModificationAllowedErr: #genElementNotNull 'genElement' is null";
		}
		attrList = genElement.attributes;
		attrNode = attrList.getNamedItem("domestic");
		success = false;
		try {
			removedAttr = genElement.removeAttributeNode(attrNode);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "elementRemoveAttributeNodeNoModificationAllowedErr: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "elementRemoveAttributeNodeNoModificationAllowedErr: OK";
	} catch (e) {
		return "elementRemoveAttributeNodeNoModificationAllowedErr: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var genderList;
		var gender;
		var genList;
		var gen;
		var nodeType;
		var gList;
		var genElement;
		var attrList;
		var attrNode;
		var removedAttr;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		genderList = doc.getElementsByTagName("gender");
		gender = genderList.item(2);
		genList = gender.childNodes;
		gen = genList.item(0);
		if (gen == null) {
			return "elementRemoveAttributeNodeNoModificationAllowedErr: #genNotNull 'gen' is null";
		}
		nodeType = gen.nodeType;
		if ((1 == nodeType)) {
			gen = doc.createEntityReference("ent4");
			if (gen == null) {
				return "elementRemoveAttributeNodeNoModificationAllowedErr: #createdEntRefNotNull 'gen' is null";
			}
		}
		gList = gen.childNodes;
		genElement = gList.item(0);
		if (genElement == null) {
			return "elementRemoveAttributeNodeNoModificationAllowedErr: #genElementNotNull 'genElement' is null";
		}
		attrList = genElement.attributes;
		attrNode = attrList.getNamedItem("domestic");
		success = false;
		try {
			removedAttr = genElement.removeAttributeNode(attrNode);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "elementRemoveAttributeNodeNoModificationAllowedErr: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "elementRemoveAttributeNodeNoModificationAllowedErr: OK";
	} catch (e) {
		return "elementRemoveAttributeNodeNoModificationAllowedErr: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="elementremoveattributenodenomodificationallowederrEE.xml" fleur="elementremoveattributenodenomodificationallowederrEE" native="elementremoveattributenodenomodificationallowederrEE"><Fleur>(function(){
	var success;
	try {
		var doc;
		var genderList;
		var gender;
		var entRef;
		var entElement;
		var attrList;
		var attrNode;
		var nodeType;
		var removedAttr;
		var appendedChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		genderList = doc.getElementsByTagName("gender");
		gender = genderList.item(2);
		entRef = doc.createEntityReference("ent4");
		if (entRef == null) {
			return "elementRemoveAttributeNodeNoModificationAllowedErrEE: #createdEntRefNotNull 'entRef' is null";
		}
		appendedChild = gender.appendChild(entRef);
		entElement = entRef.firstChild;
		if (entElement == null) {
			return "elementRemoveAttributeNodeNoModificationAllowedErrEE: #entElementNotNull 'entElement' is null";
		}
		attrList = entElement.attributes;
		attrNode = attrList.getNamedItem("domestic");
		if (attrNode == null) {
			return "elementRemoveAttributeNodeNoModificationAllowedErrEE: #attrNodeNotNull 'attrNode' is null";
		}
		success = false;
		try {
			removedAttr = entElement.removeAttributeNode(attrNode);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "elementRemoveAttributeNodeNoModificationAllowedErrEE: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "elementRemoveAttributeNodeNoModificationAllowedErrEE: OK";
	} catch (e) {
		return "elementRemoveAttributeNodeNoModificationAllowedErrEE: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var genderList;
		var gender;
		var entRef;
		var entElement;
		var attrList;
		var attrNode;
		var nodeType;
		var removedAttr;
		var appendedChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		genderList = doc.getElementsByTagName("gender");
		gender = genderList.item(2);
		entRef = doc.createEntityReference("ent4");
		if (entRef == null) {
			return "elementRemoveAttributeNodeNoModificationAllowedErrEE: #createdEntRefNotNull 'entRef' is null";
		}
		appendedChild = gender.appendChild(entRef);
		entElement = entRef.firstChild;
		if (entElement == null) {
			return "elementRemoveAttributeNodeNoModificationAllowedErrEE: #entElementNotNull 'entElement' is null";
		}
		attrList = entElement.attributes;
		attrNode = attrList.getNamedItem("domestic");
		if (attrNode == null) {
			return "elementRemoveAttributeNodeNoModificationAllowedErrEE: #attrNodeNotNull 'attrNode' is null";
		}
		success = false;
		try {
			removedAttr = entElement.removeAttributeNode(attrNode);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "elementRemoveAttributeNodeNoModificationAllowedErrEE: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "elementRemoveAttributeNodeNoModificationAllowedErrEE: OK";
	} catch (e) {
		return "elementRemoveAttributeNodeNoModificationAllowedErrEE: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="elementremoveattributenomodificationallowederr.xml" fleur="elementremoveattributenomodificationallowederr" native="elementremoveattributenomodificationallowederr"><Fleur>(function(){
	var success;
	try {
		var doc;
		var genderList;
		var gender;
		var genList;
		var gen;
		var gList;
		var nodeType;
		var genElement;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		genderList = doc.getElementsByTagName("gender");
		gender = genderList.item(2);
		genList = gender.childNodes;
		gen = genList.item(0);
		if (gen == null) {
			return "elementRemoveAttributeNoModificationAllowedErr: #genNotNull 'gen' is null";
		}
		nodeType = gen.nodeType;
		if ((1 == nodeType)) {
			gen = doc.createEntityReference("ent4");
			if (gen == null) {
				return "elementRemoveAttributeNoModificationAllowedErr: #createdEntRefNotNull 'gen' is null";
			}
		}
		gList = gen.childNodes;
		genElement = gList.item(0);
		if (genElement == null) {
			return "elementRemoveAttributeNoModificationAllowedErr: #genElementNotNull 'genElement' is null";
		}
		success = false;
		try {
			genElement.removeAttribute("domestic");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "elementRemoveAttributeNoModificationAllowedErr: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "elementRemoveAttributeNoModificationAllowedErr: OK";
	} catch (e) {
		return "elementRemoveAttributeNoModificationAllowedErr: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var genderList;
		var gender;
		var genList;
		var gen;
		var gList;
		var nodeType;
		var genElement;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		genderList = doc.getElementsByTagName("gender");
		gender = genderList.item(2);
		genList = gender.childNodes;
		gen = genList.item(0);
		if (gen == null) {
			return "elementRemoveAttributeNoModificationAllowedErr: #genNotNull 'gen' is null";
		}
		nodeType = gen.nodeType;
		if ((1 == nodeType)) {
			gen = doc.createEntityReference("ent4");
			if (gen == null) {
				return "elementRemoveAttributeNoModificationAllowedErr: #createdEntRefNotNull 'gen' is null";
			}
		}
		gList = gen.childNodes;
		genElement = gList.item(0);
		if (genElement == null) {
			return "elementRemoveAttributeNoModificationAllowedErr: #genElementNotNull 'genElement' is null";
		}
		success = false;
		try {
			genElement.removeAttribute("domestic");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "elementRemoveAttributeNoModificationAllowedErr: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "elementRemoveAttributeNoModificationAllowedErr: OK";
	} catch (e) {
		return "elementRemoveAttributeNoModificationAllowedErr: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="elementremoveattributenomodificationallowederrEE.xml" fleur="elementremoveattributenomodificationallowederrEE" native="elementremoveattributenomodificationallowederrEE"><Fleur>(function(){
	var success;
	try {
		var doc;
		var genderList;
		var gender;
		var entRef;
		var entElement;
		var appendedChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		genderList = doc.getElementsByTagName("gender");
		gender = genderList.item(2);
		entRef = doc.createEntityReference("ent4");
		if (entRef == null) {
			return "elementRemoveAttributeNoModificationAllowedErrEE: #createdEntRefNotNull 'entRef' is null";
		}
		appendedChild = gender.appendChild(entRef);
		entElement = entRef.firstChild;
		if (entElement == null) {
			return "elementRemoveAttributeNoModificationAllowedErrEE: #entElementNotNull 'entElement' is null";
		}
		success = false;
		try {
			entElement.removeAttribute("domestic");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "elementRemoveAttributeNoModificationAllowedErrEE: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "elementRemoveAttributeNoModificationAllowedErrEE: OK";
	} catch (e) {
		return "elementRemoveAttributeNoModificationAllowedErrEE: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var genderList;
		var gender;
		var entRef;
		var entElement;
		var appendedChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		genderList = doc.getElementsByTagName("gender");
		gender = genderList.item(2);
		entRef = doc.createEntityReference("ent4");
		if (entRef == null) {
			return "elementRemoveAttributeNoModificationAllowedErrEE: #createdEntRefNotNull 'entRef' is null";
		}
		appendedChild = gender.appendChild(entRef);
		entElement = entRef.firstChild;
		if (entElement == null) {
			return "elementRemoveAttributeNoModificationAllowedErrEE: #entElementNotNull 'entElement' is null";
		}
		success = false;
		try {
			entElement.removeAttribute("domestic");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "elementRemoveAttributeNoModificationAllowedErrEE: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "elementRemoveAttributeNoModificationAllowedErrEE: OK";
	} catch (e) {
		return "elementRemoveAttributeNoModificationAllowedErrEE: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="elementremoveattributerestoredefaultvalue.xml" fleur="elementremoveattributerestoredefaultvalue" native="elementremoveattributerestoredefaultvalue"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var streetAttr;
		var attribute;
		var removedAttr;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testEmployee = elementList.item(2);
		streetAttr = testEmployee.getAttributeNode("street");
		removedAttr = testEmployee.removeAttributeNode(streetAttr);
		attribute = testEmployee.getAttribute("street");
		if ("Yes" !== attribute) {
			return "elementRemoveAttributeRestoreDefaultValue: #streetYes 'attribute' equals '" + attribute + "' not '" + "Yes" + "'";
		}
		return "elementRemoveAttributeRestoreDefaultValue: OK";
	} catch (e) {
		return "elementRemoveAttributeRestoreDefaultValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var streetAttr;
		var attribute;
		var removedAttr;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testEmployee = elementList.item(2);
		streetAttr = testEmployee.getAttributeNode("street");
		removedAttr = testEmployee.removeAttributeNode(streetAttr);
		attribute = testEmployee.getAttribute("street");
		if ("Yes" !== attribute) {
			return "elementRemoveAttributeRestoreDefaultValue: #streetYes 'attribute' equals '" + attribute + "' not '" + "Yes" + "'";
		}
		return "elementRemoveAttributeRestoreDefaultValue: OK";
	} catch (e) {
		return "elementRemoveAttributeRestoreDefaultValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="elementreplaceattributewithself.xml" fleur="elementreplaceattributewithself" native="elementreplaceattributewithself"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var streetAttr;
		var replacedAttr;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testEmployee = elementList.item(2);
		streetAttr = testEmployee.getAttributeNode("street");
		replacedAttr = testEmployee.setAttributeNode(streetAttr);
		assertSame("replacedAttr",streetAttr,replacedAttr);
		return "elementReplaceAttributeWithSelf: OK";
	} catch (e) {
		return "elementReplaceAttributeWithSelf: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var streetAttr;
		var replacedAttr;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testEmployee = elementList.item(2);
		streetAttr = testEmployee.getAttributeNode("street");
		replacedAttr = testEmployee.setAttributeNode(streetAttr);
		assertSame("replacedAttr",streetAttr,replacedAttr);
		return "elementReplaceAttributeWithSelf: OK";
	} catch (e) {
		return "elementReplaceAttributeWithSelf: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="elementreplaceexistingattribute.xml" fleur="elementreplaceexistingattribute" native="elementreplaceexistingattribute"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var newAttribute;
		var name;
		var setAttr;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testEmployee = elementList.item(2);
		newAttribute = doc.createAttribute("street");
		setAttr = testEmployee.setAttributeNode(newAttribute);
		name = testEmployee.getAttribute("street");
		if ("" !== name) {
			return "elementReplaceExistingAttribute: #elementReplaceExistingAttributeAssert 'name' equals '" + name + "' not '" + "" + "'";
		}
		return "elementReplaceExistingAttribute: OK";
	} catch (e) {
		return "elementReplaceExistingAttribute: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var newAttribute;
		var name;
		var setAttr;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testEmployee = elementList.item(2);
		newAttribute = doc.createAttribute("street");
		setAttr = testEmployee.setAttributeNode(newAttribute);
		name = testEmployee.getAttribute("street");
		if ("" !== name) {
			return "elementReplaceExistingAttribute: #elementReplaceExistingAttributeAssert 'name' equals '" + name + "' not '" + "" + "'";
		}
		return "elementReplaceExistingAttribute: OK";
	} catch (e) {
		return "elementReplaceExistingAttribute: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="elementreplaceexistingattributegevalue.xml" fleur="elementreplaceexistingattributegevalue" native="elementreplaceexistingattributegevalue"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var newAttribute;
		var streetAttr;
		var value;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testEmployee = elementList.item(2);
		newAttribute = doc.createAttribute("street");
		streetAttr = testEmployee.setAttributeNode(newAttribute);
		value = streetAttr.value;
		if ("No" !== value) {
			return "elementReplaceExistingAttributeGeValue: #streetNo 'value' equals '" + value + "' not '" + "No" + "'";
		}
		return "elementReplaceExistingAttributeGeValue: OK";
	} catch (e) {
		return "elementReplaceExistingAttributeGeValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var newAttribute;
		var streetAttr;
		var value;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testEmployee = elementList.item(2);
		newAttribute = doc.createAttribute("street");
		streetAttr = testEmployee.setAttributeNode(newAttribute);
		value = streetAttr.value;
		if ("No" !== value) {
			return "elementReplaceExistingAttributeGeValue: #streetNo 'value' equals '" + value + "' not '" + "No" + "'";
		}
		return "elementReplaceExistingAttributeGeValue: OK";
	} catch (e) {
		return "elementReplaceExistingAttributeGeValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="elementretrieveallattributes.xml" fleur="elementretrieveallattributes" native="elementretrieveallattributes"><Fleur>(function(){
	var success;
	try {
		var doc;
		var addressList;
		var testAddress;
		var attributes;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		addressList = doc.getElementsByTagName("address");
		testAddress = addressList.item(0);
		attributes = testAddress.attributes;
		if (attributes.length !== 2) {
			return "elementRetrieveAllAttributes: #elementRetrieveAllAttributesAssert 'attributes.length' equals " + attributes.length + " not 2";
		}
		return "elementRetrieveAllAttributes: OK";
	} catch (e) {
		return "elementRetrieveAllAttributes: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var addressList;
		var testAddress;
		var attributes;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		addressList = doc.getElementsByTagName("address");
		testAddress = addressList.item(0);
		attributes = testAddress.attributes;
		if (attributes.length !== 2) {
			return "elementRetrieveAllAttributes: #elementRetrieveAllAttributesAssert 'attributes.length' equals " + attributes.length + " not 2";
		}
		return "elementRetrieveAllAttributes: OK";
	} catch (e) {
		return "elementRetrieveAllAttributes: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="elementretrieveattrvalue.xml" fleur="elementretrieveattrvalue" native="elementretrieveattrvalue"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testAddress;
		var attrValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testAddress = elementList.item(2);
		attrValue = testAddress.getAttribute("street");
		if ("No" !== attrValue) {
			return "elementRetrieveAttrValue: #attrValue 'attrValue' equals '" + attrValue + "' not '" + "No" + "'";
		}
		return "elementRetrieveAttrValue: OK";
	} catch (e) {
		return "elementRetrieveAttrValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testAddress;
		var attrValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testAddress = elementList.item(2);
		attrValue = testAddress.getAttribute("street");
		if ("No" !== attrValue) {
			return "elementRetrieveAttrValue: #attrValue 'attrValue' equals '" + attrValue + "' not '" + "No" + "'";
		}
		return "elementRetrieveAttrValue: OK";
	} catch (e) {
		return "elementRetrieveAttrValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="elementretrievetagname.xml" fleur="elementretrievetagname" native="elementretrievetagname"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var name;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("position");
		testEmployee = elementList.item(1);
		name = testEmployee.nodeName;
		if ("position" !== name) {
			return "elementRetrieveTagName: #nodename 'name' equals '" + name + "' not '" + "position" + "'";
		}
		name = testEmployee.tagName;
		if ("position" !== name) {
			return "elementRetrieveTagName: #tagname 'name' equals '" + name + "' not '" + "position" + "'";
		}
		return "elementRetrieveTagName: OK";
	} catch (e) {
		return "elementRetrieveTagName: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var name;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("position");
		testEmployee = elementList.item(1);
		name = testEmployee.nodeName;
		if ("position" !== name) {
			return "elementRetrieveTagName: #nodename 'name' equals '" + name + "' not '" + "position" + "'";
		}
		name = testEmployee.tagName;
		if ("position" !== name) {
			return "elementRetrieveTagName: #tagname 'name' equals '" + name + "' not '" + "position" + "'";
		}
		return "elementRetrieveTagName: OK";
	} catch (e) {
		return "elementRetrieveTagName: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="elementsetattributenodenomodificationallowederr.xml" fleur="elementsetattributenodenomodificationallowederr" native="elementsetattributenodenomodificationallowederr"><Fleur>(function(){
	var success;
	try {
		var doc;
		var genderList;
		var gender;
		var entRef;
		var entElement;
		var newAttr;
		var nodeType;
		var badAttr;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		genderList = doc.getElementsByTagName("gender");
		gender = genderList.item(2);
		entRef = gender.firstChild;
		if (entRef == null) {
			return "elementSetAttributeNodeNoModificationAllowedErr: #entRefNotNull 'entRef' is null";
		}
		nodeType = entRef.nodeType;
		if ((1 == nodeType)) {
			entRef = doc.createEntityReference("ent4");
			if (entRef == null) {
				return "elementSetAttributeNodeNoModificationAllowedErr: #createdEntRefNotNull 'entRef' is null";
			}
		}
		entElement = entRef.firstChild;
		if (entElement == null) {
			return "elementSetAttributeNodeNoModificationAllowedErr: #entElementNotNull 'entElement' is null";
		}
		newAttr = doc.createAttribute("newAttr");
		success = false;
		try {
			badAttr = entElement.setAttributeNode(newAttr);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "elementSetAttributeNodeNoModificationAllowedErr: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "elementSetAttributeNodeNoModificationAllowedErr: OK";
	} catch (e) {
		return "elementSetAttributeNodeNoModificationAllowedErr: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var genderList;
		var gender;
		var entRef;
		var entElement;
		var newAttr;
		var nodeType;
		var badAttr;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		genderList = doc.getElementsByTagName("gender");
		gender = genderList.item(2);
		entRef = gender.firstChild;
		if (entRef == null) {
			return "elementSetAttributeNodeNoModificationAllowedErr: #entRefNotNull 'entRef' is null";
		}
		nodeType = entRef.nodeType;
		if ((1 == nodeType)) {
			entRef = doc.createEntityReference("ent4");
			if (entRef == null) {
				return "elementSetAttributeNodeNoModificationAllowedErr: #createdEntRefNotNull 'entRef' is null";
			}
		}
		entElement = entRef.firstChild;
		if (entElement == null) {
			return "elementSetAttributeNodeNoModificationAllowedErr: #entElementNotNull 'entElement' is null";
		}
		newAttr = doc.createAttribute("newAttr");
		success = false;
		try {
			badAttr = entElement.setAttributeNode(newAttr);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "elementSetAttributeNodeNoModificationAllowedErr: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "elementSetAttributeNodeNoModificationAllowedErr: OK";
	} catch (e) {
		return "elementSetAttributeNodeNoModificationAllowedErr: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="elementsetattributenodenomodificationallowederrEE.xml" fleur="elementsetattributenodenomodificationallowederrEE" native="elementsetattributenodenomodificationallowederrEE"><Fleur>(function(){
	var success;
	try {
		var doc;
		var genderList;
		var gender;
		var entRef;
		var entElement;
		var newAttr;
		var badAttr;
		var appendedChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		genderList = doc.getElementsByTagName("gender");
		gender = genderList.item(2);
		entRef = doc.createEntityReference("ent4");
		if (entRef == null) {
			return "elementsetattributenodenomodificationallowederree: #createdEntRefNotNull 'entRef' is null";
		}
		appendedChild = gender.appendChild(entRef);
		entElement = entRef.firstChild;
		if (entElement == null) {
			return "elementsetattributenodenomodificationallowederree: #entElementNotNull 'entElement' is null";
		}
		newAttr = doc.createAttribute("newAttr");
		success = false;
		try {
			badAttr = entElement.setAttributeNode(newAttr);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "elementsetattributenodenomodificationallowederree: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "elementsetattributenodenomodificationallowederree: OK";
	} catch (e) {
		return "elementsetattributenodenomodificationallowederree: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var genderList;
		var gender;
		var entRef;
		var entElement;
		var newAttr;
		var badAttr;
		var appendedChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		genderList = doc.getElementsByTagName("gender");
		gender = genderList.item(2);
		entRef = doc.createEntityReference("ent4");
		if (entRef == null) {
			return "elementsetattributenodenomodificationallowederree: #createdEntRefNotNull 'entRef' is null";
		}
		appendedChild = gender.appendChild(entRef);
		entElement = entRef.firstChild;
		if (entElement == null) {
			return "elementsetattributenodenomodificationallowederree: #entElementNotNull 'entElement' is null";
		}
		newAttr = doc.createAttribute("newAttr");
		success = false;
		try {
			badAttr = entElement.setAttributeNode(newAttr);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "elementsetattributenodenomodificationallowederree: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "elementsetattributenodenomodificationallowederree: OK";
	} catch (e) {
		return "elementsetattributenodenomodificationallowederree: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="elementsetattributenodenull.xml" fleur="elementsetattributenodenull" native="elementsetattributenodenull"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var newAttribute;
		var districtAttr;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testEmployee = elementList.item(2);
		newAttribute = doc.createAttribute("district");
		districtAttr = testEmployee.setAttributeNode(newAttribute);
		if (districtAttr != null) {
			return "elementSetAttributeNodeNull: #elementSetAttributeNodeNullAssert 'districtAttr' equals '" + districtAttr + "' not null";
		}
		return "elementSetAttributeNodeNull: OK";
	} catch (e) {
		return "elementSetAttributeNodeNull: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var newAttribute;
		var districtAttr;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testEmployee = elementList.item(2);
		newAttribute = doc.createAttribute("district");
		districtAttr = testEmployee.setAttributeNode(newAttribute);
		if (districtAttr != null) {
			return "elementSetAttributeNodeNull: #elementSetAttributeNodeNullAssert 'districtAttr' equals '" + districtAttr + "' not null";
		}
		return "elementSetAttributeNodeNull: OK";
	} catch (e) {
		return "elementSetAttributeNodeNull: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="elementsetattributenomodificationallowederr.xml" fleur="elementsetattributenomodificationallowederr" native="elementsetattributenomodificationallowederr"><Fleur>(function(){
	var success;
	try {
		var doc;
		var genderList;
		var gender;
		var entRef;
		var entElement;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		genderList = doc.getElementsByTagName("gender");
		gender = genderList.item(2);
		entRef = gender.firstChild;
		if (entRef == null) {
			return "elementSetAttributeNoModificationAllowedErr: #entRefNotNull 'entRef' is null";
		}
		entElement = entRef.firstChild;
		if (entElement == null) {
			return "elementSetAttributeNoModificationAllowedErr: #entElementNotNull 'entElement' is null";
		}
		success = false;
		try {
			entElement.setAttribute("newAttr", "newValue");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "elementSetAttributeNoModificationAllowedErr: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "elementSetAttributeNoModificationAllowedErr: OK";
	} catch (e) {
		return "elementSetAttributeNoModificationAllowedErr: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var genderList;
		var gender;
		var entRef;
		var entElement;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		genderList = doc.getElementsByTagName("gender");
		gender = genderList.item(2);
		entRef = gender.firstChild;
		if (entRef == null) {
			return "elementSetAttributeNoModificationAllowedErr: #entRefNotNull 'entRef' is null";
		}
		entElement = entRef.firstChild;
		if (entElement == null) {
			return "elementSetAttributeNoModificationAllowedErr: #entElementNotNull 'entElement' is null";
		}
		success = false;
		try {
			entElement.setAttribute("newAttr", "newValue");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "elementSetAttributeNoModificationAllowedErr: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "elementSetAttributeNoModificationAllowedErr: OK";
	} catch (e) {
		return "elementSetAttributeNoModificationAllowedErr: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="elementsetattributenomodificationallowederrEE.xml" fleur="elementsetattributenomodificationallowederrEE" native="elementsetattributenomodificationallowederrEE"><Fleur>(function(){
	var success;
	try {
		var doc;
		var genderList;
		var gender;
		var entRef;
		var entElement;
		var appendedChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		genderList = doc.getElementsByTagName("gender");
		gender = genderList.item(2);
		entRef = doc.createEntityReference("ent4");
		appendedChild = gender.appendChild(entRef);
		entElement = entRef.firstChild;
		if (entElement == null) {
			return "elementSetAttributeNoModificationAllowedErrEE: #entElementNotNull 'entElement' is null";
		}
		success = false;
		try {
			entElement.setAttribute("newAttr", "newValue");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "elementSetAttributeNoModificationAllowedErrEE: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "elementSetAttributeNoModificationAllowedErrEE: OK";
	} catch (e) {
		return "elementSetAttributeNoModificationAllowedErrEE: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var genderList;
		var gender;
		var entRef;
		var entElement;
		var appendedChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		genderList = doc.getElementsByTagName("gender");
		gender = genderList.item(2);
		entRef = doc.createEntityReference("ent4");
		appendedChild = gender.appendChild(entRef);
		entElement = entRef.firstChild;
		if (entElement == null) {
			return "elementSetAttributeNoModificationAllowedErrEE: #entElementNotNull 'entElement' is null";
		}
		success = false;
		try {
			entElement.setAttribute("newAttr", "newValue");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "elementSetAttributeNoModificationAllowedErrEE: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "elementSetAttributeNoModificationAllowedErrEE: OK";
	} catch (e) {
		return "elementSetAttributeNoModificationAllowedErrEE: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="elementwrongdocumenterr.xml" fleur="elementwrongdocumenterr" native="elementwrongdocumenterr"><Fleur>(function(){
	var success;
	try {
		var doc1;
		var doc2;
		var newAttribute;
		var addressElementList;
		var testAddress;
		var attrAddress;
		var doc1Req = new XMLHttpRequest();
		doc1Req.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		doc1Req.send();
		doc1 = new Fleur.DOMParser().parseFromString(doc1Req.responseText, "text/xml");
		var doc2Req = new XMLHttpRequest();
		doc2Req.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		doc2Req.send();
		doc2 = new Fleur.DOMParser().parseFromString(doc2Req.responseText, "text/xml");
		newAttribute = doc2.createAttribute("newAttribute");
		addressElementList = doc1.getElementsByTagName("address");
		testAddress = addressElementList.item(4);
		success = false;
		try {
			attrAddress = testAddress.setAttributeNode(newAttribute);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 4;
			}
		}
		if (!success) {
			return "elementWrongDocumentErr: Exception WRONG_DOCUMENT_ERR expected";
		}
		return "elementWrongDocumentErr: OK";
	} catch (e) {
		return "elementWrongDocumentErr: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc1;
		var doc2;
		var newAttribute;
		var addressElementList;
		var testAddress;
		var attrAddress;
		var doc1Req = new XMLHttpRequest();
		doc1Req.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		doc1Req.send();
		doc1 = new DOMParser().parseFromString(doc1Req.responseText, "text/xml");
		var doc2Req = new XMLHttpRequest();
		doc2Req.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		doc2Req.send();
		doc2 = new DOMParser().parseFromString(doc2Req.responseText, "text/xml");
		newAttribute = doc2.createAttribute("newAttribute");
		addressElementList = doc1.getElementsByTagName("address");
		testAddress = addressElementList.item(4);
		success = false;
		try {
			attrAddress = testAddress.setAttributeNode(newAttribute);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 4;
			}
		}
		if (!success) {
			return "elementWrongDocumentErr: Exception WRONG_DOCUMENT_ERR expected";
		}
		return "elementWrongDocumentErr: OK";
	} catch (e) {
		return "elementWrongDocumentErr: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="entitygetentityname.xml" fleur="entitygetentityname" native="entitygetentityname"><Fleur>(function(){
	var success;
	try {
		var doc;
		var docType;
		var entityList;
		var entityNode;
		var entityName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		if (docType == null) {
			return "entityGetEntityName: #docTypeNotNull 'docType' is null";
		}
		entityList = docType.entities;
		if (entityList == null) {
			return "entityGetEntityName: #entitiesNotNull 'entityList' is null";
		}
		entityNode = entityList.getNamedItem("ent1");
		entityName = entityNode.nodeName;
		if ("ent1" !== entityName) {
			return "entityGetEntityName: #entityGetEntityNameAssert 'entityName' equals '" + entityName + "' not '" + "ent1" + "'";
		}
		return "entityGetEntityName: OK";
	} catch (e) {
		return "entityGetEntityName: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var docType;
		var entityList;
		var entityNode;
		var entityName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		if (docType == null) {
			return "entityGetEntityName: #docTypeNotNull 'docType' is null";
		}
		entityList = docType.entities;
		if (entityList == null) {
			return "entityGetEntityName: #entitiesNotNull 'entityList' is null";
		}
		entityNode = entityList.getNamedItem("ent1");
		entityName = entityNode.nodeName;
		if ("ent1" !== entityName) {
			return "entityGetEntityName: #entityGetEntityNameAssert 'entityName' equals '" + entityName + "' not '" + "ent1" + "'";
		}
		return "entityGetEntityName: OK";
	} catch (e) {
		return "entityGetEntityName: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="entitygetpublicid.xml" fleur="entitygetpublicid" native="entitygetpublicid"><Fleur>(function(){
	var success;
	try {
		var doc;
		var docType;
		var entityList;
		var entityNode;
		var publicId;
		var systemId;
		var notation;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		if (docType == null) {
			return "entityGetPublicId: #docTypeNotNull 'docType' is null";
		}
		entityList = docType.entities;
		if (entityList == null) {
			return "entityGetPublicId: #entitiesNotNull 'entityList' is null";
		}
		entityNode = entityList.getNamedItem("ent5");
		publicId = entityNode.publicId;
		if ("entityURI" !== publicId) {
			return "entityGetPublicId: #publicId 'publicId' equals '" + publicId + "' not '" + "entityURI" + "'";
		}
		systemId = entityNode.systemId;
		assertURIEquals("systemId",null,null,null,"entityFile",null,null,null,null,systemId);
		notation = entityNode.notationName;
		if ("notation1" !== notation) {
			return "entityGetPublicId: #notation 'notation' equals '" + notation + "' not '" + "notation1" + "'";
		}
		return "entityGetPublicId: OK";
	} catch (e) {
		return "entityGetPublicId: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var docType;
		var entityList;
		var entityNode;
		var publicId;
		var systemId;
		var notation;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		if (docType == null) {
			return "entityGetPublicId: #docTypeNotNull 'docType' is null";
		}
		entityList = docType.entities;
		if (entityList == null) {
			return "entityGetPublicId: #entitiesNotNull 'entityList' is null";
		}
		entityNode = entityList.getNamedItem("ent5");
		publicId = entityNode.publicId;
		if ("entityURI" !== publicId) {
			return "entityGetPublicId: #publicId 'publicId' equals '" + publicId + "' not '" + "entityURI" + "'";
		}
		systemId = entityNode.systemId;
		assertURIEquals("systemId",null,null,null,"entityFile",null,null,null,null,systemId);
		notation = entityNode.notationName;
		if ("notation1" !== notation) {
			return "entityGetPublicId: #notation 'notation' equals '" + notation + "' not '" + "notation1" + "'";
		}
		return "entityGetPublicId: OK";
	} catch (e) {
		return "entityGetPublicId: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="entitygetpublicidnull.xml" fleur="entitygetpublicidnull" native="entitygetpublicidnull"><Fleur>(function(){
	var success;
	try {
		var doc;
		var docType;
		var entityList;
		var entityNode;
		var publicId;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		if (docType == null) {
			return "entityGetPublicIdNull: #docTypeNotNull 'docType' is null";
		}
		entityList = docType.entities;
		if (entityList == null) {
			return "entityGetPublicIdNull: #entitiesNotNull 'entityList' is null";
		}
		entityNode = entityList.getNamedItem("ent1");
		publicId = entityNode.publicId;
		if (publicId != null) {
			return "entityGetPublicIdNull: #entityGetPublicIdNullAssert 'publicId' equals '" + publicId + "' not null";
		}
		return "entityGetPublicIdNull: OK";
	} catch (e) {
		return "entityGetPublicIdNull: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var docType;
		var entityList;
		var entityNode;
		var publicId;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		if (docType == null) {
			return "entityGetPublicIdNull: #docTypeNotNull 'docType' is null";
		}
		entityList = docType.entities;
		if (entityList == null) {
			return "entityGetPublicIdNull: #entitiesNotNull 'entityList' is null";
		}
		entityNode = entityList.getNamedItem("ent1");
		publicId = entityNode.publicId;
		if (publicId != null) {
			return "entityGetPublicIdNull: #entityGetPublicIdNullAssert 'publicId' equals '" + publicId + "' not null";
		}
		return "entityGetPublicIdNull: OK";
	} catch (e) {
		return "entityGetPublicIdNull: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="namednodemapchildnoderange.xml" fleur="namednodemapchildnoderange" native="namednodemapchildnoderange"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var attributes;
		var child;
		var length;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testEmployee = elementList.item(2);
		attributes = testEmployee.attributes;
		length = attributes.length;
		if (2 !== length) {
			return "namednodemapChildNodeRange: #length 'length' equals '" + length + "' not '" + 2 + "'";
		}
		child = attributes.item(0);
		child = attributes.item(1);
		return "namednodemapChildNodeRange: OK";
	} catch (e) {
		return "namednodemapChildNodeRange: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var attributes;
		var child;
		var length;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testEmployee = elementList.item(2);
		attributes = testEmployee.attributes;
		length = attributes.length;
		if (2 !== length) {
			return "namednodemapChildNodeRange: #length 'length' equals '" + length + "' not '" + 2 + "'";
		}
		child = attributes.item(0);
		child = attributes.item(1);
		return "namednodemapChildNodeRange: OK";
	} catch (e) {
		return "namednodemapChildNodeRange: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="namednodemapgetnameditem.xml" fleur="namednodemapgetnameditem" native="namednodemapgetnameditem"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var attributes;
		var domesticAttr;
		var attrName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testEmployee = elementList.item(1);
		attributes = testEmployee.attributes;
		domesticAttr = attributes.getNamedItem("domestic");
		attrName = domesticAttr.nodeName;
		if ("domestic" !== attrName) {
			return "namednodemapGetNamedItem: #namednodemapGetNamedItemAssert 'attrName' equals '" + attrName + "' not '" + "domestic" + "'";
		}
		return "namednodemapGetNamedItem: OK";
	} catch (e) {
		return "namednodemapGetNamedItem: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var attributes;
		var domesticAttr;
		var attrName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testEmployee = elementList.item(1);
		attributes = testEmployee.attributes;
		domesticAttr = attributes.getNamedItem("domestic");
		attrName = domesticAttr.nodeName;
		if ("domestic" !== attrName) {
			return "namednodemapGetNamedItem: #namednodemapGetNamedItemAssert 'attrName' equals '" + attrName + "' not '" + "domestic" + "'";
		}
		return "namednodemapGetNamedItem: OK";
	} catch (e) {
		return "namednodemapGetNamedItem: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="namednodemapinuseattributeerr.xml" fleur="namednodemapinuseattributeerr" native="namednodemapinuseattributeerr"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var firstNode;
		var testNode;
		var attributes;
		var domesticAttr;
		var setAttr;
		var setNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		firstNode = elementList.item(0);
		domesticAttr = doc.createAttribute("domestic");
		domesticAttr.value = "Yes";
		setAttr = firstNode.setAttributeNode(domesticAttr);
		elementList = doc.getElementsByTagName("address");
		testNode = elementList.item(2);
		attributes = testNode.attributes;
		success = false;
		try {
			setNode = attributes.setNamedItem(domesticAttr);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 10;
			}
		}
		if (!success) {
			return "namedNodeMapInUseAttributeErr: Exception INUSE_ATTRIBUTE_ERR expected";
		}
		return "namedNodeMapInUseAttributeErr: OK";
	} catch (e) {
		return "namedNodeMapInUseAttributeErr: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var firstNode;
		var testNode;
		var attributes;
		var domesticAttr;
		var setAttr;
		var setNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		firstNode = elementList.item(0);
		domesticAttr = doc.createAttribute("domestic");
		domesticAttr.value = "Yes";
		setAttr = firstNode.setAttributeNode(domesticAttr);
		elementList = doc.getElementsByTagName("address");
		testNode = elementList.item(2);
		attributes = testNode.attributes;
		success = false;
		try {
			setNode = attributes.setNamedItem(domesticAttr);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 10;
			}
		}
		if (!success) {
			return "namedNodeMapInUseAttributeErr: Exception INUSE_ATTRIBUTE_ERR expected";
		}
		return "namedNodeMapInUseAttributeErr: OK";
	} catch (e) {
		return "namedNodeMapInUseAttributeErr: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="namednodemapnotfounderr.xml" fleur="namednodemapnotfounderr" native="namednodemapnotfounderr"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var attributes;
		var removedNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testEmployee = elementList.item(2);
		attributes = testEmployee.attributes;
		success = false;
		try {
			removedNode = attributes.removeNamedItem("district");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 8;
			}
		}
		if (!success) {
			return "namednodemapNotFoundErr: Exception NOT_FOUND_ERR expected";
		}
		return "namednodemapNotFoundErr: OK";
	} catch (e) {
		return "namednodemapNotFoundErr: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var attributes;
		var removedNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testEmployee = elementList.item(2);
		attributes = testEmployee.attributes;
		success = false;
		try {
			removedNode = attributes.removeNamedItem("district");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 8;
			}
		}
		if (!success) {
			return "namednodemapNotFoundErr: Exception NOT_FOUND_ERR expected";
		}
		return "namednodemapNotFoundErr: OK";
	} catch (e) {
		return "namednodemapNotFoundErr: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="namednodemapnumberofnodes.xml" fleur="namednodemapnumberofnodes" native="namednodemapnumberofnodes"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var attributes;
		var length;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testEmployee = elementList.item(2);
		attributes = testEmployee.attributes;
		length = attributes.length;
		if (2 !== length) {
			return "namednodemapNumberOfNodes: #length 'length' equals '" + length + "' not '" + 2 + "'";
		}
		return "namednodemapNumberOfNodes: OK";
	} catch (e) {
		return "namednodemapNumberOfNodes: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var attributes;
		var length;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testEmployee = elementList.item(2);
		attributes = testEmployee.attributes;
		length = attributes.length;
		if (2 !== length) {
			return "namednodemapNumberOfNodes: #length 'length' equals '" + length + "' not '" + 2 + "'";
		}
		return "namednodemapNumberOfNodes: OK";
	} catch (e) {
		return "namednodemapNumberOfNodes: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="namednodemapremovenameditem.xml" fleur="namednodemapremovenameditem" native="namednodemapremovenameditem"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testAddress;
		var attributes;
		var streetAttr;
		var specified;
		var removedNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testAddress = elementList.item(2);
		attributes = testAddress.attributes;
		if (attributes == null) {
			return "namednodemapRemoveNamedItem: #attributesNotNull 'attributes' is null";
		}
		removedNode = attributes.removeNamedItem("street");
		streetAttr = attributes.getNamedItem("street");
		if (streetAttr == null) {
			return "namednodemapRemoveNamedItem: #streetAttrNotNull 'streetAttr' is null";
		}
		specified = streetAttr.specified;
		if (specified !== false) {
			return "attrNotSpecified: 'specified' equals '" + specified + "' not false";
		}
		return "namednodemapRemoveNamedItem: OK";
	} catch (e) {
		return "namednodemapRemoveNamedItem: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testAddress;
		var attributes;
		var streetAttr;
		var specified;
		var removedNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testAddress = elementList.item(2);
		attributes = testAddress.attributes;
		if (attributes == null) {
			return "namednodemapRemoveNamedItem: #attributesNotNull 'attributes' is null";
		}
		removedNode = attributes.removeNamedItem("street");
		streetAttr = attributes.getNamedItem("street");
		if (streetAttr == null) {
			return "namednodemapRemoveNamedItem: #streetAttrNotNull 'streetAttr' is null";
		}
		specified = streetAttr.specified;
		if (specified !== false) {
			return "attrNotSpecified: 'specified' equals '" + specified + "' not false";
		}
		return "namednodemapRemoveNamedItem: OK";
	} catch (e) {
		return "namednodemapRemoveNamedItem: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="namednodemapremovenameditemgetvalue.xml" fleur="namednodemapremovenameditemgetvalue" native="namednodemapremovenameditemgetvalue"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var attributes;
		var streetAttr;
		var value;
		var removedNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testEmployee = elementList.item(2);
		attributes = testEmployee.attributes;
		if (attributes == null) {
			return "namednodemapRemoveNamedItemGetValue: #attributesNotNull 'attributes' is null";
		}
		removedNode = attributes.removeNamedItem("street");
		streetAttr = attributes.getNamedItem("street");
		if (streetAttr == null) {
			return "namednodemapRemoveNamedItemGetValue: #streetAttrNotNull 'streetAttr' is null";
		}
		value = streetAttr.value;
		if ("Yes" !== value) {
			return "namednodemapRemoveNamedItemGetValue: #namednodemapRemoveNamedItemGetValueAssert 'value' equals '" + value + "' not '" + "Yes" + "'";
		}
		return "namednodemapRemoveNamedItemGetValue: OK";
	} catch (e) {
		return "namednodemapRemoveNamedItemGetValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var attributes;
		var streetAttr;
		var value;
		var removedNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testEmployee = elementList.item(2);
		attributes = testEmployee.attributes;
		if (attributes == null) {
			return "namednodemapRemoveNamedItemGetValue: #attributesNotNull 'attributes' is null";
		}
		removedNode = attributes.removeNamedItem("street");
		streetAttr = attributes.getNamedItem("street");
		if (streetAttr == null) {
			return "namednodemapRemoveNamedItemGetValue: #streetAttrNotNull 'streetAttr' is null";
		}
		value = streetAttr.value;
		if ("Yes" !== value) {
			return "namednodemapRemoveNamedItemGetValue: #namednodemapRemoveNamedItemGetValueAssert 'value' equals '" + value + "' not '" + "Yes" + "'";
		}
		return "namednodemapRemoveNamedItemGetValue: OK";
	} catch (e) {
		return "namednodemapRemoveNamedItemGetValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="namednodemapremovenameditemreturnnodevalue.xml" fleur="namednodemapremovenameditemreturnnodevalue" native="namednodemapremovenameditemreturnnodevalue"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testAddress;
		var attributes;
		var removedNode;
		var value;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testAddress = elementList.item(2);
		attributes = testAddress.attributes;
		removedNode = attributes.removeNamedItem("street");
		value = removedNode.nodeValue;
		if ("No" !== value) {
			return "namednodemapRemoveNamedItemReturnNodeValue: #namednodemapRemoveNamedItemReturnNodeValueAssert 'value' equals '" + value + "' not '" + "No" + "'";
		}
		return "namednodemapRemoveNamedItemReturnNodeValue: OK";
	} catch (e) {
		return "namednodemapRemoveNamedItemReturnNodeValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testAddress;
		var attributes;
		var removedNode;
		var value;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testAddress = elementList.item(2);
		attributes = testAddress.attributes;
		removedNode = attributes.removeNamedItem("street");
		value = removedNode.nodeValue;
		if ("No" !== value) {
			return "namednodemapRemoveNamedItemReturnNodeValue: #namednodemapRemoveNamedItemReturnNodeValueAssert 'value' equals '" + value + "' not '" + "No" + "'";
		}
		return "namednodemapRemoveNamedItemReturnNodeValue: OK";
	} catch (e) {
		return "namednodemapRemoveNamedItemReturnNodeValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="namednodemapreturnattrnode.xml" fleur="namednodemapreturnattrnode" native="namednodemapreturnattrnode"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var attributes;
		var streetAttr;
		var attrName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testEmployee = elementList.item(1);
		attributes = testEmployee.attributes;
		streetAttr = attributes.getNamedItem("street");
		assertInstanceOf("typeAssert","Attr",streetAttr);
		attrName = streetAttr.nodeName;
		if ("street" !== attrName) {
			return "namednodemapReturnAttrNode: #nodeName 'attrName' equals '" + attrName + "' not '" + "street" + "'";
		}
		attrName = streetAttr.name;
		if ("street" !== attrName) {
			return "namednodemapReturnAttrNode: #attrName 'attrName' equals '" + attrName + "' not '" + "street" + "'";
		}
		return "namednodemapReturnAttrNode: OK";
	} catch (e) {
		return "namednodemapReturnAttrNode: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var attributes;
		var streetAttr;
		var attrName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testEmployee = elementList.item(1);
		attributes = testEmployee.attributes;
		streetAttr = attributes.getNamedItem("street");
		assertInstanceOf("typeAssert","Attr",streetAttr);
		attrName = streetAttr.nodeName;
		if ("street" !== attrName) {
			return "namednodemapReturnAttrNode: #nodeName 'attrName' equals '" + attrName + "' not '" + "street" + "'";
		}
		attrName = streetAttr.name;
		if ("street" !== attrName) {
			return "namednodemapReturnAttrNode: #attrName 'attrName' equals '" + attrName + "' not '" + "street" + "'";
		}
		return "namednodemapReturnAttrNode: OK";
	} catch (e) {
		return "namednodemapReturnAttrNode: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="namednodemapreturnfirstitem.xml" fleur="namednodemapreturnfirstitem" native="namednodemapreturnfirstitem"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testAddress;
		var attributes;
		var child;
		var name;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testAddress = elementList.item(1);
		attributes = testAddress.attributes;
		child = attributes.item(0);
		name = child.nodeName;
		if ((("domestic" == name) || ("street" == name)) !== true) {
			return "namednodemapReturnFirstItemAssert: '((~domestic~ == name) || (~street~ == name))' equals '" + (("domestic" == name) || ("street" == name)) + "' not true";
		}
		return "namednodemapReturnFirstItem: OK";
	} catch (e) {
		return "namednodemapReturnFirstItem: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testAddress;
		var attributes;
		var child;
		var name;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testAddress = elementList.item(1);
		attributes = testAddress.attributes;
		child = attributes.item(0);
		name = child.nodeName;
		if ((("domestic" == name) || ("street" == name)) !== true) {
			return "namednodemapReturnFirstItemAssert: '((~domestic~ == name) || (~street~ == name))' equals '" + (("domestic" == name) || ("street" == name)) + "' not true";
		}
		return "namednodemapReturnFirstItem: OK";
	} catch (e) {
		return "namednodemapReturnFirstItem: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="namednodemapreturnlastitem.xml" fleur="namednodemapreturnlastitem" native="namednodemapreturnlastitem"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var attributes;
		var child;
		var name;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testEmployee = elementList.item(1);
		attributes = testEmployee.attributes;
		child = attributes.item(1);
		name = child.nodeName;
		if ((("domestic" == name) || ("street" == name)) !== true) {
			return "namednodemapReturnLastItemAssert: '((~domestic~ == name) || (~street~ == name))' equals '" + (("domestic" == name) || ("street" == name)) + "' not true";
		}
		return "namednodemapReturnLastItem: OK";
	} catch (e) {
		return "namednodemapReturnLastItem: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var attributes;
		var child;
		var name;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testEmployee = elementList.item(1);
		attributes = testEmployee.attributes;
		child = attributes.item(1);
		name = child.nodeName;
		if ((("domestic" == name) || ("street" == name)) !== true) {
			return "namednodemapReturnLastItemAssert: '((~domestic~ == name) || (~street~ == name))' equals '" + (("domestic" == name) || ("street" == name)) + "' not true";
		}
		return "namednodemapReturnLastItem: OK";
	} catch (e) {
		return "namednodemapReturnLastItem: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="namednodemapreturnnull.xml" fleur="namednodemapreturnnull" native="namednodemapreturnnull"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var attributes;
		var districtNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testEmployee = elementList.item(1);
		attributes = testEmployee.attributes;
		districtNode = attributes.getNamedItem("district");
		if (districtNode != null) {
			return "namednodemapReturnNull: #namednodemapReturnNullAssert 'districtNode' equals '" + districtNode + "' not null";
		}
		return "namednodemapReturnNull: OK";
	} catch (e) {
		return "namednodemapReturnNull: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var attributes;
		var districtNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testEmployee = elementList.item(1);
		attributes = testEmployee.attributes;
		districtNode = attributes.getNamedItem("district");
		if (districtNode != null) {
			return "namednodemapReturnNull: #namednodemapReturnNullAssert 'districtNode' equals '" + districtNode + "' not null";
		}
		return "namednodemapReturnNull: OK";
	} catch (e) {
		return "namednodemapReturnNull: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="namednodemapsetnameditem.xml" fleur="namednodemapsetnameditem" native="namednodemapsetnameditem"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var newAttribute;
		var testAddress;
		var attributes;
		var districtNode;
		var attrName;
		var setNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testAddress = elementList.item(1);
		newAttribute = doc.createAttribute("district");
		attributes = testAddress.attributes;
		setNode = attributes.setNamedItem(newAttribute);
		districtNode = attributes.getNamedItem("district");
		attrName = districtNode.nodeName;
		if ("district" !== attrName) {
			return "namednodemapSetNamedItem: #namednodemapSetNamedItemAssert 'attrName' equals '" + attrName + "' not '" + "district" + "'";
		}
		return "namednodemapSetNamedItem: OK";
	} catch (e) {
		return "namednodemapSetNamedItem: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var newAttribute;
		var testAddress;
		var attributes;
		var districtNode;
		var attrName;
		var setNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testAddress = elementList.item(1);
		newAttribute = doc.createAttribute("district");
		attributes = testAddress.attributes;
		setNode = attributes.setNamedItem(newAttribute);
		districtNode = attributes.getNamedItem("district");
		attrName = districtNode.nodeName;
		if ("district" !== attrName) {
			return "namednodemapSetNamedItem: #namednodemapSetNamedItemAssert 'attrName' equals '" + attrName + "' not '" + "district" + "'";
		}
		return "namednodemapSetNamedItem: OK";
	} catch (e) {
		return "namednodemapSetNamedItem: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="namednodemapsetnameditemreturnvalue.xml" fleur="namednodemapsetnameditemreturnvalue" native="namednodemapsetnameditemreturnvalue"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var newAttribute;
		var testAddress;
		var attributes;
		var newNode;
		var attrValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testAddress = elementList.item(2);
		newAttribute = doc.createAttribute("street");
		attributes = testAddress.attributes;
		newNode = attributes.setNamedItem(newAttribute);
		attrValue = newNode.nodeValue;
		if ("No" !== attrValue) {
			return "namednodemapSetNamedItemReturnValue: #returnedNodeValue 'attrValue' equals '" + attrValue + "' not '" + "No" + "'";
		}
		return "namednodemapSetNamedItemReturnValue: OK";
	} catch (e) {
		return "namednodemapSetNamedItemReturnValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var newAttribute;
		var testAddress;
		var attributes;
		var newNode;
		var attrValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testAddress = elementList.item(2);
		newAttribute = doc.createAttribute("street");
		attributes = testAddress.attributes;
		newNode = attributes.setNamedItem(newAttribute);
		attrValue = newNode.nodeValue;
		if ("No" !== attrValue) {
			return "namednodemapSetNamedItemReturnValue: #returnedNodeValue 'attrValue' equals '" + attrValue + "' not '" + "No" + "'";
		}
		return "namednodemapSetNamedItemReturnValue: OK";
	} catch (e) {
		return "namednodemapSetNamedItemReturnValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="namednodemapsetnameditemthatexists.xml" fleur="namednodemapsetnameditemthatexists" native="namednodemapsetnameditemthatexists"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var newAttribute;
		var testAddress;
		var attributes;
		var districtNode;
		var attrValue;
		var setNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testAddress = elementList.item(1);
		newAttribute = doc.createAttribute("street");
		attributes = testAddress.attributes;
		setNode = attributes.setNamedItem(newAttribute);
		districtNode = attributes.getNamedItem("street");
		attrValue = districtNode.nodeValue;
		if ("" !== attrValue) {
			return "namednodemapSetNamedItemThatExists: #streetValue 'attrValue' equals '" + attrValue + "' not '" + "" + "'";
		}
		return "namednodemapSetNamedItemThatExists: OK";
	} catch (e) {
		return "namednodemapSetNamedItemThatExists: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var newAttribute;
		var testAddress;
		var attributes;
		var districtNode;
		var attrValue;
		var setNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testAddress = elementList.item(1);
		newAttribute = doc.createAttribute("street");
		attributes = testAddress.attributes;
		setNode = attributes.setNamedItem(newAttribute);
		districtNode = attributes.getNamedItem("street");
		attrValue = districtNode.nodeValue;
		if ("" !== attrValue) {
			return "namednodemapSetNamedItemThatExists: #streetValue 'attrValue' equals '" + attrValue + "' not '" + "" + "'";
		}
		return "namednodemapSetNamedItemThatExists: OK";
	} catch (e) {
		return "namednodemapSetNamedItemThatExists: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="namednodemapsetnameditemwithnewvalue.xml" fleur="namednodemapsetnameditemwithnewvalue" native="namednodemapsetnameditemwithnewvalue"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var newAttribute;
		var testAddress;
		var attributes;
		var newNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testAddress = elementList.item(2);
		newAttribute = doc.createAttribute("district");
		attributes = testAddress.attributes;
		newNode = attributes.setNamedItem(newAttribute);
		if (newNode != null) {
			return "namednodemapSetNamedItemWithNewValue: #returnedNodeNull 'newNode' equals '" + newNode + "' not null";
		}
		return "namednodemapSetNamedItemWithNewValue: OK";
	} catch (e) {
		return "namednodemapSetNamedItemWithNewValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var newAttribute;
		var testAddress;
		var attributes;
		var newNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testAddress = elementList.item(2);
		newAttribute = doc.createAttribute("district");
		attributes = testAddress.attributes;
		newNode = attributes.setNamedItem(newAttribute);
		if (newNode != null) {
			return "namednodemapSetNamedItemWithNewValue: #returnedNodeNull 'newNode' equals '" + newNode + "' not null";
		}
		return "namednodemapSetNamedItemWithNewValue: OK";
	} catch (e) {
		return "namednodemapSetNamedItemWithNewValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="namednodemapwrongdocumenterr.xml" fleur="namednodemapwrongdocumenterr" native="namednodemapwrongdocumenterr"><Fleur>(function(){
	var success;
	try {
		var doc1;
		var doc2;
		var elementList;
		var testAddress;
		var attributes;
		var newAttribute;
		var setNode;
		var doc1Req = new XMLHttpRequest();
		doc1Req.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		doc1Req.send();
		doc1 = new Fleur.DOMParser().parseFromString(doc1Req.responseText, "text/xml");
		var doc2Req = new XMLHttpRequest();
		doc2Req.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		doc2Req.send();
		doc2 = new Fleur.DOMParser().parseFromString(doc2Req.responseText, "text/xml");
		elementList = doc1.getElementsByTagName("address");
		testAddress = elementList.item(2);
		newAttribute = doc2.createAttribute("newAttribute");
		attributes = testAddress.attributes;
		success = false;
		try {
			setNode = attributes.setNamedItem(newAttribute);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 4;
			}
		}
		if (!success) {
			return "namednodemapWrongDocumentErr: Exception WRONG_DOCUMENT_ERR expected";
		}
		return "namednodemapWrongDocumentErr: OK";
	} catch (e) {
		return "namednodemapWrongDocumentErr: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc1;
		var doc2;
		var elementList;
		var testAddress;
		var attributes;
		var newAttribute;
		var setNode;
		var doc1Req = new XMLHttpRequest();
		doc1Req.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		doc1Req.send();
		doc1 = new DOMParser().parseFromString(doc1Req.responseText, "text/xml");
		var doc2Req = new XMLHttpRequest();
		doc2Req.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		doc2Req.send();
		doc2 = new DOMParser().parseFromString(doc2Req.responseText, "text/xml");
		elementList = doc1.getElementsByTagName("address");
		testAddress = elementList.item(2);
		newAttribute = doc2.createAttribute("newAttribute");
		attributes = testAddress.attributes;
		success = false;
		try {
			setNode = attributes.setNamedItem(newAttribute);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 4;
			}
		}
		if (!success) {
			return "namednodemapWrongDocumentErr: Exception WRONG_DOCUMENT_ERR expected";
		}
		return "namednodemapWrongDocumentErr: OK";
	} catch (e) {
		return "namednodemapWrongDocumentErr: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodeappendchild.xml" fleur="nodeappendchild" native="nodeappendchild"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var childList;
		var createdNode;
		var lchild;
		var childName;
		var appendedChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		employeeNode = elementList.item(1);
		childList = employeeNode.childNodes;
		createdNode = doc.createElement("newChild");
		appendedChild = employeeNode.appendChild(createdNode);
		lchild = employeeNode.lastChild;
		childName = lchild.nodeName;
		if ("newChild" !== childName) {
			return "nodeAppendChild: #nodeAppendChildAssert1 'childName' equals '" + childName + "' not '" + "newChild" + "'";
		}
		return "nodeAppendChild: OK";
	} catch (e) {
		return "nodeAppendChild: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var childList;
		var createdNode;
		var lchild;
		var childName;
		var appendedChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		employeeNode = elementList.item(1);
		childList = employeeNode.childNodes;
		createdNode = doc.createElement("newChild");
		appendedChild = employeeNode.appendChild(createdNode);
		lchild = employeeNode.lastChild;
		childName = lchild.nodeName;
		if ("newChild" !== childName) {
			return "nodeAppendChild: #nodeAppendChildAssert1 'childName' equals '" + childName + "' not '" + "newChild" + "'";
		}
		return "nodeAppendChild: OK";
	} catch (e) {
		return "nodeAppendChild: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodeappendchildchildexists.xml" fleur="nodeappendchildchildexists" native="nodeappendchildchildexists"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var childNode;
		var newChild;
		var lchild;
		var fchild;
		var lchildName;
		var fchildName;
		var appendedChild;
		var initialName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		childNode = elementList.item(1);
		newChild = childNode.firstChild;
		initialName = newChild.nodeName;
		appendedChild = childNode.appendChild(newChild);
		fchild = childNode.firstChild;
		fchildName = fchild.nodeName;
		lchild = childNode.lastChild;
		lchildName = lchild.nodeName;
		if (("employeeId" == initialName)) {
			if ("name" !== fchildName) {
				return "nodeAppendChildChildExists: #assert1_nowhitespace 'fchildName' equals '" + fchildName + "' not '" + "name" + "'";
			}
			if ("employeeId" !== lchildName) {
				return "nodeAppendChildChildExists: #assert2_nowhitespace 'lchildName' equals '" + lchildName + "' not '" + "employeeId" + "'";
			}
		} else {
			if ("employeeId" !== fchildName) {
				return "nodeAppendChildChildExists: #assert1 'fchildName' equals '" + fchildName + "' not '" + "employeeId" + "'";
			}
			if ("#text" !== lchildName) {
				return "nodeAppendChildChildExists: #assert2 'lchildName' equals '" + lchildName + "' not '" + "#text" + "'";
			}
		}
		return "nodeAppendChildChildExists: OK";
	} catch (e) {
		return "nodeAppendChildChildExists: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var childNode;
		var newChild;
		var lchild;
		var fchild;
		var lchildName;
		var fchildName;
		var appendedChild;
		var initialName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		childNode = elementList.item(1);
		newChild = childNode.firstChild;
		initialName = newChild.nodeName;
		appendedChild = childNode.appendChild(newChild);
		fchild = childNode.firstChild;
		fchildName = fchild.nodeName;
		lchild = childNode.lastChild;
		lchildName = lchild.nodeName;
		if (("employeeId" == initialName)) {
			if ("name" !== fchildName) {
				return "nodeAppendChildChildExists: #assert1_nowhitespace 'fchildName' equals '" + fchildName + "' not '" + "name" + "'";
			}
			if ("employeeId" !== lchildName) {
				return "nodeAppendChildChildExists: #assert2_nowhitespace 'lchildName' equals '" + lchildName + "' not '" + "employeeId" + "'";
			}
		} else {
			if ("employeeId" !== fchildName) {
				return "nodeAppendChildChildExists: #assert1 'fchildName' equals '" + fchildName + "' not '" + "employeeId" + "'";
			}
			if ("#text" !== lchildName) {
				return "nodeAppendChildChildExists: #assert2 'lchildName' equals '" + lchildName + "' not '" + "#text" + "'";
			}
		}
		return "nodeAppendChildChildExists: OK";
	} catch (e) {
		return "nodeAppendChildChildExists: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodeappendchilddocfragment.xml" fleur="nodeappendchilddocfragment" native="nodeappendchilddocfragment"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var childList;
		var newdocFragment;
		var newChild1;
		var newChild2;
		var child;
		var childName;
		var result = new Array();

		var nodeType;
		var appendedChild;
		expected = new Array();
		expected[0] = "employeeId";
		expected[1] = "name";
		expected[2] = "position";
		expected[3] = "salary";
		expected[4] = "gender";
		expected[5] = "address";
		expected[6] = "newChild1";
		expected[7] = "newChild2";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		employeeNode = elementList.item(1);
		childList = employeeNode.childNodes;
		newdocFragment = doc.createDocumentFragment();
		newChild1 = doc.createElement("newChild1");
		newChild2 = doc.createElement("newChild2");
		appendedChild = newdocFragment.appendChild(newChild1);
		appendedChild = newdocFragment.appendChild(newChild2);
		appendedChild = employeeNode.appendChild(newdocFragment);
		for (var index_id0x0f7bcf10 = 0; index_id0x0f7bcf10 &lt; childList.length; index_id0x0f7bcf10++) {
			child = childList.item(index_id0x0f7bcf10);
			nodeType = child.nodeType;
			if ((1 == nodeType)) {
				childName = child.nodeName;
result[result.length] = childName;
			}
		}
		if (expected.join("|") !== result.join("|")) {
			return "nodeAppendChildDocFragment: #elementNames 'result' equals '" + result.join("|") + "' not '" + expected.join("|") + "'";
		}
		return "nodeAppendChildDocFragment: OK";
	} catch (e) {
		return "nodeAppendChildDocFragment: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var childList;
		var newdocFragment;
		var newChild1;
		var newChild2;
		var child;
		var childName;
		var result = new Array();

		var nodeType;
		var appendedChild;
		expected = new Array();
		expected[0] = "employeeId";
		expected[1] = "name";
		expected[2] = "position";
		expected[3] = "salary";
		expected[4] = "gender";
		expected[5] = "address";
		expected[6] = "newChild1";
		expected[7] = "newChild2";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		employeeNode = elementList.item(1);
		childList = employeeNode.childNodes;
		newdocFragment = doc.createDocumentFragment();
		newChild1 = doc.createElement("newChild1");
		newChild2 = doc.createElement("newChild2");
		appendedChild = newdocFragment.appendChild(newChild1);
		appendedChild = newdocFragment.appendChild(newChild2);
		appendedChild = employeeNode.appendChild(newdocFragment);
		for (var index_id0x0f7bcf10 = 0; index_id0x0f7bcf10 &lt; childList.length; index_id0x0f7bcf10++) {
			child = childList.item(index_id0x0f7bcf10);
			nodeType = child.nodeType;
			if ((1 == nodeType)) {
				childName = child.nodeName;
result[result.length] = childName;
			}
		}
		if (expected.join("|") !== result.join("|")) {
			return "nodeAppendChildDocFragment: #elementNames 'result' equals '" + result.join("|") + "' not '" + expected.join("|") + "'";
		}
		return "nodeAppendChildDocFragment: OK";
	} catch (e) {
		return "nodeAppendChildDocFragment: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodeappendchildgetnodename.xml" fleur="nodeappendchildgetnodename" native="nodeappendchildgetnodename"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var childList;
		var newChild;
		var appendNode;
		var childName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		employeeNode = elementList.item(1);
		childList = employeeNode.childNodes;
		newChild = doc.createElement("newChild");
		appendNode = employeeNode.appendChild(newChild);
		childName = appendNode.nodeName;
		if ("newChild" !== childName) {
			return "nodeAppendChildGetNodeName: #nodeAppendChildGetNodeNameAssert1 'childName' equals '" + childName + "' not '" + "newChild" + "'";
		}
		return "nodeAppendChildGetNodeName: OK";
	} catch (e) {
		return "nodeAppendChildGetNodeName: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var childList;
		var newChild;
		var appendNode;
		var childName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		employeeNode = elementList.item(1);
		childList = employeeNode.childNodes;
		newChild = doc.createElement("newChild");
		appendNode = employeeNode.appendChild(newChild);
		childName = appendNode.nodeName;
		if ("newChild" !== childName) {
			return "nodeAppendChildGetNodeName: #nodeAppendChildGetNodeNameAssert1 'childName' equals '" + childName + "' not '" + "newChild" + "'";
		}
		return "nodeAppendChildGetNodeName: OK";
	} catch (e) {
		return "nodeAppendChildGetNodeName: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodeappendchildinvalidnodetype.xml" fleur="nodeappendchildinvalidnodetype" native="nodeappendchildinvalidnodetype"><Fleur>(function(){
	var success;
	try {
		var doc;
		var rootNode;
		var newChild;
		var appendedChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		rootNode = doc.documentElement;
		newChild = doc.createAttribute("newAttribute");
		success = false;
		try {
			appendedChild = rootNode.appendChild(newChild);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 3;
			}
		}
		if (!success) {
			return "nodeAppendChildInvalidNodeType: Exception HIERARCHY_REQUEST_ERR expected";
		}
		return "nodeAppendChildInvalidNodeType: OK";
	} catch (e) {
		return "nodeAppendChildInvalidNodeType: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var rootNode;
		var newChild;
		var appendedChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		rootNode = doc.documentElement;
		newChild = doc.createAttribute("newAttribute");
		success = false;
		try {
			appendedChild = rootNode.appendChild(newChild);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 3;
			}
		}
		if (!success) {
			return "nodeAppendChildInvalidNodeType: Exception HIERARCHY_REQUEST_ERR expected";
		}
		return "nodeAppendChildInvalidNodeType: OK";
	} catch (e) {
		return "nodeAppendChildInvalidNodeType: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodeappendchildnewchilddiffdocument.xml" fleur="nodeappendchildnewchilddiffdocument" native="nodeappendchildnewchilddiffdocument"><Fleur>(function(){
	var success;
	try {
		var doc1;
		var doc2;
		var newChild;
		var elementList;
		var elementNode;
		var appendedChild;
		var doc1Req = new XMLHttpRequest();
		doc1Req.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		doc1Req.send();
		doc1 = new Fleur.DOMParser().parseFromString(doc1Req.responseText, "text/xml");
		var doc2Req = new XMLHttpRequest();
		doc2Req.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		doc2Req.send();
		doc2 = new Fleur.DOMParser().parseFromString(doc2Req.responseText, "text/xml");
		newChild = doc1.createElement("newChild");
		elementList = doc2.getElementsByTagName("employee");
		elementNode = elementList.item(1);
		success = false;
		try {
			appendedChild = elementNode.appendChild(newChild);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 4;
			}
		}
		if (!success) {
			return "nodeAppendChildNewChildDiffDocument: Exception WRONG_DOCUMENT_ERR expected";
		}
		return "nodeAppendChildNewChildDiffDocument: OK";
	} catch (e) {
		return "nodeAppendChildNewChildDiffDocument: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc1;
		var doc2;
		var newChild;
		var elementList;
		var elementNode;
		var appendedChild;
		var doc1Req = new XMLHttpRequest();
		doc1Req.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		doc1Req.send();
		doc1 = new DOMParser().parseFromString(doc1Req.responseText, "text/xml");
		var doc2Req = new XMLHttpRequest();
		doc2Req.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		doc2Req.send();
		doc2 = new DOMParser().parseFromString(doc2Req.responseText, "text/xml");
		newChild = doc1.createElement("newChild");
		elementList = doc2.getElementsByTagName("employee");
		elementNode = elementList.item(1);
		success = false;
		try {
			appendedChild = elementNode.appendChild(newChild);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 4;
			}
		}
		if (!success) {
			return "nodeAppendChildNewChildDiffDocument: Exception WRONG_DOCUMENT_ERR expected";
		}
		return "nodeAppendChildNewChildDiffDocument: OK";
	} catch (e) {
		return "nodeAppendChildNewChildDiffDocument: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodeappendchildnodeancestor.xml" fleur="nodeappendchildnodeancestor" native="nodeappendchildnodeancestor"><Fleur>(function(){
	var success;
	try {
		var doc;
		var newChild;
		var elementList;
		var employeeNode;
		var appendedChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		newChild = doc.documentElement;
		elementList = doc.getElementsByTagName("employee");
		employeeNode = elementList.item(1);
		success = false;
		try {
			appendedChild = employeeNode.appendChild(newChild);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 3;
			}
		}
		if (!success) {
			return "nodeAppendChildNodeAncestor: Exception HIERARCHY_REQUEST_ERR expected";
		}
		return "nodeAppendChildNodeAncestor: OK";
	} catch (e) {
		return "nodeAppendChildNodeAncestor: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var newChild;
		var elementList;
		var employeeNode;
		var appendedChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		newChild = doc.documentElement;
		elementList = doc.getElementsByTagName("employee");
		employeeNode = elementList.item(1);
		success = false;
		try {
			appendedChild = employeeNode.appendChild(newChild);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 3;
			}
		}
		if (!success) {
			return "nodeAppendChildNodeAncestor: Exception HIERARCHY_REQUEST_ERR expected";
		}
		return "nodeAppendChildNodeAncestor: OK";
	} catch (e) {
		return "nodeAppendChildNodeAncestor: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodeappendchildnomodificationallowederr.xml" fleur="nodeappendchildnomodificationallowederr" native="nodeappendchildnomodificationallowederr"><Fleur>(function(){
	var success;
	try {
		var doc;
		var genderList;
		var genderNode;
		var entRef;
		var entElement;
		var createdNode;
		var appendedNode;
		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		genderList = doc.getElementsByTagName("gender");
		genderNode = genderList.item(2);
		entRef = genderNode.firstChild;
		if (entRef == null) {
			return "nodeAppendChildNoModificationAllowedErr: #entRefNotNull 'entRef' is null";
		}
		nodeType = entRef.nodeType;
		if ((1 == nodeType)) {
			entRef = doc.createEntityReference("ent4");
			if (entRef == null) {
				return "nodeAppendChildNoModificationAllowedErr: #createdEntRefNotNull 'entRef' is null";
			}
		}
		entElement = entRef.firstChild;
		if (entElement == null) {
			return "nodeAppendChildNoModificationAllowedErr: #entElementNotNull 'entElement' is null";
		}
		createdNode = doc.createElement("text3");
		success = false;
		try {
			appendedNode = entElement.appendChild(createdNode);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "nodeAppendChildNoModificationAllowedErr: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "nodeAppendChildNoModificationAllowedErr: OK";
	} catch (e) {
		return "nodeAppendChildNoModificationAllowedErr: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var genderList;
		var genderNode;
		var entRef;
		var entElement;
		var createdNode;
		var appendedNode;
		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		genderList = doc.getElementsByTagName("gender");
		genderNode = genderList.item(2);
		entRef = genderNode.firstChild;
		if (entRef == null) {
			return "nodeAppendChildNoModificationAllowedErr: #entRefNotNull 'entRef' is null";
		}
		nodeType = entRef.nodeType;
		if ((1 == nodeType)) {
			entRef = doc.createEntityReference("ent4");
			if (entRef == null) {
				return "nodeAppendChildNoModificationAllowedErr: #createdEntRefNotNull 'entRef' is null";
			}
		}
		entElement = entRef.firstChild;
		if (entElement == null) {
			return "nodeAppendChildNoModificationAllowedErr: #entElementNotNull 'entElement' is null";
		}
		createdNode = doc.createElement("text3");
		success = false;
		try {
			appendedNode = entElement.appendChild(createdNode);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "nodeAppendChildNoModificationAllowedErr: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "nodeAppendChildNoModificationAllowedErr: OK";
	} catch (e) {
		return "nodeAppendChildNoModificationAllowedErr: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodeappendchildnomodificationallowederrEE.xml" fleur="nodeappendchildnomodificationallowederrEE" native="nodeappendchildnomodificationallowederrEE"><Fleur>(function(){
	var success;
	try {
		var doc;
		var entRef;
		var createdNode;
		var appendedNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		entRef = doc.createEntityReference("ent4");
		if (entRef == null) {
			return "nodeAppendChildNoModificationAllowedErrEE: #createdEntRefNotNull 'entRef' is null";
		}
		createdNode = doc.createElement("text3");
		success = false;
		try {
			appendedNode = entRef.appendChild(createdNode);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "nodeAppendChildNoModificationAllowedErrEE: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "nodeAppendChildNoModificationAllowedErrEE: OK";
	} catch (e) {
		return "nodeAppendChildNoModificationAllowedErrEE: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var entRef;
		var createdNode;
		var appendedNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		entRef = doc.createEntityReference("ent4");
		if (entRef == null) {
			return "nodeAppendChildNoModificationAllowedErrEE: #createdEntRefNotNull 'entRef' is null";
		}
		createdNode = doc.createElement("text3");
		success = false;
		try {
			appendedNode = entRef.appendChild(createdNode);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "nodeAppendChildNoModificationAllowedErrEE: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "nodeAppendChildNoModificationAllowedErrEE: OK";
	} catch (e) {
		return "nodeAppendChildNoModificationAllowedErrEE: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodeattributenodeattribute.xml" fleur="nodeattributenodeattribute" native="nodeattributenodeattribute"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testAddr;
		var addrAttr;
		var attrNode;
		var attrList;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testAddr = elementList.item(0);
		addrAttr = testAddr.attributes;
		attrNode = addrAttr.item(0);
		attrList = attrNode.attributes;
		if (attrList != null) {
			return "characterdataDeleteDataEnd: #nodeAttributeNodeAttributeAssert1 'attrList' equals '" + attrList + "' not null";
		}
		return "characterdataDeleteDataEnd: OK";
	} catch (e) {
		return "characterdataDeleteDataEnd: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testAddr;
		var addrAttr;
		var attrNode;
		var attrList;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testAddr = elementList.item(0);
		addrAttr = testAddr.attributes;
		attrNode = addrAttr.item(0);
		attrList = attrNode.attributes;
		if (attrList != null) {
			return "characterdataDeleteDataEnd: #nodeAttributeNodeAttributeAssert1 'attrList' equals '" + attrList + "' not null";
		}
		return "characterdataDeleteDataEnd: OK";
	} catch (e) {
		return "characterdataDeleteDataEnd: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodeattributenodename.xml" fleur="nodeattributenodename" native="nodeattributenodename"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testAddr;
		var addrAttr;
		var attrName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testAddr = elementList.item(0);
		addrAttr = testAddr.getAttributeNode("domestic");
		attrName = addrAttr.nodeName;
		if ("domestic" !== attrName) {
			return "nodeAttributeNodeName: #nodeAttributeNodeNameAssert1 'attrName' equals '" + attrName + "' not '" + "domestic" + "'";
		}
		return "nodeAttributeNodeName: OK";
	} catch (e) {
		return "nodeAttributeNodeName: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testAddr;
		var addrAttr;
		var attrName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testAddr = elementList.item(0);
		addrAttr = testAddr.getAttributeNode("domestic");
		attrName = addrAttr.nodeName;
		if ("domestic" !== attrName) {
			return "nodeAttributeNodeName: #nodeAttributeNodeNameAssert1 'attrName' equals '" + attrName + "' not '" + "domestic" + "'";
		}
		return "nodeAttributeNodeName: OK";
	} catch (e) {
		return "nodeAttributeNodeName: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodeattributenodetype.xml" fleur="nodeattributenodetype" native="nodeattributenodetype"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testAddr;
		var addrAttr;
		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testAddr = elementList.item(0);
		addrAttr = testAddr.getAttributeNode("domestic");
		nodeType = addrAttr.nodeType;
		if (2 !== nodeType) {
			return "nodeAttributeNodeType: #nodeAttrNodeTypeAssert1 'nodeType' equals '" + nodeType + "' not '" + 2 + "'";
		}
		return "nodeAttributeNodeType: OK";
	} catch (e) {
		return "nodeAttributeNodeType: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testAddr;
		var addrAttr;
		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testAddr = elementList.item(0);
		addrAttr = testAddr.getAttributeNode("domestic");
		nodeType = addrAttr.nodeType;
		if (2 !== nodeType) {
			return "nodeAttributeNodeType: #nodeAttrNodeTypeAssert1 'nodeType' equals '" + nodeType + "' not '" + 2 + "'";
		}
		return "nodeAttributeNodeType: OK";
	} catch (e) {
		return "nodeAttributeNodeType: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodeattributenodevalue.xml" fleur="nodeattributenodevalue" native="nodeattributenodevalue"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testAddr;
		var addrAttr;
		var attrValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testAddr = elementList.item(0);
		addrAttr = testAddr.getAttributeNode("domestic");
		attrValue = addrAttr.nodeValue;
		if ("Yes" !== attrValue) {
			return "nodeAttributeNodeValue: #nodeAttributeNodeValueAssert1 'attrValue' equals '" + attrValue + "' not '" + "Yes" + "'";
		}
		return "nodeAttributeNodeValue: OK";
	} catch (e) {
		return "nodeAttributeNodeValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testAddr;
		var addrAttr;
		var attrValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testAddr = elementList.item(0);
		addrAttr = testAddr.getAttributeNode("domestic");
		attrValue = addrAttr.nodeValue;
		if ("Yes" !== attrValue) {
			return "nodeAttributeNodeValue: #nodeAttributeNodeValueAssert1 'attrValue' equals '" + attrValue + "' not '" + "Yes" + "'";
		}
		return "nodeAttributeNodeValue: OK";
	} catch (e) {
		return "nodeAttributeNodeValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodecdatasectionnodeattribute.xml" fleur="nodecdatasectionnodeattribute" native="nodecdatasectionnodeattribute"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var cdataName;
		var cdataNode;
		var attrList;
		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("name");
		cdataName = elementList.item(1);
		cdataNode = cdataName.lastChild;
		nodeType = cdataNode.nodeType;
		if (!(4 == nodeType)) {
			cdataNode = doc.createCDATASection("");
		}
		attrList = cdataNode.attributes;
		if (attrList != null) {
			return "nodeCDATASectionNodeAttribute: #cdataSection 'attrList' equals '" + attrList + "' not null";
		}
		return "nodeCDATASectionNodeAttribute: OK";
	} catch (e) {
		return "nodeCDATASectionNodeAttribute: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var cdataName;
		var cdataNode;
		var attrList;
		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("name");
		cdataName = elementList.item(1);
		cdataNode = cdataName.lastChild;
		nodeType = cdataNode.nodeType;
		if (!(4 == nodeType)) {
			cdataNode = doc.createCDATASection("");
		}
		attrList = cdataNode.attributes;
		if (attrList != null) {
			return "nodeCDATASectionNodeAttribute: #cdataSection 'attrList' equals '" + attrList + "' not null";
		}
		return "nodeCDATASectionNodeAttribute: OK";
	} catch (e) {
		return "nodeCDATASectionNodeAttribute: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodecdatasectionnodename.xml" fleur="nodecdatasectionnodename" native="nodecdatasectionnodename"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var cdataName;
		var cdataNode;
		var nodeType;
		var cdataNodeName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("name");
		cdataName = elementList.item(1);
		cdataNode = cdataName.lastChild;
		nodeType = cdataNode.nodeType;
		if (!(4 == nodeType)) {
			cdataNode = doc.createCDATASection("");
		}
		cdataNodeName = cdataNode.nodeName;
		if ("#cdata-section" !== cdataNodeName) {
			return "nodeCDATASectionNodeName: #cdataNodeName 'cdataNodeName' equals '" + cdataNodeName + "' not '" + "#cdata-section" + "'";
		}
		return "nodeCDATASectionNodeName: OK";
	} catch (e) {
		return "nodeCDATASectionNodeName: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var cdataName;
		var cdataNode;
		var nodeType;
		var cdataNodeName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("name");
		cdataName = elementList.item(1);
		cdataNode = cdataName.lastChild;
		nodeType = cdataNode.nodeType;
		if (!(4 == nodeType)) {
			cdataNode = doc.createCDATASection("");
		}
		cdataNodeName = cdataNode.nodeName;
		if ("#cdata-section" !== cdataNodeName) {
			return "nodeCDATASectionNodeName: #cdataNodeName 'cdataNodeName' equals '" + cdataNodeName + "' not '" + "#cdata-section" + "'";
		}
		return "nodeCDATASectionNodeName: OK";
	} catch (e) {
		return "nodeCDATASectionNodeName: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodecdatasectionnodetype.xml" fleur="nodecdatasectionnodetype" native="nodecdatasectionnodetype"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testName;
		var cdataNode;
		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("name");
		testName = elementList.item(1);
		cdataNode = testName.lastChild;
		nodeType = cdataNode.nodeType;
		if ((3 == nodeType)) {
			cdataNode = doc.createCDATASection("");
			nodeType = cdataNode.nodeType;
		}
		if (4 !== nodeType) {
			return "nodeCDATASectionNodeType: #nodeTypeCDATA 'nodeType' equals '" + nodeType + "' not '" + 4 + "'";
		}
		return "nodeCDATASectionNodeType: OK";
	} catch (e) {
		return "nodeCDATASectionNodeType: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testName;
		var cdataNode;
		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("name");
		testName = elementList.item(1);
		cdataNode = testName.lastChild;
		nodeType = cdataNode.nodeType;
		if ((3 == nodeType)) {
			cdataNode = doc.createCDATASection("");
			nodeType = cdataNode.nodeType;
		}
		if (4 !== nodeType) {
			return "nodeCDATASectionNodeType: #nodeTypeCDATA 'nodeType' equals '" + nodeType + "' not '" + 4 + "'";
		}
		return "nodeCDATASectionNodeType: OK";
	} catch (e) {
		return "nodeCDATASectionNodeType: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodecdatasectionnodevalue.xml" fleur="nodecdatasectionnodevalue" native="nodecdatasectionnodevalue"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var cdataName;
		var childList;
		var child;
		var cdataNodeValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("name");
		cdataName = elementList.item(1);
		childList = cdataName.childNodes;
		child = childList.item(1);
		if ((child == null)) {
			child = doc.createCDATASection("This is a CDATASection with EntityReference number 2 &amp;ent2;");
		}
		cdataNodeValue = child.nodeValue;
		if ("This is a CDATASection with EntityReference number 2 &amp;ent2;" !== cdataNodeValue) {
			return "nodeCDATASectionNodeValue: #value 'cdataNodeValue' equals '" + cdataNodeValue + "' not '" + "This is a CDATASection with EntityReference number 2 &amp;ent2;" + "'";
		}
		return "nodeCDATASectionNodeValue: OK";
	} catch (e) {
		return "nodeCDATASectionNodeValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var cdataName;
		var childList;
		var child;
		var cdataNodeValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("name");
		cdataName = elementList.item(1);
		childList = cdataName.childNodes;
		child = childList.item(1);
		if ((child == null)) {
			child = doc.createCDATASection("This is a CDATASection with EntityReference number 2 &amp;ent2;");
		}
		cdataNodeValue = child.nodeValue;
		if ("This is a CDATASection with EntityReference number 2 &amp;ent2;" !== cdataNodeValue) {
			return "nodeCDATASectionNodeValue: #value 'cdataNodeValue' equals '" + cdataNodeValue + "' not '" + "This is a CDATASection with EntityReference number 2 &amp;ent2;" + "'";
		}
		return "nodeCDATASectionNodeValue: OK";
	} catch (e) {
		return "nodeCDATASectionNodeValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodechildnodes.xml" fleur="nodechildnodes" native="nodechildnodes"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var childNodes;
		var childNode;
		var childType;
		var childName;
		var elementNames = new Array();

		expectedElementNames = new Array();
		expectedElementNames[0] = "employeeId";
		expectedElementNames[1] = "name";
		expectedElementNames[2] = "position";
		expectedElementNames[3] = "salary";
		expectedElementNames[4] = "gender";
		expectedElementNames[5] = "address";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		employeeNode = elementList.item(1);
		childNodes = employeeNode.childNodes;
		for (var index_id0x10c23fb0 = 0; index_id0x10c23fb0 &lt; childNodes.length; index_id0x10c23fb0++) {
			childNode = childNodes.item(index_id0x10c23fb0);
			childType = childNode.nodeType;
			if ((1 == childType)) {
				childName = childNode.nodeName;
elementNames[elementNames.length] = childName;
			}
		}
		if (expectedElementNames.join("|") !== elementNames.join("|")) {
			return "nodechildnodes: #elementNames 'elementNames' equals '" + elementNames.join("|") + "' not '" + expectedElementNames.join("|") + "'";
		}
		return "nodechildnodes: OK";
	} catch (e) {
		return "nodechildnodes: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var childNodes;
		var childNode;
		var childType;
		var childName;
		var elementNames = new Array();

		expectedElementNames = new Array();
		expectedElementNames[0] = "employeeId";
		expectedElementNames[1] = "name";
		expectedElementNames[2] = "position";
		expectedElementNames[3] = "salary";
		expectedElementNames[4] = "gender";
		expectedElementNames[5] = "address";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		employeeNode = elementList.item(1);
		childNodes = employeeNode.childNodes;
		for (var index_id0x10c23fb0 = 0; index_id0x10c23fb0 &lt; childNodes.length; index_id0x10c23fb0++) {
			childNode = childNodes.item(index_id0x10c23fb0);
			childType = childNode.nodeType;
			if ((1 == childType)) {
				childName = childNode.nodeName;
elementNames[elementNames.length] = childName;
			}
		}
		if (expectedElementNames.join("|") !== elementNames.join("|")) {
			return "nodechildnodes: #elementNames 'elementNames' equals '" + elementNames.join("|") + "' not '" + expectedElementNames.join("|") + "'";
		}
		return "nodechildnodes: OK";
	} catch (e) {
		return "nodechildnodes: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodechildnodesappendchild.xml" fleur="nodechildnodesappendchild" native="nodechildnodesappendchild"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var childList;
		var createdNode;
		var expectedLength;
		var length;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		employeeNode = elementList.item(1);
		childList = employeeNode.childNodes;
		expectedLength = childList.length;
		expectedLength += 1;
		createdNode = doc.createElement("text3");
		employeeNode = employeeNode.appendChild(createdNode);
		length = childList.length;
		if (expectedLength !== length) {
			return "nodechildnodesappendchild: #childNodeLength 'length' equals '" + length + "' not '" + expectedLength + "'";
		}
		return "nodechildnodesappendchild: OK";
	} catch (e) {
		return "nodechildnodesappendchild: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var childList;
		var createdNode;
		var expectedLength;
		var length;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		employeeNode = elementList.item(1);
		childList = employeeNode.childNodes;
		expectedLength = childList.length;
		expectedLength += 1;
		createdNode = doc.createElement("text3");
		employeeNode = employeeNode.appendChild(createdNode);
		length = childList.length;
		if (expectedLength !== length) {
			return "nodechildnodesappendchild: #childNodeLength 'length' equals '" + length + "' not '" + expectedLength + "'";
		}
		return "nodechildnodesappendchild: OK";
	} catch (e) {
		return "nodechildnodesappendchild: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodechildnodesempty.xml" fleur="nodechildnodesempty" native="nodechildnodesempty"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var childList;
		var secondCNode;
		var textNode;
		var childNodesList;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		employeeNode = elementList.item(1);
		childList = employeeNode.childNodes;
		secondCNode = childList.item(1);
		textNode = secondCNode.firstChild;
		childNodesList = textNode.childNodes;
		if (childNodesList.length !== 0) {
			return "nodeChildNodesEmpty: #nodeChildNodesEmptyAssert1 'childNodesList.length' equals " + childNodesList.length + " not 0";
		}
		return "nodeChildNodesEmpty: OK";
	} catch (e) {
		return "nodeChildNodesEmpty: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var childList;
		var secondCNode;
		var textNode;
		var childNodesList;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		employeeNode = elementList.item(1);
		childList = employeeNode.childNodes;
		secondCNode = childList.item(1);
		textNode = secondCNode.firstChild;
		childNodesList = textNode.childNodes;
		if (childNodesList.length !== 0) {
			return "nodeChildNodesEmpty: #nodeChildNodesEmptyAssert1 'childNodesList.length' equals " + childNodesList.length + " not 0";
		}
		return "nodeChildNodesEmpty: OK";
	} catch (e) {
		return "nodeChildNodesEmpty: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodecloneattributescopied.xml" fleur="nodecloneattributescopied" native="nodecloneattributescopied"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var addressNode;
		var clonedNode;
		var attributes;
		var attributeNode;
		var attributeName;
		var result = new Array();

		expectedResult = new Array();
		expectedResult[0] = "domestic";
		expectedResult[1] = "street";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		addressNode = elementList.item(1);
		clonedNode = addressNode.cloneNode(false);
		attributes = clonedNode.attributes;
		for (var index_id0x10e00b50 = 0; index_id0x10e00b50 &lt; attributes.length; index_id0x10e00b50++) {
			attributeNode = attributes.item(index_id0x10e00b50);
			attributeName = attributeNode.nodeName;
result[result.length] = attributeName;
		}
		if (expectedResult.join("|") !== result.join("|")) {
			return "nodeCloneAttributesCopied: #nodeCloneAttributesCopiedAssert1 'result' equals '" + result.join("|") + "' not '" + expectedResult.join("|") + "'";
		}
		return "nodeCloneAttributesCopied: OK";
	} catch (e) {
		return "nodeCloneAttributesCopied: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var addressNode;
		var clonedNode;
		var attributes;
		var attributeNode;
		var attributeName;
		var result = new Array();

		expectedResult = new Array();
		expectedResult[0] = "domestic";
		expectedResult[1] = "street";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		addressNode = elementList.item(1);
		clonedNode = addressNode.cloneNode(false);
		attributes = clonedNode.attributes;
		for (var index_id0x10e00b50 = 0; index_id0x10e00b50 &lt; attributes.length; index_id0x10e00b50++) {
			attributeNode = attributes.item(index_id0x10e00b50);
			attributeName = attributeNode.nodeName;
result[result.length] = attributeName;
		}
		if (expectedResult.join("|") !== result.join("|")) {
			return "nodeCloneAttributesCopied: #nodeCloneAttributesCopiedAssert1 'result' equals '" + result.join("|") + "' not '" + expectedResult.join("|") + "'";
		}
		return "nodeCloneAttributesCopied: OK";
	} catch (e) {
		return "nodeCloneAttributesCopied: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodeclonefalsenocopytext.xml" fleur="nodeclonefalsenocopytext" native="nodeclonefalsenocopytext"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var childList;
		var childNode;
		var clonedNode;
		var lastChildNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		employeeNode = elementList.item(1);
		childList = employeeNode.childNodes;
		childNode = childList.item(3);
		clonedNode = childNode.cloneNode(false);
		lastChildNode = clonedNode.lastChild;
		if (lastChildNode != null) {
			return "nodeCloneFalseNoCopyText: #noTextNodes 'lastChildNode' equals '" + lastChildNode + "' not null";
		}
		return "nodeCloneFalseNoCopyText: OK";
	} catch (e) {
		return "nodeCloneFalseNoCopyText: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var childList;
		var childNode;
		var clonedNode;
		var lastChildNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		employeeNode = elementList.item(1);
		childList = employeeNode.childNodes;
		childNode = childList.item(3);
		clonedNode = childNode.cloneNode(false);
		lastChildNode = clonedNode.lastChild;
		if (lastChildNode != null) {
			return "nodeCloneFalseNoCopyText: #noTextNodes 'lastChildNode' equals '" + lastChildNode + "' not null";
		}
		return "nodeCloneFalseNoCopyText: OK";
	} catch (e) {
		return "nodeCloneFalseNoCopyText: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodeclonegetparentnull.xml" fleur="nodeclonegetparentnull" native="nodeclonegetparentnull"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var clonedNode;
		var parentNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		employeeNode = elementList.item(1);
		clonedNode = employeeNode.cloneNode(false);
		parentNode = clonedNode.parentNode;
		if (parentNode != null) {
			return "nodeCloneGetParentNull: #nodeCloneGetParentNullAssert1 'parentNode' equals '" + parentNode + "' not null";
		}
		return "nodeCloneGetParentNull: OK";
	} catch (e) {
		return "nodeCloneGetParentNull: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var clonedNode;
		var parentNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		employeeNode = elementList.item(1);
		clonedNode = employeeNode.cloneNode(false);
		parentNode = clonedNode.parentNode;
		if (parentNode != null) {
			return "nodeCloneGetParentNull: #nodeCloneGetParentNullAssert1 'parentNode' equals '" + parentNode + "' not null";
		}
		return "nodeCloneGetParentNull: OK";
	} catch (e) {
		return "nodeCloneGetParentNull: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodeclonenodefalse.xml" fleur="nodeclonenodefalse" native="nodeclonenodefalse"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var clonedNode;
		var cloneName;
		var cloneChildren;
		var length;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		employeeNode = elementList.item(1);
		clonedNode = employeeNode.cloneNode(false);
		cloneName = clonedNode.nodeName;
		if ("employee" !== cloneName) {
			return "nodeCloneNodeFalse: #name 'cloneName' equals '" + cloneName + "' not '" + "employee" + "'";
		}
		cloneChildren = clonedNode.childNodes;
		length = cloneChildren.length;
		if (0 !== length) {
			return "nodeCloneNodeFalse: #length 'length' equals '" + length + "' not '" + 0 + "'";
		}
		return "nodeCloneNodeFalse: OK";
	} catch (e) {
		return "nodeCloneNodeFalse: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var clonedNode;
		var cloneName;
		var cloneChildren;
		var length;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		employeeNode = elementList.item(1);
		clonedNode = employeeNode.cloneNode(false);
		cloneName = clonedNode.nodeName;
		if ("employee" !== cloneName) {
			return "nodeCloneNodeFalse: #name 'cloneName' equals '" + cloneName + "' not '" + "employee" + "'";
		}
		cloneChildren = clonedNode.childNodes;
		length = cloneChildren.length;
		if (0 !== length) {
			return "nodeCloneNodeFalse: #length 'length' equals '" + length + "' not '" + 0 + "'";
		}
		return "nodeCloneNodeFalse: OK";
	} catch (e) {
		return "nodeCloneNodeFalse: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodeclonenodetrue.xml" fleur="nodeclonenodetrue" native="nodeclonenodetrue"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var childList;
		var clonedNode;
		var clonedList;
		var clonedChild;
		var clonedChildName;
		var length;
		var result = new Array();

		expectedWhitespace = new Array();
		expectedWhitespace[0] = "#text";
		expectedWhitespace[1] = "employeeId";
		expectedWhitespace[2] = "#text";
		expectedWhitespace[3] = "name";
		expectedWhitespace[4] = "#text";
		expectedWhitespace[5] = "position";
		expectedWhitespace[6] = "#text";
		expectedWhitespace[7] = "salary";
		expectedWhitespace[8] = "#text";
		expectedWhitespace[9] = "gender";
		expectedWhitespace[10] = "#text";
		expectedWhitespace[11] = "address";
		expectedWhitespace[12] = "#text";
		expectedNoWhitespace = new Array();
		expectedNoWhitespace[0] = "employeeId";
		expectedNoWhitespace[1] = "name";
		expectedNoWhitespace[2] = "position";
		expectedNoWhitespace[3] = "salary";
		expectedNoWhitespace[4] = "gender";
		expectedNoWhitespace[5] = "address";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		employeeNode = elementList.item(1);
		childList = employeeNode.childNodes;
		length = childList.length;
		clonedNode = employeeNode.cloneNode(true);
		clonedList = clonedNode.childNodes;
		for (var index_id0x10eba510 = 0; index_id0x10eba510 &lt; clonedList.length; index_id0x10eba510++) {
			clonedChild = clonedList.item(index_id0x10eba510);
			clonedChildName = clonedChild.nodeName;
result[result.length] = clonedChildName;
		}
		if ((6 == length)) {
			if (expectedNoWhitespace.join("|") !== result.join("|")) {
				return "nodeCloneNodeTrue: #nowhitespace 'result' equals '" + result.join("|") + "' not '" + expectedNoWhitespace.join("|") + "'";
			}
		} else {
			if (expectedWhitespace.join("|") !== result.join("|")) {
				return "nodeCloneNodeTrue: #whitespace 'result' equals '" + result.join("|") + "' not '" + expectedWhitespace.join("|") + "'";
			}
		}
		return "nodeCloneNodeTrue: OK";
	} catch (e) {
		return "nodeCloneNodeTrue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var childList;
		var clonedNode;
		var clonedList;
		var clonedChild;
		var clonedChildName;
		var length;
		var result = new Array();

		expectedWhitespace = new Array();
		expectedWhitespace[0] = "#text";
		expectedWhitespace[1] = "employeeId";
		expectedWhitespace[2] = "#text";
		expectedWhitespace[3] = "name";
		expectedWhitespace[4] = "#text";
		expectedWhitespace[5] = "position";
		expectedWhitespace[6] = "#text";
		expectedWhitespace[7] = "salary";
		expectedWhitespace[8] = "#text";
		expectedWhitespace[9] = "gender";
		expectedWhitespace[10] = "#text";
		expectedWhitespace[11] = "address";
		expectedWhitespace[12] = "#text";
		expectedNoWhitespace = new Array();
		expectedNoWhitespace[0] = "employeeId";
		expectedNoWhitespace[1] = "name";
		expectedNoWhitespace[2] = "position";
		expectedNoWhitespace[3] = "salary";
		expectedNoWhitespace[4] = "gender";
		expectedNoWhitespace[5] = "address";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		employeeNode = elementList.item(1);
		childList = employeeNode.childNodes;
		length = childList.length;
		clonedNode = employeeNode.cloneNode(true);
		clonedList = clonedNode.childNodes;
		for (var index_id0x10eba510 = 0; index_id0x10eba510 &lt; clonedList.length; index_id0x10eba510++) {
			clonedChild = clonedList.item(index_id0x10eba510);
			clonedChildName = clonedChild.nodeName;
result[result.length] = clonedChildName;
		}
		if ((6 == length)) {
			if (expectedNoWhitespace.join("|") !== result.join("|")) {
				return "nodeCloneNodeTrue: #nowhitespace 'result' equals '" + result.join("|") + "' not '" + expectedNoWhitespace.join("|") + "'";
			}
		} else {
			if (expectedWhitespace.join("|") !== result.join("|")) {
				return "nodeCloneNodeTrue: #whitespace 'result' equals '" + result.join("|") + "' not '" + expectedWhitespace.join("|") + "'";
			}
		}
		return "nodeCloneNodeTrue: OK";
	} catch (e) {
		return "nodeCloneNodeTrue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodeclonetruecopytext.xml" fleur="nodeclonetruecopytext" native="nodeclonetruecopytext"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var childList;
		var childNode;
		var clonedNode;
		var lastChildNode;
		var childValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("salary");
		childNode = elementList.item(1);
		clonedNode = childNode.cloneNode(true);
		lastChildNode = clonedNode.lastChild;
		childValue = lastChildNode.nodeValue;
		if ("35,000" !== childValue) {
			return "nodeclonetruecopytext: #nodeCloneTrueCopyTextAssert1 'childValue' equals '" + childValue + "' not '" + "35,000" + "'";
		}
		return "nodeclonetruecopytext: OK";
	} catch (e) {
		return "nodeclonetruecopytext: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var childList;
		var childNode;
		var clonedNode;
		var lastChildNode;
		var childValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("salary");
		childNode = elementList.item(1);
		clonedNode = childNode.cloneNode(true);
		lastChildNode = clonedNode.lastChild;
		childValue = lastChildNode.nodeValue;
		if ("35,000" !== childValue) {
			return "nodeclonetruecopytext: #nodeCloneTrueCopyTextAssert1 'childValue' equals '" + childValue + "' not '" + "35,000" + "'";
		}
		return "nodeclonetruecopytext: OK";
	} catch (e) {
		return "nodeclonetruecopytext: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodecommentnodeattributes.xml" fleur="nodecommentnodeattributes" native="nodecommentnodeattributes"><Fleur>(function(){
	var success;
	try {
		var doc;
		var childList;
		var childNode;
		var attrList;
		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		childList = doc.childNodes;
		for (var index_id0x10eed240 = 0; index_id0x10eed240 &lt; childList.length; index_id0x10eed240++) {
			childNode = childList.item(index_id0x10eed240);
			nodeType = childNode.nodeType;
			if ((8 == nodeType)) {
				attrList = childNode.attributes;
				if (attrList != null) {
					return "nodeCommentNodeAttributes: #attributesNull 'attrList' equals '" + attrList + "' not null";
				}
			}
		}
		childNode = doc.createComment("This is a comment");
		attrList = childNode.attributes;
		if (attrList != null) {
			return "nodeCommentNodeAttributes: #createdAttributesNull 'attrList' equals '" + attrList + "' not null";
		}
		return "nodeCommentNodeAttributes: OK";
	} catch (e) {
		return "nodeCommentNodeAttributes: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var childList;
		var childNode;
		var attrList;
		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		childList = doc.childNodes;
		for (var index_id0x10eed240 = 0; index_id0x10eed240 &lt; childList.length; index_id0x10eed240++) {
			childNode = childList.item(index_id0x10eed240);
			nodeType = childNode.nodeType;
			if ((8 == nodeType)) {
				attrList = childNode.attributes;
				if (attrList != null) {
					return "nodeCommentNodeAttributes: #attributesNull 'attrList' equals '" + attrList + "' not null";
				}
			}
		}
		childNode = doc.createComment("This is a comment");
		attrList = childNode.attributes;
		if (attrList != null) {
			return "nodeCommentNodeAttributes: #createdAttributesNull 'attrList' equals '" + attrList + "' not null";
		}
		return "nodeCommentNodeAttributes: OK";
	} catch (e) {
		return "nodeCommentNodeAttributes: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodecommentnodename.xml" fleur="nodecommentnodename" native="nodecommentnodename"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var commentNode;
		var nodeType;
		var commentNodeName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.childNodes;
		for (var index_id0x10ef5970 = 0; index_id0x10ef5970 &lt; elementList.length; index_id0x10ef5970++) {
			commentNode = elementList.item(index_id0x10ef5970);
			nodeType = commentNode.nodeType;
			if ((8 == nodeType)) {
				commentNodeName = commentNode.nodeName;
				if ("#comment" !== commentNodeName) {
					return "nodeCommentNodeName: #commentNodeName 'commentNodeName' equals '" + commentNodeName + "' not '" + "#comment" + "'";
				}
			}
		}
		return "nodeCommentNodeName: OK";
	} catch (e) {
		return "nodeCommentNodeName: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var commentNode;
		var nodeType;
		var commentNodeName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.childNodes;
		for (var index_id0x10ef5970 = 0; index_id0x10ef5970 &lt; elementList.length; index_id0x10ef5970++) {
			commentNode = elementList.item(index_id0x10ef5970);
			nodeType = commentNode.nodeType;
			if ((8 == nodeType)) {
				commentNodeName = commentNode.nodeName;
				if ("#comment" !== commentNodeName) {
					return "nodeCommentNodeName: #commentNodeName 'commentNodeName' equals '" + commentNodeName + "' not '" + "#comment" + "'";
				}
			}
		}
		return "nodeCommentNodeName: OK";
	} catch (e) {
		return "nodeCommentNodeName: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodecommentnodetype.xml" fleur="nodecommentnodetype" native="nodecommentnodetype"><Fleur>(function(){
	var success;
	try {
		var doc;
		var testList;
		var commentNode;
		var commentNodeName;
		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		testList = doc.childNodes;
		for (var index_id0x1100db50 = 0; index_id0x1100db50 &lt; testList.length; index_id0x1100db50++) {
			commentNode = testList.item(index_id0x1100db50);
			commentNodeName = commentNode.nodeName;
			if (("#comment" == commentNodeName)) {
				nodeType = commentNode.nodeType;
				if (8 !== nodeType) {
					return "nodeCommentNodeType: #nodeCommentNodeTypeAssert1 'nodeType' equals '" + nodeType + "' not '" + 8 + "'";
				}
			}
		}
		return "nodeCommentNodeType: OK";
	} catch (e) {
		return "nodeCommentNodeType: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var testList;
		var commentNode;
		var commentNodeName;
		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		testList = doc.childNodes;
		for (var index_id0x1100db50 = 0; index_id0x1100db50 &lt; testList.length; index_id0x1100db50++) {
			commentNode = testList.item(index_id0x1100db50);
			commentNodeName = commentNode.nodeName;
			if (("#comment" == commentNodeName)) {
				nodeType = commentNode.nodeType;
				if (8 !== nodeType) {
					return "nodeCommentNodeType: #nodeCommentNodeTypeAssert1 'nodeType' equals '" + nodeType + "' not '" + 8 + "'";
				}
			}
		}
		return "nodeCommentNodeType: OK";
	} catch (e) {
		return "nodeCommentNodeType: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodecommentnodevalue.xml" fleur="nodecommentnodevalue" native="nodecommentnodevalue"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var commentNode;
		var commentName;
		var commentValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.childNodes;
		for (var index_id0x11079ec0 = 0; index_id0x11079ec0 &lt; elementList.length; index_id0x11079ec0++) {
			commentNode = elementList.item(index_id0x11079ec0);
			commentName = commentNode.nodeName;
			if (("#comment" == commentName)) {
				commentValue = commentNode.nodeValue;
				if (" This is comment number 1." !== commentValue) {
					return "nodeCommentNodeValue: #value 'commentValue' equals '" + commentValue + "' not '" + " This is comment number 1." + "'";
				}
			}
		}
		return "nodeCommentNodeValue: OK";
	} catch (e) {
		return "nodeCommentNodeValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var commentNode;
		var commentName;
		var commentValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.childNodes;
		for (var index_id0x11079ec0 = 0; index_id0x11079ec0 &lt; elementList.length; index_id0x11079ec0++) {
			commentNode = elementList.item(index_id0x11079ec0);
			commentName = commentNode.nodeName;
			if (("#comment" == commentName)) {
				commentValue = commentNode.nodeValue;
				if (" This is comment number 1." !== commentValue) {
					return "nodeCommentNodeValue: #value 'commentValue' equals '" + commentValue + "' not '" + " This is comment number 1." + "'";
				}
			}
		}
		return "nodeCommentNodeValue: OK";
	} catch (e) {
		return "nodeCommentNodeValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodedocumentfragmentnodename.xml" fleur="nodedocumentfragmentnodename" native="nodedocumentfragmentnodename"><Fleur>(function(){
	var success;
	try {
		var doc;
		var docFragment;
		var documentFragmentName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		docFragment = doc.createDocumentFragment();
		documentFragmentName = docFragment.nodeName;
		if ("#document-fragment" !== documentFragmentName) {
			return "nodeDocumentFragmentNodeName: #nodeDocumentFragmentNodeNameAssert1 'documentFragmentName' equals '" + documentFragmentName + "' not '" + "#document-fragment" + "'";
		}
		return "nodeDocumentFragmentNodeName: OK";
	} catch (e) {
		return "nodeDocumentFragmentNodeName: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var docFragment;
		var documentFragmentName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		docFragment = doc.createDocumentFragment();
		documentFragmentName = docFragment.nodeName;
		if ("#document-fragment" !== documentFragmentName) {
			return "nodeDocumentFragmentNodeName: #nodeDocumentFragmentNodeNameAssert1 'documentFragmentName' equals '" + documentFragmentName + "' not '" + "#document-fragment" + "'";
		}
		return "nodeDocumentFragmentNodeName: OK";
	} catch (e) {
		return "nodeDocumentFragmentNodeName: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodedocumentfragmentnodetype.xml" fleur="nodedocumentfragmentnodetype" native="nodedocumentfragmentnodetype"><Fleur>(function(){
	var success;
	try {
		var doc;
		var documentFragmentNode;
		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		documentFragmentNode = doc.createDocumentFragment();
		nodeType = documentFragmentNode.nodeType;
		if (11 !== nodeType) {
			return "nodeDocumentFragmentNodeType: #nodeDocumentFragmentNodeTypeAssert1 'nodeType' equals '" + nodeType + "' not '" + 11 + "'";
		}
		return "nodeDocumentFragmentNodeType: OK";
	} catch (e) {
		return "nodeDocumentFragmentNodeType: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var documentFragmentNode;
		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		documentFragmentNode = doc.createDocumentFragment();
		nodeType = documentFragmentNode.nodeType;
		if (11 !== nodeType) {
			return "nodeDocumentFragmentNodeType: #nodeDocumentFragmentNodeTypeAssert1 'nodeType' equals '" + nodeType + "' not '" + 11 + "'";
		}
		return "nodeDocumentFragmentNodeType: OK";
	} catch (e) {
		return "nodeDocumentFragmentNodeType: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodedocumentfragmentnodevalue.xml" fleur="nodedocumentfragmentnodevalue" native="nodedocumentfragmentnodevalue"><Fleur>(function(){
	var success;
	try {
		var doc;
		var docFragment;
		var attrList;
		var value;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		docFragment = doc.createDocumentFragment();
		attrList = docFragment.attributes;
		if (attrList != null) {
			return "nodeDocumentFragmentNodeValue: #attributesNull 'attrList' equals '" + attrList + "' not null";
		}
		value = docFragment.nodeValue;
		if (value != null) {
			return "nodeDocumentFragmentNodeValue: #initiallyNull 'value' equals '" + value + "' not null";
		}
		return "nodeDocumentFragmentNodeValue: OK";
	} catch (e) {
		return "nodeDocumentFragmentNodeValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var docFragment;
		var attrList;
		var value;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		docFragment = doc.createDocumentFragment();
		attrList = docFragment.attributes;
		if (attrList != null) {
			return "nodeDocumentFragmentNodeValue: #attributesNull 'attrList' equals '" + attrList + "' not null";
		}
		value = docFragment.nodeValue;
		if (value != null) {
			return "nodeDocumentFragmentNodeValue: #initiallyNull 'value' equals '" + value + "' not null";
		}
		return "nodeDocumentFragmentNodeValue: OK";
	} catch (e) {
		return "nodeDocumentFragmentNodeValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodedocumentnodeattribute.xml" fleur="nodedocumentnodeattribute" native="nodedocumentnodeattribute"><Fleur>(function(){
	var success;
	try {
		var doc;
		var attrList;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		attrList = doc.attributes;
		if (attrList != null) {
			return "nodedocumentnodeattribute: #documentAttributesNull 'attrList' equals '" + attrList + "' not null";
		}
		return "nodedocumentnodeattribute: OK";
	} catch (e) {
		return "nodedocumentnodeattribute: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var attrList;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		attrList = doc.attributes;
		if (attrList != null) {
			return "nodedocumentnodeattribute: #documentAttributesNull 'attrList' equals '" + attrList + "' not null";
		}
		return "nodedocumentnodeattribute: OK";
	} catch (e) {
		return "nodedocumentnodeattribute: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodedocumentnodename.xml" fleur="nodedocumentnodename" native="nodedocumentnodename"><Fleur>(function(){
	var success;
	try {
		var doc;
		var documentName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		documentName = doc.nodeName;
		if ("#document" !== documentName) {
			return "nodeDocumentNodeName: #documentNodeName 'documentName' equals '" + documentName + "' not '" + "#document" + "'";
		}
		return "nodeDocumentNodeName: OK";
	} catch (e) {
		return "nodeDocumentNodeName: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var documentName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		documentName = doc.nodeName;
		if ("#document" !== documentName) {
			return "nodeDocumentNodeName: #documentNodeName 'documentName' equals '" + documentName + "' not '" + "#document" + "'";
		}
		return "nodeDocumentNodeName: OK";
	} catch (e) {
		return "nodeDocumentNodeName: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodedocumentnodetype.xml" fleur="nodedocumentnodetype" native="nodedocumentnodetype"><Fleur>(function(){
	var success;
	try {
		var doc;
		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		nodeType = doc.nodeType;
		if (9 !== nodeType) {
			return "nodeDocumentNodeType: #nodeDocumentNodeTypeAssert1 'nodeType' equals '" + nodeType + "' not '" + 9 + "'";
		}
		return "nodeDocumentNodeType: OK";
	} catch (e) {
		return "nodeDocumentNodeType: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		nodeType = doc.nodeType;
		if (9 !== nodeType) {
			return "nodeDocumentNodeType: #nodeDocumentNodeTypeAssert1 'nodeType' equals '" + nodeType + "' not '" + 9 + "'";
		}
		return "nodeDocumentNodeType: OK";
	} catch (e) {
		return "nodeDocumentNodeType: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodedocumentnodevalue.xml" fleur="nodedocumentnodevalue" native="nodedocumentnodevalue"><Fleur>(function(){
	var success;
	try {
		var doc;
		var documentValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		documentValue = doc.nodeValue;
		if (documentValue != null) {
			return "nodeDocumentNodeValue: #documentNodeValueNull 'documentValue' equals '" + documentValue + "' not null";
		}
		return "nodeDocumentNodeValue: OK";
	} catch (e) {
		return "nodeDocumentNodeValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var documentValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		documentValue = doc.nodeValue;
		if (documentValue != null) {
			return "nodeDocumentNodeValue: #documentNodeValueNull 'documentValue' equals '" + documentValue + "' not null";
		}
		return "nodeDocumentNodeValue: OK";
	} catch (e) {
		return "nodeDocumentNodeValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodedocumenttypenodename.xml" fleur="nodedocumenttypenodename" native="nodedocumenttypenodename"><Fleur>(function(){
	var success;
	try {
		var doc;
		var docType;
		var documentTypeName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		if (docType == null) {
			return "nodedocumenttypenodename: #docTypeNotNull 'docType' is null";
		}
		documentTypeName = docType.nodeName;
		if (("text/xml" === "image/svg+xml")) {
			if ("svg" !== documentTypeName) {
				return "nodedocumenttypenodename: #doctypeNameSVG 'documentTypeName' equals '" + documentTypeName + "' not '" + "svg" + "'";
			}
		} else {
			if ("staff" !== documentTypeName) {
				return "nodedocumenttypenodename: #documentName 'documentTypeName' equals '" + documentTypeName + "' not '" + "staff" + "'";
			}
		}
		return "nodedocumenttypenodename: OK";
	} catch (e) {
		return "nodedocumenttypenodename: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var docType;
		var documentTypeName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		if (docType == null) {
			return "nodedocumenttypenodename: #docTypeNotNull 'docType' is null";
		}
		documentTypeName = docType.nodeName;
		if (("text/xml" === "image/svg+xml")) {
			if ("svg" !== documentTypeName) {
				return "nodedocumenttypenodename: #doctypeNameSVG 'documentTypeName' equals '" + documentTypeName + "' not '" + "svg" + "'";
			}
		} else {
			if ("staff" !== documentTypeName) {
				return "nodedocumenttypenodename: #documentName 'documentTypeName' equals '" + documentTypeName + "' not '" + "staff" + "'";
			}
		}
		return "nodedocumenttypenodename: OK";
	} catch (e) {
		return "nodedocumenttypenodename: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodedocumenttypenodetype.xml" fleur="nodedocumenttypenodetype" native="nodedocumenttypenodetype"><Fleur>(function(){
	var success;
	try {
		var doc;
		var documentTypeNode;
		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		documentTypeNode = doc.doctype;
		if (documentTypeNode == null) {
			return "nodedocumenttypenodetype: #doctypeNotNull 'documentTypeNode' is null";
		}
		nodeType = documentTypeNode.nodeType;
		if (10 !== nodeType) {
			return "nodedocumenttypenodetype: #nodeType 'nodeType' equals '" + nodeType + "' not '" + 10 + "'";
		}
		return "nodedocumenttypenodetype: OK";
	} catch (e) {
		return "nodedocumenttypenodetype: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var documentTypeNode;
		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		documentTypeNode = doc.doctype;
		if (documentTypeNode == null) {
			return "nodedocumenttypenodetype: #doctypeNotNull 'documentTypeNode' is null";
		}
		nodeType = documentTypeNode.nodeType;
		if (10 !== nodeType) {
			return "nodedocumenttypenodetype: #nodeType 'nodeType' equals '" + nodeType + "' not '" + 10 + "'";
		}
		return "nodedocumenttypenodetype: OK";
	} catch (e) {
		return "nodedocumenttypenodetype: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodedocumenttypenodevalue.xml" fleur="nodedocumenttypenodevalue" native="nodedocumenttypenodevalue"><Fleur>(function(){
	var success;
	try {
		var doc;
		var docType;
		var attrList;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		if (docType == null) {
			return "nodedocumenttypenodevalue: #docTypeNotNull 'docType' is null";
		}
		attrList = docType.attributes;
		if (attrList != null) {
			return "nodedocumenttypenodevalue: #doctypeAttributesNull 'attrList' equals '" + attrList + "' not null";
		}
		return "nodedocumenttypenodevalue: OK";
	} catch (e) {
		return "nodedocumenttypenodevalue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var docType;
		var attrList;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		if (docType == null) {
			return "nodedocumenttypenodevalue: #docTypeNotNull 'docType' is null";
		}
		attrList = docType.attributes;
		if (attrList != null) {
			return "nodedocumenttypenodevalue: #doctypeAttributesNull 'attrList' equals '" + attrList + "' not null";
		}
		return "nodedocumenttypenodevalue: OK";
	} catch (e) {
		return "nodedocumenttypenodevalue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodeelementnodeattributes.xml" fleur="nodeelementnodeattributes" native="nodeelementnodeattributes"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testAddr;
		var addrAttr;
		var attrNode;
		var attrName;
		var attrList = new Array();

		expected = new Array();
		expected[0] = "domestic";
		expected[1] = "street";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testAddr = elementList.item(2);
		addrAttr = testAddr.attributes;
		for (var index_id0x111caf10 = 0; index_id0x111caf10 &lt; addrAttr.length; index_id0x111caf10++) {
			attrNode = addrAttr.item(index_id0x111caf10);
			attrName = attrNode.nodeName;
attrList[attrList.length] = attrName;
		}
		if (expected.join("|") !== attrList.join("|")) {
			return "nodeElementNodeAttributes: #nodeElementNodeValueAssert1 'attrList' equals '" + attrList.join("|") + "' not '" + expected.join("|") + "'";
		}
		return "nodeElementNodeAttributes: OK";
	} catch (e) {
		return "nodeElementNodeAttributes: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testAddr;
		var addrAttr;
		var attrNode;
		var attrName;
		var attrList = new Array();

		expected = new Array();
		expected[0] = "domestic";
		expected[1] = "street";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testAddr = elementList.item(2);
		addrAttr = testAddr.attributes;
		for (var index_id0x111caf10 = 0; index_id0x111caf10 &lt; addrAttr.length; index_id0x111caf10++) {
			attrNode = addrAttr.item(index_id0x111caf10);
			attrName = attrNode.nodeName;
attrList[attrList.length] = attrName;
		}
		if (expected.join("|") !== attrList.join("|")) {
			return "nodeElementNodeAttributes: #nodeElementNodeValueAssert1 'attrList' equals '" + attrList.join("|") + "' not '" + expected.join("|") + "'";
		}
		return "nodeElementNodeAttributes: OK";
	} catch (e) {
		return "nodeElementNodeAttributes: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodeelementnodename.xml" fleur="nodeelementnodename" native="nodeelementnodename"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementNode;
		var elementName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementNode = doc.documentElement;
		elementName = elementNode.nodeName;
		if (("text/xml" === "image/svg+xml")) {
			if ("svg" !== elementName) {
				return "nodeElementNodeName: #svgNodeName 'elementName' equals '" + elementName + "' not '" + "svg" + "'";
			}
		} else {
			if ("staff" !== elementName) {
				return "nodeElementNodeName: #nodeElementNodeNameAssert1 'elementName' equals '" + elementName + "' not '" + "staff" + "'";
			}
		}
		return "nodeElementNodeName: OK";
	} catch (e) {
		return "nodeElementNodeName: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementNode;
		var elementName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementNode = doc.documentElement;
		elementName = elementNode.nodeName;
		if (("text/xml" === "image/svg+xml")) {
			if ("svg" !== elementName) {
				return "nodeElementNodeName: #svgNodeName 'elementName' equals '" + elementName + "' not '" + "svg" + "'";
			}
		} else {
			if ("staff" !== elementName) {
				return "nodeElementNodeName: #nodeElementNodeNameAssert1 'elementName' equals '" + elementName + "' not '" + "staff" + "'";
			}
		}
		return "nodeElementNodeName: OK";
	} catch (e) {
		return "nodeElementNodeName: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodeelementnodetype.xml" fleur="nodeelementnodetype" native="nodeelementnodetype"><Fleur>(function(){
	var success;
	try {
		var doc;
		var rootNode;
		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		rootNode = doc.documentElement;
		nodeType = rootNode.nodeType;
		if (1 !== nodeType) {
			return "nodeElementNodeType: #nodeElementNodeTypeAssert1 'nodeType' equals '" + nodeType + "' not '" + 1 + "'";
		}
		return "nodeElementNodeType: OK";
	} catch (e) {
		return "nodeElementNodeType: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var rootNode;
		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		rootNode = doc.documentElement;
		nodeType = rootNode.nodeType;
		if (1 !== nodeType) {
			return "nodeElementNodeType: #nodeElementNodeTypeAssert1 'nodeType' equals '" + nodeType + "' not '" + 1 + "'";
		}
		return "nodeElementNodeType: OK";
	} catch (e) {
		return "nodeElementNodeType: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodeelementnodevalue.xml" fleur="nodeelementnodevalue" native="nodeelementnodevalue"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementNode;
		var elementValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementNode = doc.documentElement;
		elementValue = elementNode.nodeValue;
		if (elementValue != null) {
			return "nodeElementNodeValue: #elementNodeValueNull 'elementValue' equals '" + elementValue + "' not null";
		}
		return "nodeElementNodeValue: OK";
	} catch (e) {
		return "nodeElementNodeValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementNode;
		var elementValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementNode = doc.documentElement;
		elementValue = elementNode.nodeValue;
		if (elementValue != null) {
			return "nodeElementNodeValue: #elementNodeValueNull 'elementValue' equals '" + elementValue + "' not null";
		}
		return "nodeElementNodeValue: OK";
	} catch (e) {
		return "nodeElementNodeValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodeentitynodeattributes.xml" fleur="nodeentitynodeattributes" native="nodeentitynodeattributes"><Fleur>(function(){
	var success;
	try {
		var doc;
		var docType;
		var entities;
		var entityNode;
		var attrList;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		if (docType == null) {
			return "nodeentitynodeattributes: #docTypeNotNull 'docType' is null";
		}
		entities = docType.entities;
		if (entities == null) {
			return "nodeentitynodeattributes: #entitiesNotNull 'entities' is null";
		}
		entityNode = entities.getNamedItem("ent1");
		if (entityNode == null) {
			return "nodeentitynodeattributes: #ent1NotNull 'entityNode' is null";
		}
		attrList = entityNode.attributes;
		if (attrList != null) {
			return "nodeentitynodeattributes: #entityAttributesNull 'attrList' equals '" + attrList + "' not null";
		}
		return "nodeentitynodeattributes: OK";
	} catch (e) {
		return "nodeentitynodeattributes: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var docType;
		var entities;
		var entityNode;
		var attrList;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		if (docType == null) {
			return "nodeentitynodeattributes: #docTypeNotNull 'docType' is null";
		}
		entities = docType.entities;
		if (entities == null) {
			return "nodeentitynodeattributes: #entitiesNotNull 'entities' is null";
		}
		entityNode = entities.getNamedItem("ent1");
		if (entityNode == null) {
			return "nodeentitynodeattributes: #ent1NotNull 'entityNode' is null";
		}
		attrList = entityNode.attributes;
		if (attrList != null) {
			return "nodeentitynodeattributes: #entityAttributesNull 'attrList' equals '" + attrList + "' not null";
		}
		return "nodeentitynodeattributes: OK";
	} catch (e) {
		return "nodeentitynodeattributes: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodeentitynodename.xml" fleur="nodeentitynodename" native="nodeentitynodename"><Fleur>(function(){
	var success;
	try {
		var doc;
		var docType;
		var entities;
		var entityNode;
		var entityName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		if (docType == null) {
			return "nodeEntityNodeName: #docTypeNotNull 'docType' is null";
		}
		entities = docType.entities;
		if (entities == null) {
			return "nodeEntityNodeName: #entitiesNotNull 'entities' is null";
		}
		entityNode = entities.getNamedItem("ent1");
		if (entityNode == null) {
			return "nodeEntityNodeName: #entityNodeNotNull 'entityNode' is null";
		}
		entityName = entityNode.nodeName;
		if ("ent1" !== entityName) {
			return "nodeEntityNodeName: #entityNodeName 'entityName' equals '" + entityName + "' not '" + "ent1" + "'";
		}
		return "nodeEntityNodeName: OK";
	} catch (e) {
		return "nodeEntityNodeName: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var docType;
		var entities;
		var entityNode;
		var entityName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		if (docType == null) {
			return "nodeEntityNodeName: #docTypeNotNull 'docType' is null";
		}
		entities = docType.entities;
		if (entities == null) {
			return "nodeEntityNodeName: #entitiesNotNull 'entities' is null";
		}
		entityNode = entities.getNamedItem("ent1");
		if (entityNode == null) {
			return "nodeEntityNodeName: #entityNodeNotNull 'entityNode' is null";
		}
		entityName = entityNode.nodeName;
		if ("ent1" !== entityName) {
			return "nodeEntityNodeName: #entityNodeName 'entityName' equals '" + entityName + "' not '" + "ent1" + "'";
		}
		return "nodeEntityNodeName: OK";
	} catch (e) {
		return "nodeEntityNodeName: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodeentitynodetype.xml" fleur="nodeentitynodetype" native="nodeentitynodetype"><Fleur>(function(){
	var success;
	try {
		var doc;
		var docType;
		var entities;
		var entityNode;
		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		if (docType == null) {
			return "nodeEntityNodeType: #docTypeNotNull 'docType' is null";
		}
		entities = docType.entities;
		if (entities == null) {
			return "nodeEntityNodeType: #entitiesNotNull 'entities' is null";
		}
		entityNode = entities.getNamedItem("ent1");
		if (entityNode == null) {
			return "nodeEntityNodeType: #ent1NotNull 'entityNode' is null";
		}
		nodeType = entityNode.nodeType;
		if (6 !== nodeType) {
			return "nodeEntityNodeType: #entityNodeType 'nodeType' equals '" + nodeType + "' not '" + 6 + "'";
		}
		return "nodeEntityNodeType: OK";
	} catch (e) {
		return "nodeEntityNodeType: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var docType;
		var entities;
		var entityNode;
		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		if (docType == null) {
			return "nodeEntityNodeType: #docTypeNotNull 'docType' is null";
		}
		entities = docType.entities;
		if (entities == null) {
			return "nodeEntityNodeType: #entitiesNotNull 'entities' is null";
		}
		entityNode = entities.getNamedItem("ent1");
		if (entityNode == null) {
			return "nodeEntityNodeType: #ent1NotNull 'entityNode' is null";
		}
		nodeType = entityNode.nodeType;
		if (6 !== nodeType) {
			return "nodeEntityNodeType: #entityNodeType 'nodeType' equals '" + nodeType + "' not '" + 6 + "'";
		}
		return "nodeEntityNodeType: OK";
	} catch (e) {
		return "nodeEntityNodeType: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodeentitynodevalue.xml" fleur="nodeentitynodevalue" native="nodeentitynodevalue"><Fleur>(function(){
	var success;
	try {
		var doc;
		var docType;
		var entities;
		var entityNode;
		var entityValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		if (docType == null) {
			return "nodeEntityNodeValue: #docTypeNotNull 'docType' is null";
		}
		entities = docType.entities;
		if (entities == null) {
			return "nodeEntityNodeValue: #entitiesNotNull 'entities' is null";
		}
		entityNode = entities.getNamedItem("ent1");
		if (entityNode == null) {
			return "nodeEntityNodeValue: #ent1NotNull 'entityNode' is null";
		}
		entityValue = entityNode.nodeValue;
		if (entityValue != null) {
			return "nodeEntityNodeValue: #entityNodeValue 'entityValue' equals '" + entityValue + "' not null";
		}
		return "nodeEntityNodeValue: OK";
	} catch (e) {
		return "nodeEntityNodeValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var docType;
		var entities;
		var entityNode;
		var entityValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		if (docType == null) {
			return "nodeEntityNodeValue: #docTypeNotNull 'docType' is null";
		}
		entities = docType.entities;
		if (entities == null) {
			return "nodeEntityNodeValue: #entitiesNotNull 'entities' is null";
		}
		entityNode = entities.getNamedItem("ent1");
		if (entityNode == null) {
			return "nodeEntityNodeValue: #ent1NotNull 'entityNode' is null";
		}
		entityValue = entityNode.nodeValue;
		if (entityValue != null) {
			return "nodeEntityNodeValue: #entityNodeValue 'entityValue' equals '" + entityValue + "' not null";
		}
		return "nodeEntityNodeValue: OK";
	} catch (e) {
		return "nodeEntityNodeValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodeentitysetnodevalue.xml" fleur="nodeentitysetnodevalue" native="nodeentitysetnodevalue"><Fleur>(function(){
	var success;
	try {
		var doc;
		var docType;
		var entities;
		var entityNode;
		var entityValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		if (docType == null) {
			return "nodeentitysetnodevalue: #docTypeNotNull 'docType' is null";
		}
		entities = docType.entities;
		if (entities == null) {
			return "nodeentitysetnodevalue: #entitiesNotNull 'entities' is null";
		}
		entityNode = entities.getNamedItem("ent1");
		if (entityNode == null) {
			return "nodeentitysetnodevalue: #ent1NotNull 'entityNode' is null";
		}
		entityNode.nodeValue = "This should have no effect";
		entityValue = entityNode.nodeValue;
		if (entityValue != null) {
			return "nodeentitysetnodevalue: #nodeValueNull 'entityValue' equals '" + entityValue + "' not null";
		}
		return "nodeentitysetnodevalue: OK";
	} catch (e) {
		return "nodeentitysetnodevalue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var docType;
		var entities;
		var entityNode;
		var entityValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		if (docType == null) {
			return "nodeentitysetnodevalue: #docTypeNotNull 'docType' is null";
		}
		entities = docType.entities;
		if (entities == null) {
			return "nodeentitysetnodevalue: #entitiesNotNull 'entities' is null";
		}
		entityNode = entities.getNamedItem("ent1");
		if (entityNode == null) {
			return "nodeentitysetnodevalue: #ent1NotNull 'entityNode' is null";
		}
		entityNode.nodeValue = "This should have no effect";
		entityValue = entityNode.nodeValue;
		if (entityValue != null) {
			return "nodeentitysetnodevalue: #nodeValueNull 'entityValue' equals '" + entityValue + "' not null";
		}
		return "nodeentitysetnodevalue: OK";
	} catch (e) {
		return "nodeentitysetnodevalue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodeentityreferencenodeattributes.xml" fleur="nodeentityreferencenodeattributes" native="nodeentityreferencenodeattributes"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var entRefAddr;
		var entRefNode;
		var attrList;
		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		entRefAddr = elementList.item(1);
		entRefNode = entRefAddr.firstChild;
		nodeType = entRefNode.nodeType;
		if (!(5 == nodeType)) {
			entRefNode = doc.createEntityReference("ent2");
			if (entRefNode == null) {
				return "nodeentityreferencenodeattributes: #createdEntRefNotNull 'entRefNode' is null";
			}
		}
		attrList = entRefNode.attributes;
		if (attrList != null) {
			return "nodeentityreferencenodeattributes: #attrList 'attrList' equals '" + attrList + "' not null";
		}
		return "nodeentityreferencenodeattributes: OK";
	} catch (e) {
		return "nodeentityreferencenodeattributes: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var entRefAddr;
		var entRefNode;
		var attrList;
		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		entRefAddr = elementList.item(1);
		entRefNode = entRefAddr.firstChild;
		nodeType = entRefNode.nodeType;
		if (!(5 == nodeType)) {
			entRefNode = doc.createEntityReference("ent2");
			if (entRefNode == null) {
				return "nodeentityreferencenodeattributes: #createdEntRefNotNull 'entRefNode' is null";
			}
		}
		attrList = entRefNode.attributes;
		if (attrList != null) {
			return "nodeentityreferencenodeattributes: #attrList 'attrList' equals '" + attrList + "' not null";
		}
		return "nodeentityreferencenodeattributes: OK";
	} catch (e) {
		return "nodeentityreferencenodeattributes: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodeentityreferencenodename.xml" fleur="nodeentityreferencenodename" native="nodeentityreferencenodename"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var entRefAddr;
		var entRefNode;
		var entRefName;
		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		entRefAddr = elementList.item(1);
		entRefNode = entRefAddr.firstChild;
		nodeType = entRefNode.nodeType;
		if (!(5 == nodeType)) {
			entRefNode = doc.createEntityReference("ent2");
			if (entRefNode == null) {
				return "nodeEntityReferenceNodeName: #createdEntRefNotNull 'entRefNode' is null";
			}
		}
		entRefName = entRefNode.nodeName;
		if ("ent2" !== entRefName) {
			return "nodeEntityReferenceNodeName: #nodeEntityReferenceNodeNameAssert1 'entRefName' equals '" + entRefName + "' not '" + "ent2" + "'";
		}
		return "nodeEntityReferenceNodeName: OK";
	} catch (e) {
		return "nodeEntityReferenceNodeName: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var entRefAddr;
		var entRefNode;
		var entRefName;
		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		entRefAddr = elementList.item(1);
		entRefNode = entRefAddr.firstChild;
		nodeType = entRefNode.nodeType;
		if (!(5 == nodeType)) {
			entRefNode = doc.createEntityReference("ent2");
			if (entRefNode == null) {
				return "nodeEntityReferenceNodeName: #createdEntRefNotNull 'entRefNode' is null";
			}
		}
		entRefName = entRefNode.nodeName;
		if ("ent2" !== entRefName) {
			return "nodeEntityReferenceNodeName: #nodeEntityReferenceNodeNameAssert1 'entRefName' equals '" + entRefName + "' not '" + "ent2" + "'";
		}
		return "nodeEntityReferenceNodeName: OK";
	} catch (e) {
		return "nodeEntityReferenceNodeName: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodeentityreferencenodetype.xml" fleur="nodeentityreferencenodetype" native="nodeentityreferencenodetype"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var entRefAddr;
		var entRefNode;
		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		entRefAddr = elementList.item(1);
		entRefNode = entRefAddr.firstChild;
		nodeType = entRefNode.nodeType;
		if ((3 == nodeType)) {
			entRefNode = doc.createEntityReference("ent2");
			if (entRefNode == null) {
				return "nodeEntityReferenceNodeType: #createdEntRefNotNull 'entRefNode' is null";
			}
			nodeType = entRefNode.nodeType;
		}
		if (5 !== nodeType) {
			return "nodeEntityReferenceNodeType: #entityNodeType 'nodeType' equals '" + nodeType + "' not '" + 5 + "'";
		}
		return "nodeEntityReferenceNodeType: OK";
	} catch (e) {
		return "nodeEntityReferenceNodeType: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var entRefAddr;
		var entRefNode;
		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		entRefAddr = elementList.item(1);
		entRefNode = entRefAddr.firstChild;
		nodeType = entRefNode.nodeType;
		if ((3 == nodeType)) {
			entRefNode = doc.createEntityReference("ent2");
			if (entRefNode == null) {
				return "nodeEntityReferenceNodeType: #createdEntRefNotNull 'entRefNode' is null";
			}
			nodeType = entRefNode.nodeType;
		}
		if (5 !== nodeType) {
			return "nodeEntityReferenceNodeType: #entityNodeType 'nodeType' equals '" + nodeType + "' not '" + 5 + "'";
		}
		return "nodeEntityReferenceNodeType: OK";
	} catch (e) {
		return "nodeEntityReferenceNodeType: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodeentityreferencenodevalue.xml" fleur="nodeentityreferencenodevalue" native="nodeentityreferencenodevalue"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var entRefAddr;
		var entRefNode;
		var entRefValue;
		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		entRefAddr = elementList.item(1);
		entRefNode = entRefAddr.firstChild;
		nodeType = entRefNode.nodeType;
		if ((3 == nodeType)) {
			entRefNode = doc.createEntityReference("ent2");
			if (entRefNode == null) {
				return "nodeEntityReferenceNodeValue: #createdEntRefNotNull 'entRefNode' is null";
			}
		}
		entRefValue = entRefNode.nodeValue;
		if (entRefValue != null) {
			return "nodeEntityReferenceNodeValue: #entRefNodeValue 'entRefValue' equals '" + entRefValue + "' not null";
		}
		return "nodeEntityReferenceNodeValue: OK";
	} catch (e) {
		return "nodeEntityReferenceNodeValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var entRefAddr;
		var entRefNode;
		var entRefValue;
		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		entRefAddr = elementList.item(1);
		entRefNode = entRefAddr.firstChild;
		nodeType = entRefNode.nodeType;
		if ((3 == nodeType)) {
			entRefNode = doc.createEntityReference("ent2");
			if (entRefNode == null) {
				return "nodeEntityReferenceNodeValue: #createdEntRefNotNull 'entRefNode' is null";
			}
		}
		entRefValue = entRefNode.nodeValue;
		if (entRefValue != null) {
			return "nodeEntityReferenceNodeValue: #entRefNodeValue 'entRefValue' equals '" + entRefValue + "' not null";
		}
		return "nodeEntityReferenceNodeValue: OK";
	} catch (e) {
		return "nodeEntityReferenceNodeValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodegetfirstchild.xml" fleur="nodegetfirstchild" native="nodegetfirstchild"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var fchildNode;
		var childName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		employeeNode = elementList.item(1);
		fchildNode = employeeNode.firstChild;
		childName = fchildNode.nodeName;
		if (("#text" == childName)) {
			fchildNode = fchildNode.nextSibling;
			childName = fchildNode.nodeName;
		}
		if ("employeeId" !== childName) {
			return "nodegetfirstchild: #nodeName 'childName' equals '" + childName + "' not '" + "employeeId" + "'";
		}
		return "nodegetfirstchild: OK";
	} catch (e) {
		return "nodegetfirstchild: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var fchildNode;
		var childName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		employeeNode = elementList.item(1);
		fchildNode = employeeNode.firstChild;
		childName = fchildNode.nodeName;
		if (("#text" == childName)) {
			fchildNode = fchildNode.nextSibling;
			childName = fchildNode.nodeName;
		}
		if ("employeeId" !== childName) {
			return "nodegetfirstchild: #nodeName 'childName' equals '" + childName + "' not '" + "employeeId" + "'";
		}
		return "nodegetfirstchild: OK";
	} catch (e) {
		return "nodegetfirstchild: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodegetfirstchildnull.xml" fleur="nodegetfirstchildnull" native="nodegetfirstchildnull"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var employeeList;
		var secondChildNode;
		var textNode;
		var noChildNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		employeeNode = elementList.item(0);
		employeeList = employeeNode.childNodes;
		secondChildNode = employeeList.item(1);
		textNode = secondChildNode.firstChild;
		noChildNode = textNode.firstChild;
		if (noChildNode != null) {
			return "nodeGetFirstChildNull: #nodeGetFirstChildNullAssert1 'noChildNode' equals '" + noChildNode + "' not null";
		}
		return "nodeGetFirstChildNull: OK";
	} catch (e) {
		return "nodeGetFirstChildNull: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var employeeList;
		var secondChildNode;
		var textNode;
		var noChildNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		employeeNode = elementList.item(0);
		employeeList = employeeNode.childNodes;
		secondChildNode = employeeList.item(1);
		textNode = secondChildNode.firstChild;
		noChildNode = textNode.firstChild;
		if (noChildNode != null) {
			return "nodeGetFirstChildNull: #nodeGetFirstChildNullAssert1 'noChildNode' equals '" + noChildNode + "' not null";
		}
		return "nodeGetFirstChildNull: OK";
	} catch (e) {
		return "nodeGetFirstChildNull: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodegetlastchild.xml" fleur="nodegetlastchild" native="nodegetlastchild"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var lchildNode;
		var childName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		employeeNode = elementList.item(1);
		lchildNode = employeeNode.lastChild;
		childName = lchildNode.nodeName;
		if (("#text" == childName)) {
			lchildNode = lchildNode.previousSibling;
			childName = lchildNode.nodeName;
		}
		if ("address" !== childName) {
			return "nodegetlastchild: #nodeName 'childName' equals '" + childName + "' not '" + "address" + "'";
		}
		return "nodegetlastchild: OK";
	} catch (e) {
		return "nodegetlastchild: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var lchildNode;
		var childName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		employeeNode = elementList.item(1);
		lchildNode = employeeNode.lastChild;
		childName = lchildNode.nodeName;
		if (("#text" == childName)) {
			lchildNode = lchildNode.previousSibling;
			childName = lchildNode.nodeName;
		}
		if ("address" !== childName) {
			return "nodegetlastchild: #nodeName 'childName' equals '" + childName + "' not '" + "address" + "'";
		}
		return "nodegetlastchild: OK";
	} catch (e) {
		return "nodegetlastchild: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodegetlastchildnull.xml" fleur="nodegetlastchildnull" native="nodegetlastchildnull"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var employeeList;
		var secondChildNode;
		var textNode;
		var noChildNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		employeeNode = elementList.item(0);
		employeeList = employeeNode.childNodes;
		secondChildNode = employeeList.item(1);
		textNode = secondChildNode.firstChild;
		noChildNode = textNode.lastChild;
		if (noChildNode != null) {
			return "nodeGetLastChildNull: #nodeGetLastChildNullAssert1 'noChildNode' equals '" + noChildNode + "' not null";
		}
		return "nodeGetLastChildNull: OK";
	} catch (e) {
		return "nodeGetLastChildNull: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var employeeList;
		var secondChildNode;
		var textNode;
		var noChildNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		employeeNode = elementList.item(0);
		employeeList = employeeNode.childNodes;
		secondChildNode = employeeList.item(1);
		textNode = secondChildNode.firstChild;
		noChildNode = textNode.lastChild;
		if (noChildNode != null) {
			return "nodeGetLastChildNull: #nodeGetLastChildNullAssert1 'noChildNode' equals '" + noChildNode + "' not null";
		}
		return "nodeGetLastChildNull: OK";
	} catch (e) {
		return "nodeGetLastChildNull: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodegetnextsibling.xml" fleur="nodegetnextsibling" native="nodegetnextsibling"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeIdNode;
		var nsNode;
		var nsName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employeeId");
		employeeIdNode = elementList.item(1);
		nsNode = employeeIdNode.nextSibling;
		nsName = nsNode.nodeName;
		if (("#text" == nsName)) {
			nsNode = nsNode.nextSibling;
			nsName = nsNode.nodeName;
		}
		if ("name" !== nsName) {
			return "nodegetnextsibling: #nodeName 'nsName' equals '" + nsName + "' not '" + "name" + "'";
		}
		return "nodegetnextsibling: OK";
	} catch (e) {
		return "nodegetnextsibling: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeIdNode;
		var nsNode;
		var nsName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employeeId");
		employeeIdNode = elementList.item(1);
		nsNode = employeeIdNode.nextSibling;
		nsName = nsNode.nodeName;
		if (("#text" == nsName)) {
			nsNode = nsNode.nextSibling;
			nsName = nsNode.nodeName;
		}
		if ("name" !== nsName) {
			return "nodegetnextsibling: #nodeName 'nsName' equals '" + nsName + "' not '" + "name" + "'";
		}
		return "nodegetnextsibling: OK";
	} catch (e) {
		return "nodegetnextsibling: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodegetnextsiblingnull.xml" fleur="nodegetnextsiblingnull" native="nodegetnextsiblingnull"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var lcNode;
		var nsNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		employeeNode = elementList.item(1);
		lcNode = employeeNode.lastChild;
		nsNode = lcNode.nextSibling;
		if (nsNode != null) {
			return "nodeGetNextSiblingNull: #nodeGetNextSiblingNullAssert1 'nsNode' equals '" + nsNode + "' not null";
		}
		return "nodeGetNextSiblingNull: OK";
	} catch (e) {
		return "nodeGetNextSiblingNull: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var lcNode;
		var nsNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		employeeNode = elementList.item(1);
		lcNode = employeeNode.lastChild;
		nsNode = lcNode.nextSibling;
		if (nsNode != null) {
			return "nodeGetNextSiblingNull: #nodeGetNextSiblingNullAssert1 'nsNode' equals '" + nsNode + "' not null";
		}
		return "nodeGetNextSiblingNull: OK";
	} catch (e) {
		return "nodeGetNextSiblingNull: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodegetownerdocument.xml" fleur="nodegetownerdocument" native="nodegetownerdocument"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var docNode;
		var ownerDocument;
		var docElement;
		var elementName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		docNode = elementList.item(1);
		ownerDocument = docNode.ownerDocument;
		docElement = ownerDocument.documentElement;
		elementName = docElement.nodeName;
		if (("text/xml" === "image/svg+xml")) {
			if ("svg" !== elementName) {
				return "nodeGetOwnerDocument: #svgTagName 'elementName' equals '" + elementName + "' not '" + "svg" + "'";
			}
		} else {
			if ("staff" !== elementName) {
				return "nodeGetOwnerDocument: #nodeGetOwnerDocumentAssert1 'elementName' equals '" + elementName + "' not '" + "staff" + "'";
			}
		}
		return "nodeGetOwnerDocument: OK";
	} catch (e) {
		return "nodeGetOwnerDocument: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var docNode;
		var ownerDocument;
		var docElement;
		var elementName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		docNode = elementList.item(1);
		ownerDocument = docNode.ownerDocument;
		docElement = ownerDocument.documentElement;
		elementName = docElement.nodeName;
		if (("text/xml" === "image/svg+xml")) {
			if ("svg" !== elementName) {
				return "nodeGetOwnerDocument: #svgTagName 'elementName' equals '" + elementName + "' not '" + "svg" + "'";
			}
		} else {
			if ("staff" !== elementName) {
				return "nodeGetOwnerDocument: #nodeGetOwnerDocumentAssert1 'elementName' equals '" + elementName + "' not '" + "staff" + "'";
			}
		}
		return "nodeGetOwnerDocument: OK";
	} catch (e) {
		return "nodeGetOwnerDocument: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodegetownerdocumentnull.xml" fleur="nodegetownerdocumentnull" native="nodegetownerdocumentnull"><Fleur>(function(){
	var success;
	try {
		var doc;
		var ownerDocument;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		ownerDocument = doc.ownerDocument;
		if (ownerDocument != null) {
			return "nodeGetOwnerDocumentNull: #documentOwnerDocumentNull 'ownerDocument' equals '" + ownerDocument + "' not null";
		}
		return "nodeGetOwnerDocumentNull: OK";
	} catch (e) {
		return "nodeGetOwnerDocumentNull: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var ownerDocument;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		ownerDocument = doc.ownerDocument;
		if (ownerDocument != null) {
			return "nodeGetOwnerDocumentNull: #documentOwnerDocumentNull 'ownerDocument' equals '" + ownerDocument + "' not null";
		}
		return "nodeGetOwnerDocumentNull: OK";
	} catch (e) {
		return "nodeGetOwnerDocumentNull: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodegetprevioussibling.xml" fleur="nodegetprevioussibling" native="nodegetprevioussibling"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var psNode;
		var psName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("name");
		nameNode = elementList.item(1);
		psNode = nameNode.previousSibling;
		psName = psNode.nodeName;
		if (("#text" == psName)) {
			psNode = psNode.previousSibling;
			psName = psNode.nodeName;
		}
		if ("employeeId" !== psName) {
			return "nodegetprevioussibling: #nodeName 'psName' equals '" + psName + "' not '" + "employeeId" + "'";
		}
		return "nodegetprevioussibling: OK";
	} catch (e) {
		return "nodegetprevioussibling: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var psNode;
		var psName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("name");
		nameNode = elementList.item(1);
		psNode = nameNode.previousSibling;
		psName = psNode.nodeName;
		if (("#text" == psName)) {
			psNode = psNode.previousSibling;
			psName = psNode.nodeName;
		}
		if ("employeeId" !== psName) {
			return "nodegetprevioussibling: #nodeName 'psName' equals '" + psName + "' not '" + "employeeId" + "'";
		}
		return "nodegetprevioussibling: OK";
	} catch (e) {
		return "nodegetprevioussibling: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodegetprevioussiblingnull.xml" fleur="nodegetprevioussiblingnull" native="nodegetprevioussiblingnull"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var fcNode;
		var psNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		employeeNode = elementList.item(2);
		fcNode = employeeNode.firstChild;
		psNode = fcNode.previousSibling;
		if (psNode != null) {
			return "nodeGetPreviousSiblingNull: #nodeGetPreviousSiblingNullAssert1 'psNode' equals '" + psNode + "' not null";
		}
		return "nodeGetPreviousSiblingNull: OK";
	} catch (e) {
		return "nodeGetPreviousSiblingNull: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var fcNode;
		var psNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		employeeNode = elementList.item(2);
		fcNode = employeeNode.firstChild;
		psNode = fcNode.previousSibling;
		if (psNode != null) {
			return "nodeGetPreviousSiblingNull: #nodeGetPreviousSiblingNullAssert1 'psNode' equals '" + psNode + "' not null";
		}
		return "nodeGetPreviousSiblingNull: OK";
	} catch (e) {
		return "nodeGetPreviousSiblingNull: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodehaschildnodes.xml" fleur="nodehaschildnodes" native="nodehaschildnodes"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var state;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		employeeNode = elementList.item(1);
		state = employeeNode.hasChildNodes();
		if (state !== true) {
			return "nodeHasChildAssert1: 'state' equals '" + state + "' not true";
		}
		return "nodeHasChildNodes: OK";
	} catch (e) {
		return "nodeHasChildNodes: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var state;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		employeeNode = elementList.item(1);
		state = employeeNode.hasChildNodes();
		if (state !== true) {
			return "nodeHasChildAssert1: 'state' equals '" + state + "' not true";
		}
		return "nodeHasChildNodes: OK";
	} catch (e) {
		return "nodeHasChildNodes: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodehaschildnodesfalse.xml" fleur="nodehaschildnodesfalse" native="nodehaschildnodesfalse"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var child;
		var employeeIdList;
		var employeeNode;
		var textNode;
		var state;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		child = elementList.item(1);
		employeeIdList = child.childNodes;
		employeeNode = employeeIdList.item(1);
		textNode = employeeNode.firstChild;
		state = textNode.hasChildNodes();
		if (state !== false) {
			return "nodeHasChildFalseAssert1: 'state' equals '" + state + "' not false";
		}
		return "nodeHasChildNodesFalse: OK";
	} catch (e) {
		return "nodeHasChildNodesFalse: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var child;
		var employeeIdList;
		var employeeNode;
		var textNode;
		var state;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		child = elementList.item(1);
		employeeIdList = child.childNodes;
		employeeNode = employeeIdList.item(1);
		textNode = employeeNode.firstChild;
		state = textNode.hasChildNodes();
		if (state !== false) {
			return "nodeHasChildFalseAssert1: 'state' equals '" + state + "' not false";
		}
		return "nodeHasChildNodesFalse: OK";
	} catch (e) {
		return "nodeHasChildNodesFalse: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodeinsertbefore.xml" fleur="nodeinsertbefore" native="nodeinsertbefore"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var childList;
		var refChild;
		var newChild;
		var child;
		var childName;
		var length;
		var insertedNode;
		var actual = new Array();

		expectedWithWhitespace = new Array();
		expectedWithWhitespace[0] = "#text";
		expectedWithWhitespace[1] = "employeeId";
		expectedWithWhitespace[2] = "#text";
		expectedWithWhitespace[3] = "name";
		expectedWithWhitespace[4] = "#text";
		expectedWithWhitespace[5] = "position";
		expectedWithWhitespace[6] = "#text";
		expectedWithWhitespace[7] = "newChild";
		expectedWithWhitespace[8] = "salary";
		expectedWithWhitespace[9] = "#text";
		expectedWithWhitespace[10] = "gender";
		expectedWithWhitespace[11] = "#text";
		expectedWithWhitespace[12] = "address";
		expectedWithWhitespace[13] = "#text";
		expectedWithoutWhitespace = new Array();
		expectedWithoutWhitespace[0] = "employeeId";
		expectedWithoutWhitespace[1] = "name";
		expectedWithoutWhitespace[2] = "position";
		expectedWithoutWhitespace[3] = "newChild";
		expectedWithoutWhitespace[4] = "salary";
		expectedWithoutWhitespace[5] = "gender";
		expectedWithoutWhitespace[6] = "address";
		var expected = new Array();

		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		employeeNode = elementList.item(1);
		childList = employeeNode.childNodes;
		length = childList.length;
		if ((6 == length)) {
			refChild = childList.item(3);
			expected =  expectedWithoutWhitespace;
		} else {
			refChild = childList.item(7);
			expected =  expectedWithWhitespace;
		}
		newChild = doc.createElement("newChild");
		insertedNode = employeeNode.insertBefore(newChild, refChild);
		for (var index_id0x114d6b00 = 0; index_id0x114d6b00 &lt; childList.length; index_id0x114d6b00++) {
			child = childList.item(index_id0x114d6b00);
			childName = child.nodeName;
actual[actual.length] = childName;
		}
		if (expected.join("|") !== actual.join("|")) {
			return "nodeInsertBefore: #nodeNames 'actual' equals '" + actual.join("|") + "' not '" + expected.join("|") + "'";
		}
		return "nodeInsertBefore: OK";
	} catch (e) {
		return "nodeInsertBefore: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var childList;
		var refChild;
		var newChild;
		var child;
		var childName;
		var length;
		var insertedNode;
		var actual = new Array();

		expectedWithWhitespace = new Array();
		expectedWithWhitespace[0] = "#text";
		expectedWithWhitespace[1] = "employeeId";
		expectedWithWhitespace[2] = "#text";
		expectedWithWhitespace[3] = "name";
		expectedWithWhitespace[4] = "#text";
		expectedWithWhitespace[5] = "position";
		expectedWithWhitespace[6] = "#text";
		expectedWithWhitespace[7] = "newChild";
		expectedWithWhitespace[8] = "salary";
		expectedWithWhitespace[9] = "#text";
		expectedWithWhitespace[10] = "gender";
		expectedWithWhitespace[11] = "#text";
		expectedWithWhitespace[12] = "address";
		expectedWithWhitespace[13] = "#text";
		expectedWithoutWhitespace = new Array();
		expectedWithoutWhitespace[0] = "employeeId";
		expectedWithoutWhitespace[1] = "name";
		expectedWithoutWhitespace[2] = "position";
		expectedWithoutWhitespace[3] = "newChild";
		expectedWithoutWhitespace[4] = "salary";
		expectedWithoutWhitespace[5] = "gender";
		expectedWithoutWhitespace[6] = "address";
		var expected = new Array();

		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		employeeNode = elementList.item(1);
		childList = employeeNode.childNodes;
		length = childList.length;
		if ((6 == length)) {
			refChild = childList.item(3);
			expected =  expectedWithoutWhitespace;
		} else {
			refChild = childList.item(7);
			expected =  expectedWithWhitespace;
		}
		newChild = doc.createElement("newChild");
		insertedNode = employeeNode.insertBefore(newChild, refChild);
		for (var index_id0x114d6b00 = 0; index_id0x114d6b00 &lt; childList.length; index_id0x114d6b00++) {
			child = childList.item(index_id0x114d6b00);
			childName = child.nodeName;
actual[actual.length] = childName;
		}
		if (expected.join("|") !== actual.join("|")) {
			return "nodeInsertBefore: #nodeNames 'actual' equals '" + actual.join("|") + "' not '" + expected.join("|") + "'";
		}
		return "nodeInsertBefore: OK";
	} catch (e) {
		return "nodeInsertBefore: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodeinsertbeforedocfragment.xml" fleur="nodeinsertbeforedocfragment" native="nodeinsertbeforedocfragment"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var childList;
		var refChild;
		var newdocFragment;
		var newChild1;
		var newChild2;
		var child;
		var childName;
		var appendedChild;
		var insertedNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		employeeNode = elementList.item(1);
		childList = employeeNode.childNodes;
		refChild = childList.item(3);
		newdocFragment = doc.createDocumentFragment();
		newChild1 = doc.createElement("newChild1");
		newChild2 = doc.createElement("newChild2");
		appendedChild = newdocFragment.appendChild(newChild1);
		appendedChild = newdocFragment.appendChild(newChild2);
		insertedNode = employeeNode.insertBefore(newdocFragment, refChild);
		child = childList.item(3);
		childName = child.nodeName;
		if ("newChild1" !== childName) {
			return "nodeInsertBeforeDocFragment: #childName3 'childName' equals '" + childName + "' not '" + "newChild1" + "'";
		}
		child = childList.item(4);
		childName = child.nodeName;
		if ("newChild2" !== childName) {
			return "nodeInsertBeforeDocFragment: #childName4 'childName' equals '" + childName + "' not '" + "newChild2" + "'";
		}
		return "nodeInsertBeforeDocFragment: OK";
	} catch (e) {
		return "nodeInsertBeforeDocFragment: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var childList;
		var refChild;
		var newdocFragment;
		var newChild1;
		var newChild2;
		var child;
		var childName;
		var appendedChild;
		var insertedNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		employeeNode = elementList.item(1);
		childList = employeeNode.childNodes;
		refChild = childList.item(3);
		newdocFragment = doc.createDocumentFragment();
		newChild1 = doc.createElement("newChild1");
		newChild2 = doc.createElement("newChild2");
		appendedChild = newdocFragment.appendChild(newChild1);
		appendedChild = newdocFragment.appendChild(newChild2);
		insertedNode = employeeNode.insertBefore(newdocFragment, refChild);
		child = childList.item(3);
		childName = child.nodeName;
		if ("newChild1" !== childName) {
			return "nodeInsertBeforeDocFragment: #childName3 'childName' equals '" + childName + "' not '" + "newChild1" + "'";
		}
		child = childList.item(4);
		childName = child.nodeName;
		if ("newChild2" !== childName) {
			return "nodeInsertBeforeDocFragment: #childName4 'childName' equals '" + childName + "' not '" + "newChild2" + "'";
		}
		return "nodeInsertBeforeDocFragment: OK";
	} catch (e) {
		return "nodeInsertBeforeDocFragment: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodeinsertbeforeinvalidnodetype.xml" fleur="nodeinsertbeforeinvalidnodetype" native="nodeinsertbeforeinvalidnodetype"><Fleur>(function(){
	var success;
	try {
		var doc;
		var rootNode;
		var newChild;
		var elementList;
		var refChild;
		var insertedNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		rootNode = doc.documentElement;
		newChild = doc.createAttribute("newAttribute");
		elementList = doc.getElementsByTagName("employee");
		refChild = elementList.item(1);
		success = false;
		try {
			insertedNode = rootNode.insertBefore(newChild, refChild);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 3;
			}
		}
		if (!success) {
			return "nodeInsertBeforeInvalidNodeType: Exception HIERARCHY_REQUEST_ERR expected";
		}
		return "nodeInsertBeforeInvalidNodeType: OK";
	} catch (e) {
		return "nodeInsertBeforeInvalidNodeType: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var rootNode;
		var newChild;
		var elementList;
		var refChild;
		var insertedNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		rootNode = doc.documentElement;
		newChild = doc.createAttribute("newAttribute");
		elementList = doc.getElementsByTagName("employee");
		refChild = elementList.item(1);
		success = false;
		try {
			insertedNode = rootNode.insertBefore(newChild, refChild);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 3;
			}
		}
		if (!success) {
			return "nodeInsertBeforeInvalidNodeType: Exception HIERARCHY_REQUEST_ERR expected";
		}
		return "nodeInsertBeforeInvalidNodeType: OK";
	} catch (e) {
		return "nodeInsertBeforeInvalidNodeType: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodeinsertbeforenewchilddiffdocument.xml" fleur="nodeinsertbeforenewchilddiffdocument" native="nodeinsertbeforenewchilddiffdocument"><Fleur>(function(){
	var success;
	try {
		var doc1;
		var doc2;
		var refChild;
		var newChild;
		var elementList;
		var elementNode;
		var insertedNode;
		var doc1Req = new XMLHttpRequest();
		doc1Req.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		doc1Req.send();
		doc1 = new Fleur.DOMParser().parseFromString(doc1Req.responseText, "text/xml");
		var doc2Req = new XMLHttpRequest();
		doc2Req.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		doc2Req.send();
		doc2 = new Fleur.DOMParser().parseFromString(doc2Req.responseText, "text/xml");
		newChild = doc1.createElement("newChild");
		elementList = doc2.getElementsByTagName("employee");
		elementNode = elementList.item(1);
		refChild = elementNode.firstChild;
		success = false;
		try {
			insertedNode = elementNode.insertBefore(newChild, refChild);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 4;
			}
		}
		if (!success) {
			return "nodeInsertBeforeNewChildDiffDocument: Exception WRONG_DOCUMENT_ERR expected";
		}
		return "nodeInsertBeforeNewChildDiffDocument: OK";
	} catch (e) {
		return "nodeInsertBeforeNewChildDiffDocument: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc1;
		var doc2;
		var refChild;
		var newChild;
		var elementList;
		var elementNode;
		var insertedNode;
		var doc1Req = new XMLHttpRequest();
		doc1Req.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		doc1Req.send();
		doc1 = new DOMParser().parseFromString(doc1Req.responseText, "text/xml");
		var doc2Req = new XMLHttpRequest();
		doc2Req.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		doc2Req.send();
		doc2 = new DOMParser().parseFromString(doc2Req.responseText, "text/xml");
		newChild = doc1.createElement("newChild");
		elementList = doc2.getElementsByTagName("employee");
		elementNode = elementList.item(1);
		refChild = elementNode.firstChild;
		success = false;
		try {
			insertedNode = elementNode.insertBefore(newChild, refChild);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 4;
			}
		}
		if (!success) {
			return "nodeInsertBeforeNewChildDiffDocument: Exception WRONG_DOCUMENT_ERR expected";
		}
		return "nodeInsertBeforeNewChildDiffDocument: OK";
	} catch (e) {
		return "nodeInsertBeforeNewChildDiffDocument: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodeinsertbeforenewchildexists.xml" fleur="nodeinsertbeforenewchildexists" native="nodeinsertbeforenewchildexists"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var childList;
		var refChild;
		var newChild;
		var child;
		var length;
		var childName;
		var insertedNode;
		expectedWhitespace = new Array();
		expectedWhitespace[0] = "#text";
		expectedWhitespace[1] = "#text";
		expectedWhitespace[2] = "name";
		expectedWhitespace[3] = "#text";
		expectedWhitespace[4] = "position";
		expectedWhitespace[5] = "#text";
		expectedWhitespace[6] = "salary";
		expectedWhitespace[7] = "#text";
		expectedWhitespace[8] = "gender";
		expectedWhitespace[9] = "#text";
		expectedWhitespace[10] = "employeeId";
		expectedWhitespace[11] = "address";
		expectedWhitespace[12] = "#text";
		expectedNoWhitespace = new Array();
		expectedNoWhitespace[0] = "name";
		expectedNoWhitespace[1] = "position";
		expectedNoWhitespace[2] = "salary";
		expectedNoWhitespace[3] = "gender";
		expectedNoWhitespace[4] = "employeeId";
		expectedNoWhitespace[5] = "address";
		var expected = new Array();

		var result = new Array();

		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		employeeNode = elementList.item(1);
		childList = employeeNode.childNodes;
		length = childList.length;
		if ((6 == length)) {
			expected =  expectedNoWhitespace;
			refChild = childList.item(5);
			newChild = childList.item(0);
		} else {
			expected =  expectedWhitespace;
			refChild = childList.item(11);
			newChild = childList.item(1);
		}
		insertedNode = employeeNode.insertBefore(newChild, refChild);
		for (var index_id0x11513bf0 = 0; index_id0x11513bf0 &lt; childList.length; index_id0x11513bf0++) {
			child = childList.item(index_id0x11513bf0);
			childName = child.nodeName;
result[result.length] = childName;
		}
		if (expected.join("|") !== result.join("|")) {
			return "nodeInsertBeforeNewChildExists: #childNames 'result' equals '" + result.join("|") + "' not '" + expected.join("|") + "'";
		}
		return "nodeInsertBeforeNewChildExists: OK";
	} catch (e) {
		return "nodeInsertBeforeNewChildExists: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var childList;
		var refChild;
		var newChild;
		var child;
		var length;
		var childName;
		var insertedNode;
		expectedWhitespace = new Array();
		expectedWhitespace[0] = "#text";
		expectedWhitespace[1] = "#text";
		expectedWhitespace[2] = "name";
		expectedWhitespace[3] = "#text";
		expectedWhitespace[4] = "position";
		expectedWhitespace[5] = "#text";
		expectedWhitespace[6] = "salary";
		expectedWhitespace[7] = "#text";
		expectedWhitespace[8] = "gender";
		expectedWhitespace[9] = "#text";
		expectedWhitespace[10] = "employeeId";
		expectedWhitespace[11] = "address";
		expectedWhitespace[12] = "#text";
		expectedNoWhitespace = new Array();
		expectedNoWhitespace[0] = "name";
		expectedNoWhitespace[1] = "position";
		expectedNoWhitespace[2] = "salary";
		expectedNoWhitespace[3] = "gender";
		expectedNoWhitespace[4] = "employeeId";
		expectedNoWhitespace[5] = "address";
		var expected = new Array();

		var result = new Array();

		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		employeeNode = elementList.item(1);
		childList = employeeNode.childNodes;
		length = childList.length;
		if ((6 == length)) {
			expected =  expectedNoWhitespace;
			refChild = childList.item(5);
			newChild = childList.item(0);
		} else {
			expected =  expectedWhitespace;
			refChild = childList.item(11);
			newChild = childList.item(1);
		}
		insertedNode = employeeNode.insertBefore(newChild, refChild);
		for (var index_id0x11513bf0 = 0; index_id0x11513bf0 &lt; childList.length; index_id0x11513bf0++) {
			child = childList.item(index_id0x11513bf0);
			childName = child.nodeName;
result[result.length] = childName;
		}
		if (expected.join("|") !== result.join("|")) {
			return "nodeInsertBeforeNewChildExists: #childNames 'result' equals '" + result.join("|") + "' not '" + expected.join("|") + "'";
		}
		return "nodeInsertBeforeNewChildExists: OK";
	} catch (e) {
		return "nodeInsertBeforeNewChildExists: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodeinsertbeforenodeancestor.xml" fleur="nodeinsertbeforenodeancestor" native="nodeinsertbeforenodeancestor"><Fleur>(function(){
	var success;
	try {
		var doc;
		var newChild;
		var elementList;
		var employeeNode;
		var childList;
		var refChild;
		var insertedNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		newChild = doc.documentElement;
		elementList = doc.getElementsByTagName("employee");
		employeeNode = elementList.item(1);
		childList = employeeNode.childNodes;
		refChild = childList.item(0);
		success = false;
		try {
			insertedNode = employeeNode.insertBefore(newChild, refChild);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 3;
			}
		}
		if (!success) {
			return "nodeInsertBeforeNodeAncestor: Exception HIERARCHY_REQUEST_ERR expected";
		}
		return "nodeInsertBeforeNodeAncestor: OK";
	} catch (e) {
		return "nodeInsertBeforeNodeAncestor: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var newChild;
		var elementList;
		var employeeNode;
		var childList;
		var refChild;
		var insertedNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		newChild = doc.documentElement;
		elementList = doc.getElementsByTagName("employee");
		employeeNode = elementList.item(1);
		childList = employeeNode.childNodes;
		refChild = childList.item(0);
		success = false;
		try {
			insertedNode = employeeNode.insertBefore(newChild, refChild);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 3;
			}
		}
		if (!success) {
			return "nodeInsertBeforeNodeAncestor: Exception HIERARCHY_REQUEST_ERR expected";
		}
		return "nodeInsertBeforeNodeAncestor: OK";
	} catch (e) {
		return "nodeInsertBeforeNodeAncestor: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodeinsertbeforenodename.xml" fleur="nodeinsertbeforenodename" native="nodeinsertbeforenodename"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var childList;
		var refChild;
		var newChild;
		var insertedNode;
		var childName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		employeeNode = elementList.item(1);
		childList = employeeNode.childNodes;
		refChild = childList.item(3);
		newChild = doc.createElement("newChild");
		insertedNode = employeeNode.insertBefore(newChild, refChild);
		childName = insertedNode.nodeName;
		if ("newChild" !== childName) {
			return "nodeInsertBeforeNodeName: #nodeInsertBeforeNodeNameAssert1 'childName' equals '" + childName + "' not '" + "newChild" + "'";
		}
		return "nodeInsertBeforeNodeName: OK";
	} catch (e) {
		return "nodeInsertBeforeNodeName: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var childList;
		var refChild;
		var newChild;
		var insertedNode;
		var childName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		employeeNode = elementList.item(1);
		childList = employeeNode.childNodes;
		refChild = childList.item(3);
		newChild = doc.createElement("newChild");
		insertedNode = employeeNode.insertBefore(newChild, refChild);
		childName = insertedNode.nodeName;
		if ("newChild" !== childName) {
			return "nodeInsertBeforeNodeName: #nodeInsertBeforeNodeNameAssert1 'childName' equals '" + childName + "' not '" + "newChild" + "'";
		}
		return "nodeInsertBeforeNodeName: OK";
	} catch (e) {
		return "nodeInsertBeforeNodeName: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodeinsertbeforenomodificationallowederr.xml" fleur="nodeinsertbeforenomodificationallowederr" native="nodeinsertbeforenomodificationallowederr"><Fleur>(function(){
	var success;
	try {
		var doc;
		var genderList;
		var genderNode;
		var entRef;
		var entElement;
		var createdNode;
		var insertedNode;
		var refChild = null;
		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		genderList = doc.getElementsByTagName("gender");
		genderNode = genderList.item(2);
		entRef = genderNode.firstChild;
		if (entRef == null) {
			return "nodeInsertBeforeNoModificationAllowedErr: #entRefNotNull 'entRef' is null";
		}
		nodeType = entRef.nodeType;
		if ((1 == nodeType)) {
			entRef = doc.createEntityReference("ent4");
			if (entRef == null) {
				return "nodeInsertBeforeNoModificationAllowedErr: #createdEntRefNotNull 'entRef' is null";
			}
		}
		entElement = entRef.firstChild;
		if (entElement == null) {
			return "nodeInsertBeforeNoModificationAllowedErr: #entElementNotNull 'entElement' is null";
		}
		createdNode = doc.createElement("text3");
		success = false;
		try {
			insertedNode = entElement.insertBefore(createdNode, refChild);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "nodeInsertBeforeNoModificationAllowedErr: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "nodeInsertBeforeNoModificationAllowedErr: OK";
	} catch (e) {
		return "nodeInsertBeforeNoModificationAllowedErr: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var genderList;
		var genderNode;
		var entRef;
		var entElement;
		var createdNode;
		var insertedNode;
		var refChild = null;
		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		genderList = doc.getElementsByTagName("gender");
		genderNode = genderList.item(2);
		entRef = genderNode.firstChild;
		if (entRef == null) {
			return "nodeInsertBeforeNoModificationAllowedErr: #entRefNotNull 'entRef' is null";
		}
		nodeType = entRef.nodeType;
		if ((1 == nodeType)) {
			entRef = doc.createEntityReference("ent4");
			if (entRef == null) {
				return "nodeInsertBeforeNoModificationAllowedErr: #createdEntRefNotNull 'entRef' is null";
			}
		}
		entElement = entRef.firstChild;
		if (entElement == null) {
			return "nodeInsertBeforeNoModificationAllowedErr: #entElementNotNull 'entElement' is null";
		}
		createdNode = doc.createElement("text3");
		success = false;
		try {
			insertedNode = entElement.insertBefore(createdNode, refChild);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "nodeInsertBeforeNoModificationAllowedErr: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "nodeInsertBeforeNoModificationAllowedErr: OK";
	} catch (e) {
		return "nodeInsertBeforeNoModificationAllowedErr: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodeinsertbeforenomodificationallowederrEE.xml" fleur="nodeinsertbeforenomodificationallowederrEE" native="nodeinsertbeforenomodificationallowederrEE"><Fleur>(function(){
	var success;
	try {
		var doc;
		var entRef;
		var createdNode;
		var insertedNode;
		var refChild = null;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		entRef = doc.createEntityReference("ent4");
		if (entRef == null) {
			return "nodeInsertBeforeNoModificationAllowedErrEE: #createdEntRefNotNull 'entRef' is null";
		}
		createdNode = doc.createElement("text3");
		success = false;
		try {
			insertedNode = entRef.insertBefore(createdNode, refChild);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "nodeInsertBeforeNoModificationAllowedErrEE: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "nodeInsertBeforeNoModificationAllowedErrEE: OK";
	} catch (e) {
		return "nodeInsertBeforeNoModificationAllowedErrEE: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var entRef;
		var createdNode;
		var insertedNode;
		var refChild = null;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		entRef = doc.createEntityReference("ent4");
		if (entRef == null) {
			return "nodeInsertBeforeNoModificationAllowedErrEE: #createdEntRefNotNull 'entRef' is null";
		}
		createdNode = doc.createElement("text3");
		success = false;
		try {
			insertedNode = entRef.insertBefore(createdNode, refChild);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "nodeInsertBeforeNoModificationAllowedErrEE: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "nodeInsertBeforeNoModificationAllowedErrEE: OK";
	} catch (e) {
		return "nodeInsertBeforeNoModificationAllowedErrEE: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodeinsertbeforerefchildnonexistent.xml" fleur="nodeinsertbeforerefchildnonexistent" native="nodeinsertbeforerefchildnonexistent"><Fleur>(function(){
	var success;
	try {
		var doc;
		var refChild;
		var newChild;
		var elementList;
		var elementNode;
		var insertedNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		newChild = doc.createElement("newChild");
		refChild = doc.createElement("refChild");
		elementList = doc.getElementsByTagName("employee");
		elementNode = elementList.item(1);
		success = false;
		try {
			insertedNode = elementNode.insertBefore(newChild, refChild);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 8;
			}
		}
		if (!success) {
			return "nodeInsertBeforeRefChildNonexistent: Exception NOT_FOUND_ERR expected";
		}
		return "nodeInsertBeforeRefChildNonexistent: OK";
	} catch (e) {
		return "nodeInsertBeforeRefChildNonexistent: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var refChild;
		var newChild;
		var elementList;
		var elementNode;
		var insertedNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		newChild = doc.createElement("newChild");
		refChild = doc.createElement("refChild");
		elementList = doc.getElementsByTagName("employee");
		elementNode = elementList.item(1);
		success = false;
		try {
			insertedNode = elementNode.insertBefore(newChild, refChild);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 8;
			}
		}
		if (!success) {
			return "nodeInsertBeforeRefChildNonexistent: Exception NOT_FOUND_ERR expected";
		}
		return "nodeInsertBeforeRefChildNonexistent: OK";
	} catch (e) {
		return "nodeInsertBeforeRefChildNonexistent: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodeinsertbeforerefchildnull.xml" fleur="nodeinsertbeforerefchildnull" native="nodeinsertbeforerefchildnull"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var childList;
		var refChild = null;
		var newChild;
		var child;
		var childName;
		var insertedNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		employeeNode = elementList.item(1);
		childList = employeeNode.childNodes;
		newChild = doc.createElement("newChild");
		insertedNode = employeeNode.insertBefore(newChild, refChild);
		child = employeeNode.lastChild;
		childName = child.nodeName;
		if ("newChild" !== childName) {
			return "nodeInsertBeforeRefChildNull: #nodeInsertBeforeRefChildNullAssert1 'childName' equals '" + childName + "' not '" + "newChild" + "'";
		}
		return "nodeInsertBeforeRefChildNull: OK";
	} catch (e) {
		return "nodeInsertBeforeRefChildNull: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var childList;
		var refChild = null;
		var newChild;
		var child;
		var childName;
		var insertedNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		employeeNode = elementList.item(1);
		childList = employeeNode.childNodes;
		newChild = doc.createElement("newChild");
		insertedNode = employeeNode.insertBefore(newChild, refChild);
		child = employeeNode.lastChild;
		childName = child.nodeName;
		if ("newChild" !== childName) {
			return "nodeInsertBeforeRefChildNull: #nodeInsertBeforeRefChildNullAssert1 'childName' equals '" + childName + "' not '" + "newChild" + "'";
		}
		return "nodeInsertBeforeRefChildNull: OK";
	} catch (e) {
		return "nodeInsertBeforeRefChildNull: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodelistindexequalzero.xml" fleur="nodelistindexequalzero" native="nodelistindexequalzero"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var employeeList;
		var child;
		var childName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		employeeNode = elementList.item(2);
		employeeList = employeeNode.childNodes;
		child = employeeList.item(0);
		childName = child.nodeName;
		if (!("#text" == childName)) {
			if ("employeeId" !== childName) {
				return "nodelistindexequalzero: #childName 'childName' equals '" + childName + "' not '" + "employeeId" + "'";
			}
		}
		return "nodelistindexequalzero: OK";
	} catch (e) {
		return "nodelistindexequalzero: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var employeeList;
		var child;
		var childName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		employeeNode = elementList.item(2);
		employeeList = employeeNode.childNodes;
		child = employeeList.item(0);
		childName = child.nodeName;
		if (!("#text" == childName)) {
			if ("employeeId" !== childName) {
				return "nodelistindexequalzero: #childName 'childName' equals '" + childName + "' not '" + "employeeId" + "'";
			}
		}
		return "nodelistindexequalzero: OK";
	} catch (e) {
		return "nodelistindexequalzero: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodelistindexgetlength.xml" fleur="nodelistindexgetlength" native="nodelistindexgetlength"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var employeeList;
		var length;
		var expectedCount = 0;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		employeeNode = elementList.item(2);
		employeeList = employeeNode.childNodes;
		length = employeeList.length;
		if (((6 == length) || (13 == length)) !== true) {
			return "lengthIs6or13: '((6 == length) || (13 == length))' equals '" + ((6 == length) || (13 == length)) + "' not true";
		}
		return "nodelistIndexGetLength: OK";
	} catch (e) {
		return "nodelistIndexGetLength: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var employeeList;
		var length;
		var expectedCount = 0;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		employeeNode = elementList.item(2);
		employeeList = employeeNode.childNodes;
		length = employeeList.length;
		if (((6 == length) || (13 == length)) !== true) {
			return "lengthIs6or13: '((6 == length) || (13 == length))' equals '" + ((6 == length) || (13 == length)) + "' not true";
		}
		return "nodelistIndexGetLength: OK";
	} catch (e) {
		return "nodelistIndexGetLength: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodelistindexgetlengthofemptylist.xml" fleur="nodelistindexgetlengthofemptylist" native="nodelistindexgetlengthofemptylist"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var employeeList;
		var childNode;
		var textNode;
		var textList;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		employeeNode = elementList.item(2);
		employeeList = employeeNode.childNodes;
		childNode = employeeList.item(1);
		textNode = childNode.firstChild;
		textList = textNode.childNodes;
		if (textList.length !== 0) {
			return "nodelistIndexGetLengthOfEmptyList: #nodelistIndexGetLengthOfEmptyListAssert 'textList.length' equals " + textList.length + " not 0";
		}
		return "nodelistIndexGetLengthOfEmptyList: OK";
	} catch (e) {
		return "nodelistIndexGetLengthOfEmptyList: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var employeeList;
		var childNode;
		var textNode;
		var textList;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		employeeNode = elementList.item(2);
		employeeList = employeeNode.childNodes;
		childNode = employeeList.item(1);
		textNode = childNode.firstChild;
		textList = textNode.childNodes;
		if (textList.length !== 0) {
			return "nodelistIndexGetLengthOfEmptyList: #nodelistIndexGetLengthOfEmptyListAssert 'textList.length' equals " + textList.length + " not 0";
		}
		return "nodelistIndexGetLengthOfEmptyList: OK";
	} catch (e) {
		return "nodelistIndexGetLengthOfEmptyList: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodelistindexnotzero.xml" fleur="nodelistindexnotzero" native="nodelistindexnotzero"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var employeeList;
		var child;
		var length;
		var childName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		employeeNode = elementList.item(2);
		employeeList = employeeNode.childNodes;
		length = employeeList.length;
		if ((6 == length)) {
			child = employeeList.item(1);
		} else {
			child = employeeList.item(3);
		}
		childName = child.nodeName;
		if ("name" !== childName) {
			return "nodelistIndexNotZero: #nodeName 'childName' equals '" + childName + "' not '" + "name" + "'";
		}
		return "nodelistIndexNotZero: OK";
	} catch (e) {
		return "nodelistIndexNotZero: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var employeeList;
		var child;
		var length;
		var childName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		employeeNode = elementList.item(2);
		employeeList = employeeNode.childNodes;
		length = employeeList.length;
		if ((6 == length)) {
			child = employeeList.item(1);
		} else {
			child = employeeList.item(3);
		}
		childName = child.nodeName;
		if ("name" !== childName) {
			return "nodelistIndexNotZero: #nodeName 'childName' equals '" + childName + "' not '" + "name" + "'";
		}
		return "nodelistIndexNotZero: OK";
	} catch (e) {
		return "nodelistIndexNotZero: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodelistreturnfirstitem.xml" fleur="nodelistreturnfirstitem" native="nodelistreturnfirstitem"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var employeeList;
		var child;
		var childName;
		var length;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		employeeNode = elementList.item(2);
		employeeList = employeeNode.childNodes;
		child = employeeList.item(0);
		childName = child.nodeName;
		length = employeeList.length;
		if ((6 == length)) {
			if ("employeeId".toLowerCase() !== childName.toLowerCase()) {
				return "nodelistReturnFirstItem: #firstChildNoWhitespace 'childName' equals '" + childName.toLowerCase() + "' not '" + "employeeId".toLowerCase() + "'";
			}
		} else {
			if ("#text".toLowerCase() !== childName.toLowerCase()) {
				return "nodelistReturnFirstItem: #firstChildWithWhitespace 'childName' equals '" + childName.toLowerCase() + "' not '" + "#text".toLowerCase() + "'";
			}
		}
		return "nodelistReturnFirstItem: OK";
	} catch (e) {
		return "nodelistReturnFirstItem: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var employeeList;
		var child;
		var childName;
		var length;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		employeeNode = elementList.item(2);
		employeeList = employeeNode.childNodes;
		child = employeeList.item(0);
		childName = child.nodeName;
		length = employeeList.length;
		if ((6 == length)) {
			if ("employeeId".toLowerCase() !== childName.toLowerCase()) {
				return "nodelistReturnFirstItem: #firstChildNoWhitespace 'childName' equals '" + childName.toLowerCase() + "' not '" + "employeeId".toLowerCase() + "'";
			}
		} else {
			if ("#text".toLowerCase() !== childName.toLowerCase()) {
				return "nodelistReturnFirstItem: #firstChildWithWhitespace 'childName' equals '" + childName.toLowerCase() + "' not '" + "#text".toLowerCase() + "'";
			}
		}
		return "nodelistReturnFirstItem: OK";
	} catch (e) {
		return "nodelistReturnFirstItem: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodelistreturnlastitem.xml" fleur="nodelistreturnlastitem" native="nodelistreturnlastitem"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var employeeList;
		var child;
		var childName;
		var length;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		employeeNode = elementList.item(2);
		employeeList = employeeNode.childNodes;
		length = employeeList.length;
		if ((6 == length)) {
			child = employeeList.item(5);
			childName = child.nodeName;
			if ("address" !== childName) {
				return "nodelistReturnLastItem: #nodeName1 'childName' equals '" + childName + "' not '" + "address" + "'";
			}
		} else {
			child = employeeList.item(12);
			childName = child.nodeName;
			if ("#text" !== childName) {
				return "nodelistReturnLastItem: #nodeName2 'childName' equals '" + childName + "' not '" + "#text" + "'";
			}
		}
		return "nodelistReturnLastItem: OK";
	} catch (e) {
		return "nodelistReturnLastItem: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var employeeList;
		var child;
		var childName;
		var length;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		employeeNode = elementList.item(2);
		employeeList = employeeNode.childNodes;
		length = employeeList.length;
		if ((6 == length)) {
			child = employeeList.item(5);
			childName = child.nodeName;
			if ("address" !== childName) {
				return "nodelistReturnLastItem: #nodeName1 'childName' equals '" + childName + "' not '" + "address" + "'";
			}
		} else {
			child = employeeList.item(12);
			childName = child.nodeName;
			if ("#text" !== childName) {
				return "nodelistReturnLastItem: #nodeName2 'childName' equals '" + childName + "' not '" + "#text" + "'";
			}
		}
		return "nodelistReturnLastItem: OK";
	} catch (e) {
		return "nodelistReturnLastItem: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodelisttraverselist.xml" fleur="nodelisttraverselist" native="nodelisttraverselist"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var employeeList;
		var child;
		var childName;
		var result = new Array();

		var length;
		expectedWhitespace = new Array();
		expectedWhitespace[0] = "#text";
		expectedWhitespace[1] = "employeeId";
		expectedWhitespace[2] = "#text";
		expectedWhitespace[3] = "name";
		expectedWhitespace[4] = "#text";
		expectedWhitespace[5] = "position";
		expectedWhitespace[6] = "#text";
		expectedWhitespace[7] = "salary";
		expectedWhitespace[8] = "#text";
		expectedWhitespace[9] = "gender";
		expectedWhitespace[10] = "#text";
		expectedWhitespace[11] = "address";
		expectedWhitespace[12] = "#text";
		expectedNoWhitespace = new Array();
		expectedNoWhitespace[0] = "employeeId";
		expectedNoWhitespace[1] = "name";
		expectedNoWhitespace[2] = "position";
		expectedNoWhitespace[3] = "salary";
		expectedNoWhitespace[4] = "gender";
		expectedNoWhitespace[5] = "address";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		employeeNode = elementList.item(2);
		employeeList = employeeNode.childNodes;
		length = employeeList.length;
		for (var index_id0x116dc5b0 = 0; index_id0x116dc5b0 &lt; employeeList.length; index_id0x116dc5b0++) {
			child = employeeList.item(index_id0x116dc5b0);
			childName = child.nodeName;
result[result.length] = childName;
		}
		if ((6 == length)) {
			if (expectedNoWhitespace.join("|") !== result.join("|")) {
				return "nodelistTraverseList: #nowhitespace 'result' equals '" + result.join("|") + "' not '" + expectedNoWhitespace.join("|") + "'";
			}
		} else {
			if (expectedWhitespace.join("|") !== result.join("|")) {
				return "nodelistTraverseList: #whitespace 'result' equals '" + result.join("|") + "' not '" + expectedWhitespace.join("|") + "'";
			}
		}
		return "nodelistTraverseList: OK";
	} catch (e) {
		return "nodelistTraverseList: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var employeeList;
		var child;
		var childName;
		var result = new Array();

		var length;
		expectedWhitespace = new Array();
		expectedWhitespace[0] = "#text";
		expectedWhitespace[1] = "employeeId";
		expectedWhitespace[2] = "#text";
		expectedWhitespace[3] = "name";
		expectedWhitespace[4] = "#text";
		expectedWhitespace[5] = "position";
		expectedWhitespace[6] = "#text";
		expectedWhitespace[7] = "salary";
		expectedWhitespace[8] = "#text";
		expectedWhitespace[9] = "gender";
		expectedWhitespace[10] = "#text";
		expectedWhitespace[11] = "address";
		expectedWhitespace[12] = "#text";
		expectedNoWhitespace = new Array();
		expectedNoWhitespace[0] = "employeeId";
		expectedNoWhitespace[1] = "name";
		expectedNoWhitespace[2] = "position";
		expectedNoWhitespace[3] = "salary";
		expectedNoWhitespace[4] = "gender";
		expectedNoWhitespace[5] = "address";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		employeeNode = elementList.item(2);
		employeeList = employeeNode.childNodes;
		length = employeeList.length;
		for (var index_id0x116dc5b0 = 0; index_id0x116dc5b0 &lt; employeeList.length; index_id0x116dc5b0++) {
			child = employeeList.item(index_id0x116dc5b0);
			childName = child.nodeName;
result[result.length] = childName;
		}
		if ((6 == length)) {
			if (expectedNoWhitespace.join("|") !== result.join("|")) {
				return "nodelistTraverseList: #nowhitespace 'result' equals '" + result.join("|") + "' not '" + expectedNoWhitespace.join("|") + "'";
			}
		} else {
			if (expectedWhitespace.join("|") !== result.join("|")) {
				return "nodelistTraverseList: #whitespace 'result' equals '" + result.join("|") + "' not '" + expectedWhitespace.join("|") + "'";
			}
		}
		return "nodelistTraverseList: OK";
	} catch (e) {
		return "nodelistTraverseList: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodenotationnodeattributes.xml" fleur="nodenotationnodeattributes" native="nodenotationnodeattributes"><Fleur>(function(){
	var success;
	try {
		var doc;
		var docType;
		var notations;
		var notationNode;
		var attrList;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		if (docType == null) {
			return "nodeNotationNodeAttributes: #docTypeNotNull 'docType' is null";
		}
		notations = docType.notations;
		if (notations == null) {
			return "nodeNotationNodeAttributes: #notationsNotNull 'notations' is null";
		}
		notationNode = notations.getNamedItem("notation1");
		if (notationNode == null) {
			return "nodeNotationNodeAttributes: #notationNotNull 'notationNode' is null";
		}
		attrList = notationNode.attributes;
		if (attrList != null) {
			return "nodeNotationNodeAttributes: #nodeNotationNodeAttributesAssert1 'attrList' equals '" + attrList + "' not null";
		}
		return "nodeNotationNodeAttributes: OK";
	} catch (e) {
		return "nodeNotationNodeAttributes: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var docType;
		var notations;
		var notationNode;
		var attrList;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		if (docType == null) {
			return "nodeNotationNodeAttributes: #docTypeNotNull 'docType' is null";
		}
		notations = docType.notations;
		if (notations == null) {
			return "nodeNotationNodeAttributes: #notationsNotNull 'notations' is null";
		}
		notationNode = notations.getNamedItem("notation1");
		if (notationNode == null) {
			return "nodeNotationNodeAttributes: #notationNotNull 'notationNode' is null";
		}
		attrList = notationNode.attributes;
		if (attrList != null) {
			return "nodeNotationNodeAttributes: #nodeNotationNodeAttributesAssert1 'attrList' equals '" + attrList + "' not null";
		}
		return "nodeNotationNodeAttributes: OK";
	} catch (e) {
		return "nodeNotationNodeAttributes: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodenotationnodename.xml" fleur="nodenotationnodename" native="nodenotationnodename"><Fleur>(function(){
	var success;
	try {
		var doc;
		var docType;
		var notations;
		var notationNode;
		var notationName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		if (docType == null) {
			return "nodeNotationNodeName: #docTypeNotNull 'docType' is null";
		}
		notations = docType.notations;
		if (notations == null) {
			return "nodeNotationNodeName: #notationsNotNull 'notations' is null";
		}
		notationNode = notations.getNamedItem("notation1");
		if (notationNode == null) {
			return "nodeNotationNodeName: #notationNotNull 'notationNode' is null";
		}
		notationName = notationNode.nodeName;
		if ("notation1" !== notationName) {
			return "nodeNotationNodeName: #nodeName 'notationName' equals '" + notationName + "' not '" + "notation1" + "'";
		}
		return "nodeNotationNodeName: OK";
	} catch (e) {
		return "nodeNotationNodeName: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var docType;
		var notations;
		var notationNode;
		var notationName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		if (docType == null) {
			return "nodeNotationNodeName: #docTypeNotNull 'docType' is null";
		}
		notations = docType.notations;
		if (notations == null) {
			return "nodeNotationNodeName: #notationsNotNull 'notations' is null";
		}
		notationNode = notations.getNamedItem("notation1");
		if (notationNode == null) {
			return "nodeNotationNodeName: #notationNotNull 'notationNode' is null";
		}
		notationName = notationNode.nodeName;
		if ("notation1" !== notationName) {
			return "nodeNotationNodeName: #nodeName 'notationName' equals '" + notationName + "' not '" + "notation1" + "'";
		}
		return "nodeNotationNodeName: OK";
	} catch (e) {
		return "nodeNotationNodeName: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodenotationnodetype.xml" fleur="nodenotationnodetype" native="nodenotationnodetype"><Fleur>(function(){
	var success;
	try {
		var doc;
		var docType;
		var notations;
		var notationNode;
		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		if (docType == null) {
			return "nodeNotationNodeType: #docTypeNotNull 'docType' is null";
		}
		notations = docType.notations;
		if (notations == null) {
			return "nodeNotationNodeType: #notationsNotNull 'notations' is null";
		}
		notationNode = notations.getNamedItem("notation1");
		if (notationNode == null) {
			return "nodeNotationNodeType: #notationNotNull 'notationNode' is null";
		}
		nodeType = notationNode.nodeType;
		if (12 !== nodeType) {
			return "nodeNotationNodeType: #nodeNotationNodeTypeAssert1 'nodeType' equals '" + nodeType + "' not '" + 12 + "'";
		}
		return "nodeNotationNodeType: OK";
	} catch (e) {
		return "nodeNotationNodeType: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var docType;
		var notations;
		var notationNode;
		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		if (docType == null) {
			return "nodeNotationNodeType: #docTypeNotNull 'docType' is null";
		}
		notations = docType.notations;
		if (notations == null) {
			return "nodeNotationNodeType: #notationsNotNull 'notations' is null";
		}
		notationNode = notations.getNamedItem("notation1");
		if (notationNode == null) {
			return "nodeNotationNodeType: #notationNotNull 'notationNode' is null";
		}
		nodeType = notationNode.nodeType;
		if (12 !== nodeType) {
			return "nodeNotationNodeType: #nodeNotationNodeTypeAssert1 'nodeType' equals '" + nodeType + "' not '" + 12 + "'";
		}
		return "nodeNotationNodeType: OK";
	} catch (e) {
		return "nodeNotationNodeType: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodenotationnodevalue.xml" fleur="nodenotationnodevalue" native="nodenotationnodevalue"><Fleur>(function(){
	var success;
	try {
		var doc;
		var docType;
		var notations;
		var notationNode;
		var notationValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		if (docType == null) {
			return "nodeNotationNodeValue: #docTypeNotNull 'docType' is null";
		}
		notations = docType.notations;
		if (notations == null) {
			return "nodeNotationNodeValue: #notationsNotNull 'notations' is null";
		}
		notationNode = notations.getNamedItem("notation1");
		if (notationNode == null) {
			return "nodeNotationNodeValue: #notationNotNull 'notationNode' is null";
		}
		notationValue = notationNode.nodeValue;
		if (notationValue != null) {
			return "nodeNotationNodeValue: #nodeValue 'notationValue' equals '" + notationValue + "' not null";
		}
		return "nodeNotationNodeValue: OK";
	} catch (e) {
		return "nodeNotationNodeValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var docType;
		var notations;
		var notationNode;
		var notationValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		if (docType == null) {
			return "nodeNotationNodeValue: #docTypeNotNull 'docType' is null";
		}
		notations = docType.notations;
		if (notations == null) {
			return "nodeNotationNodeValue: #notationsNotNull 'notations' is null";
		}
		notationNode = notations.getNamedItem("notation1");
		if (notationNode == null) {
			return "nodeNotationNodeValue: #notationNotNull 'notationNode' is null";
		}
		notationValue = notationNode.nodeValue;
		if (notationValue != null) {
			return "nodeNotationNodeValue: #nodeValue 'notationValue' equals '" + notationValue + "' not null";
		}
		return "nodeNotationNodeValue: OK";
	} catch (e) {
		return "nodeNotationNodeValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodeparentnode.xml" fleur="nodeparentnode" native="nodeparentnode"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var parentNode;
		var parentName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		employeeNode = elementList.item(1);
		parentNode = employeeNode.parentNode;
		parentName = parentNode.nodeName;
		if (("text/xml" === "image/svg+xml")) {
			if ("svg" !== parentName) {
				return "nodeParentNode: #svgTagName 'parentName' equals '" + parentName + "' not '" + "svg" + "'";
			}
		} else {
			if ("staff" !== parentName) {
				return "nodeParentNode: #nodeParentNodeAssert1 'parentName' equals '" + parentName + "' not '" + "staff" + "'";
			}
		}
		return "nodeParentNode: OK";
	} catch (e) {
		return "nodeParentNode: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var parentNode;
		var parentName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		employeeNode = elementList.item(1);
		parentNode = employeeNode.parentNode;
		parentName = parentNode.nodeName;
		if (("text/xml" === "image/svg+xml")) {
			if ("svg" !== parentName) {
				return "nodeParentNode: #svgTagName 'parentName' equals '" + parentName + "' not '" + "svg" + "'";
			}
		} else {
			if ("staff" !== parentName) {
				return "nodeParentNode: #nodeParentNodeAssert1 'parentName' equals '" + parentName + "' not '" + "staff" + "'";
			}
		}
		return "nodeParentNode: OK";
	} catch (e) {
		return "nodeParentNode: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodeparentnodenull.xml" fleur="nodeparentnodenull" native="nodeparentnodenull"><Fleur>(function(){
	var success;
	try {
		var doc;
		var createdNode;
		var parentNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		createdNode = doc.createElement("employee");
		parentNode = createdNode.parentNode;
		if (parentNode != null) {
			return "nodeParentNodeNull: #parentNode 'parentNode' equals '" + parentNode + "' not null";
		}
		return "nodeParentNodeNull: OK";
	} catch (e) {
		return "nodeParentNodeNull: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var createdNode;
		var parentNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		createdNode = doc.createElement("employee");
		parentNode = createdNode.parentNode;
		if (parentNode != null) {
			return "nodeParentNodeNull: #parentNode 'parentNode' equals '" + parentNode + "' not null";
		}
		return "nodeParentNodeNull: OK";
	} catch (e) {
		return "nodeParentNodeNull: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodeprocessinginstructionnodeattributes.xml" fleur="nodeprocessinginstructionnodeattributes" native="nodeprocessinginstructionnodeattributes"><Fleur>(function(){
	var success;
	try {
		var doc;
		var testList;
		var piNode;
		var attrList;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		testList = doc.childNodes;
		piNode = testList.item(0);
		attrList = piNode.attributes;
		if (attrList != null) {
			return "nodeProcessingInstructionNodeAttributes: #nodeProcessingInstructionNodeAttrAssert1 'attrList' equals '" + attrList + "' not null";
		}
		return "nodeProcessingInstructionNodeAttributes: OK";
	} catch (e) {
		return "nodeProcessingInstructionNodeAttributes: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var testList;
		var piNode;
		var attrList;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		testList = doc.childNodes;
		piNode = testList.item(0);
		attrList = piNode.attributes;
		if (attrList != null) {
			return "nodeProcessingInstructionNodeAttributes: #nodeProcessingInstructionNodeAttrAssert1 'attrList' equals '" + attrList + "' not null";
		}
		return "nodeProcessingInstructionNodeAttributes: OK";
	} catch (e) {
		return "nodeProcessingInstructionNodeAttributes: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodeprocessinginstructionnodename.xml" fleur="nodeprocessinginstructionnodename" native="nodeprocessinginstructionnodename"><Fleur>(function(){
	var success;
	try {
		var doc;
		var testList;
		var piNode;
		var piName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		testList = doc.childNodes;
		piNode = testList.item(0);
		piName = piNode.nodeName;
		if ("TEST-STYLE" !== piName) {
			return "nodeProcessingInstructionNodeName: #nodeProcessingInstructionNodeNameAssert1 'piName' equals '" + piName + "' not '" + "TEST-STYLE" + "'";
		}
		return "nodeProcessingInstructionNodeName: OK";
	} catch (e) {
		return "nodeProcessingInstructionNodeName: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var testList;
		var piNode;
		var piName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		testList = doc.childNodes;
		piNode = testList.item(0);
		piName = piNode.nodeName;
		if ("TEST-STYLE" !== piName) {
			return "nodeProcessingInstructionNodeName: #nodeProcessingInstructionNodeNameAssert1 'piName' equals '" + piName + "' not '" + "TEST-STYLE" + "'";
		}
		return "nodeProcessingInstructionNodeName: OK";
	} catch (e) {
		return "nodeProcessingInstructionNodeName: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodeprocessinginstructionnodetype.xml" fleur="nodeprocessinginstructionnodetype" native="nodeprocessinginstructionnodetype"><Fleur>(function(){
	var success;
	try {
		var doc;
		var testList;
		var piNode;
		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		testList = doc.childNodes;
		piNode = testList.item(0);
		nodeType = piNode.nodeType;
		if (7 !== nodeType) {
			return "nodeProcessingInstructionNodeType: #nodeProcessingInstructionNodeTypeAssert1 'nodeType' equals '" + nodeType + "' not '" + 7 + "'";
		}
		return "nodeProcessingInstructionNodeType: OK";
	} catch (e) {
		return "nodeProcessingInstructionNodeType: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var testList;
		var piNode;
		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		testList = doc.childNodes;
		piNode = testList.item(0);
		nodeType = piNode.nodeType;
		if (7 !== nodeType) {
			return "nodeProcessingInstructionNodeType: #nodeProcessingInstructionNodeTypeAssert1 'nodeType' equals '" + nodeType + "' not '" + 7 + "'";
		}
		return "nodeProcessingInstructionNodeType: OK";
	} catch (e) {
		return "nodeProcessingInstructionNodeType: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodeprocessinginstructionnodevalue.xml" fleur="nodeprocessinginstructionnodevalue" native="nodeprocessinginstructionnodevalue"><Fleur>(function(){
	var success;
	try {
		var doc;
		var testList;
		var piNode;
		var piValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		testList = doc.childNodes;
		piNode = testList.item(0);
		piValue = piNode.nodeValue;
		if ("PIDATA" !== piValue) {
			return "nodeProcessingInstructionNodeValue: #value 'piValue' equals '" + piValue + "' not '" + "PIDATA" + "'";
		}
		return "nodeProcessingInstructionNodeValue: OK";
	} catch (e) {
		return "nodeProcessingInstructionNodeValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var testList;
		var piNode;
		var piValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		testList = doc.childNodes;
		piNode = testList.item(0);
		piValue = piNode.nodeValue;
		if ("PIDATA" !== piValue) {
			return "nodeProcessingInstructionNodeValue: #value 'piValue' equals '" + piValue + "' not '" + "PIDATA" + "'";
		}
		return "nodeProcessingInstructionNodeValue: OK";
	} catch (e) {
		return "nodeProcessingInstructionNodeValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodeprocessinginstructionsetnodevalue.xml" fleur="nodeprocessinginstructionsetnodevalue" native="nodeprocessinginstructionsetnodevalue"><Fleur>(function(){
	var success;
	try {
		var doc;
		var testList;
		var piNode;
		var piValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		testList = doc.childNodes;
		piNode = testList.item(0);
		piNode.nodeValue = "Something different";
		piValue = piNode.nodeValue;
		if ("Something different" !== piValue) {
			return "nodeProcessingInstructionSetNodeValue: #nodeValue 'piValue' equals '" + piValue + "' not '" + "Something different" + "'";
		}
		piValue = piNode.data;
		if ("Something different" !== piValue) {
			return "nodeProcessingInstructionSetNodeValue: #data 'piValue' equals '" + piValue + "' not '" + "Something different" + "'";
		}
		return "nodeProcessingInstructionSetNodeValue: OK";
	} catch (e) {
		return "nodeProcessingInstructionSetNodeValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var testList;
		var piNode;
		var piValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		testList = doc.childNodes;
		piNode = testList.item(0);
		piNode.nodeValue = "Something different";
		piValue = piNode.nodeValue;
		if ("Something different" !== piValue) {
			return "nodeProcessingInstructionSetNodeValue: #nodeValue 'piValue' equals '" + piValue + "' not '" + "Something different" + "'";
		}
		piValue = piNode.data;
		if ("Something different" !== piValue) {
			return "nodeProcessingInstructionSetNodeValue: #data 'piValue' equals '" + piValue + "' not '" + "Something different" + "'";
		}
		return "nodeProcessingInstructionSetNodeValue: OK";
	} catch (e) {
		return "nodeProcessingInstructionSetNodeValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="noderemovechild.xml" fleur="noderemovechild" native="noderemovechild"><Fleur>(function(){
	var success;
	try {
		var doc;
		var rootNode;
		var childList;
		var childToRemove;
		var removedChild;
		var parentNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		rootNode = doc.documentElement;
		childList = rootNode.childNodes;
		childToRemove = childList.item(1);
		removedChild = rootNode.removeChild(childToRemove);
		parentNode = removedChild.parentNode;
		if (parentNode != null) {
			return "nodeRemoveChild: #nodeRemoveChildAssert1 'parentNode' equals '" + parentNode + "' not null";
		}
		return "nodeRemoveChild: OK";
	} catch (e) {
		return "nodeRemoveChild: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var rootNode;
		var childList;
		var childToRemove;
		var removedChild;
		var parentNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		rootNode = doc.documentElement;
		childList = rootNode.childNodes;
		childToRemove = childList.item(1);
		removedChild = rootNode.removeChild(childToRemove);
		parentNode = removedChild.parentNode;
		if (parentNode != null) {
			return "nodeRemoveChild: #nodeRemoveChildAssert1 'parentNode' equals '" + parentNode + "' not null";
		}
		return "nodeRemoveChild: OK";
	} catch (e) {
		return "nodeRemoveChild: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="noderemovechildgetnodename.xml" fleur="noderemovechildgetnodename" native="noderemovechildgetnodename"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var childList;
		var oldChild;
		var removedChild;
		var childName;
		var length;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		employeeNode = elementList.item(1);
		childList = employeeNode.childNodes;
		length = childList.length;
		oldChild = childList.item(0);
		removedChild = employeeNode.removeChild(oldChild);
		childName = removedChild.nodeName;
		if ((6 == length)) {
			if ("employeeId" !== childName) {
				return "nodeRemoveChildGetNodeName: #nowhitespace 'childName' equals '" + childName + "' not '" + "employeeId" + "'";
			}
		} else {
			if ("#text" !== childName) {
				return "nodeRemoveChildGetNodeName: #whitespace 'childName' equals '" + childName + "' not '" + "#text" + "'";
			}
		}
		return "nodeRemoveChildGetNodeName: OK";
	} catch (e) {
		return "nodeRemoveChildGetNodeName: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var childList;
		var oldChild;
		var removedChild;
		var childName;
		var length;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		employeeNode = elementList.item(1);
		childList = employeeNode.childNodes;
		length = childList.length;
		oldChild = childList.item(0);
		removedChild = employeeNode.removeChild(oldChild);
		childName = removedChild.nodeName;
		if ((6 == length)) {
			if ("employeeId" !== childName) {
				return "nodeRemoveChildGetNodeName: #nowhitespace 'childName' equals '" + childName + "' not '" + "employeeId" + "'";
			}
		} else {
			if ("#text" !== childName) {
				return "nodeRemoveChildGetNodeName: #whitespace 'childName' equals '" + childName + "' not '" + "#text" + "'";
			}
		}
		return "nodeRemoveChildGetNodeName: OK";
	} catch (e) {
		return "nodeRemoveChildGetNodeName: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="noderemovechildnode.xml" fleur="noderemovechildnode" native="noderemovechildnode"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var childList;
		var oldChild;
		var child;
		var childName;
		var length;
		var removedChild;
		var removedName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		employeeNode = elementList.item(1);
		childList = employeeNode.childNodes;
		oldChild = childList.item(0);
		removedChild = employeeNode.removeChild(oldChild);
		removedName = removedChild.nodeName;
		child = childList.item(0);
		childName = child.nodeName;
		length = childList.length;
		if ((5 == length)) {
			if ("employeeId" !== removedName) {
				return "nodeRemoveChildNode: #removedNameNoWhitespace 'removedName' equals '" + removedName + "' not '" + "employeeId" + "'";
			}
			if ("name" !== childName) {
				return "nodeRemoveChildNode: #childNameNoWhitespace 'childName' equals '" + childName + "' not '" + "name" + "'";
			}
		} else {
			if ("#text" !== removedName) {
				return "nodeRemoveChildNode: #removedName 'removedName' equals '" + removedName + "' not '" + "#text" + "'";
			}
			if ("employeeId" !== childName) {
				return "nodeRemoveChildNode: #childName 'childName' equals '" + childName + "' not '" + "employeeId" + "'";
			}
			if (12 !== length) {
				return "nodeRemoveChildNode: #length 'length' equals '" + length + "' not '" + 12 + "'";
			}
		}
		return "nodeRemoveChildNode: OK";
	} catch (e) {
		return "nodeRemoveChildNode: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var childList;
		var oldChild;
		var child;
		var childName;
		var length;
		var removedChild;
		var removedName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		employeeNode = elementList.item(1);
		childList = employeeNode.childNodes;
		oldChild = childList.item(0);
		removedChild = employeeNode.removeChild(oldChild);
		removedName = removedChild.nodeName;
		child = childList.item(0);
		childName = child.nodeName;
		length = childList.length;
		if ((5 == length)) {
			if ("employeeId" !== removedName) {
				return "nodeRemoveChildNode: #removedNameNoWhitespace 'removedName' equals '" + removedName + "' not '" + "employeeId" + "'";
			}
			if ("name" !== childName) {
				return "nodeRemoveChildNode: #childNameNoWhitespace 'childName' equals '" + childName + "' not '" + "name" + "'";
			}
		} else {
			if ("#text" !== removedName) {
				return "nodeRemoveChildNode: #removedName 'removedName' equals '" + removedName + "' not '" + "#text" + "'";
			}
			if ("employeeId" !== childName) {
				return "nodeRemoveChildNode: #childName 'childName' equals '" + childName + "' not '" + "employeeId" + "'";
			}
			if (12 !== length) {
				return "nodeRemoveChildNode: #length 'length' equals '" + length + "' not '" + 12 + "'";
			}
		}
		return "nodeRemoveChildNode: OK";
	} catch (e) {
		return "nodeRemoveChildNode: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="noderemovechildnomodificationallowederr.xml" fleur="noderemovechildnomodificationallowederr" native="noderemovechildnomodificationallowederr"><Fleur>(function(){
	var success;
	try {
		var doc;
		var genderList;
		var genderNode;
		var entRef;
		var entElement;
		var removedNode;
		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		genderList = doc.getElementsByTagName("gender");
		genderNode = genderList.item(2);
		entRef = genderNode.firstChild;
		if (entRef == null) {
			return "nodeRemoveChildNoModificationAllowedErr: #entRefNotNull 'entRef' is null";
		}
		nodeType = entRef.nodeType;
		if ((1 == nodeType)) {
			entRef = doc.createEntityReference("ent4");
			if (entRef == null) {
				return "nodeRemoveChildNoModificationAllowedErr: #createdEntRefNotNull 'entRef' is null";
			}
		}
		entElement = entRef.firstChild;
		if (entElement == null) {
			return "nodeRemoveChildNoModificationAllowedErr: #entElementNotNull 'entElement' is null";
		}
		success = false;
		try {
			removedNode = entRef.removeChild(entElement);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "nodeRemoveChildNoModificationAllowedErr: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "nodeRemoveChildNoModificationAllowedErr: OK";
	} catch (e) {
		return "nodeRemoveChildNoModificationAllowedErr: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var genderList;
		var genderNode;
		var entRef;
		var entElement;
		var removedNode;
		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		genderList = doc.getElementsByTagName("gender");
		genderNode = genderList.item(2);
		entRef = genderNode.firstChild;
		if (entRef == null) {
			return "nodeRemoveChildNoModificationAllowedErr: #entRefNotNull 'entRef' is null";
		}
		nodeType = entRef.nodeType;
		if ((1 == nodeType)) {
			entRef = doc.createEntityReference("ent4");
			if (entRef == null) {
				return "nodeRemoveChildNoModificationAllowedErr: #createdEntRefNotNull 'entRef' is null";
			}
		}
		entElement = entRef.firstChild;
		if (entElement == null) {
			return "nodeRemoveChildNoModificationAllowedErr: #entElementNotNull 'entElement' is null";
		}
		success = false;
		try {
			removedNode = entRef.removeChild(entElement);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "nodeRemoveChildNoModificationAllowedErr: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "nodeRemoveChildNoModificationAllowedErr: OK";
	} catch (e) {
		return "nodeRemoveChildNoModificationAllowedErr: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="noderemovechildnomodificationallowederrEE.xml" fleur="noderemovechildnomodificationallowederrEE" native="noderemovechildnomodificationallowederrEE"><Fleur>(function(){
	var success;
	try {
		var doc;
		var entRef;
		var entText;
		var removedNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		entRef = doc.createEntityReference("ent4");
		if (entRef == null) {
			return "nodeRemoveChildNoModificationAllowedErrEE: #createdEntRefNotNull 'entRef' is null";
		}
		entText = entRef.firstChild;
		if (entText == null) {
			return "nodeRemoveChildNoModificationAllowedErrEE: #entTextNotNull 'entText' is null";
		}
		success = false;
		try {
			removedNode = entRef.removeChild(entText);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "nodeRemoveChildNoModificationAllowedErrEE: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "nodeRemoveChildNoModificationAllowedErrEE: OK";
	} catch (e) {
		return "nodeRemoveChildNoModificationAllowedErrEE: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var entRef;
		var entText;
		var removedNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		entRef = doc.createEntityReference("ent4");
		if (entRef == null) {
			return "nodeRemoveChildNoModificationAllowedErrEE: #createdEntRefNotNull 'entRef' is null";
		}
		entText = entRef.firstChild;
		if (entText == null) {
			return "nodeRemoveChildNoModificationAllowedErrEE: #entTextNotNull 'entText' is null";
		}
		success = false;
		try {
			removedNode = entRef.removeChild(entText);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "nodeRemoveChildNoModificationAllowedErrEE: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "nodeRemoveChildNoModificationAllowedErrEE: OK";
	} catch (e) {
		return "nodeRemoveChildNoModificationAllowedErrEE: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="noderemovechildoldchildnonexistent.xml" fleur="noderemovechildoldchildnonexistent" native="noderemovechildoldchildnonexistent"><Fleur>(function(){
	var success;
	try {
		var doc;
		var oldChild;
		var elementList;
		var elementNode;
		var removedChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		oldChild = doc.createElement("oldChild");
		elementList = doc.getElementsByTagName("employee");
		elementNode = elementList.item(1);
		success = false;
		try {
			removedChild = elementNode.removeChild(oldChild);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 8;
			}
		}
		if (!success) {
			return "nodeRemoveChildOldChildNonexistent: Exception NOT_FOUND_ERR expected";
		}
		return "nodeRemoveChildOldChildNonexistent: OK";
	} catch (e) {
		return "nodeRemoveChildOldChildNonexistent: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var oldChild;
		var elementList;
		var elementNode;
		var removedChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		oldChild = doc.createElement("oldChild");
		elementList = doc.getElementsByTagName("employee");
		elementNode = elementList.item(1);
		success = false;
		try {
			removedChild = elementNode.removeChild(oldChild);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 8;
			}
		}
		if (!success) {
			return "nodeRemoveChildOldChildNonexistent: Exception NOT_FOUND_ERR expected";
		}
		return "nodeRemoveChildOldChildNonexistent: OK";
	} catch (e) {
		return "nodeRemoveChildOldChildNonexistent: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodereplacechild.xml" fleur="nodereplacechild" native="nodereplacechild"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var childList;
		var oldChild;
		var newChild;
		var child;
		var childName;
		var replacedNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		employeeNode = elementList.item(1);
		childList = employeeNode.childNodes;
		oldChild = childList.item(0);
		newChild = doc.createElement("newChild");
		replacedNode = employeeNode.replaceChild(newChild, oldChild);
		child = childList.item(0);
		childName = child.nodeName;
		if ("newChild" !== childName) {
			return "nodeReplaceChild: #nodeReplaceChildAssert1 'childName' equals '" + childName + "' not '" + "newChild" + "'";
		}
		return "nodeReplaceChild: OK";
	} catch (e) {
		return "nodeReplaceChild: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var childList;
		var oldChild;
		var newChild;
		var child;
		var childName;
		var replacedNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		employeeNode = elementList.item(1);
		childList = employeeNode.childNodes;
		oldChild = childList.item(0);
		newChild = doc.createElement("newChild");
		replacedNode = employeeNode.replaceChild(newChild, oldChild);
		child = childList.item(0);
		childName = child.nodeName;
		if ("newChild" !== childName) {
			return "nodeReplaceChild: #nodeReplaceChildAssert1 'childName' equals '" + childName + "' not '" + "newChild" + "'";
		}
		return "nodeReplaceChild: OK";
	} catch (e) {
		return "nodeReplaceChild: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodereplacechildinvalidnodetype.xml" fleur="nodereplacechildinvalidnodetype" native="nodereplacechildinvalidnodetype"><Fleur>(function(){
	var success;
	try {
		var doc;
		var rootNode;
		var newChild;
		var elementList;
		var oldChild;
		var replacedChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		rootNode = doc.documentElement;
		newChild = doc.createAttribute("newAttribute");
		elementList = doc.getElementsByTagName("employee");
		oldChild = elementList.item(1);
		success = false;
		try {
			replacedChild = rootNode.replaceChild(newChild, oldChild);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 3;
			}
		}
		if (!success) {
			return "nodeReplaceChildInvalidNodeType: Exception HIERARCHY_REQUEST_ERR expected";
		}
		return "nodeReplaceChildInvalidNodeType: OK";
	} catch (e) {
		return "nodeReplaceChildInvalidNodeType: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var rootNode;
		var newChild;
		var elementList;
		var oldChild;
		var replacedChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		rootNode = doc.documentElement;
		newChild = doc.createAttribute("newAttribute");
		elementList = doc.getElementsByTagName("employee");
		oldChild = elementList.item(1);
		success = false;
		try {
			replacedChild = rootNode.replaceChild(newChild, oldChild);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 3;
			}
		}
		if (!success) {
			return "nodeReplaceChildInvalidNodeType: Exception HIERARCHY_REQUEST_ERR expected";
		}
		return "nodeReplaceChildInvalidNodeType: OK";
	} catch (e) {
		return "nodeReplaceChildInvalidNodeType: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodereplacechildnewchilddiffdocument.xml" fleur="nodereplacechildnewchilddiffdocument" native="nodereplacechildnewchilddiffdocument"><Fleur>(function(){
	var success;
	try {
		var doc1;
		var doc2;
		var oldChild;
		var newChild;
		var elementList;
		var elementNode;
		var replacedChild;
		var doc1Req = new XMLHttpRequest();
		doc1Req.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		doc1Req.send();
		doc1 = new Fleur.DOMParser().parseFromString(doc1Req.responseText, "text/xml");
		var doc2Req = new XMLHttpRequest();
		doc2Req.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		doc2Req.send();
		doc2 = new Fleur.DOMParser().parseFromString(doc2Req.responseText, "text/xml");
		newChild = doc1.createElement("newChild");
		elementList = doc2.getElementsByTagName("employee");
		elementNode = elementList.item(1);
		oldChild = elementNode.firstChild;
		success = false;
		try {
			replacedChild = elementNode.replaceChild(newChild, oldChild);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 4;
			}
		}
		if (!success) {
			return "nodeReplaceChildNewChildDiffDocument: Exception WRONG_DOCUMENT_ERR expected";
		}
		return "nodeReplaceChildNewChildDiffDocument: OK";
	} catch (e) {
		return "nodeReplaceChildNewChildDiffDocument: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc1;
		var doc2;
		var oldChild;
		var newChild;
		var elementList;
		var elementNode;
		var replacedChild;
		var doc1Req = new XMLHttpRequest();
		doc1Req.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		doc1Req.send();
		doc1 = new DOMParser().parseFromString(doc1Req.responseText, "text/xml");
		var doc2Req = new XMLHttpRequest();
		doc2Req.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		doc2Req.send();
		doc2 = new DOMParser().parseFromString(doc2Req.responseText, "text/xml");
		newChild = doc1.createElement("newChild");
		elementList = doc2.getElementsByTagName("employee");
		elementNode = elementList.item(1);
		oldChild = elementNode.firstChild;
		success = false;
		try {
			replacedChild = elementNode.replaceChild(newChild, oldChild);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 4;
			}
		}
		if (!success) {
			return "nodeReplaceChildNewChildDiffDocument: Exception WRONG_DOCUMENT_ERR expected";
		}
		return "nodeReplaceChildNewChildDiffDocument: OK";
	} catch (e) {
		return "nodeReplaceChildNewChildDiffDocument: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodereplacechildnewchildexists.xml" fleur="nodereplacechildnewchildexists" native="nodereplacechildnewchildexists"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var childList;
		var oldChild = null;
		var newChild = null;
		var childName;
		var childNode;
		var length;
		var actual = new Array();

		var expected = new Array();

		expectedWithoutWhitespace = new Array();
		expectedWithoutWhitespace[0] = "name";
		expectedWithoutWhitespace[1] = "position";
		expectedWithoutWhitespace[2] = "salary";
		expectedWithoutWhitespace[3] = "gender";
		expectedWithoutWhitespace[4] = "employeeId";
		expectedWithWhitespace = new Array();
		expectedWithWhitespace[0] = "#text";
		expectedWithWhitespace[1] = "#text";
		expectedWithWhitespace[2] = "name";
		expectedWithWhitespace[3] = "#text";
		expectedWithWhitespace[4] = "position";
		expectedWithWhitespace[5] = "#text";
		expectedWithWhitespace[6] = "salary";
		expectedWithWhitespace[7] = "#text";
		expectedWithWhitespace[8] = "gender";
		expectedWithWhitespace[9] = "#text";
		expectedWithWhitespace[10] = "employeeId";
		expectedWithWhitespace[11] = "#text";
		var replacedChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		employeeNode = elementList.item(1);
		childList = employeeNode.childNodes;
		length = childList.length;
		if ((13 == length)) {
			newChild = childList.item(1);
			oldChild = childList.item(11);
			expected =  expectedWithWhitespace;
		} else {
			newChild = childList.item(0);
			oldChild = childList.item(5);
			expected =  expectedWithoutWhitespace;
		}
		replacedChild = employeeNode.replaceChild(newChild, oldChild);
		assertSame("return_value_same",oldChild,replacedChild);
		for (var index_id0x11a8cfb0 = 0; index_id0x11a8cfb0 &lt; childList.length; index_id0x11a8cfb0++) {
			childNode = childList.item(index_id0x11a8cfb0);
			childName = childNode.nodeName;
actual[actual.length] = childName;
		}
		if (expected.join("|") !== actual.join("|")) {
			return "nodeReplaceChildNewChildExists: #childNames 'actual' equals '" + actual.join("|") + "' not '" + expected.join("|") + "'";
		}
		return "nodeReplaceChildNewChildExists: OK";
	} catch (e) {
		return "nodeReplaceChildNewChildExists: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var childList;
		var oldChild = null;
		var newChild = null;
		var childName;
		var childNode;
		var length;
		var actual = new Array();

		var expected = new Array();

		expectedWithoutWhitespace = new Array();
		expectedWithoutWhitespace[0] = "name";
		expectedWithoutWhitespace[1] = "position";
		expectedWithoutWhitespace[2] = "salary";
		expectedWithoutWhitespace[3] = "gender";
		expectedWithoutWhitespace[4] = "employeeId";
		expectedWithWhitespace = new Array();
		expectedWithWhitespace[0] = "#text";
		expectedWithWhitespace[1] = "#text";
		expectedWithWhitespace[2] = "name";
		expectedWithWhitespace[3] = "#text";
		expectedWithWhitespace[4] = "position";
		expectedWithWhitespace[5] = "#text";
		expectedWithWhitespace[6] = "salary";
		expectedWithWhitespace[7] = "#text";
		expectedWithWhitespace[8] = "gender";
		expectedWithWhitespace[9] = "#text";
		expectedWithWhitespace[10] = "employeeId";
		expectedWithWhitespace[11] = "#text";
		var replacedChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		employeeNode = elementList.item(1);
		childList = employeeNode.childNodes;
		length = childList.length;
		if ((13 == length)) {
			newChild = childList.item(1);
			oldChild = childList.item(11);
			expected =  expectedWithWhitespace;
		} else {
			newChild = childList.item(0);
			oldChild = childList.item(5);
			expected =  expectedWithoutWhitespace;
		}
		replacedChild = employeeNode.replaceChild(newChild, oldChild);
		assertSame("return_value_same",oldChild,replacedChild);
		for (var index_id0x11a8cfb0 = 0; index_id0x11a8cfb0 &lt; childList.length; index_id0x11a8cfb0++) {
			childNode = childList.item(index_id0x11a8cfb0);
			childName = childNode.nodeName;
actual[actual.length] = childName;
		}
		if (expected.join("|") !== actual.join("|")) {
			return "nodeReplaceChildNewChildExists: #childNames 'actual' equals '" + actual.join("|") + "' not '" + expected.join("|") + "'";
		}
		return "nodeReplaceChildNewChildExists: OK";
	} catch (e) {
		return "nodeReplaceChildNewChildExists: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodereplacechildnodeancestor.xml" fleur="nodereplacechildnodeancestor" native="nodereplacechildnodeancestor"><Fleur>(function(){
	var success;
	try {
		var doc;
		var newChild;
		var elementList;
		var employeeNode;
		var childList;
		var oldChild;
		var replacedNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		newChild = doc.documentElement;
		elementList = doc.getElementsByTagName("employee");
		employeeNode = elementList.item(1);
		childList = employeeNode.childNodes;
		oldChild = childList.item(0);
		success = false;
		try {
			replacedNode = employeeNode.replaceChild(newChild, oldChild);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 3;
			}
		}
		if (!success) {
			return "nodeReplaceChildNodeAncestor: Exception HIERARCHY_REQUEST_ERR expected";
		}
		return "nodeReplaceChildNodeAncestor: OK";
	} catch (e) {
		return "nodeReplaceChildNodeAncestor: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var newChild;
		var elementList;
		var employeeNode;
		var childList;
		var oldChild;
		var replacedNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		newChild = doc.documentElement;
		elementList = doc.getElementsByTagName("employee");
		employeeNode = elementList.item(1);
		childList = employeeNode.childNodes;
		oldChild = childList.item(0);
		success = false;
		try {
			replacedNode = employeeNode.replaceChild(newChild, oldChild);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 3;
			}
		}
		if (!success) {
			return "nodeReplaceChildNodeAncestor: Exception HIERARCHY_REQUEST_ERR expected";
		}
		return "nodeReplaceChildNodeAncestor: OK";
	} catch (e) {
		return "nodeReplaceChildNodeAncestor: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodereplacechildnodename.xml" fleur="nodereplacechildnodename" native="nodereplacechildnodename"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var childList;
		var oldChild;
		var newChild;
		var replacedNode;
		var length;
		var childName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		employeeNode = elementList.item(1);
		childList = employeeNode.childNodes;
		length = childList.length;
		oldChild = childList.item(1);
		newChild = doc.createElement("newChild");
		replacedNode = employeeNode.replaceChild(newChild, oldChild);
		childName = replacedNode.nodeName;
		if ((6 == length)) {
			if ("name" !== childName) {
				return "nodeReplaceChildNodeName: #nowhitespace 'childName' equals '" + childName + "' not '" + "name" + "'";
			}
		} else {
			if ("employeeId" !== childName) {
				return "nodeReplaceChildNodeName: #whitespace 'childName' equals '" + childName + "' not '" + "employeeId" + "'";
			}
		}
		return "nodeReplaceChildNodeName: OK";
	} catch (e) {
		return "nodeReplaceChildNodeName: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var childList;
		var oldChild;
		var newChild;
		var replacedNode;
		var length;
		var childName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		employeeNode = elementList.item(1);
		childList = employeeNode.childNodes;
		length = childList.length;
		oldChild = childList.item(1);
		newChild = doc.createElement("newChild");
		replacedNode = employeeNode.replaceChild(newChild, oldChild);
		childName = replacedNode.nodeName;
		if ((6 == length)) {
			if ("name" !== childName) {
				return "nodeReplaceChildNodeName: #nowhitespace 'childName' equals '" + childName + "' not '" + "name" + "'";
			}
		} else {
			if ("employeeId" !== childName) {
				return "nodeReplaceChildNodeName: #whitespace 'childName' equals '" + childName + "' not '" + "employeeId" + "'";
			}
		}
		return "nodeReplaceChildNodeName: OK";
	} catch (e) {
		return "nodeReplaceChildNodeName: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodereplacechildnomodificationallowederr.xml" fleur="nodereplacechildnomodificationallowederr" native="nodereplacechildnomodificationallowederr"><Fleur>(function(){
	var success;
	try {
		var doc;
		var genderList;
		var genderNode;
		var entRef;
		var entElement;
		var createdNode;
		var replacedChild;
		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		genderList = doc.getElementsByTagName("gender");
		genderNode = genderList.item(2);
		entRef = genderNode.firstChild;
		nodeType = entRef.nodeType;
		if ((1 == nodeType)) {
			entRef = doc.createEntityReference("ent4");
			if (entRef == null) {
				return "nodeReplaceChildNoModificationAllowedErr: #createdEntRefNotNull 'entRef' is null";
			}
		}
		entElement = entRef.firstChild;
		createdNode = doc.createElement("newChild");
		success = false;
		try {
			replacedChild = entRef.replaceChild(createdNode, entElement);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "nodeReplaceChildNoModificationAllowedErr: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "nodeReplaceChildNoModificationAllowedErr: OK";
	} catch (e) {
		return "nodeReplaceChildNoModificationAllowedErr: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var genderList;
		var genderNode;
		var entRef;
		var entElement;
		var createdNode;
		var replacedChild;
		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		genderList = doc.getElementsByTagName("gender");
		genderNode = genderList.item(2);
		entRef = genderNode.firstChild;
		nodeType = entRef.nodeType;
		if ((1 == nodeType)) {
			entRef = doc.createEntityReference("ent4");
			if (entRef == null) {
				return "nodeReplaceChildNoModificationAllowedErr: #createdEntRefNotNull 'entRef' is null";
			}
		}
		entElement = entRef.firstChild;
		createdNode = doc.createElement("newChild");
		success = false;
		try {
			replacedChild = entRef.replaceChild(createdNode, entElement);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "nodeReplaceChildNoModificationAllowedErr: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "nodeReplaceChildNoModificationAllowedErr: OK";
	} catch (e) {
		return "nodeReplaceChildNoModificationAllowedErr: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodereplacechildnomodificationallowederrEE.xml" fleur="nodereplacechildnomodificationallowederrEE" native="nodereplacechildnomodificationallowederrEE"><Fleur>(function(){
	var success;
	try {
		var doc;
		var entRef;
		var entText;
		var createdNode;
		var replacedChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		entRef = doc.createEntityReference("ent4");
		if (entRef == null) {
			return "nodeReplaceChildNoModificationAllowedErrEE: #createdEntRefNotNull 'entRef' is null";
		}
		entText = entRef.firstChild;
		createdNode = doc.createElement("newChild");
		success = false;
		try {
			replacedChild = entRef.replaceChild(createdNode, entText);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "nodeReplaceChildNoModificationAllowedErrEE: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "nodeReplaceChildNoModificationAllowedErrEE: OK";
	} catch (e) {
		return "nodeReplaceChildNoModificationAllowedErrEE: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var entRef;
		var entText;
		var createdNode;
		var replacedChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		entRef = doc.createEntityReference("ent4");
		if (entRef == null) {
			return "nodeReplaceChildNoModificationAllowedErrEE: #createdEntRefNotNull 'entRef' is null";
		}
		entText = entRef.firstChild;
		createdNode = doc.createElement("newChild");
		success = false;
		try {
			replacedChild = entRef.replaceChild(createdNode, entText);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "nodeReplaceChildNoModificationAllowedErrEE: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "nodeReplaceChildNoModificationAllowedErrEE: OK";
	} catch (e) {
		return "nodeReplaceChildNoModificationAllowedErrEE: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodereplacechildoldchildnonexistent.xml" fleur="nodereplacechildoldchildnonexistent" native="nodereplacechildoldchildnonexistent"><Fleur>(function(){
	var success;
	try {
		var doc;
		var oldChild;
		var newChild;
		var elementList;
		var elementNode;
		var replacedNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		newChild = doc.createElement("newChild");
		oldChild = doc.createElement("oldChild");
		elementList = doc.getElementsByTagName("employee");
		elementNode = elementList.item(1);
		success = false;
		try {
			replacedNode = elementNode.replaceChild(newChild, oldChild);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 8;
			}
		}
		if (!success) {
			return "nodeReplaceChildOldChildNonexistent: Exception NOT_FOUND_ERR expected";
		}
		return "nodeReplaceChildOldChildNonexistent: OK";
	} catch (e) {
		return "nodeReplaceChildOldChildNonexistent: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var oldChild;
		var newChild;
		var elementList;
		var elementNode;
		var replacedNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		newChild = doc.createElement("newChild");
		oldChild = doc.createElement("oldChild");
		elementList = doc.getElementsByTagName("employee");
		elementNode = elementList.item(1);
		success = false;
		try {
			replacedNode = elementNode.replaceChild(newChild, oldChild);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 8;
			}
		}
		if (!success) {
			return "nodeReplaceChildOldChildNonexistent: Exception NOT_FOUND_ERR expected";
		}
		return "nodeReplaceChildOldChildNonexistent: OK";
	} catch (e) {
		return "nodeReplaceChildOldChildNonexistent: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodesetnodevaluenomodificationallowederr.xml" fleur="nodesetnodevaluenomodificationallowederr" native="nodesetnodevaluenomodificationallowederr"><Fleur>(function(){
	var success;
	try {
		var doc;
		var genderList;
		var genderNode;
		var entRef;
		var entElement;
		var entElementText;
		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		genderList = doc.getElementsByTagName("gender");
		genderNode = genderList.item(2);
		entRef = genderNode.firstChild;
		if (entRef == null) {
			return "nodeSetNodeValueNoModificationAllowedErr: #entRefNotNull 'entRef' is null";
		}
		nodeType = entRef.nodeType;
		if ((1 == nodeType)) {
			entRef = doc.createEntityReference("ent4");
			if (entRef == null) {
				return "nodeSetNodeValueNoModificationAllowedErr: #createdEntRefNotNull 'entRef' is null";
			}
		}
		entElement = entRef.firstChild;
		if (entElement == null) {
			return "nodeSetNodeValueNoModificationAllowedErr: #entElementNotNull 'entElement' is null";
		}
		entElementText = entElement.firstChild;
		if (entElementText == null) {
			return "nodeSetNodeValueNoModificationAllowedErr: #entElementTextNotNull 'entElementText' is null";
		}
		success = false;
		try {
			entElementText.nodeValue = "newValue";
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "nodeSetNodeValueNoModificationAllowedErr: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "nodeSetNodeValueNoModificationAllowedErr: OK";
	} catch (e) {
		return "nodeSetNodeValueNoModificationAllowedErr: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var genderList;
		var genderNode;
		var entRef;
		var entElement;
		var entElementText;
		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		genderList = doc.getElementsByTagName("gender");
		genderNode = genderList.item(2);
		entRef = genderNode.firstChild;
		if (entRef == null) {
			return "nodeSetNodeValueNoModificationAllowedErr: #entRefNotNull 'entRef' is null";
		}
		nodeType = entRef.nodeType;
		if ((1 == nodeType)) {
			entRef = doc.createEntityReference("ent4");
			if (entRef == null) {
				return "nodeSetNodeValueNoModificationAllowedErr: #createdEntRefNotNull 'entRef' is null";
			}
		}
		entElement = entRef.firstChild;
		if (entElement == null) {
			return "nodeSetNodeValueNoModificationAllowedErr: #entElementNotNull 'entElement' is null";
		}
		entElementText = entElement.firstChild;
		if (entElementText == null) {
			return "nodeSetNodeValueNoModificationAllowedErr: #entElementTextNotNull 'entElementText' is null";
		}
		success = false;
		try {
			entElementText.nodeValue = "newValue";
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "nodeSetNodeValueNoModificationAllowedErr: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "nodeSetNodeValueNoModificationAllowedErr: OK";
	} catch (e) {
		return "nodeSetNodeValueNoModificationAllowedErr: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodesetnodevaluenomodificationallowederrEE.xml" fleur="nodesetnodevaluenomodificationallowederrEE" native="nodesetnodevaluenomodificationallowederrEE"><Fleur>(function(){
	var success;
	try {
		var doc;
		var entRef;
		var entText;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		entRef = doc.createEntityReference("ent3");
		if (entRef == null) {
			return "nodeSetNodeValueNoModificationAllowedErrEE: #createdEntRefNotNull 'entRef' is null";
		}
		entText = entRef.firstChild;
		if (entText == null) {
			return "nodeSetNodeValueNoModificationAllowedErrEE: #entTextNotNull 'entText' is null";
		}
		success = false;
		try {
			entText.nodeValue = "newValue";
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "nodeSetNodeValueNoModificationAllowedErrEE: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "nodeSetNodeValueNoModificationAllowedErrEE: OK";
	} catch (e) {
		return "nodeSetNodeValueNoModificationAllowedErrEE: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var entRef;
		var entText;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		entRef = doc.createEntityReference("ent3");
		if (entRef == null) {
			return "nodeSetNodeValueNoModificationAllowedErrEE: #createdEntRefNotNull 'entRef' is null";
		}
		entText = entRef.firstChild;
		if (entText == null) {
			return "nodeSetNodeValueNoModificationAllowedErrEE: #entTextNotNull 'entText' is null";
		}
		success = false;
		try {
			entText.nodeValue = "newValue";
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "nodeSetNodeValueNoModificationAllowedErrEE: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "nodeSetNodeValueNoModificationAllowedErrEE: OK";
	} catch (e) {
		return "nodeSetNodeValueNoModificationAllowedErrEE: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodetextnodeattribute.xml" fleur="nodetextnodeattribute" native="nodetextnodeattribute"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testAddr;
		var textNode;
		var attrList;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testAddr = elementList.item(0);
		textNode = testAddr.firstChild;
		attrList = textNode.attributes;
		if (attrList != null) {
			return "nodeTextNodeAttribute: #nodeTextNodeAttributesAssert1 'attrList' equals '" + attrList + "' not null";
		}
		return "nodeTextNodeAttribute: OK";
	} catch (e) {
		return "nodeTextNodeAttribute: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testAddr;
		var textNode;
		var attrList;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testAddr = elementList.item(0);
		textNode = testAddr.firstChild;
		attrList = textNode.attributes;
		if (attrList != null) {
			return "nodeTextNodeAttribute: #nodeTextNodeAttributesAssert1 'attrList' equals '" + attrList + "' not null";
		}
		return "nodeTextNodeAttribute: OK";
	} catch (e) {
		return "nodeTextNodeAttribute: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodetextnodename.xml" fleur="nodetextnodename" native="nodetextnodename"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testAddr;
		var textNode;
		var textName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testAddr = elementList.item(0);
		textNode = testAddr.firstChild;
		textName = textNode.nodeName;
		if ("#text" !== textName) {
			return "nodeTextNodeName: #nodeTextNodeNameAssert1 'textName' equals '" + textName + "' not '" + "#text" + "'";
		}
		return "nodeTextNodeName: OK";
	} catch (e) {
		return "nodeTextNodeName: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testAddr;
		var textNode;
		var textName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testAddr = elementList.item(0);
		textNode = testAddr.firstChild;
		textName = textNode.nodeName;
		if ("#text" !== textName) {
			return "nodeTextNodeName: #nodeTextNodeNameAssert1 'textName' equals '" + textName + "' not '" + "#text" + "'";
		}
		return "nodeTextNodeName: OK";
	} catch (e) {
		return "nodeTextNodeName: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodetextnodetype.xml" fleur="nodetextnodetype" native="nodetextnodetype"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testAddr;
		var textNode;
		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testAddr = elementList.item(0);
		textNode = testAddr.firstChild;
		nodeType = textNode.nodeType;
		if (3 !== nodeType) {
			return "nodeTextNodeType: #nodeTextNodeTypeAssert1 'nodeType' equals '" + nodeType + "' not '" + 3 + "'";
		}
		return "nodeTextNodeType: OK";
	} catch (e) {
		return "nodeTextNodeType: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testAddr;
		var textNode;
		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testAddr = elementList.item(0);
		textNode = testAddr.firstChild;
		nodeType = textNode.nodeType;
		if (3 !== nodeType) {
			return "nodeTextNodeType: #nodeTextNodeTypeAssert1 'nodeType' equals '" + nodeType + "' not '" + 3 + "'";
		}
		return "nodeTextNodeType: OK";
	} catch (e) {
		return "nodeTextNodeType: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodetextnodevalue.xml" fleur="nodetextnodevalue" native="nodetextnodevalue"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testAddr;
		var textNode;
		var textValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testAddr = elementList.item(0);
		textNode = testAddr.firstChild;
		textValue = textNode.nodeValue;
		if ("1230 North Ave. Dallas, Texas 98551" !== textValue) {
			return "nodeTextNodeValue: #nodeTextNodeValueAssert1 'textValue' equals '" + textValue + "' not '" + "1230 North Ave. Dallas, Texas 98551" + "'";
		}
		return "nodeTextNodeValue: OK";
	} catch (e) {
		return "nodeTextNodeValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testAddr;
		var textNode;
		var textValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testAddr = elementList.item(0);
		textNode = testAddr.firstChild;
		textValue = textNode.nodeValue;
		if ("1230 North Ave. Dallas, Texas 98551" !== textValue) {
			return "nodeTextNodeValue: #nodeTextNodeValueAssert1 'textValue' equals '" + textValue + "' not '" + "1230 North Ave. Dallas, Texas 98551" + "'";
		}
		return "nodeTextNodeValue: OK";
	} catch (e) {
		return "nodeTextNodeValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="notationgetnotationname.xml" fleur="notationgetnotationname" native="notationgetnotationname"><Fleur>(function(){
	var success;
	try {
		var doc;
		var docType;
		var notations;
		var notationNode;
		var notationName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		if (docType == null) {
			return "notationGetNotationName: #docTypeNotNull 'docType' is null";
		}
		notations = docType.notations;
		if (notations == null) {
			return "notationGetNotationName: #notationsNotNull 'notations' is null";
		}
		notationNode = notations.getNamedItem("notation1");
		notationName = notationNode.nodeName;
		if ("notation1" !== notationName) {
			return "notationGetNotationName: #notationGetNotationNameAssert 'notationName' equals '" + notationName + "' not '" + "notation1" + "'";
		}
		return "notationGetNotationName: OK";
	} catch (e) {
		return "notationGetNotationName: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var docType;
		var notations;
		var notationNode;
		var notationName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		if (docType == null) {
			return "notationGetNotationName: #docTypeNotNull 'docType' is null";
		}
		notations = docType.notations;
		if (notations == null) {
			return "notationGetNotationName: #notationsNotNull 'notations' is null";
		}
		notationNode = notations.getNamedItem("notation1");
		notationName = notationNode.nodeName;
		if ("notation1" !== notationName) {
			return "notationGetNotationName: #notationGetNotationNameAssert 'notationName' equals '" + notationName + "' not '" + "notation1" + "'";
		}
		return "notationGetNotationName: OK";
	} catch (e) {
		return "notationGetNotationName: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="notationgetpublicid.xml" fleur="notationgetpublicid" native="notationgetpublicid"><Fleur>(function(){
	var success;
	try {
		var doc;
		var docType;
		var notations;
		var notationNode;
		var publicId;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		if (docType == null) {
			return "notationGetPublicId: #docTypeNotNull 'docType' is null";
		}
		notations = docType.notations;
		if (notations == null) {
			return "notationGetPublicId: #notationsNotNull 'notations' is null";
		}
		notationNode = notations.getNamedItem("notation1");
		publicId = notationNode.publicId;
		if ("notation1File" !== publicId) {
			return "notationGetPublicId: #publicId 'publicId' equals '" + publicId + "' not '" + "notation1File" + "'";
		}
		return "notationGetPublicId: OK";
	} catch (e) {
		return "notationGetPublicId: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var docType;
		var notations;
		var notationNode;
		var publicId;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		if (docType == null) {
			return "notationGetPublicId: #docTypeNotNull 'docType' is null";
		}
		notations = docType.notations;
		if (notations == null) {
			return "notationGetPublicId: #notationsNotNull 'notations' is null";
		}
		notationNode = notations.getNamedItem("notation1");
		publicId = notationNode.publicId;
		if ("notation1File" !== publicId) {
			return "notationGetPublicId: #publicId 'publicId' equals '" + publicId + "' not '" + "notation1File" + "'";
		}
		return "notationGetPublicId: OK";
	} catch (e) {
		return "notationGetPublicId: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="notationgetpublicidnull.xml" fleur="notationgetpublicidnull" native="notationgetpublicidnull"><Fleur>(function(){
	var success;
	try {
		var doc;
		var docType;
		var notations;
		var notationNode;
		var publicId;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		if (docType == null) {
			return "notationGetPublicIdNull: #docTypeNotNull 'docType' is null";
		}
		notations = docType.notations;
		if (notations == null) {
			return "notationGetPublicIdNull: #notationsNotNull 'notations' is null";
		}
		notationNode = notations.getNamedItem("notation2");
		publicId = notationNode.publicId;
		if (publicId != null) {
			return "notationGetPublicIdNull: #publicId 'publicId' equals '" + publicId + "' not null";
		}
		return "notationGetPublicIdNull: OK";
	} catch (e) {
		return "notationGetPublicIdNull: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var docType;
		var notations;
		var notationNode;
		var publicId;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		if (docType == null) {
			return "notationGetPublicIdNull: #docTypeNotNull 'docType' is null";
		}
		notations = docType.notations;
		if (notations == null) {
			return "notationGetPublicIdNull: #notationsNotNull 'notations' is null";
		}
		notationNode = notations.getNamedItem("notation2");
		publicId = notationNode.publicId;
		if (publicId != null) {
			return "notationGetPublicIdNull: #publicId 'publicId' equals '" + publicId + "' not null";
		}
		return "notationGetPublicIdNull: OK";
	} catch (e) {
		return "notationGetPublicIdNull: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="notationgetsystemid.xml" fleur="notationgetsystemid" native="notationgetsystemid"><Fleur>(function(){
	var success;
	try {
		var doc;
		var docType;
		var notations;
		var notationNode;
		var systemId;
		var index;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		if (docType == null) {
			return "notationGetSystemId: #docTypeNotNull 'docType' is null";
		}
		notations = docType.notations;
		if (notations == null) {
			return "notationGetSystemId: #notationsNotNull 'notations' is null";
		}
		notationNode = notations.getNamedItem("notation2");
		systemId = notationNode.systemId;
		assertURIEquals("uriEquals",null,null,null,"notation2File",null,null,null,null,systemId);
		return "notationGetSystemId: OK";
	} catch (e) {
		return "notationGetSystemId: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var docType;
		var notations;
		var notationNode;
		var systemId;
		var index;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		if (docType == null) {
			return "notationGetSystemId: #docTypeNotNull 'docType' is null";
		}
		notations = docType.notations;
		if (notations == null) {
			return "notationGetSystemId: #notationsNotNull 'notations' is null";
		}
		notationNode = notations.getNamedItem("notation2");
		systemId = notationNode.systemId;
		assertURIEquals("uriEquals",null,null,null,"notation2File",null,null,null,null,systemId);
		return "notationGetSystemId: OK";
	} catch (e) {
		return "notationGetSystemId: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="notationgetsystemidnull.xml" fleur="notationgetsystemidnull" native="notationgetsystemidnull"><Fleur>(function(){
	var success;
	try {
		var doc;
		var docType;
		var notations;
		var notationNode;
		var systemId;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		if (docType == null) {
			return "notationGetSystemIdNull: #docTypeNotNull 'docType' is null";
		}
		notations = docType.notations;
		if (notations == null) {
			return "notationGetSystemIdNull: #notationsNotNull 'notations' is null";
		}
		notationNode = notations.getNamedItem("notation1");
		systemId = notationNode.systemId;
		if (systemId != null) {
			return "notationGetSystemIdNull: #systemId 'systemId' equals '" + systemId + "' not null";
		}
		return "notationGetSystemIdNull: OK";
	} catch (e) {
		return "notationGetSystemIdNull: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var docType;
		var notations;
		var notationNode;
		var systemId;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		if (docType == null) {
			return "notationGetSystemIdNull: #docTypeNotNull 'docType' is null";
		}
		notations = docType.notations;
		if (notations == null) {
			return "notationGetSystemIdNull: #notationsNotNull 'notations' is null";
		}
		notationNode = notations.getNamedItem("notation1");
		systemId = notationNode.systemId;
		if (systemId != null) {
			return "notationGetSystemIdNull: #systemId 'systemId' equals '" + systemId + "' not null";
		}
		return "notationGetSystemIdNull: OK";
	} catch (e) {
		return "notationGetSystemIdNull: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="processinginstructiongetdata.xml" fleur="processinginstructiongetdata" native="processinginstructiongetdata"><Fleur>(function(){
	var success;
	try {
		var doc;
		var childNodes;
		var piNode;
		var data;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		childNodes = doc.childNodes;
		piNode = childNodes.item(0);
		data = piNode.data;
		if ("PIDATA" !== data) {
			return "processinginstructionGetData: #processinginstructionGetTargetAssert 'data' equals '" + data + "' not '" + "PIDATA" + "'";
		}
		return "processinginstructionGetData: OK";
	} catch (e) {
		return "processinginstructionGetData: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var childNodes;
		var piNode;
		var data;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		childNodes = doc.childNodes;
		piNode = childNodes.item(0);
		data = piNode.data;
		if ("PIDATA" !== data) {
			return "processinginstructionGetData: #processinginstructionGetTargetAssert 'data' equals '" + data + "' not '" + "PIDATA" + "'";
		}
		return "processinginstructionGetData: OK";
	} catch (e) {
		return "processinginstructionGetData: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="processinginstructiongettarget.xml" fleur="processinginstructiongettarget" native="processinginstructiongettarget"><Fleur>(function(){
	var success;
	try {
		var doc;
		var childNodes;
		var piNode;
		var target;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		childNodes = doc.childNodes;
		piNode = childNodes.item(0);
		target = piNode.target;
		if ("TEST-STYLE" !== target) {
			return "processinginstructionGetTarget: #processinginstructionGetTargetAssert 'target' equals '" + target + "' not '" + "TEST-STYLE" + "'";
		}
		return "processinginstructionGetTarget: OK";
	} catch (e) {
		return "processinginstructionGetTarget: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var childNodes;
		var piNode;
		var target;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		childNodes = doc.childNodes;
		piNode = childNodes.item(0);
		target = piNode.target;
		if ("TEST-STYLE" !== target) {
			return "processinginstructionGetTarget: #processinginstructionGetTargetAssert 'target' equals '" + target + "' not '" + "TEST-STYLE" + "'";
		}
		return "processinginstructionGetTarget: OK";
	} catch (e) {
		return "processinginstructionGetTarget: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="processinginstructionsetdatanomodificationallowederr.xml" fleur="processinginstructionsetdatanomodificationallowederr" native="processinginstructionsetdatanomodificationallowederr"><Fleur>(function(){
	var success;
	try {
		var doc;
		var genderList;
		var gender;
		var entRef;
		var piNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		genderList = doc.getElementsByTagName("gender");
		gender = genderList.item(2);
		entRef = gender.firstChild;
		if (entRef == null) {
			return "processinginstructionSetDataNoModificationAllowedErr: #entRefNotNull 'entRef' is null";
		}
		piNode = entRef.lastChild;
		if (piNode == null) {
			return "processinginstructionSetDataNoModificationAllowedErr: #piNodeNotNull 'piNode' is null";
		}
		success = false;
		try {
			piNode.data = "newData";
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "processinginstructionSetDataNoModificationAllowedErr: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "processinginstructionSetDataNoModificationAllowedErr: OK";
	} catch (e) {
		return "processinginstructionSetDataNoModificationAllowedErr: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var genderList;
		var gender;
		var entRef;
		var piNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		genderList = doc.getElementsByTagName("gender");
		gender = genderList.item(2);
		entRef = gender.firstChild;
		if (entRef == null) {
			return "processinginstructionSetDataNoModificationAllowedErr: #entRefNotNull 'entRef' is null";
		}
		piNode = entRef.lastChild;
		if (piNode == null) {
			return "processinginstructionSetDataNoModificationAllowedErr: #piNodeNotNull 'piNode' is null";
		}
		success = false;
		try {
			piNode.data = "newData";
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "processinginstructionSetDataNoModificationAllowedErr: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "processinginstructionSetDataNoModificationAllowedErr: OK";
	} catch (e) {
		return "processinginstructionSetDataNoModificationAllowedErr: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="processinginstructionsetdatanomodificationallowederrEE.xml" fleur="processinginstructionsetdatanomodificationallowederrEE" native="processinginstructionsetdatanomodificationallowederrEE"><Fleur>(function(){
	var success;
	try {
		var doc;
		var genderList;
		var gender;
		var entRef;
		var piNode;
		var appendedChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		genderList = doc.getElementsByTagName("gender");
		gender = genderList.item(2);
		entRef = doc.createEntityReference("ent4");
		appendedChild = gender.appendChild(entRef);
		entRef = gender.lastChild;
		if (entRef == null) {
			return "processinginstructionSetDataNoModificationAllowedErrEE: #entRefNotNull 'entRef' is null";
		}
		piNode = entRef.lastChild;
		if (piNode == null) {
			return "processinginstructionSetDataNoModificationAllowedErrEE: #piNodeNotNull 'piNode' is null";
		}
		success = false;
		try {
			piNode.data = "newData";
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "processinginstructionSetDataNoModificationAllowedErrEE: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "processinginstructionSetDataNoModificationAllowedErrEE: OK";
	} catch (e) {
		return "processinginstructionSetDataNoModificationAllowedErrEE: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var genderList;
		var gender;
		var entRef;
		var piNode;
		var appendedChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		genderList = doc.getElementsByTagName("gender");
		gender = genderList.item(2);
		entRef = doc.createEntityReference("ent4");
		appendedChild = gender.appendChild(entRef);
		entRef = gender.lastChild;
		if (entRef == null) {
			return "processinginstructionSetDataNoModificationAllowedErrEE: #entRefNotNull 'entRef' is null";
		}
		piNode = entRef.lastChild;
		if (piNode == null) {
			return "processinginstructionSetDataNoModificationAllowedErrEE: #piNodeNotNull 'piNode' is null";
		}
		success = false;
		try {
			piNode.data = "newData";
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "processinginstructionSetDataNoModificationAllowedErrEE: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "processinginstructionSetDataNoModificationAllowedErrEE: OK";
	} catch (e) {
		return "processinginstructionSetDataNoModificationAllowedErrEE: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="textindexsizeerrnegativeoffset.xml" fleur="textindexsizeerrnegativeoffset" native="textindexsizeerrnegativeoffset"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var textNode;
		var splitNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("name");
		nameNode = elementList.item(2);
		textNode = nameNode.firstChild;
		success = false;
		try {
			splitNode = textNode.splitText(-69);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 1;
			}
		}
		if (!success) {
			return "textIndexSizeErrNegativeOffset: Exception INDEX_SIZE_ERR expected";
		}
		return "textIndexSizeErrNegativeOffset: OK";
	} catch (e) {
		return "textIndexSizeErrNegativeOffset: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var textNode;
		var splitNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("name");
		nameNode = elementList.item(2);
		textNode = nameNode.firstChild;
		success = false;
		try {
			splitNode = textNode.splitText(-69);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 1;
			}
		}
		if (!success) {
			return "textIndexSizeErrNegativeOffset: Exception INDEX_SIZE_ERR expected";
		}
		return "textIndexSizeErrNegativeOffset: OK";
	} catch (e) {
		return "textIndexSizeErrNegativeOffset: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="textindexsizeerroffsetoutofbounds.xml" fleur="textindexsizeerroffsetoutofbounds" native="textindexsizeerroffsetoutofbounds"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var textNode;
		var splitNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("name");
		nameNode = elementList.item(2);
		textNode = nameNode.firstChild;
		success = false;
		try {
			splitNode = textNode.splitText(300);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 1;
			}
		}
		if (!success) {
			return "textIndexSizeErrOffsetOutOfBounds: Exception INDEX_SIZE_ERR expected";
		}
		return "textIndexSizeErrOffsetOutOfBounds: OK";
	} catch (e) {
		return "textIndexSizeErrOffsetOutOfBounds: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var textNode;
		var splitNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("name");
		nameNode = elementList.item(2);
		textNode = nameNode.firstChild;
		success = false;
		try {
			splitNode = textNode.splitText(300);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 1;
			}
		}
		if (!success) {
			return "textIndexSizeErrOffsetOutOfBounds: Exception INDEX_SIZE_ERR expected";
		}
		return "textIndexSizeErrOffsetOutOfBounds: OK";
	} catch (e) {
		return "textIndexSizeErrOffsetOutOfBounds: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="textparseintolistofelements.xml" fleur="textparseintolistofelements" native="textparseintolistofelements"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var addressNode;
		var childList;
		var child;
		var length;
		var value;
		var grandChild;
		var result = new Array();

		expectedNormal = new Array();
		expectedNormal[0] = "1900 Dallas Road";
		expectedNormal[1] = " Dallas, ";
		expectedNormal[2] = "Texas";
		expectedNormal[3] = "\n 98554";
		expectedExpanded = new Array();
		expectedExpanded[0] = "1900 Dallas Road Dallas, Texas\n 98554";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		addressNode = elementList.item(1);
		childList = addressNode.childNodes;
		length = childList.length;
		for (var index_id0x1258a100 = 0; index_id0x1258a100 &lt; childList.length; index_id0x1258a100++) {
			child = childList.item(index_id0x1258a100);
			value = child.nodeValue;
			if ((value == null)) {
				grandChild = child.firstChild;
				if (grandChild == null) {
					return "textParseIntoListOfElements: #grandChildNotNull 'grandChild' is null";
				}
				value = grandChild.nodeValue;
result[result.length] = value;
			} else {
result[result.length] = value;
			}
		}
		if ((4 == length)) {
			if (expectedNormal.join("|") !== result.join("|")) {
				return "textParseIntoListOfElements: #assertEqNormal 'result' equals '" + result.join("|") + "' not '" + expectedNormal.join("|") + "'";
			}
		} else {
			if (expectedExpanded.join("|") !== result.join("|")) {
				return "textParseIntoListOfElements: #assertEqCoalescing 'result' equals '" + result.join("|") + "' not '" + expectedExpanded.join("|") + "'";
			}
		}
		return "textParseIntoListOfElements: OK";
	} catch (e) {
		return "textParseIntoListOfElements: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var addressNode;
		var childList;
		var child;
		var length;
		var value;
		var grandChild;
		var result = new Array();

		expectedNormal = new Array();
		expectedNormal[0] = "1900 Dallas Road";
		expectedNormal[1] = " Dallas, ";
		expectedNormal[2] = "Texas";
		expectedNormal[3] = "\n 98554";
		expectedExpanded = new Array();
		expectedExpanded[0] = "1900 Dallas Road Dallas, Texas\n 98554";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		addressNode = elementList.item(1);
		childList = addressNode.childNodes;
		length = childList.length;
		for (var index_id0x1258a100 = 0; index_id0x1258a100 &lt; childList.length; index_id0x1258a100++) {
			child = childList.item(index_id0x1258a100);
			value = child.nodeValue;
			if ((value == null)) {
				grandChild = child.firstChild;
				if (grandChild == null) {
					return "textParseIntoListOfElements: #grandChildNotNull 'grandChild' is null";
				}
				value = grandChild.nodeValue;
result[result.length] = value;
			} else {
result[result.length] = value;
			}
		}
		if ((4 == length)) {
			if (expectedNormal.join("|") !== result.join("|")) {
				return "textParseIntoListOfElements: #assertEqNormal 'result' equals '" + result.join("|") + "' not '" + expectedNormal.join("|") + "'";
			}
		} else {
			if (expectedExpanded.join("|") !== result.join("|")) {
				return "textParseIntoListOfElements: #assertEqCoalescing 'result' equals '" + result.join("|") + "' not '" + expectedExpanded.join("|") + "'";
			}
		}
		return "textParseIntoListOfElements: OK";
	} catch (e) {
		return "textParseIntoListOfElements: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="textsplittextfour.xml" fleur="textsplittextfour" native="textsplittextfour"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var addressNode;
		var textNode;
		var splitNode;
		var value;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		addressNode = elementList.item(0);
		textNode = addressNode.firstChild;
		splitNode = textNode.splitText(30);
		value = splitNode.nodeValue;
		if ("98551" !== value) {
			return "textSplitTextFour: #textSplitTextFourAssert 'value' equals '" + value + "' not '" + "98551" + "'";
		}
		return "textSplitTextFour: OK";
	} catch (e) {
		return "textSplitTextFour: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var addressNode;
		var textNode;
		var splitNode;
		var value;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		addressNode = elementList.item(0);
		textNode = addressNode.firstChild;
		splitNode = textNode.splitText(30);
		value = splitNode.nodeValue;
		if ("98551" !== value) {
			return "textSplitTextFour: #textSplitTextFourAssert 'value' equals '" + value + "' not '" + "98551" + "'";
		}
		return "textSplitTextFour: OK";
	} catch (e) {
		return "textSplitTextFour: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="textsplittextnomodificationallowederr.xml" fleur="textsplittextnomodificationallowederr" native="textsplittextnomodificationallowederr"><Fleur>(function(){
	var success;
	try {
		var doc;
		var genderList;
		var gender;
		var entRef;
		var entElement;
		var entElementText;
		var splitNode;
		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		genderList = doc.getElementsByTagName("gender");
		gender = genderList.item(2);
		entRef = gender.firstChild;
		if (entRef == null) {
			return "textSplitTextNoModificationAllowedErr: #entRefNotNull 'entRef' is null";
		}
		nodeType = entRef.nodeType;
		if ((1 == nodeType)) {
			entRef = doc.createEntityReference("ent4");
			if (entRef == null) {
				return "textSplitTextNoModificationAllowedErr: #createdEntRefNotNull 'entRef' is null";
			}
		}
		entElement = entRef.firstChild;
		if (entElement == null) {
			return "textSplitTextNoModificationAllowedErr: #entElementNotNull 'entElement' is null";
		}
		entElementText = entElement.firstChild;
		if (entElementText == null) {
			return "textSplitTextNoModificationAllowedErr: #entElementTextNotNull 'entElementText' is null";
		}
		success = false;
		try {
			splitNode = entElementText.splitText(2);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "textSplitTextNoModificationAllowedErr: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "textSplitTextNoModificationAllowedErr: OK";
	} catch (e) {
		return "textSplitTextNoModificationAllowedErr: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var genderList;
		var gender;
		var entRef;
		var entElement;
		var entElementText;
		var splitNode;
		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		genderList = doc.getElementsByTagName("gender");
		gender = genderList.item(2);
		entRef = gender.firstChild;
		if (entRef == null) {
			return "textSplitTextNoModificationAllowedErr: #entRefNotNull 'entRef' is null";
		}
		nodeType = entRef.nodeType;
		if ((1 == nodeType)) {
			entRef = doc.createEntityReference("ent4");
			if (entRef == null) {
				return "textSplitTextNoModificationAllowedErr: #createdEntRefNotNull 'entRef' is null";
			}
		}
		entElement = entRef.firstChild;
		if (entElement == null) {
			return "textSplitTextNoModificationAllowedErr: #entElementNotNull 'entElement' is null";
		}
		entElementText = entElement.firstChild;
		if (entElementText == null) {
			return "textSplitTextNoModificationAllowedErr: #entElementTextNotNull 'entElementText' is null";
		}
		success = false;
		try {
			splitNode = entElementText.splitText(2);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "textSplitTextNoModificationAllowedErr: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "textSplitTextNoModificationAllowedErr: OK";
	} catch (e) {
		return "textSplitTextNoModificationAllowedErr: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="textsplittextnomodificationallowederrEE.xml" fleur="textsplittextnomodificationallowederrEE" native="textsplittextnomodificationallowederrEE"><Fleur>(function(){
	var success;
	try {
		var doc;
		var entRef;
		var entText;
		var splitNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		entRef = doc.createEntityReference("ent3");
		if (entRef == null) {
			return "textSplitTextNoModificationAllowedErrEE: #createdEntRefNotNull 'entRef' is null";
		}
		entText = entRef.firstChild;
		if (entText == null) {
			return "textSplitTextNoModificationAllowedErrEE: #entTextNotNull 'entText' is null";
		}
		success = false;
		try {
			splitNode = entText.splitText(2);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "textSplitTextNoModificationAllowedErrEE: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "textSplitTextNoModificationAllowedErrEE: OK";
	} catch (e) {
		return "textSplitTextNoModificationAllowedErrEE: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var entRef;
		var entText;
		var splitNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		entRef = doc.createEntityReference("ent3");
		if (entRef == null) {
			return "textSplitTextNoModificationAllowedErrEE: #createdEntRefNotNull 'entRef' is null";
		}
		entText = entRef.firstChild;
		if (entText == null) {
			return "textSplitTextNoModificationAllowedErrEE: #entTextNotNull 'entText' is null";
		}
		success = false;
		try {
			splitNode = entText.splitText(2);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "textSplitTextNoModificationAllowedErrEE: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "textSplitTextNoModificationAllowedErrEE: OK";
	} catch (e) {
		return "textSplitTextNoModificationAllowedErrEE: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="textsplittextone.xml" fleur="textsplittextone" native="textsplittextone"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var textNode;
		var splitNode;
		var secondPart;
		var value;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("name");
		nameNode = elementList.item(2);
		textNode = nameNode.firstChild;
		splitNode = textNode.splitText(7);
		secondPart = textNode.nextSibling;
		value = secondPart.nodeValue;
		if ("Jones" !== value) {
			return "textSplitTextOne: #textSplitTextOneAssert 'value' equals '" + value + "' not '" + "Jones" + "'";
		}
		return "textSplitTextOne: OK";
	} catch (e) {
		return "textSplitTextOne: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var textNode;
		var splitNode;
		var secondPart;
		var value;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("name");
		nameNode = elementList.item(2);
		textNode = nameNode.firstChild;
		splitNode = textNode.splitText(7);
		secondPart = textNode.nextSibling;
		value = secondPart.nodeValue;
		if ("Jones" !== value) {
			return "textSplitTextOne: #textSplitTextOneAssert 'value' equals '" + value + "' not '" + "Jones" + "'";
		}
		return "textSplitTextOne: OK";
	} catch (e) {
		return "textSplitTextOne: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="textsplittextthree.xml" fleur="textsplittextthree" native="textsplittextthree"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var textNode;
		var splitNode;
		var value;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("name");
		nameNode = elementList.item(2);
		textNode = nameNode.firstChild;
		splitNode = textNode.splitText(6);
		value = splitNode.nodeValue;
		if (" Jones" !== value) {
			return "textSplitTextThree: #textSplitTextThreeAssert 'value' equals '" + value + "' not '" + " Jones" + "'";
		}
		return "textSplitTextThree: OK";
	} catch (e) {
		return "textSplitTextThree: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var textNode;
		var splitNode;
		var value;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("name");
		nameNode = elementList.item(2);
		textNode = nameNode.firstChild;
		splitNode = textNode.splitText(6);
		value = splitNode.nodeValue;
		if (" Jones" !== value) {
			return "textSplitTextThree: #textSplitTextThreeAssert 'value' equals '" + value + "' not '" + " Jones" + "'";
		}
		return "textSplitTextThree: OK";
	} catch (e) {
		return "textSplitTextThree: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="textsplittexttwo.xml" fleur="textsplittexttwo" native="textsplittexttwo"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var textNode;
		var splitNode;
		var value;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("name");
		nameNode = elementList.item(2);
		textNode = nameNode.firstChild;
		splitNode = textNode.splitText(5);
		value = textNode.nodeValue;
		if ("Roger" !== value) {
			return "textSplitTextTwo: #textSplitTextTwoAssert 'value' equals '" + value + "' not '" + "Roger" + "'";
		}
		return "textSplitTextTwo: OK";
	} catch (e) {
		return "textSplitTextTwo: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var textNode;
		var splitNode;
		var value;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("name");
		nameNode = elementList.item(2);
		textNode = nameNode.firstChild;
		splitNode = textNode.splitText(5);
		value = textNode.nodeValue;
		if ("Roger" !== value) {
			return "textSplitTextTwo: #textSplitTextTwoAssert 'value' equals '" + value + "' not '" + "Roger" + "'";
		}
		return "textSplitTextTwo: OK";
	} catch (e) {
		return "textSplitTextTwo: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="textwithnomarkup.xml" fleur="textwithnomarkup" native="textwithnomarkup"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var nodeV;
		var value;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("name");
		nameNode = elementList.item(2);
		nodeV = nameNode.firstChild;
		value = nodeV.nodeValue;
		if ("Roger\n Jones" !== value) {
			return "textWithNoMarkup: #textNodeValue 'value' equals '" + value + "' not '" + "Roger\n Jones" + "'";
		}
		return "textWithNoMarkup: OK";
	} catch (e) {
		return "textWithNoMarkup: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var nodeV;
		var value;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("name");
		nameNode = elementList.item(2);
		nodeV = nameNode.firstChild;
		value = nodeV.nodeValue;
		if ("Roger\n Jones" !== value) {
			return "textWithNoMarkup: #textNodeValue 'value' equals '" + value + "' not '" + "Roger\n Jones" + "'";
		}
		return "textWithNoMarkup: OK";
	} catch (e) {
		return "textWithNoMarkup: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodevalue01.xml" fleur="nodevalue01" native="nodevalue01"><Fleur>(function(){
	var success;
	try {
		var doc;
		var newNode;
		var newValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		newNode = doc.createElement("address");
		newValue = newNode.nodeValue;
		if (newValue != null) {
			return "nodevalue01: #initiallyNull 'newValue' equals '" + newValue + "' not null";
		}
		newNode.nodeValue = "This should have no effect";
		newValue = newNode.nodeValue;
		if (newValue != null) {
			return "nodevalue01: #nullAfterAttemptedChange 'newValue' equals '" + newValue + "' not null";
		}
		return "nodevalue01: OK";
	} catch (e) {
		return "nodevalue01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var newNode;
		var newValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		newNode = doc.createElement("address");
		newValue = newNode.nodeValue;
		if (newValue != null) {
			return "nodevalue01: #initiallyNull 'newValue' equals '" + newValue + "' not null";
		}
		newNode.nodeValue = "This should have no effect";
		newValue = newNode.nodeValue;
		if (newValue != null) {
			return "nodevalue01: #nullAfterAttemptedChange 'newValue' equals '" + newValue + "' not null";
		}
		return "nodevalue01: OK";
	} catch (e) {
		return "nodevalue01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodevalue02.xml" fleur="nodevalue02" native="nodevalue02"><Fleur>(function(){
	var success;
	try {
		var doc;
		var newNode;
		var newValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		newNode = doc.createComment("This is a new Comment node");
		newValue = newNode.nodeValue;
		if ("This is a new Comment node" !== newValue) {
			return "nodevalue02: #initial 'newValue' equals '" + newValue + "' not '" + "This is a new Comment node" + "'";
		}
		newNode.nodeValue = "This should have an effect";
		newValue = newNode.nodeValue;
		if ("This should have an effect" !== newValue) {
			return "nodevalue02: #afterChange 'newValue' equals '" + newValue + "' not '" + "This should have an effect" + "'";
		}
		return "nodevalue02: OK";
	} catch (e) {
		return "nodevalue02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var newNode;
		var newValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		newNode = doc.createComment("This is a new Comment node");
		newValue = newNode.nodeValue;
		if ("This is a new Comment node" !== newValue) {
			return "nodevalue02: #initial 'newValue' equals '" + newValue + "' not '" + "This is a new Comment node" + "'";
		}
		newNode.nodeValue = "This should have an effect";
		newValue = newNode.nodeValue;
		if ("This should have an effect" !== newValue) {
			return "nodevalue02: #afterChange 'newValue' equals '" + newValue + "' not '" + "This should have an effect" + "'";
		}
		return "nodevalue02: OK";
	} catch (e) {
		return "nodevalue02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodevalue03.xml" fleur="nodevalue03" native="nodevalue03"><Fleur>(function(){
	var success;
	try {
		var doc;
		var newNode;
		var newValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		newNode = doc.createEntityReference("ent1");
		if (newNode == null) {
			return "nodevalue03: #createdEntRefNotNull 'newNode' is null";
		}
		newValue = newNode.nodeValue;
		if (newValue != null) {
			return "nodevalue03: #initiallyNull 'newValue' equals '" + newValue + "' not null";
		}
		newNode.nodeValue = "This should have no effect";
		newValue = newNode.nodeValue;
		if (newValue != null) {
			return "nodevalue03: #nullAfterAttemptedChange 'newValue' equals '" + newValue + "' not null";
		}
		return "nodevalue03: OK";
	} catch (e) {
		return "nodevalue03: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var newNode;
		var newValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		newNode = doc.createEntityReference("ent1");
		if (newNode == null) {
			return "nodevalue03: #createdEntRefNotNull 'newNode' is null";
		}
		newValue = newNode.nodeValue;
		if (newValue != null) {
			return "nodevalue03: #initiallyNull 'newValue' equals '" + newValue + "' not null";
		}
		newNode.nodeValue = "This should have no effect";
		newValue = newNode.nodeValue;
		if (newValue != null) {
			return "nodevalue03: #nullAfterAttemptedChange 'newValue' equals '" + newValue + "' not null";
		}
		return "nodevalue03: OK";
	} catch (e) {
		return "nodevalue03: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodevalue04.xml" fleur="nodevalue04" native="nodevalue04"><Fleur>(function(){
	var success;
	try {
		var doc;
		var newNode;
		var newValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		newNode = doc.doctype;
		if (newNode == null) {
			return "nodevalue04: #docTypeNotNull 'newNode' is null";
		}
		newValue = newNode.nodeValue;
		if (newValue != null) {
			return "nodevalue04: #initiallyNull 'newValue' equals '" + newValue + "' not null";
		}
		newNode.nodeValue = "This should have no effect";
		newValue = newNode.nodeValue;
		if (newValue != null) {
			return "nodevalue04: #nullAfterAttemptedChange 'newValue' equals '" + newValue + "' not null";
		}
		return "nodevalue04: OK";
	} catch (e) {
		return "nodevalue04: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var newNode;
		var newValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		newNode = doc.doctype;
		if (newNode == null) {
			return "nodevalue04: #docTypeNotNull 'newNode' is null";
		}
		newValue = newNode.nodeValue;
		if (newValue != null) {
			return "nodevalue04: #initiallyNull 'newValue' equals '" + newValue + "' not null";
		}
		newNode.nodeValue = "This should have no effect";
		newValue = newNode.nodeValue;
		if (newValue != null) {
			return "nodevalue04: #nullAfterAttemptedChange 'newValue' equals '" + newValue + "' not null";
		}
		return "nodevalue04: OK";
	} catch (e) {
		return "nodevalue04: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodevalue05.xml" fleur="nodevalue05" native="nodevalue05"><Fleur>(function(){
	var success;
	try {
		var doc;
		var newNode;
		var newValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		newNode = doc.createDocumentFragment();
		newValue = newNode.nodeValue;
		if (newValue != null) {
			return "nodevalue05: #initiallyNull 'newValue' equals '" + newValue + "' not null";
		}
		newNode.nodeValue = "This should have no effect";
		newValue = newNode.nodeValue;
		if (newValue != null) {
			return "nodevalue05: #nullAfterAttemptedChange 'newValue' equals '" + newValue + "' not null";
		}
		return "nodevalue05: OK";
	} catch (e) {
		return "nodevalue05: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var newNode;
		var newValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		newNode = doc.createDocumentFragment();
		newValue = newNode.nodeValue;
		if (newValue != null) {
			return "nodevalue05: #initiallyNull 'newValue' equals '" + newValue + "' not null";
		}
		newNode.nodeValue = "This should have no effect";
		newValue = newNode.nodeValue;
		if (newValue != null) {
			return "nodevalue05: #nullAfterAttemptedChange 'newValue' equals '" + newValue + "' not null";
		}
		return "nodevalue05: OK";
	} catch (e) {
		return "nodevalue05: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodevalue06.xml" fleur="nodevalue06" native="nodevalue06"><Fleur>(function(){
	var success;
	try {
		var newNode;
		var newValue;
		var newNodeReq = new XMLHttpRequest();
		newNodeReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		newNodeReq.send();
		newNode = new Fleur.DOMParser().parseFromString(newNodeReq.responseText, "text/xml");
		newValue = newNode.nodeValue;
		if (newValue != null) {
			return "nodevalue06: #initiallyNull 'newValue' equals '" + newValue + "' not null";
		}
		newNode.nodeValue = "This should have no effect";
		newValue = newNode.nodeValue;
		if (newValue != null) {
			return "nodevalue06: #nullAfterAttemptedChange 'newValue' equals '" + newValue + "' not null";
		}
		return "nodevalue06: OK";
	} catch (e) {
		return "nodevalue06: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var newNode;
		var newValue;
		var newNodeReq = new XMLHttpRequest();
		newNodeReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		newNodeReq.send();
		newNode = new DOMParser().parseFromString(newNodeReq.responseText, "text/xml");
		newValue = newNode.nodeValue;
		if (newValue != null) {
			return "nodevalue06: #initiallyNull 'newValue' equals '" + newValue + "' not null";
		}
		newNode.nodeValue = "This should have no effect";
		newValue = newNode.nodeValue;
		if (newValue != null) {
			return "nodevalue06: #nullAfterAttemptedChange 'newValue' equals '" + newValue + "' not null";
		}
		return "nodevalue06: OK";
	} catch (e) {
		return "nodevalue06: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodevalue07.xml" fleur="nodevalue07" native="nodevalue07"><Fleur>(function(){
	var success;
	try {
		var doc;
		var newNode;
		var newValue;
		var nodeMap;
		var docType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		if (docType == null) {
			return "nodevalue07: #docTypeNotNull 'docType' is null";
		}
		nodeMap = docType.entities;
		if (nodeMap == null) {
			return "nodevalue07: #entitiesNotNull 'nodeMap' is null";
		}
		newNode = nodeMap.getNamedItem("ent1");
		if (newNode == null) {
			return "nodevalue07: #entityNotNull 'newNode' is null";
		}
		newValue = newNode.nodeValue;
		if (newValue != null) {
			return "nodevalue07: #initiallyNull 'newValue' equals '" + newValue + "' not null";
		}
		newNode.nodeValue = "This should have no effect";
		newValue = newNode.nodeValue;
		if (newValue != null) {
			return "nodevalue07: #nullAfterAttemptedChange 'newValue' equals '" + newValue + "' not null";
		}
		return "nodevalue07: OK";
	} catch (e) {
		return "nodevalue07: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var newNode;
		var newValue;
		var nodeMap;
		var docType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		if (docType == null) {
			return "nodevalue07: #docTypeNotNull 'docType' is null";
		}
		nodeMap = docType.entities;
		if (nodeMap == null) {
			return "nodevalue07: #entitiesNotNull 'nodeMap' is null";
		}
		newNode = nodeMap.getNamedItem("ent1");
		if (newNode == null) {
			return "nodevalue07: #entityNotNull 'newNode' is null";
		}
		newValue = newNode.nodeValue;
		if (newValue != null) {
			return "nodevalue07: #initiallyNull 'newValue' equals '" + newValue + "' not null";
		}
		newNode.nodeValue = "This should have no effect";
		newValue = newNode.nodeValue;
		if (newValue != null) {
			return "nodevalue07: #nullAfterAttemptedChange 'newValue' equals '" + newValue + "' not null";
		}
		return "nodevalue07: OK";
	} catch (e) {
		return "nodevalue07: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodevalue08.xml" fleur="nodevalue08" native="nodevalue08"><Fleur>(function(){
	var success;
	try {
		var doc;
		var docType;
		var newNode;
		var newValue;
		var nodeMap;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		if (docType == null) {
			return "nodevalue08: #docTypeNotNull 'docType' is null";
		}
		nodeMap = docType.notations;
		if (nodeMap == null) {
			return "nodevalue08: #notationsNotNull 'nodeMap' is null";
		}
		newNode = nodeMap.getNamedItem("notation1");
		if (newNode == null) {
			return "nodevalue08: #notationNotNull 'newNode' is null";
		}
		newValue = newNode.nodeValue;
		if (newValue != null) {
			return "nodevalue08: #initiallyNull 'newValue' equals '" + newValue + "' not null";
		}
		newNode.nodeValue = "This should have no effect";
		newValue = newNode.nodeValue;
		if (newValue != null) {
			return "nodevalue08: #nullAfterAttemptedChange 'newValue' equals '" + newValue + "' not null";
		}
		return "nodevalue08: OK";
	} catch (e) {
		return "nodevalue08: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var docType;
		var newNode;
		var newValue;
		var nodeMap;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		if (docType == null) {
			return "nodevalue08: #docTypeNotNull 'docType' is null";
		}
		nodeMap = docType.notations;
		if (nodeMap == null) {
			return "nodevalue08: #notationsNotNull 'nodeMap' is null";
		}
		newNode = nodeMap.getNamedItem("notation1");
		if (newNode == null) {
			return "nodevalue08: #notationNotNull 'newNode' is null";
		}
		newValue = newNode.nodeValue;
		if (newValue != null) {
			return "nodevalue08: #initiallyNull 'newValue' equals '" + newValue + "' not null";
		}
		newNode.nodeValue = "This should have no effect";
		newValue = newNode.nodeValue;
		if (newValue != null) {
			return "nodevalue08: #nullAfterAttemptedChange 'newValue' equals '" + newValue + "' not null";
		}
		return "nodevalue08: OK";
	} catch (e) {
		return "nodevalue08: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="nodevalue09.xml" fleur="nodevalue09" native="nodevalue09"><Fleur>(function(){
	var success;
	try {
		var doc;
		var newNode;
		var newValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		newNode = doc.createProcessingInstruction("TARGET", "DATA");
		newValue = newNode.nodeValue;
		if ("DATA" !== newValue) {
			return "nodevalue09: #initial 'newValue' equals '" + newValue + "' not '" + "DATA" + "'";
		}
		newNode.nodeValue = "This should have an effect";
		newValue = newNode.nodeValue;
		if ("This should have an effect" !== newValue) {
			return "nodevalue09: #after 'newValue' equals '" + newValue + "' not '" + "This should have an effect" + "'";
		}
		return "nodevalue09: OK";
	} catch (e) {
		return "nodevalue09: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var newNode;
		var newValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		newNode = doc.createProcessingInstruction("TARGET", "DATA");
		newValue = newNode.nodeValue;
		if ("DATA" !== newValue) {
			return "nodevalue09: #initial 'newValue' equals '" + newValue + "' not '" + "DATA" + "'";
		}
		newNode.nodeValue = "This should have an effect";
		newValue = newNode.nodeValue;
		if ("This should have an effect" !== newValue) {
			return "nodevalue09: #after 'newValue' equals '" + newValue + "' not '" + "This should have an effect" + "'";
		}
		return "nodevalue09: OK";
	} catch (e) {
		return "nodevalue09: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>

<suite.member href="hc_attrcreatedocumentfragment.xml" fleur="hc_attrcreatedocumentfragment" native="hc_attrcreatedocumentfragment"><Fleur>(function(){
	var success;
	try {
		var doc;
		var docFragment;
		var newOne;
		var domesticNode;
		var attributes;
		var attribute;
		var attrName;
		var appendedChild;
		var langAttrCount = 0;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		docFragment = doc.createDocumentFragment();
		newOne = doc.createElement("html");
		newOne.setAttribute("lang", "EN");
		appendedChild = docFragment.appendChild(newOne);
		domesticNode = docFragment.firstChild;
		attributes = domesticNode.attributes;
		for (var index_id0x1278c650 = 0; index_id0x1278c650 &lt; attributes.length; index_id0x1278c650++) {
			attribute = attributes.item(index_id0x1278c650);
			attrName = attribute.nodeName;
			if (("lang" == attrName)) {
				langAttrCount += 1;
			}
		}
		if (1 !== langAttrCount) {
			return "hc_attrcreatedocumentfragment: #hasLangAttr 'langAttrCount' equals '" + langAttrCount + "' not '" + 1 + "'";
		}
		return "hc_attrcreatedocumentfragment: OK";
	} catch (e) {
		return "hc_attrcreatedocumentfragment: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var docFragment;
		var newOne;
		var domesticNode;
		var attributes;
		var attribute;
		var attrName;
		var appendedChild;
		var langAttrCount = 0;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		docFragment = doc.createDocumentFragment();
		newOne = doc.createElement("html");
		newOne.setAttribute("lang", "EN");
		appendedChild = docFragment.appendChild(newOne);
		domesticNode = docFragment.firstChild;
		attributes = domesticNode.attributes;
		for (var index_id0x1278c650 = 0; index_id0x1278c650 &lt; attributes.length; index_id0x1278c650++) {
			attribute = attributes.item(index_id0x1278c650);
			attrName = attribute.nodeName;
			if (("lang" == attrName)) {
				langAttrCount += 1;
			}
		}
		if (1 !== langAttrCount) {
			return "hc_attrcreatedocumentfragment: #hasLangAttr 'langAttrCount' equals '" + langAttrCount + "' not '" + 1 + "'";
		}
		return "hc_attrcreatedocumentfragment: OK";
	} catch (e) {
		return "hc_attrcreatedocumentfragment: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_attrcreatetextnode.xml" fleur="hc_attrcreatetextnode" native="hc_attrcreatetextnode"><Fleur>(function(){
	var success;
	try {
		var doc;
		var addressList;
		var testNode;
		var attributes;
		var streetAttr;
		var value;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		addressList = doc.getElementsByTagName("acronym");
		testNode = addressList.item(3);
		attributes = testNode.attributes;
		streetAttr = attributes.getNamedItem("class");
		streetAttr.value = "Y&amp;ent1;";
		value = streetAttr.value;
		if ("Y&amp;ent1;" !== value) {
			return "hc_attrCreateTextNode: #value 'value' equals '" + value + "' not '" + "Y&amp;ent1;" + "'";
		}
		value = streetAttr.nodeValue;
		if ("Y&amp;ent1;" !== value) {
			return "hc_attrCreateTextNode: #nodeValue 'value' equals '" + value + "' not '" + "Y&amp;ent1;" + "'";
		}
		return "hc_attrCreateTextNode: OK";
	} catch (e) {
		return "hc_attrCreateTextNode: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var addressList;
		var testNode;
		var attributes;
		var streetAttr;
		var value;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		addressList = doc.getElementsByTagName("acronym");
		testNode = addressList.item(3);
		attributes = testNode.attributes;
		streetAttr = attributes.getNamedItem("class");
		streetAttr.value = "Y&amp;ent1;";
		value = streetAttr.value;
		if ("Y&amp;ent1;" !== value) {
			return "hc_attrCreateTextNode: #value 'value' equals '" + value + "' not '" + "Y&amp;ent1;" + "'";
		}
		value = streetAttr.nodeValue;
		if ("Y&amp;ent1;" !== value) {
			return "hc_attrCreateTextNode: #nodeValue 'value' equals '" + value + "' not '" + "Y&amp;ent1;" + "'";
		}
		return "hc_attrCreateTextNode: OK";
	} catch (e) {
		return "hc_attrCreateTextNode: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_attrcreatetextnode2.xml" fleur="hc_attrcreatetextnode2" native="hc_attrcreatetextnode2"><Fleur>(function(){
	var success;
	try {
		var doc;
		var addressList;
		var testNode;
		var attributes;
		var streetAttr;
		var value;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		addressList = doc.getElementsByTagName("acronym");
		testNode = addressList.item(3);
		attributes = testNode.attributes;
		streetAttr = attributes.getNamedItem("class");
		streetAttr.nodeValue = "Y&amp;ent1;";
		value = streetAttr.value;
		if ("Y&amp;ent1;" !== value) {
			return "hc_attrCreateTextNode2: #value 'value' equals '" + value + "' not '" + "Y&amp;ent1;" + "'";
		}
		value = streetAttr.nodeValue;
		if ("Y&amp;ent1;" !== value) {
			return "hc_attrCreateTextNode2: #nodeValue 'value' equals '" + value + "' not '" + "Y&amp;ent1;" + "'";
		}
		return "hc_attrCreateTextNode2: OK";
	} catch (e) {
		return "hc_attrCreateTextNode2: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var addressList;
		var testNode;
		var attributes;
		var streetAttr;
		var value;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		addressList = doc.getElementsByTagName("acronym");
		testNode = addressList.item(3);
		attributes = testNode.attributes;
		streetAttr = attributes.getNamedItem("class");
		streetAttr.nodeValue = "Y&amp;ent1;";
		value = streetAttr.value;
		if ("Y&amp;ent1;" !== value) {
			return "hc_attrCreateTextNode2: #value 'value' equals '" + value + "' not '" + "Y&amp;ent1;" + "'";
		}
		value = streetAttr.nodeValue;
		if ("Y&amp;ent1;" !== value) {
			return "hc_attrCreateTextNode2: #nodeValue 'value' equals '" + value + "' not '" + "Y&amp;ent1;" + "'";
		}
		return "hc_attrCreateTextNode2: OK";
	} catch (e) {
		return "hc_attrCreateTextNode2: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_attreffectivevalue.xml" fleur="hc_attreffectivevalue" native="hc_attreffectivevalue"><Fleur>(function(){
	var success;
	try {
		var doc;
		var addressList;
		var testNode;
		var attributes;
		var domesticAttr;
		var value;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		addressList = doc.getElementsByTagName("acronym");
		testNode = addressList.item(0);
		attributes = testNode.attributes;
		domesticAttr = attributes.getNamedItem("title");
		value = domesticAttr.nodeValue;
		if ("Yes" !== value) {
			return "hc_attrEffectiveValue: #attrEffectiveValueAssert 'value' equals '" + value + "' not '" + "Yes" + "'";
		}
		return "hc_attrEffectiveValue: OK";
	} catch (e) {
		return "hc_attrEffectiveValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var addressList;
		var testNode;
		var attributes;
		var domesticAttr;
		var value;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		addressList = doc.getElementsByTagName("acronym");
		testNode = addressList.item(0);
		attributes = testNode.attributes;
		domesticAttr = attributes.getNamedItem("title");
		value = domesticAttr.nodeValue;
		if ("Yes" !== value) {
			return "hc_attrEffectiveValue: #attrEffectiveValueAssert 'value' equals '" + value + "' not '" + "Yes" + "'";
		}
		return "hc_attrEffectiveValue: OK";
	} catch (e) {
		return "hc_attrEffectiveValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_attrname.xml" fleur="hc_attrname" native="hc_attrname"><Fleur>(function(){
	var success;
	try {
		var doc;
		var addressList;
		var testNode;
		var attributes;
		var streetAttr;
		var strong1;
		var strong2;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		addressList = doc.getElementsByTagName("acronym");
		testNode = addressList.item(1);
		attributes = testNode.attributes;
		streetAttr = attributes.getNamedItem("class");
		strong1 = streetAttr.nodeName;
		strong2 = streetAttr.name;
		if ("class" !== strong1) {
			return "hc_attrName: #nodeName 'strong1' equals '" + strong1 + "' not '" + "class" + "'";
		}
		if ("class" !== strong2) {
			return "hc_attrName: #name 'strong2' equals '" + strong2 + "' not '" + "class" + "'";
		}
		return "hc_attrName: OK";
	} catch (e) {
		return "hc_attrName: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var addressList;
		var testNode;
		var attributes;
		var streetAttr;
		var strong1;
		var strong2;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		addressList = doc.getElementsByTagName("acronym");
		testNode = addressList.item(1);
		attributes = testNode.attributes;
		streetAttr = attributes.getNamedItem("class");
		strong1 = streetAttr.nodeName;
		strong2 = streetAttr.name;
		if ("class" !== strong1) {
			return "hc_attrName: #nodeName 'strong1' equals '" + strong1 + "' not '" + "class" + "'";
		}
		if ("class" !== strong2) {
			return "hc_attrName: #name 'strong2' equals '" + strong2 + "' not '" + "class" + "'";
		}
		return "hc_attrName: OK";
	} catch (e) {
		return "hc_attrName: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_attrnextsiblingnull.xml" fleur="hc_attrnextsiblingnull" native="hc_attrnextsiblingnull"><Fleur>(function(){
	var success;
	try {
		var doc;
		var addressList;
		var testNode;
		var attributes;
		var domesticAttr;
		var s;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		addressList = doc.getElementsByTagName("acronym");
		testNode = addressList.item(0);
		attributes = testNode.attributes;
		domesticAttr = attributes.getNamedItem("title");
		s = domesticAttr.nextSibling;
		if (s != null) {
			return "hc_attrNextSiblingNull: #attrNextSiblingNullAssert 's' equals '" + s + "' not null";
		}
		return "hc_attrNextSiblingNull: OK";
	} catch (e) {
		return "hc_attrNextSiblingNull: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var addressList;
		var testNode;
		var attributes;
		var domesticAttr;
		var s;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		addressList = doc.getElementsByTagName("acronym");
		testNode = addressList.item(0);
		attributes = testNode.attributes;
		domesticAttr = attributes.getNamedItem("title");
		s = domesticAttr.nextSibling;
		if (s != null) {
			return "hc_attrNextSiblingNull: #attrNextSiblingNullAssert 's' equals '" + s + "' not null";
		}
		return "hc_attrNextSiblingNull: OK";
	} catch (e) {
		return "hc_attrNextSiblingNull: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_attrparentnodenull.xml" fleur="hc_attrparentnodenull" native="hc_attrparentnodenull"><Fleur>(function(){
	var success;
	try {
		var doc;
		var addressList;
		var testNode;
		var attributes;
		var domesticAttr;
		var s;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		addressList = doc.getElementsByTagName("acronym");
		testNode = addressList.item(0);
		attributes = testNode.attributes;
		domesticAttr = attributes.getNamedItem("title");
		s = domesticAttr.parentNode;
		if (s != null) {
			return "hc_attrParentNodeNull: #attrParentNodeNullAssert 's' equals '" + s + "' not null";
		}
		return "hc_attrParentNodeNull: OK";
	} catch (e) {
		return "hc_attrParentNodeNull: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var addressList;
		var testNode;
		var attributes;
		var domesticAttr;
		var s;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		addressList = doc.getElementsByTagName("acronym");
		testNode = addressList.item(0);
		attributes = testNode.attributes;
		domesticAttr = attributes.getNamedItem("title");
		s = domesticAttr.parentNode;
		if (s != null) {
			return "hc_attrParentNodeNull: #attrParentNodeNullAssert 's' equals '" + s + "' not null";
		}
		return "hc_attrParentNodeNull: OK";
	} catch (e) {
		return "hc_attrParentNodeNull: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_attrprevioussiblingnull.xml" fleur="hc_attrprevioussiblingnull" native="hc_attrprevioussiblingnull"><Fleur>(function(){
	var success;
	try {
		var doc;
		var addressList;
		var testNode;
		var attributes;
		var domesticAttr;
		var s;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		addressList = doc.getElementsByTagName("acronym");
		testNode = addressList.item(0);
		attributes = testNode.attributes;
		domesticAttr = attributes.getNamedItem("title");
		s = domesticAttr.previousSibling;
		if (s != null) {
			return "hc_attrPreviousSiblingNull: #attrPreviousSiblingNullAssert 's' equals '" + s + "' not null";
		}
		return "hc_attrPreviousSiblingNull: OK";
	} catch (e) {
		return "hc_attrPreviousSiblingNull: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var addressList;
		var testNode;
		var attributes;
		var domesticAttr;
		var s;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		addressList = doc.getElementsByTagName("acronym");
		testNode = addressList.item(0);
		attributes = testNode.attributes;
		domesticAttr = attributes.getNamedItem("title");
		s = domesticAttr.previousSibling;
		if (s != null) {
			return "hc_attrPreviousSiblingNull: #attrPreviousSiblingNullAssert 's' equals '" + s + "' not null";
		}
		return "hc_attrPreviousSiblingNull: OK";
	} catch (e) {
		return "hc_attrPreviousSiblingNull: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_attrspecifiedvalue.xml" fleur="hc_attrspecifiedvalue" native="hc_attrspecifiedvalue"><Fleur>(function(){
	var success;
	try {
		var doc;
		var addressList;
		var testNode;
		var attributes;
		var domesticAttr;
		var state;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		addressList = doc.getElementsByTagName("acronym");
		testNode = addressList.item(0);
		attributes = testNode.attributes;
		domesticAttr = attributes.getNamedItem("title");
		state = domesticAttr.specified;
		if (state !== true) {
			return "acronymTitleSpecified: 'state' equals '" + state + "' not true";
		}
		return "hc_attrSpecifiedValue: OK";
	} catch (e) {
		return "hc_attrSpecifiedValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var addressList;
		var testNode;
		var attributes;
		var domesticAttr;
		var state;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		addressList = doc.getElementsByTagName("acronym");
		testNode = addressList.item(0);
		attributes = testNode.attributes;
		domesticAttr = attributes.getNamedItem("title");
		state = domesticAttr.specified;
		if (state !== true) {
			return "acronymTitleSpecified: 'state' equals '" + state + "' not true";
		}
		return "hc_attrSpecifiedValue: OK";
	} catch (e) {
		return "hc_attrSpecifiedValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_attrspecifiedvaluechanged.xml" fleur="hc_attrspecifiedvaluechanged" native="hc_attrspecifiedvaluechanged"><Fleur>(function(){
	var success;
	try {
		var doc;
		var addressList;
		var testNode;
		var attributes;
		var streetAttr;
		var state;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		addressList = doc.getElementsByTagName("acronym");
		testNode = addressList.item(2);
		testNode.setAttribute("class", "Yα");
		attributes = testNode.attributes;
		streetAttr = attributes.getNamedItem("class");
		state = streetAttr.specified;
		if (state !== true) {
			return "acronymClassSpecified: 'state' equals '" + state + "' not true";
		}
		return "hc_attrSpecifiedValueChanged: OK";
	} catch (e) {
		return "hc_attrSpecifiedValueChanged: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var addressList;
		var testNode;
		var attributes;
		var streetAttr;
		var state;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		addressList = doc.getElementsByTagName("acronym");
		testNode = addressList.item(2);
		testNode.setAttribute("class", "Yα");
		attributes = testNode.attributes;
		streetAttr = attributes.getNamedItem("class");
		state = streetAttr.specified;
		if (state !== true) {
			return "acronymClassSpecified: 'state' equals '" + state + "' not true";
		}
		return "hc_attrSpecifiedValueChanged: OK";
	} catch (e) {
		return "hc_attrSpecifiedValueChanged: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_characterdataappenddata.xml" fleur="hc_characterdataappenddata" native="hc_characterdataappenddata"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var childValue;
		var childLength;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("strong");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		child.appendData(", Esquire");
		childValue = child.data;
		childLength = childValue.length;
		if (24 !== childLength) {
			return "hc_characterdataAppendData: #characterdataAppendDataAssert 'childLength' equals '" + childLength + "' not '" + 24 + "'";
		}
		return "hc_characterdataAppendData: OK";
	} catch (e) {
		return "hc_characterdataAppendData: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var childValue;
		var childLength;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("strong");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		child.appendData(", Esquire");
		childValue = child.data;
		childLength = childValue.length;
		if (24 !== childLength) {
			return "hc_characterdataAppendData: #characterdataAppendDataAssert 'childLength' equals '" + childLength + "' not '" + 24 + "'";
		}
		return "hc_characterdataAppendData: OK";
	} catch (e) {
		return "hc_characterdataAppendData: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_characterdataappenddatagetdata.xml" fleur="hc_characterdataappenddatagetdata" native="hc_characterdataappenddatagetdata"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var childData;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("strong");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		child.appendData(", Esquire");
		childData = child.data;
		if ("Margaret Martin, Esquire" !== childData) {
			return "hc_characterdataAppendDataGetData: #characterdataAppendDataGetDataAssert 'childData' equals '" + childData + "' not '" + "Margaret Martin, Esquire" + "'";
		}
		return "hc_characterdataAppendDataGetData: OK";
	} catch (e) {
		return "hc_characterdataAppendDataGetData: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var childData;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("strong");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		child.appendData(", Esquire");
		childData = child.data;
		if ("Margaret Martin, Esquire" !== childData) {
			return "hc_characterdataAppendDataGetData: #characterdataAppendDataGetDataAssert 'childData' equals '" + childData + "' not '" + "Margaret Martin, Esquire" + "'";
		}
		return "hc_characterdataAppendDataGetData: OK";
	} catch (e) {
		return "hc_characterdataAppendDataGetData: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_characterdatadeletedatabegining.xml" fleur="hc_characterdatadeletedatabegining" native="hc_characterdatadeletedatabegining"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var childData;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		child.deleteData(0, 16);
		childData = child.data;
		if ("Dallas, Texas 98551" !== childData) {
			return "hc_characterdataDeleteDataBeginning: #data 'childData' equals '" + childData + "' not '" + "Dallas, Texas 98551" + "'";
		}
		return "hc_characterdataDeleteDataBeginning: OK";
	} catch (e) {
		return "hc_characterdataDeleteDataBeginning: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var childData;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		child.deleteData(0, 16);
		childData = child.data;
		if ("Dallas, Texas 98551" !== childData) {
			return "hc_characterdataDeleteDataBeginning: #data 'childData' equals '" + childData + "' not '" + "Dallas, Texas 98551" + "'";
		}
		return "hc_characterdataDeleteDataBeginning: OK";
	} catch (e) {
		return "hc_characterdataDeleteDataBeginning: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_characterdatadeletedataend.xml" fleur="hc_characterdatadeletedataend" native="hc_characterdatadeletedataend"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var childData;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		child.deleteData(30, 5);
		childData = child.data;
		if ("1230 North Ave. Dallas, Texas " !== childData) {
			return "hc_characterdataDeleteDataEnd: #characterdataDeleteDataEndAssert 'childData' equals '" + childData + "' not '" + "1230 North Ave. Dallas, Texas " + "'";
		}
		return "hc_characterdataDeleteDataEnd: OK";
	} catch (e) {
		return "hc_characterdataDeleteDataEnd: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var childData;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		child.deleteData(30, 5);
		childData = child.data;
		if ("1230 North Ave. Dallas, Texas " !== childData) {
			return "hc_characterdataDeleteDataEnd: #characterdataDeleteDataEndAssert 'childData' equals '" + childData + "' not '" + "1230 North Ave. Dallas, Texas " + "'";
		}
		return "hc_characterdataDeleteDataEnd: OK";
	} catch (e) {
		return "hc_characterdataDeleteDataEnd: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_characterdatadeletedataexceedslength.xml" fleur="hc_characterdatadeletedataexceedslength" native="hc_characterdatadeletedataexceedslength"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var childData;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		child.deleteData(4, 50);
		childData = child.data;
		if ("1230" !== childData) {
			return "hc_characterdataDeleteDataExceedsLength: #characterdataDeleteDataExceedsLengthAssert 'childData' equals '" + childData + "' not '" + "1230" + "'";
		}
		return "hc_characterdataDeleteDataExceedsLength: OK";
	} catch (e) {
		return "hc_characterdataDeleteDataExceedsLength: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var childData;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		child.deleteData(4, 50);
		childData = child.data;
		if ("1230" !== childData) {
			return "hc_characterdataDeleteDataExceedsLength: #characterdataDeleteDataExceedsLengthAssert 'childData' equals '" + childData + "' not '" + "1230" + "'";
		}
		return "hc_characterdataDeleteDataExceedsLength: OK";
	} catch (e) {
		return "hc_characterdataDeleteDataExceedsLength: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_characterdatadeletedatagetlengthanddata.xml" fleur="hc_characterdatadeletedatagetlengthanddata" native="hc_characterdatadeletedatagetlengthanddata"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var childData;
		var childLength;
		var result = new Array();

		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		child.deleteData(30, 5);
		childData = child.data;
		if ("1230 North Ave. Dallas, Texas " !== childData) {
			return "hc_characterdataDeleteDataGetLengthAndData: #data 'childData' equals '" + childData + "' not '" + "1230 North Ave. Dallas, Texas " + "'";
		}
		childLength = child.length;
		if (30 !== childLength) {
			return "hc_characterdataDeleteDataGetLengthAndData: #length 'childLength' equals '" + childLength + "' not '" + 30 + "'";
		}
		return "hc_characterdataDeleteDataGetLengthAndData: OK";
	} catch (e) {
		return "hc_characterdataDeleteDataGetLengthAndData: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var childData;
		var childLength;
		var result = new Array();

		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		child.deleteData(30, 5);
		childData = child.data;
		if ("1230 North Ave. Dallas, Texas " !== childData) {
			return "hc_characterdataDeleteDataGetLengthAndData: #data 'childData' equals '" + childData + "' not '" + "1230 North Ave. Dallas, Texas " + "'";
		}
		childLength = child.length;
		if (30 !== childLength) {
			return "hc_characterdataDeleteDataGetLengthAndData: #length 'childLength' equals '" + childLength + "' not '" + 30 + "'";
		}
		return "hc_characterdataDeleteDataGetLengthAndData: OK";
	} catch (e) {
		return "hc_characterdataDeleteDataGetLengthAndData: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_characterdatadeletedatamiddle.xml" fleur="hc_characterdatadeletedatamiddle" native="hc_characterdatadeletedatamiddle"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var childData;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		child.deleteData(16, 8);
		childData = child.data;
		if ("1230 North Ave. Texas 98551" !== childData) {
			return "hc_characterdataDeleteDataMiddle: #characterdataDeleteDataMiddleAssert 'childData' equals '" + childData + "' not '" + "1230 North Ave. Texas 98551" + "'";
		}
		return "hc_characterdataDeleteDataMiddle: OK";
	} catch (e) {
		return "hc_characterdataDeleteDataMiddle: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var childData;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		child.deleteData(16, 8);
		childData = child.data;
		if ("1230 North Ave. Texas 98551" !== childData) {
			return "hc_characterdataDeleteDataMiddle: #characterdataDeleteDataMiddleAssert 'childData' equals '" + childData + "' not '" + "1230 North Ave. Texas 98551" + "'";
		}
		return "hc_characterdataDeleteDataMiddle: OK";
	} catch (e) {
		return "hc_characterdataDeleteDataMiddle: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_characterdatagetdata.xml" fleur="hc_characterdatagetdata" native="hc_characterdatagetdata"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var childData;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("strong");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		childData = child.data;
		if ("Margaret Martin" !== childData) {
			return "hc_characterdataGetData: #characterdataGetDataAssert 'childData' equals '" + childData + "' not '" + "Margaret Martin" + "'";
		}
		return "hc_characterdataGetData: OK";
	} catch (e) {
		return "hc_characterdataGetData: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var childData;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("strong");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		childData = child.data;
		if ("Margaret Martin" !== childData) {
			return "hc_characterdataGetData: #characterdataGetDataAssert 'childData' equals '" + childData + "' not '" + "Margaret Martin" + "'";
		}
		return "hc_characterdataGetData: OK";
	} catch (e) {
		return "hc_characterdataGetData: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_characterdatagetlength.xml" fleur="hc_characterdatagetlength" native="hc_characterdatagetlength"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var childValue;
		var childLength;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("strong");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		childValue = child.data;
		childLength = childValue.length;
		if (15 !== childLength) {
			return "hc_characterdataGetLength: #characterdataGetLengthAssert 'childLength' equals '" + childLength + "' not '" + 15 + "'";
		}
		return "hc_characterdataGetLength: OK";
	} catch (e) {
		return "hc_characterdataGetLength: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var childValue;
		var childLength;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("strong");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		childValue = child.data;
		childLength = childValue.length;
		if (15 !== childLength) {
			return "hc_characterdataGetLength: #characterdataGetLengthAssert 'childLength' equals '" + childLength + "' not '" + 15 + "'";
		}
		return "hc_characterdataGetLength: OK";
	} catch (e) {
		return "hc_characterdataGetLength: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_characterdataindexsizeerrdeletedatacountnegative.xml" fleur="hc_characterdataindexsizeerrdeletedatacountnegative" native="hc_characterdataindexsizeerrdeletedatacountnegative"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var childSubstring;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		success = false;
		try {
			childSubstring = child.substringData(10, -3);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 1;
			}
		}
		if (!success) {
			return "hc_characterdataIndexSizeErrDeleteDataCountNegative: Exception INDEX_SIZE_ERR expected";
		}
		return "hc_characterdataIndexSizeErrDeleteDataCountNegative: OK";
	} catch (e) {
		return "hc_characterdataIndexSizeErrDeleteDataCountNegative: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var childSubstring;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		success = false;
		try {
			childSubstring = child.substringData(10, -3);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 1;
			}
		}
		if (!success) {
			return "hc_characterdataIndexSizeErrDeleteDataCountNegative: Exception INDEX_SIZE_ERR expected";
		}
		return "hc_characterdataIndexSizeErrDeleteDataCountNegative: OK";
	} catch (e) {
		return "hc_characterdataIndexSizeErrDeleteDataCountNegative: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_characterdataindexsizeerrdeletedataoffsetgreater.xml" fleur="hc_characterdataindexsizeerrdeletedataoffsetgreater" native="hc_characterdataindexsizeerrdeletedataoffsetgreater"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		success = false;
		try {
			child.deleteData(40, 3);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 1;
			}
		}
		if (!success) {
			return "hc_characterdataIndexSizeErrDeleteDataOffsetGreater: Exception INDEX_SIZE_ERR expected";
		}
		return "hc_characterdataIndexSizeErrDeleteDataOffsetGreater: OK";
	} catch (e) {
		return "hc_characterdataIndexSizeErrDeleteDataOffsetGreater: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		success = false;
		try {
			child.deleteData(40, 3);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 1;
			}
		}
		if (!success) {
			return "hc_characterdataIndexSizeErrDeleteDataOffsetGreater: Exception INDEX_SIZE_ERR expected";
		}
		return "hc_characterdataIndexSizeErrDeleteDataOffsetGreater: OK";
	} catch (e) {
		return "hc_characterdataIndexSizeErrDeleteDataOffsetGreater: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_characterdataindexsizeerrdeletedataoffsetnegative.xml" fleur="hc_characterdataindexsizeerrdeletedataoffsetnegative" native="hc_characterdataindexsizeerrdeletedataoffsetnegative"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		success = false;
		try {
			child.deleteData(-5, 3);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 1;
			}
		}
		if (!success) {
			return "hc_characterdataIndexSizeErrDeleteDataOffsetNegative: Exception INDEX_SIZE_ERR expected";
		}
		return "hc_characterdataIndexSizeErrDeleteDataOffsetNegative: OK";
	} catch (e) {
		return "hc_characterdataIndexSizeErrDeleteDataOffsetNegative: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		success = false;
		try {
			child.deleteData(-5, 3);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 1;
			}
		}
		if (!success) {
			return "hc_characterdataIndexSizeErrDeleteDataOffsetNegative: Exception INDEX_SIZE_ERR expected";
		}
		return "hc_characterdataIndexSizeErrDeleteDataOffsetNegative: OK";
	} catch (e) {
		return "hc_characterdataIndexSizeErrDeleteDataOffsetNegative: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_characterdataindexsizeerrinsertdataoffsetgreater.xml" fleur="hc_characterdataindexsizeerrinsertdataoffsetgreater" native="hc_characterdataindexsizeerrinsertdataoffsetgreater"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		success = false;
		try {
			child.deleteData(40, 3);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 1;
			}
		}
		if (!success) {
			return "hc_characterdataIndexSizeErrInsertDataOffsetGreater: Exception INDEX_SIZE_ERR expected";
		}
		return "hc_characterdataIndexSizeErrInsertDataOffsetGreater: OK";
	} catch (e) {
		return "hc_characterdataIndexSizeErrInsertDataOffsetGreater: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		success = false;
		try {
			child.deleteData(40, 3);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 1;
			}
		}
		if (!success) {
			return "hc_characterdataIndexSizeErrInsertDataOffsetGreater: Exception INDEX_SIZE_ERR expected";
		}
		return "hc_characterdataIndexSizeErrInsertDataOffsetGreater: OK";
	} catch (e) {
		return "hc_characterdataIndexSizeErrInsertDataOffsetGreater: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_characterdataindexsizeerrinsertdataoffsetnegative.xml" fleur="hc_characterdataindexsizeerrinsertdataoffsetnegative" native="hc_characterdataindexsizeerrinsertdataoffsetnegative"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		success = false;
		try {
			child.replaceData(-5, 3, "ABC");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 1;
			}
		}
		if (!success) {
			return "hc_characterdataIndexSizeErrInsertDataOffsetNegative: Exception INDEX_SIZE_ERR expected";
		}
		return "hc_characterdataIndexSizeErrInsertDataOffsetNegative: OK";
	} catch (e) {
		return "hc_characterdataIndexSizeErrInsertDataOffsetNegative: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		success = false;
		try {
			child.replaceData(-5, 3, "ABC");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 1;
			}
		}
		if (!success) {
			return "hc_characterdataIndexSizeErrInsertDataOffsetNegative: Exception INDEX_SIZE_ERR expected";
		}
		return "hc_characterdataIndexSizeErrInsertDataOffsetNegative: OK";
	} catch (e) {
		return "hc_characterdataIndexSizeErrInsertDataOffsetNegative: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_characterdataindexsizeerrreplacedatacountnegative.xml" fleur="hc_characterdataindexsizeerrreplacedatacountnegative" native="hc_characterdataindexsizeerrreplacedatacountnegative"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var badString;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		success = false;
		try {
			badString = child.substringData(10, -3);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 1;
			}
		}
		if (!success) {
			return "hc_characterdataIndexSizeErrReplaceDataCountNegative: Exception INDEX_SIZE_ERR expected";
		}
		return "hc_characterdataIndexSizeErrReplaceDataCountNegative: OK";
	} catch (e) {
		return "hc_characterdataIndexSizeErrReplaceDataCountNegative: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var badString;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		success = false;
		try {
			badString = child.substringData(10, -3);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 1;
			}
		}
		if (!success) {
			return "hc_characterdataIndexSizeErrReplaceDataCountNegative: Exception INDEX_SIZE_ERR expected";
		}
		return "hc_characterdataIndexSizeErrReplaceDataCountNegative: OK";
	} catch (e) {
		return "hc_characterdataIndexSizeErrReplaceDataCountNegative: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_characterdataindexsizeerrreplacedataoffsetgreater.xml" fleur="hc_characterdataindexsizeerrreplacedataoffsetgreater" native="hc_characterdataindexsizeerrreplacedataoffsetgreater"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		success = false;
		try {
			child.deleteData(40, 3);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 1;
			}
		}
		if (!success) {
			return "hc_characterdataIndexSizeErrReplaceDataOffsetGreater: Exception INDEX_SIZE_ERR expected";
		}
		return "hc_characterdataIndexSizeErrReplaceDataOffsetGreater: OK";
	} catch (e) {
		return "hc_characterdataIndexSizeErrReplaceDataOffsetGreater: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		success = false;
		try {
			child.deleteData(40, 3);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 1;
			}
		}
		if (!success) {
			return "hc_characterdataIndexSizeErrReplaceDataOffsetGreater: Exception INDEX_SIZE_ERR expected";
		}
		return "hc_characterdataIndexSizeErrReplaceDataOffsetGreater: OK";
	} catch (e) {
		return "hc_characterdataIndexSizeErrReplaceDataOffsetGreater: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_characterdataindexsizeerrreplacedataoffsetnegative.xml" fleur="hc_characterdataindexsizeerrreplacedataoffsetnegative" native="hc_characterdataindexsizeerrreplacedataoffsetnegative"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		success = false;
		try {
			child.replaceData(-5, 3, "ABC");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 1;
			}
		}
		if (!success) {
			return "hc_characterdataIndexSizeErrReplaceDataOffsetNegative: Exception INDEX_SIZE_ERR expected";
		}
		return "hc_characterdataIndexSizeErrReplaceDataOffsetNegative: OK";
	} catch (e) {
		return "hc_characterdataIndexSizeErrReplaceDataOffsetNegative: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		success = false;
		try {
			child.replaceData(-5, 3, "ABC");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 1;
			}
		}
		if (!success) {
			return "hc_characterdataIndexSizeErrReplaceDataOffsetNegative: Exception INDEX_SIZE_ERR expected";
		}
		return "hc_characterdataIndexSizeErrReplaceDataOffsetNegative: OK";
	} catch (e) {
		return "hc_characterdataIndexSizeErrReplaceDataOffsetNegative: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_characterdataindexsizeerrsubstringcountnegative.xml" fleur="hc_characterdataindexsizeerrsubstringcountnegative" native="hc_characterdataindexsizeerrsubstringcountnegative"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var badSubstring;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		success = false;
		try {
			badSubstring = child.substringData(10, -3);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 1;
			}
		}
		if (!success) {
			return "hc_characterdataIndexSizeErrSubstringCountNegative: Exception INDEX_SIZE_ERR expected";
		}
		return "hc_characterdataIndexSizeErrSubstringCountNegative: OK";
	} catch (e) {
		return "hc_characterdataIndexSizeErrSubstringCountNegative: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var badSubstring;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		success = false;
		try {
			badSubstring = child.substringData(10, -3);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 1;
			}
		}
		if (!success) {
			return "hc_characterdataIndexSizeErrSubstringCountNegative: Exception INDEX_SIZE_ERR expected";
		}
		return "hc_characterdataIndexSizeErrSubstringCountNegative: OK";
	} catch (e) {
		return "hc_characterdataIndexSizeErrSubstringCountNegative: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_characterdataindexsizeerrsubstringnegativeoffset.xml" fleur="hc_characterdataindexsizeerrsubstringnegativeoffset" native="hc_characterdataindexsizeerrsubstringnegativeoffset"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var badString;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		success = false;
		try {
			badString = child.substringData(-5, 3);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 1;
			}
		}
		if (!success) {
			return "hc_characterdataIndexSizeErrSubstringNegativeOffset: Exception INDEX_SIZE_ERR expected";
		}
		return "hc_characterdataIndexSizeErrSubstringNegativeOffset: OK";
	} catch (e) {
		return "hc_characterdataIndexSizeErrSubstringNegativeOffset: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var badString;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		success = false;
		try {
			badString = child.substringData(-5, 3);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 1;
			}
		}
		if (!success) {
			return "hc_characterdataIndexSizeErrSubstringNegativeOffset: Exception INDEX_SIZE_ERR expected";
		}
		return "hc_characterdataIndexSizeErrSubstringNegativeOffset: OK";
	} catch (e) {
		return "hc_characterdataIndexSizeErrSubstringNegativeOffset: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_characterdataindexsizeerrsubstringoffsetgreater.xml" fleur="hc_characterdataindexsizeerrsubstringoffsetgreater" native="hc_characterdataindexsizeerrsubstringoffsetgreater"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var badString;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		success = false;
		try {
			badString = child.substringData(40, 3);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 1;
			}
		}
		if (!success) {
			return "hc_characterdataIndexSizeErrSubstringOffsetGreater: Exception INDEX_SIZE_ERR expected";
		}
		return "hc_characterdataIndexSizeErrSubstringOffsetGreater: OK";
	} catch (e) {
		return "hc_characterdataIndexSizeErrSubstringOffsetGreater: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var badString;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		success = false;
		try {
			badString = child.substringData(40, 3);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 1;
			}
		}
		if (!success) {
			return "hc_characterdataIndexSizeErrSubstringOffsetGreater: Exception INDEX_SIZE_ERR expected";
		}
		return "hc_characterdataIndexSizeErrSubstringOffsetGreater: OK";
	} catch (e) {
		return "hc_characterdataIndexSizeErrSubstringOffsetGreater: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_characterdatainsertdatabeginning.xml" fleur="hc_characterdatainsertdatabeginning" native="hc_characterdatainsertdatabeginning"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var childData;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("strong");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		child.insertData(0, "Mss. ");
		childData = child.data;
		if ("Mss. Margaret Martin" !== childData) {
			return "hc_characterdataInsertDataBeginning: #characterdataInsertDataBeginningAssert 'childData' equals '" + childData + "' not '" + "Mss. Margaret Martin" + "'";
		}
		return "hc_characterdataInsertDataBeginning: OK";
	} catch (e) {
		return "hc_characterdataInsertDataBeginning: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var childData;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("strong");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		child.insertData(0, "Mss. ");
		childData = child.data;
		if ("Mss. Margaret Martin" !== childData) {
			return "hc_characterdataInsertDataBeginning: #characterdataInsertDataBeginningAssert 'childData' equals '" + childData + "' not '" + "Mss. Margaret Martin" + "'";
		}
		return "hc_characterdataInsertDataBeginning: OK";
	} catch (e) {
		return "hc_characterdataInsertDataBeginning: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_characterdatainsertdataend.xml" fleur="hc_characterdatainsertdataend" native="hc_characterdatainsertdataend"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var childData;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("strong");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		child.insertData(15, ", Esquire");
		childData = child.data;
		if ("Margaret Martin, Esquire" !== childData) {
			return "hc_characterdataInsertDataEnd: #characterdataInsertDataEndAssert 'childData' equals '" + childData + "' not '" + "Margaret Martin, Esquire" + "'";
		}
		return "hc_characterdataInsertDataEnd: OK";
	} catch (e) {
		return "hc_characterdataInsertDataEnd: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var childData;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("strong");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		child.insertData(15, ", Esquire");
		childData = child.data;
		if ("Margaret Martin, Esquire" !== childData) {
			return "hc_characterdataInsertDataEnd: #characterdataInsertDataEndAssert 'childData' equals '" + childData + "' not '" + "Margaret Martin, Esquire" + "'";
		}
		return "hc_characterdataInsertDataEnd: OK";
	} catch (e) {
		return "hc_characterdataInsertDataEnd: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_characterdatainsertdatamiddle.xml" fleur="hc_characterdatainsertdatamiddle" native="hc_characterdatainsertdatamiddle"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var childData;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("strong");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		child.insertData(9, "Ann ");
		childData = child.data;
		if ("Margaret Ann Martin" !== childData) {
			return "hc_characterdataInsertDataMiddle: #characterdataInsertDataMiddleAssert 'childData' equals '" + childData + "' not '" + "Margaret Ann Martin" + "'";
		}
		return "hc_characterdataInsertDataMiddle: OK";
	} catch (e) {
		return "hc_characterdataInsertDataMiddle: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var childData;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("strong");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		child.insertData(9, "Ann ");
		childData = child.data;
		if ("Margaret Ann Martin" !== childData) {
			return "hc_characterdataInsertDataMiddle: #characterdataInsertDataMiddleAssert 'childData' equals '" + childData + "' not '" + "Margaret Ann Martin" + "'";
		}
		return "hc_characterdataInsertDataMiddle: OK";
	} catch (e) {
		return "hc_characterdataInsertDataMiddle: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_characterdatareplacedatabegining.xml" fleur="hc_characterdatareplacedatabegining" native="hc_characterdatareplacedatabegining"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var childData;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		child.replaceData(0, 4, "2500");
		childData = child.data;
		if ("2500 North Ave. Dallas, Texas 98551" !== childData) {
			return "hc_characterdataReplaceDataBeginning: #characterdataReplaceDataBeginingAssert 'childData' equals '" + childData + "' not '" + "2500 North Ave. Dallas, Texas 98551" + "'";
		}
		return "hc_characterdataReplaceDataBeginning: OK";
	} catch (e) {
		return "hc_characterdataReplaceDataBeginning: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var childData;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		child.replaceData(0, 4, "2500");
		childData = child.data;
		if ("2500 North Ave. Dallas, Texas 98551" !== childData) {
			return "hc_characterdataReplaceDataBeginning: #characterdataReplaceDataBeginingAssert 'childData' equals '" + childData + "' not '" + "2500 North Ave. Dallas, Texas 98551" + "'";
		}
		return "hc_characterdataReplaceDataBeginning: OK";
	} catch (e) {
		return "hc_characterdataReplaceDataBeginning: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_characterdatareplacedataend.xml" fleur="hc_characterdatareplacedataend" native="hc_characterdatareplacedataend"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var childData;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		child.replaceData(30, 5, "98665");
		childData = child.data;
		if ("1230 North Ave. Dallas, Texas 98665" !== childData) {
			return "hc_characterdataReplaceDataEnd: #characterdataReplaceDataEndAssert 'childData' equals '" + childData + "' not '" + "1230 North Ave. Dallas, Texas 98665" + "'";
		}
		return "hc_characterdataReplaceDataEnd: OK";
	} catch (e) {
		return "hc_characterdataReplaceDataEnd: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var childData;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		child.replaceData(30, 5, "98665");
		childData = child.data;
		if ("1230 North Ave. Dallas, Texas 98665" !== childData) {
			return "hc_characterdataReplaceDataEnd: #characterdataReplaceDataEndAssert 'childData' equals '" + childData + "' not '" + "1230 North Ave. Dallas, Texas 98665" + "'";
		}
		return "hc_characterdataReplaceDataEnd: OK";
	} catch (e) {
		return "hc_characterdataReplaceDataEnd: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_characterdatareplacedataexceedslengthofarg.xml" fleur="hc_characterdatareplacedataexceedslengthofarg" native="hc_characterdatareplacedataexceedslengthofarg"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var childData;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		child.replaceData(0, 4, "260030");
		childData = child.data;
		if ("260030 North Ave. Dallas, Texas 98551" !== childData) {
			return "hc_characterdataReplaceDataExceedsLengthOfArg: #characterdataReplaceDataExceedsLengthOfArgAssert 'childData' equals '" + childData + "' not '" + "260030 North Ave. Dallas, Texas 98551" + "'";
		}
		return "hc_characterdataReplaceDataExceedsLengthOfArg: OK";
	} catch (e) {
		return "hc_characterdataReplaceDataExceedsLengthOfArg: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var childData;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		child.replaceData(0, 4, "260030");
		childData = child.data;
		if ("260030 North Ave. Dallas, Texas 98551" !== childData) {
			return "hc_characterdataReplaceDataExceedsLengthOfArg: #characterdataReplaceDataExceedsLengthOfArgAssert 'childData' equals '" + childData + "' not '" + "260030 North Ave. Dallas, Texas 98551" + "'";
		}
		return "hc_characterdataReplaceDataExceedsLengthOfArg: OK";
	} catch (e) {
		return "hc_characterdataReplaceDataExceedsLengthOfArg: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_characterdatareplacedataexceedslengthofdata.xml" fleur="hc_characterdatareplacedataexceedslengthofdata" native="hc_characterdatareplacedataexceedslengthofdata"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var childData;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		child.replaceData(0, 50, "2600");
		childData = child.data;
		if ("2600" !== childData) {
			return "hc_characterdataReplaceDataExceedsLengthOfData: #characterdataReplaceDataExceedsLengthOfDataAssert 'childData' equals '" + childData + "' not '" + "2600" + "'";
		}
		return "hc_characterdataReplaceDataExceedsLengthOfData: OK";
	} catch (e) {
		return "hc_characterdataReplaceDataExceedsLengthOfData: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var childData;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		child.replaceData(0, 50, "2600");
		childData = child.data;
		if ("2600" !== childData) {
			return "hc_characterdataReplaceDataExceedsLengthOfData: #characterdataReplaceDataExceedsLengthOfDataAssert 'childData' equals '" + childData + "' not '" + "2600" + "'";
		}
		return "hc_characterdataReplaceDataExceedsLengthOfData: OK";
	} catch (e) {
		return "hc_characterdataReplaceDataExceedsLengthOfData: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_characterdatareplacedatamiddle.xml" fleur="hc_characterdatareplacedatamiddle" native="hc_characterdatareplacedatamiddle"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var childData;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		child.replaceData(5, 5, "South");
		childData = child.data;
		if ("1230 South Ave. Dallas, Texas 98551" !== childData) {
			return "hc_characterdataReplaceDataMiddle: #characterdataReplaceDataMiddleAssert 'childData' equals '" + childData + "' not '" + "1230 South Ave. Dallas, Texas 98551" + "'";
		}
		return "hc_characterdataReplaceDataMiddle: OK";
	} catch (e) {
		return "hc_characterdataReplaceDataMiddle: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var childData;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		child.replaceData(5, 5, "South");
		childData = child.data;
		if ("1230 South Ave. Dallas, Texas 98551" !== childData) {
			return "hc_characterdataReplaceDataMiddle: #characterdataReplaceDataMiddleAssert 'childData' equals '" + childData + "' not '" + "1230 South Ave. Dallas, Texas 98551" + "'";
		}
		return "hc_characterdataReplaceDataMiddle: OK";
	} catch (e) {
		return "hc_characterdataReplaceDataMiddle: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_characterdatasetnodevalue.xml" fleur="hc_characterdatasetnodevalue" native="hc_characterdatasetnodevalue"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var childData;
		var childValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("strong");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		child.nodeValue = "Marilyn Martin";
		childData = child.data;
		if ("Marilyn Martin" !== childData) {
			return "hc_characterdataSetNodeValue: #data 'childData' equals '" + childData + "' not '" + "Marilyn Martin" + "'";
		}
		childValue = child.nodeValue;
		if ("Marilyn Martin" !== childValue) {
			return "hc_characterdataSetNodeValue: #value 'childValue' equals '" + childValue + "' not '" + "Marilyn Martin" + "'";
		}
		return "hc_characterdataSetNodeValue: OK";
	} catch (e) {
		return "hc_characterdataSetNodeValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var childData;
		var childValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("strong");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		child.nodeValue = "Marilyn Martin";
		childData = child.data;
		if ("Marilyn Martin" !== childData) {
			return "hc_characterdataSetNodeValue: #data 'childData' equals '" + childData + "' not '" + "Marilyn Martin" + "'";
		}
		childValue = child.nodeValue;
		if ("Marilyn Martin" !== childValue) {
			return "hc_characterdataSetNodeValue: #value 'childValue' equals '" + childValue + "' not '" + "Marilyn Martin" + "'";
		}
		return "hc_characterdataSetNodeValue: OK";
	} catch (e) {
		return "hc_characterdataSetNodeValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_characterdatasubstringexceedsvalue.xml" fleur="hc_characterdatasubstringexceedsvalue" native="hc_characterdatasubstringexceedsvalue"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var substring;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("strong");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		substring = child.substringData(9, 10);
		if ("Martin" !== substring) {
			return "hc_characterdataSubStringExceedsValue: #characterdataSubStringExceedsValueAssert 'substring' equals '" + substring + "' not '" + "Martin" + "'";
		}
		return "hc_characterdataSubStringExceedsValue: OK";
	} catch (e) {
		return "hc_characterdataSubStringExceedsValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var substring;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("strong");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		substring = child.substringData(9, 10);
		if ("Martin" !== substring) {
			return "hc_characterdataSubStringExceedsValue: #characterdataSubStringExceedsValueAssert 'substring' equals '" + substring + "' not '" + "Martin" + "'";
		}
		return "hc_characterdataSubStringExceedsValue: OK";
	} catch (e) {
		return "hc_characterdataSubStringExceedsValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_characterdatasubstringvalue.xml" fleur="hc_characterdatasubstringvalue" native="hc_characterdatasubstringvalue"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var substring;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("strong");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		substring = child.substringData(0, 8);
		if ("Margaret" !== substring) {
			return "hc_characterdataSubStringValue: #characterdataSubStringValueAssert 'substring' equals '" + substring + "' not '" + "Margaret" + "'";
		}
		return "hc_characterdataSubStringValue: OK";
	} catch (e) {
		return "hc_characterdataSubStringValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var child;
		var substring;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("strong");
		nameNode = elementList.item(0);
		child = nameNode.firstChild;
		substring = child.substringData(0, 8);
		if ("Margaret" !== substring) {
			return "hc_characterdataSubStringValue: #characterdataSubStringValueAssert 'substring' equals '" + substring + "' not '" + "Margaret" + "'";
		}
		return "hc_characterdataSubStringValue: OK";
	} catch (e) {
		return "hc_characterdataSubStringValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_commentgetcomment.xml" fleur="hc_commentgetcomment" native="hc_commentgetcomment"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var child;
		var childName;
		var childValue;
		var commentCount = 0;
		var childType;
		var attributes;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.childNodes;
		for (var index_id0x13530f10 = 0; index_id0x13530f10 &lt; elementList.length; index_id0x13530f10++) {
			child = elementList.item(index_id0x13530f10);
			childType = child.nodeType;
			if ((8 == childType)) {
				childName = child.nodeName;
				if ("#comment" !== childName) {
					return "hc_commentgetcomment: #nodeName 'childName' equals '" + childName + "' not '" + "#comment" + "'";
				}
				childValue = child.nodeValue;
				if (" This is comment number 1." !== childValue) {
					return "hc_commentgetcomment: #nodeValue 'childValue' equals '" + childValue + "' not '" + " This is comment number 1." + "'";
				}
				attributes = child.attributes;
				if (attributes != null) {
					return "hc_commentgetcomment: #attributes 'attributes' equals '" + attributes + "' not null";
				}
				commentCount += 1;
			}
		}
		if ((commentCount &lt; 2) !== true) {
			return "atMostOneComment: '(commentCount &lt; 2)' equals '" + (commentCount &lt; 2) + "' not true";
		}
		return "hc_commentgetcomment: OK";
	} catch (e) {
		return "hc_commentgetcomment: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var child;
		var childName;
		var childValue;
		var commentCount = 0;
		var childType;
		var attributes;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.childNodes;
		for (var index_id0x13530f10 = 0; index_id0x13530f10 &lt; elementList.length; index_id0x13530f10++) {
			child = elementList.item(index_id0x13530f10);
			childType = child.nodeType;
			if ((8 == childType)) {
				childName = child.nodeName;
				if ("#comment" !== childName) {
					return "hc_commentgetcomment: #nodeName 'childName' equals '" + childName + "' not '" + "#comment" + "'";
				}
				childValue = child.nodeValue;
				if (" This is comment number 1." !== childValue) {
					return "hc_commentgetcomment: #nodeValue 'childValue' equals '" + childValue + "' not '" + " This is comment number 1." + "'";
				}
				attributes = child.attributes;
				if (attributes != null) {
					return "hc_commentgetcomment: #attributes 'attributes' equals '" + attributes + "' not null";
				}
				commentCount += 1;
			}
		}
		if ((commentCount &lt; 2) !== true) {
			return "atMostOneComment: '(commentCount &lt; 2)' equals '" + (commentCount &lt; 2) + "' not true";
		}
		return "hc_commentgetcomment: OK";
	} catch (e) {
		return "hc_commentgetcomment: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_documentcreateattribute.xml" fleur="hc_documentcreateattribute" native="hc_documentcreateattribute"><Fleur>(function(){
	var success;
	try {
		var doc;
		var newAttrNode;
		var attrValue;
		var attrName;
		var attrType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		newAttrNode = doc.createAttribute("title");
		attrValue = newAttrNode.nodeValue;
		if ("" !== attrValue) {
			return "hc_documentcreateattribute: #value 'attrValue' equals '" + attrValue + "' not '" + "" + "'";
		}
		attrName = newAttrNode.nodeName;
		if ("title" !== attrName) {
			return "hc_documentcreateattribute: #name 'attrName' equals '" + attrName + "' not '" + "title" + "'";
		}
		attrType = newAttrNode.nodeType;
		if (2 !== attrType) {
			return "hc_documentcreateattribute: #type 'attrType' equals '" + attrType + "' not '" + 2 + "'";
		}
		return "hc_documentcreateattribute: OK";
	} catch (e) {
		return "hc_documentcreateattribute: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var newAttrNode;
		var attrValue;
		var attrName;
		var attrType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		newAttrNode = doc.createAttribute("title");
		attrValue = newAttrNode.nodeValue;
		if ("" !== attrValue) {
			return "hc_documentcreateattribute: #value 'attrValue' equals '" + attrValue + "' not '" + "" + "'";
		}
		attrName = newAttrNode.nodeName;
		if ("title" !== attrName) {
			return "hc_documentcreateattribute: #name 'attrName' equals '" + attrName + "' not '" + "title" + "'";
		}
		attrType = newAttrNode.nodeType;
		if (2 !== attrType) {
			return "hc_documentcreateattribute: #type 'attrType' equals '" + attrType + "' not '" + 2 + "'";
		}
		return "hc_documentcreateattribute: OK";
	} catch (e) {
		return "hc_documentcreateattribute: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_documentcreatecomment.xml" fleur="hc_documentcreatecomment" native="hc_documentcreatecomment"><Fleur>(function(){
	var success;
	try {
		var doc;
		var newCommentNode;
		var newCommentValue;
		var newCommentName;
		var newCommentType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		newCommentNode = doc.createComment("This is a new Comment node");
		newCommentValue = newCommentNode.nodeValue;
		if ("This is a new Comment node" !== newCommentValue) {
			return "hc_documentCreateComment: #value 'newCommentValue' equals '" + newCommentValue + "' not '" + "This is a new Comment node" + "'";
		}
		newCommentName = newCommentNode.nodeName;
		if ("#comment" !== newCommentName) {
			return "hc_documentCreateComment: #strong 'newCommentName' equals '" + newCommentName + "' not '" + "#comment" + "'";
		}
		newCommentType = newCommentNode.nodeType;
		if (8 !== newCommentType) {
			return "hc_documentCreateComment: #type 'newCommentType' equals '" + newCommentType + "' not '" + 8 + "'";
		}
		return "hc_documentCreateComment: OK";
	} catch (e) {
		return "hc_documentCreateComment: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var newCommentNode;
		var newCommentValue;
		var newCommentName;
		var newCommentType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		newCommentNode = doc.createComment("This is a new Comment node");
		newCommentValue = newCommentNode.nodeValue;
		if ("This is a new Comment node" !== newCommentValue) {
			return "hc_documentCreateComment: #value 'newCommentValue' equals '" + newCommentValue + "' not '" + "This is a new Comment node" + "'";
		}
		newCommentName = newCommentNode.nodeName;
		if ("#comment" !== newCommentName) {
			return "hc_documentCreateComment: #strong 'newCommentName' equals '" + newCommentName + "' not '" + "#comment" + "'";
		}
		newCommentType = newCommentNode.nodeType;
		if (8 !== newCommentType) {
			return "hc_documentCreateComment: #type 'newCommentType' equals '" + newCommentType + "' not '" + 8 + "'";
		}
		return "hc_documentCreateComment: OK";
	} catch (e) {
		return "hc_documentCreateComment: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_documentcreatedocumentfragment.xml" fleur="hc_documentcreatedocumentfragment" native="hc_documentcreatedocumentfragment"><Fleur>(function(){
	var success;
	try {
		var doc;
		var newDocFragment;
		var children;
		var length;
		var newDocFragmentName;
		var newDocFragmentType;
		var newDocFragmentValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		newDocFragment = doc.createDocumentFragment();
		children = newDocFragment.childNodes;
		length = children.length;
		if (0 !== length) {
			return "hc_documentCreateDocumentFragment: #length 'length' equals '" + length + "' not '" + 0 + "'";
		}
		newDocFragmentName = newDocFragment.nodeName;
		if ("#document-fragment" !== newDocFragmentName) {
			return "hc_documentCreateDocumentFragment: #strong 'newDocFragmentName' equals '" + newDocFragmentName + "' not '" + "#document-fragment" + "'";
		}
		newDocFragmentType = newDocFragment.nodeType;
		if (11 !== newDocFragmentType) {
			return "hc_documentCreateDocumentFragment: #type 'newDocFragmentType' equals '" + newDocFragmentType + "' not '" + 11 + "'";
		}
		newDocFragmentValue = newDocFragment.nodeValue;
		if (newDocFragmentValue != null) {
			return "hc_documentCreateDocumentFragment: #value 'newDocFragmentValue' equals '" + newDocFragmentValue + "' not null";
		}
		return "hc_documentCreateDocumentFragment: OK";
	} catch (e) {
		return "hc_documentCreateDocumentFragment: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var newDocFragment;
		var children;
		var length;
		var newDocFragmentName;
		var newDocFragmentType;
		var newDocFragmentValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		newDocFragment = doc.createDocumentFragment();
		children = newDocFragment.childNodes;
		length = children.length;
		if (0 !== length) {
			return "hc_documentCreateDocumentFragment: #length 'length' equals '" + length + "' not '" + 0 + "'";
		}
		newDocFragmentName = newDocFragment.nodeName;
		if ("#document-fragment" !== newDocFragmentName) {
			return "hc_documentCreateDocumentFragment: #strong 'newDocFragmentName' equals '" + newDocFragmentName + "' not '" + "#document-fragment" + "'";
		}
		newDocFragmentType = newDocFragment.nodeType;
		if (11 !== newDocFragmentType) {
			return "hc_documentCreateDocumentFragment: #type 'newDocFragmentType' equals '" + newDocFragmentType + "' not '" + 11 + "'";
		}
		newDocFragmentValue = newDocFragment.nodeValue;
		if (newDocFragmentValue != null) {
			return "hc_documentCreateDocumentFragment: #value 'newDocFragmentValue' equals '" + newDocFragmentValue + "' not null";
		}
		return "hc_documentCreateDocumentFragment: OK";
	} catch (e) {
		return "hc_documentCreateDocumentFragment: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_documentcreateelement.xml" fleur="hc_documentcreateelement" native="hc_documentcreateelement"><Fleur>(function(){
	var success;
	try {
		var doc;
		var newElement;
		var newElementName;
		var newElementType;
		var newElementValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		newElement = doc.createElement("acronym");
		newElementName = newElement.nodeName;
		if ("acronym" !== newElementName) {
			return "hc_documentCreateElement: #strong 'newElementName' equals '" + newElementName + "' not '" + "acronym" + "'";
		}
		newElementType = newElement.nodeType;
		if (1 !== newElementType) {
			return "hc_documentCreateElement: #type 'newElementType' equals '" + newElementType + "' not '" + 1 + "'";
		}
		newElementValue = newElement.nodeValue;
		if (newElementValue != null) {
			return "hc_documentCreateElement: #valueInitiallyNull 'newElementValue' equals '" + newElementValue + "' not null";
		}
		return "hc_documentCreateElement: OK";
	} catch (e) {
		return "hc_documentCreateElement: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var newElement;
		var newElementName;
		var newElementType;
		var newElementValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		newElement = doc.createElement("acronym");
		newElementName = newElement.nodeName;
		if ("acronym" !== newElementName) {
			return "hc_documentCreateElement: #strong 'newElementName' equals '" + newElementName + "' not '" + "acronym" + "'";
		}
		newElementType = newElement.nodeType;
		if (1 !== newElementType) {
			return "hc_documentCreateElement: #type 'newElementType' equals '" + newElementType + "' not '" + 1 + "'";
		}
		newElementValue = newElement.nodeValue;
		if (newElementValue != null) {
			return "hc_documentCreateElement: #valueInitiallyNull 'newElementValue' equals '" + newElementValue + "' not null";
		}
		return "hc_documentCreateElement: OK";
	} catch (e) {
		return "hc_documentCreateElement: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_documentcreateelementcasesensitive.xml" fleur="hc_documentcreateelementcasesensitive" native="hc_documentcreateelementcasesensitive"><Fleur>(function(){
	var success;
	try {
		var doc;
		var newElement1;
		var newElement2;
		var attribute1;
		var attribute2;
		var nodeName1;
		var nodeName2;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		newElement1 = doc.createElement("ACRONYM");
		newElement2 = doc.createElement("acronym");
		newElement1.setAttribute("lang", "EN");
		newElement2.setAttribute("title", "Dallas");
		attribute1 = newElement1.getAttribute("lang");
		attribute2 = newElement2.getAttribute("title");
		if ("EN" !== attribute1) {
			return "hc_documentCreateElementCaseSensitive: #attrib1 'attribute1' equals '" + attribute1 + "' not '" + "EN" + "'";
		}
		if ("Dallas" !== attribute2) {
			return "hc_documentCreateElementCaseSensitive: #attrib2 'attribute2' equals '" + attribute2 + "' not '" + "Dallas" + "'";
		}
		nodeName1 = newElement1.nodeName;
		nodeName2 = newElement2.nodeName;
		if ("ACRONYM" !== nodeName1) {
			return "hc_documentCreateElementCaseSensitive: #nodeName1 'nodeName1' equals '" + nodeName1 + "' not '" + "ACRONYM" + "'";
		}
		if ("acronym" !== nodeName2) {
			return "hc_documentCreateElementCaseSensitive: #nodeName2 'nodeName2' equals '" + nodeName2 + "' not '" + "acronym" + "'";
		}
		return "hc_documentCreateElementCaseSensitive: OK";
	} catch (e) {
		return "hc_documentCreateElementCaseSensitive: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var newElement1;
		var newElement2;
		var attribute1;
		var attribute2;
		var nodeName1;
		var nodeName2;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		newElement1 = doc.createElement("ACRONYM");
		newElement2 = doc.createElement("acronym");
		newElement1.setAttribute("lang", "EN");
		newElement2.setAttribute("title", "Dallas");
		attribute1 = newElement1.getAttribute("lang");
		attribute2 = newElement2.getAttribute("title");
		if ("EN" !== attribute1) {
			return "hc_documentCreateElementCaseSensitive: #attrib1 'attribute1' equals '" + attribute1 + "' not '" + "EN" + "'";
		}
		if ("Dallas" !== attribute2) {
			return "hc_documentCreateElementCaseSensitive: #attrib2 'attribute2' equals '" + attribute2 + "' not '" + "Dallas" + "'";
		}
		nodeName1 = newElement1.nodeName;
		nodeName2 = newElement2.nodeName;
		if ("ACRONYM" !== nodeName1) {
			return "hc_documentCreateElementCaseSensitive: #nodeName1 'nodeName1' equals '" + nodeName1 + "' not '" + "ACRONYM" + "'";
		}
		if ("acronym" !== nodeName2) {
			return "hc_documentCreateElementCaseSensitive: #nodeName2 'nodeName2' equals '" + nodeName2 + "' not '" + "acronym" + "'";
		}
		return "hc_documentCreateElementCaseSensitive: OK";
	} catch (e) {
		return "hc_documentCreateElementCaseSensitive: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_documentcreatetextnode.xml" fleur="hc_documentcreatetextnode" native="hc_documentcreatetextnode"><Fleur>(function(){
	var success;
	try {
		var doc;
		var newTextNode;
		var newTextName;
		var newTextValue;
		var newTextType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		newTextNode = doc.createTextNode("This is a new Text node");
		newTextValue = newTextNode.nodeValue;
		if ("This is a new Text node" !== newTextValue) {
			return "hc_documentCreateTextNode: #value 'newTextValue' equals '" + newTextValue + "' not '" + "This is a new Text node" + "'";
		}
		newTextName = newTextNode.nodeName;
		if ("#text" !== newTextName) {
			return "hc_documentCreateTextNode: #strong 'newTextName' equals '" + newTextName + "' not '" + "#text" + "'";
		}
		newTextType = newTextNode.nodeType;
		if (3 !== newTextType) {
			return "hc_documentCreateTextNode: #type 'newTextType' equals '" + newTextType + "' not '" + 3 + "'";
		}
		return "hc_documentCreateTextNode: OK";
	} catch (e) {
		return "hc_documentCreateTextNode: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var newTextNode;
		var newTextName;
		var newTextValue;
		var newTextType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		newTextNode = doc.createTextNode("This is a new Text node");
		newTextValue = newTextNode.nodeValue;
		if ("This is a new Text node" !== newTextValue) {
			return "hc_documentCreateTextNode: #value 'newTextValue' equals '" + newTextValue + "' not '" + "This is a new Text node" + "'";
		}
		newTextName = newTextNode.nodeName;
		if ("#text" !== newTextName) {
			return "hc_documentCreateTextNode: #strong 'newTextName' equals '" + newTextName + "' not '" + "#text" + "'";
		}
		newTextType = newTextNode.nodeType;
		if (3 !== newTextType) {
			return "hc_documentCreateTextNode: #type 'newTextType' equals '" + newTextType + "' not '" + 3 + "'";
		}
		return "hc_documentCreateTextNode: OK";
	} catch (e) {
		return "hc_documentCreateTextNode: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_documentgetdoctype.xml" fleur="hc_documentgetdoctype" native="hc_documentgetdoctype"><Fleur>(function(){
	var success;
	try {
		var doc;
		var docType;
		var docTypeName;
		var nodeValue;
		var attributes;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		if (!(("text/xml" === "text/html"))) {
			if (docType == null) {
				return "hc_documentgetdoctype: #docTypeNotNull 'docType' is null";
			}
		}
		if ((docType != null)) {
			docTypeName = docType.name;
			if (("text/xml" === "image/svg+xml")) {
				if ("svg" !== docTypeName) {
					return "hc_documentgetdoctype: #nodeNameSVG 'docTypeName' equals '" + docTypeName + "' not '" + "svg" + "'";
				}
			} else {
				if ("html" !== docTypeName) {
					return "hc_documentgetdoctype: #nodeName 'docTypeName' equals '" + docTypeName + "' not '" + "html" + "'";
				}
			}
			nodeValue = docType.nodeValue;
			if (nodeValue != null) {
				return "hc_documentgetdoctype: #nodeValue 'nodeValue' equals '" + nodeValue + "' not null";
			}
			attributes = docType.attributes;
			if (attributes != null) {
				return "hc_documentgetdoctype: #attributes 'attributes' equals '" + attributes + "' not null";
			}
		}
		return "hc_documentgetdoctype: OK";
	} catch (e) {
		return "hc_documentgetdoctype: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var docType;
		var docTypeName;
		var nodeValue;
		var attributes;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		if (!(("text/xml" === "text/html"))) {
			if (docType == null) {
				return "hc_documentgetdoctype: #docTypeNotNull 'docType' is null";
			}
		}
		if ((docType != null)) {
			docTypeName = docType.name;
			if (("text/xml" === "image/svg+xml")) {
				if ("svg" !== docTypeName) {
					return "hc_documentgetdoctype: #nodeNameSVG 'docTypeName' equals '" + docTypeName + "' not '" + "svg" + "'";
				}
			} else {
				if ("html" !== docTypeName) {
					return "hc_documentgetdoctype: #nodeName 'docTypeName' equals '" + docTypeName + "' not '" + "html" + "'";
				}
			}
			nodeValue = docType.nodeValue;
			if (nodeValue != null) {
				return "hc_documentgetdoctype: #nodeValue 'nodeValue' equals '" + nodeValue + "' not null";
			}
			attributes = docType.attributes;
			if (attributes != null) {
				return "hc_documentgetdoctype: #attributes 'attributes' equals '" + attributes + "' not null";
			}
		}
		return "hc_documentgetdoctype: OK";
	} catch (e) {
		return "hc_documentgetdoctype: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_documentgetelementsbytagnamelength.xml" fleur="hc_documentgetelementsbytagnamelength" native="hc_documentgetelementsbytagnamelength"><Fleur>(function(){
	var success;
	try {
		var doc;
		var nameList;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		nameList = doc.getElementsByTagName("strong");
		if (nameList.length !== 5) {
			return "hc_documentGetElementsByTagNameLength: #documentGetElementsByTagNameLengthAssert 'nameList.length' equals " + nameList.length + " not 5";
		}
		return "hc_documentGetElementsByTagNameLength: OK";
	} catch (e) {
		return "hc_documentGetElementsByTagNameLength: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var nameList;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		nameList = doc.getElementsByTagName("strong");
		if (nameList.length !== 5) {
			return "hc_documentGetElementsByTagNameLength: #documentGetElementsByTagNameLengthAssert 'nameList.length' equals " + nameList.length + " not 5";
		}
		return "hc_documentGetElementsByTagNameLength: OK";
	} catch (e) {
		return "hc_documentGetElementsByTagNameLength: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_documentgetelementsbytagnametotallength.xml" fleur="hc_documentgetelementsbytagnametotallength" native="hc_documentgetelementsbytagnametotallength"><Fleur>(function(){
	var success;
	try {
		var doc;
		var nameList;
		expectedNames = new Array();
		expectedNames[0] = "html";
		expectedNames[1] = "head";
		expectedNames[2] = "meta";
		expectedNames[3] = "title";
		expectedNames[4] = "script";
		expectedNames[5] = "script";
		expectedNames[6] = "script";
		expectedNames[7] = "body";
		expectedNames[8] = "p";
		expectedNames[9] = "em";
		expectedNames[10] = "strong";
		expectedNames[11] = "code";
		expectedNames[12] = "sup";
		expectedNames[13] = "var";
		expectedNames[14] = "acronym";
		expectedNames[15] = "p";
		expectedNames[16] = "em";
		expectedNames[17] = "strong";
		expectedNames[18] = "code";
		expectedNames[19] = "sup";
		expectedNames[20] = "var";
		expectedNames[21] = "acronym";
		expectedNames[22] = "p";
		expectedNames[23] = "em";
		expectedNames[24] = "strong";
		expectedNames[25] = "code";
		expectedNames[26] = "sup";
		expectedNames[27] = "var";
		expectedNames[28] = "acronym";
		expectedNames[29] = "p";
		expectedNames[30] = "em";
		expectedNames[31] = "strong";
		expectedNames[32] = "code";
		expectedNames[33] = "sup";
		expectedNames[34] = "var";
		expectedNames[35] = "acronym";
		expectedNames[36] = "p";
		expectedNames[37] = "em";
		expectedNames[38] = "strong";
		expectedNames[39] = "code";
		expectedNames[40] = "sup";
		expectedNames[41] = "var";
		expectedNames[42] = "acronym";
		svgExpectedNames = new Array();
		svgExpectedNames[0] = "svg";
		svgExpectedNames[1] = "rect";
		svgExpectedNames[2] = "script";
		svgExpectedNames[3] = "head";
		svgExpectedNames[4] = "meta";
		svgExpectedNames[5] = "title";
		svgExpectedNames[6] = "body";
		svgExpectedNames[7] = "p";
		svgExpectedNames[8] = "em";
		svgExpectedNames[9] = "strong";
		svgExpectedNames[10] = "code";
		svgExpectedNames[11] = "sup";
		svgExpectedNames[12] = "var";
		svgExpectedNames[13] = "acronym";
		svgExpectedNames[14] = "p";
		svgExpectedNames[15] = "em";
		svgExpectedNames[16] = "strong";
		svgExpectedNames[17] = "code";
		svgExpectedNames[18] = "sup";
		svgExpectedNames[19] = "var";
		svgExpectedNames[20] = "acronym";
		svgExpectedNames[21] = "p";
		svgExpectedNames[22] = "em";
		svgExpectedNames[23] = "strong";
		svgExpectedNames[24] = "code";
		svgExpectedNames[25] = "sup";
		svgExpectedNames[26] = "var";
		svgExpectedNames[27] = "acronym";
		svgExpectedNames[28] = "p";
		svgExpectedNames[29] = "em";
		svgExpectedNames[30] = "strong";
		svgExpectedNames[31] = "code";
		svgExpectedNames[32] = "sup";
		svgExpectedNames[33] = "var";
		svgExpectedNames[34] = "acronym";
		svgExpectedNames[35] = "p";
		svgExpectedNames[36] = "em";
		svgExpectedNames[37] = "strong";
		svgExpectedNames[38] = "code";
		svgExpectedNames[39] = "sup";
		svgExpectedNames[40] = "var";
		svgExpectedNames[41] = "acronym";
		var actualNames = new Array();

		var thisElement;
		var thisTag;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		nameList = doc.getElementsByTagName("*");
		for (var index_id0x13d07380 = 0; index_id0x13d07380 &lt; nameList.length; index_id0x13d07380++) {
			thisElement = nameList.item(index_id0x13d07380);
			thisTag = thisElement.tagName;
actualNames[actualNames.length] = thisTag;
		}
		if (("text/xml" === "image/svg+xml")) {
			if (svgExpectedNames.join("|") !== actualNames.join("|")) {
				return "hc_documentgetelementsbytagnametotallength: #svgTagNames 'actualNames' equals '" + actualNames.join("|") + "' not '" + svgExpectedNames.join("|") + "'";
			}
		} else {
			if (expectedNames.join("|") !== actualNames.join("|")) {
				return "hc_documentgetelementsbytagnametotallength: #tagNames 'actualNames' equals '" + actualNames.join("|") + "' not '" + expectedNames.join("|") + "'";
			}
		}
		return "hc_documentgetelementsbytagnametotallength: OK";
	} catch (e) {
		return "hc_documentgetelementsbytagnametotallength: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var nameList;
		expectedNames = new Array();
		expectedNames[0] = "html";
		expectedNames[1] = "head";
		expectedNames[2] = "meta";
		expectedNames[3] = "title";
		expectedNames[4] = "script";
		expectedNames[5] = "script";
		expectedNames[6] = "script";
		expectedNames[7] = "body";
		expectedNames[8] = "p";
		expectedNames[9] = "em";
		expectedNames[10] = "strong";
		expectedNames[11] = "code";
		expectedNames[12] = "sup";
		expectedNames[13] = "var";
		expectedNames[14] = "acronym";
		expectedNames[15] = "p";
		expectedNames[16] = "em";
		expectedNames[17] = "strong";
		expectedNames[18] = "code";
		expectedNames[19] = "sup";
		expectedNames[20] = "var";
		expectedNames[21] = "acronym";
		expectedNames[22] = "p";
		expectedNames[23] = "em";
		expectedNames[24] = "strong";
		expectedNames[25] = "code";
		expectedNames[26] = "sup";
		expectedNames[27] = "var";
		expectedNames[28] = "acronym";
		expectedNames[29] = "p";
		expectedNames[30] = "em";
		expectedNames[31] = "strong";
		expectedNames[32] = "code";
		expectedNames[33] = "sup";
		expectedNames[34] = "var";
		expectedNames[35] = "acronym";
		expectedNames[36] = "p";
		expectedNames[37] = "em";
		expectedNames[38] = "strong";
		expectedNames[39] = "code";
		expectedNames[40] = "sup";
		expectedNames[41] = "var";
		expectedNames[42] = "acronym";
		svgExpectedNames = new Array();
		svgExpectedNames[0] = "svg";
		svgExpectedNames[1] = "rect";
		svgExpectedNames[2] = "script";
		svgExpectedNames[3] = "head";
		svgExpectedNames[4] = "meta";
		svgExpectedNames[5] = "title";
		svgExpectedNames[6] = "body";
		svgExpectedNames[7] = "p";
		svgExpectedNames[8] = "em";
		svgExpectedNames[9] = "strong";
		svgExpectedNames[10] = "code";
		svgExpectedNames[11] = "sup";
		svgExpectedNames[12] = "var";
		svgExpectedNames[13] = "acronym";
		svgExpectedNames[14] = "p";
		svgExpectedNames[15] = "em";
		svgExpectedNames[16] = "strong";
		svgExpectedNames[17] = "code";
		svgExpectedNames[18] = "sup";
		svgExpectedNames[19] = "var";
		svgExpectedNames[20] = "acronym";
		svgExpectedNames[21] = "p";
		svgExpectedNames[22] = "em";
		svgExpectedNames[23] = "strong";
		svgExpectedNames[24] = "code";
		svgExpectedNames[25] = "sup";
		svgExpectedNames[26] = "var";
		svgExpectedNames[27] = "acronym";
		svgExpectedNames[28] = "p";
		svgExpectedNames[29] = "em";
		svgExpectedNames[30] = "strong";
		svgExpectedNames[31] = "code";
		svgExpectedNames[32] = "sup";
		svgExpectedNames[33] = "var";
		svgExpectedNames[34] = "acronym";
		svgExpectedNames[35] = "p";
		svgExpectedNames[36] = "em";
		svgExpectedNames[37] = "strong";
		svgExpectedNames[38] = "code";
		svgExpectedNames[39] = "sup";
		svgExpectedNames[40] = "var";
		svgExpectedNames[41] = "acronym";
		var actualNames = new Array();

		var thisElement;
		var thisTag;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		nameList = doc.getElementsByTagName("*");
		for (var index_id0x13d07380 = 0; index_id0x13d07380 &lt; nameList.length; index_id0x13d07380++) {
			thisElement = nameList.item(index_id0x13d07380);
			thisTag = thisElement.tagName;
actualNames[actualNames.length] = thisTag;
		}
		if (("text/xml" === "image/svg+xml")) {
			if (svgExpectedNames.join("|") !== actualNames.join("|")) {
				return "hc_documentgetelementsbytagnametotallength: #svgTagNames 'actualNames' equals '" + actualNames.join("|") + "' not '" + svgExpectedNames.join("|") + "'";
			}
		} else {
			if (expectedNames.join("|") !== actualNames.join("|")) {
				return "hc_documentgetelementsbytagnametotallength: #tagNames 'actualNames' equals '" + actualNames.join("|") + "' not '" + expectedNames.join("|") + "'";
			}
		}
		return "hc_documentgetelementsbytagnametotallength: OK";
	} catch (e) {
		return "hc_documentgetelementsbytagnametotallength: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_documentgetelementsbytagnamevalue.xml" fleur="hc_documentgetelementsbytagnamevalue" native="hc_documentgetelementsbytagnamevalue"><Fleur>(function(){
	var success;
	try {
		var doc;
		var nameList;
		var nameNode;
		var firstChild;
		var childValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		nameList = doc.getElementsByTagName("strong");
		nameNode = nameList.item(3);
		firstChild = nameNode.firstChild;
		childValue = firstChild.nodeValue;
		if ("Jeny Oconnor" !== childValue) {
			return "hc_documentGetElementsByTagNameValue: #documentGetElementsByTagNameValueAssert 'childValue' equals '" + childValue + "' not '" + "Jeny Oconnor" + "'";
		}
		return "hc_documentGetElementsByTagNameValue: OK";
	} catch (e) {
		return "hc_documentGetElementsByTagNameValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var nameList;
		var nameNode;
		var firstChild;
		var childValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		nameList = doc.getElementsByTagName("strong");
		nameNode = nameList.item(3);
		firstChild = nameNode.firstChild;
		childValue = firstChild.nodeValue;
		if ("Jeny Oconnor" !== childValue) {
			return "hc_documentGetElementsByTagNameValue: #documentGetElementsByTagNameValueAssert 'childValue' equals '" + childValue + "' not '" + "Jeny Oconnor" + "'";
		}
		return "hc_documentGetElementsByTagNameValue: OK";
	} catch (e) {
		return "hc_documentGetElementsByTagNameValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_documentgetimplementation.xml" fleur="hc_documentgetimplementation" native="hc_documentgetimplementation"><Fleur>(function(){
	var success;
	try {
		var doc;
		var docImpl;
		var xmlstate;
		var htmlstate;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		docImpl = doc.implementation;
		xmlstate = docImpl.hasFeature("XML","1.0");
		htmlstate = docImpl.hasFeature("HTML","1.0");
		if (("text/xml" === "text/html")) {
			if (htmlstate !== true) {
				return "supports_HTML_1.0: 'htmlstate' equals '" + htmlstate + "' not true";
			}
		} else {
			if (xmlstate !== true) {
				return "supports_XML_1.0: 'xmlstate' equals '" + xmlstate + "' not true";
			}
		}
		return "hc_documentgetimplementation: OK";
	} catch (e) {
		return "hc_documentgetimplementation: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var docImpl;
		var xmlstate;
		var htmlstate;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		docImpl = doc.implementation;
		xmlstate = docImpl.hasFeature("XML","1.0");
		htmlstate = docImpl.hasFeature("HTML","1.0");
		if (("text/xml" === "text/html")) {
			if (htmlstate !== true) {
				return "supports_HTML_1.0: 'htmlstate' equals '" + htmlstate + "' not true";
			}
		} else {
			if (xmlstate !== true) {
				return "supports_XML_1.0: 'xmlstate' equals '" + xmlstate + "' not true";
			}
		}
		return "hc_documentgetimplementation: OK";
	} catch (e) {
		return "hc_documentgetimplementation: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_documentgetrootnode.xml" fleur="hc_documentgetrootnode" native="hc_documentgetrootnode"><Fleur>(function(){
	var success;
	try {
		var doc;
		var root;
		var rootName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		root = doc.documentElement;
		rootName = root.nodeName;
		if (("text/xml" === "image/svg+xml")) {
			if ("svg" !== rootName) {
				return "hc_documentgetrootnode: #svgTagName 'rootName' equals '" + rootName + "' not '" + "svg" + "'";
			}
		} else {
			if ("html" !== rootName) {
				return "hc_documentgetrootnode: #docElemName 'rootName' equals '" + rootName + "' not '" + "html" + "'";
			}
		}
		return "hc_documentgetrootnode: OK";
	} catch (e) {
		return "hc_documentgetrootnode: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var root;
		var rootName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		root = doc.documentElement;
		rootName = root.nodeName;
		if (("text/xml" === "image/svg+xml")) {
			if ("svg" !== rootName) {
				return "hc_documentgetrootnode: #svgTagName 'rootName' equals '" + rootName + "' not '" + "svg" + "'";
			}
		} else {
			if ("html" !== rootName) {
				return "hc_documentgetrootnode: #docElemName 'rootName' equals '" + rootName + "' not '" + "html" + "'";
			}
		}
		return "hc_documentgetrootnode: OK";
	} catch (e) {
		return "hc_documentgetrootnode: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_documentinvalidcharacterexceptioncreateattribute.xml" fleur="hc_documentinvalidcharacterexceptioncreateattribute" native="hc_documentinvalidcharacterexceptioncreateattribute"><Fleur>(function(){
	var success;
	try {
		var doc;
		var createdAttr;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		success = false;
		try {
			createdAttr = doc.createAttribute("invalid^Name");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 5;
			}
		}
		if (!success) {
			return "hc_documentInvalidCharacterExceptionCreateAttribute: Exception INVALID_CHARACTER_ERR expected";
		}
		return "hc_documentInvalidCharacterExceptionCreateAttribute: OK";
	} catch (e) {
		return "hc_documentInvalidCharacterExceptionCreateAttribute: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var createdAttr;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		success = false;
		try {
			createdAttr = doc.createAttribute("invalid^Name");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 5;
			}
		}
		if (!success) {
			return "hc_documentInvalidCharacterExceptionCreateAttribute: Exception INVALID_CHARACTER_ERR expected";
		}
		return "hc_documentInvalidCharacterExceptionCreateAttribute: OK";
	} catch (e) {
		return "hc_documentInvalidCharacterExceptionCreateAttribute: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_documentinvalidcharacterexceptioncreateattribute1.xml" fleur="hc_documentinvalidcharacterexceptioncreateattribute1" native="hc_documentinvalidcharacterexceptioncreateattribute1"><Fleur>(function(){
	var success;
	try {
		var doc;
		var createdAttr;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		success = false;
		try {
			createdAttr = doc.createAttribute("");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 5;
			}
		}
		if (!success) {
			return "hc_documentinvalidcharacterexceptioncreateattribute1: Exception INVALID_CHARACTER_ERR expected";
		}
		return "hc_documentinvalidcharacterexceptioncreateattribute1: OK";
	} catch (e) {
		return "hc_documentinvalidcharacterexceptioncreateattribute1: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var createdAttr;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		success = false;
		try {
			createdAttr = doc.createAttribute("");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 5;
			}
		}
		if (!success) {
			return "hc_documentinvalidcharacterexceptioncreateattribute1: Exception INVALID_CHARACTER_ERR expected";
		}
		return "hc_documentinvalidcharacterexceptioncreateattribute1: OK";
	} catch (e) {
		return "hc_documentinvalidcharacterexceptioncreateattribute1: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_documentinvalidcharacterexceptioncreateelement.xml" fleur="hc_documentinvalidcharacterexceptioncreateelement" native="hc_documentinvalidcharacterexceptioncreateelement"><Fleur>(function(){
	var success;
	try {
		var doc;
		var badElement;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		success = false;
		try {
			badElement = doc.createElement("invalid^Name");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 5;
			}
		}
		if (!success) {
			return "hc_documentInvalidCharacterExceptionCreateElement: Exception INVALID_CHARACTER_ERR expected";
		}
		return "hc_documentInvalidCharacterExceptionCreateElement: OK";
	} catch (e) {
		return "hc_documentInvalidCharacterExceptionCreateElement: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var badElement;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		success = false;
		try {
			badElement = doc.createElement("invalid^Name");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 5;
			}
		}
		if (!success) {
			return "hc_documentInvalidCharacterExceptionCreateElement: Exception INVALID_CHARACTER_ERR expected";
		}
		return "hc_documentInvalidCharacterExceptionCreateElement: OK";
	} catch (e) {
		return "hc_documentInvalidCharacterExceptionCreateElement: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_documentinvalidcharacterexceptioncreateelement1.xml" fleur="hc_documentinvalidcharacterexceptioncreateelement1" native="hc_documentinvalidcharacterexceptioncreateelement1"><Fleur>(function(){
	var success;
	try {
		var doc;
		var badElement;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		success = false;
		try {
			badElement = doc.createElement("");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 5;
			}
		}
		if (!success) {
			return "hc_documentinvalidcharacterexceptioncreateelement1: Exception INVALID_CHARACTER_ERR expected";
		}
		return "hc_documentinvalidcharacterexceptioncreateelement1: OK";
	} catch (e) {
		return "hc_documentinvalidcharacterexceptioncreateelement1: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var badElement;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		success = false;
		try {
			badElement = doc.createElement("");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 5;
			}
		}
		if (!success) {
			return "hc_documentinvalidcharacterexceptioncreateelement1: Exception INVALID_CHARACTER_ERR expected";
		}
		return "hc_documentinvalidcharacterexceptioncreateelement1: OK";
	} catch (e) {
		return "hc_documentinvalidcharacterexceptioncreateelement1: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_domimplementationfeaturenoversion.xml" fleur="hc_domimplementationfeaturenoversion" native="hc_domimplementationfeaturenoversion"><Fleur>(function(){
	var success;
	try {
		var doc;
		var domImpl;
		var state;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		domImpl = doc.implementation;
		if (("text/xml" === "text/html")) {
			state = domImpl.hasFeature("HTML","");
		} else {
			state = domImpl.hasFeature("XML","");
		}
		if (state !== true) {
			return "hasFeatureBlank: 'state' equals '" + state + "' not true";
		}
		return "hc_domimplementationfeaturenoversion: OK";
	} catch (e) {
		return "hc_domimplementationfeaturenoversion: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var domImpl;
		var state;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		domImpl = doc.implementation;
		if (("text/xml" === "text/html")) {
			state = domImpl.hasFeature("HTML","");
		} else {
			state = domImpl.hasFeature("XML","");
		}
		if (state !== true) {
			return "hasFeatureBlank: 'state' equals '" + state + "' not true";
		}
		return "hc_domimplementationfeaturenoversion: OK";
	} catch (e) {
		return "hc_domimplementationfeaturenoversion: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_domimplementationfeaturenull.xml" fleur="hc_domimplementationfeaturenull" native="hc_domimplementationfeaturenull"><Fleur>(function(){
	var success;
	try {
		var doc;
		var domImpl;
		var state;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		domImpl = doc.implementation;
		if (("text/xml" === "text/html")) {
			state = domImpl.hasFeature("HTML",null);
			if (state !== true) {
				return "supports_HTML_null: 'state' equals '" + state + "' not true";
			}
		} else {
			state = domImpl.hasFeature("XML",null);
			if (state !== true) {
				return "supports_XML_null: 'state' equals '" + state + "' not true";
			}
		}
		return "hc_domimplementationfeaturenull: OK";
	} catch (e) {
		return "hc_domimplementationfeaturenull: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var domImpl;
		var state;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		domImpl = doc.implementation;
		if (("text/xml" === "text/html")) {
			state = domImpl.hasFeature("HTML",null);
			if (state !== true) {
				return "supports_HTML_null: 'state' equals '" + state + "' not true";
			}
		} else {
			state = domImpl.hasFeature("XML",null);
			if (state !== true) {
				return "supports_XML_null: 'state' equals '" + state + "' not true";
			}
		}
		return "hc_domimplementationfeaturenull: OK";
	} catch (e) {
		return "hc_domimplementationfeaturenull: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_domimplementationfeaturexml.xml" fleur="hc_domimplementationfeaturexml" native="hc_domimplementationfeaturexml"><Fleur>(function(){
	var success;
	try {
		var doc;
		var domImpl;
		var state;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		domImpl = doc.implementation;
		if (("text/xml" === "text/html")) {
			state = domImpl.hasFeature("html","1.0");
			if (state !== true) {
				return "supports_html_1.0: 'state' equals '" + state + "' not true";
			}
		} else {
			state = domImpl.hasFeature("xml","1.0");
			if (state !== true) {
				return "supports_xml_1.0: 'state' equals '" + state + "' not true";
			}
		}
		return "hc_domimplementationfeaturexml: OK";
	} catch (e) {
		return "hc_domimplementationfeaturexml: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var domImpl;
		var state;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		domImpl = doc.implementation;
		if (("text/xml" === "text/html")) {
			state = domImpl.hasFeature("html","1.0");
			if (state !== true) {
				return "supports_html_1.0: 'state' equals '" + state + "' not true";
			}
		} else {
			state = domImpl.hasFeature("xml","1.0");
			if (state !== true) {
				return "supports_xml_1.0: 'state' equals '" + state + "' not true";
			}
		}
		return "hc_domimplementationfeaturexml: OK";
	} catch (e) {
		return "hc_domimplementationfeaturexml: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_elementaddnewattribute.xml" fleur="hc_elementaddnewattribute" native="hc_elementaddnewattribute"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var attrValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		testEmployee = elementList.item(4);
		testEmployee.setAttribute("lang", "EN-us");
		attrValue = testEmployee.getAttribute("lang");
		if ("EN-us" !== attrValue) {
			return "hc_elementAddNewAttribute: #attrValue 'attrValue' equals '" + attrValue + "' not '" + "EN-us" + "'";
		}
		return "hc_elementAddNewAttribute: OK";
	} catch (e) {
		return "hc_elementAddNewAttribute: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var attrValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		testEmployee = elementList.item(4);
		testEmployee.setAttribute("lang", "EN-us");
		attrValue = testEmployee.getAttribute("lang");
		if ("EN-us" !== attrValue) {
			return "hc_elementAddNewAttribute: #attrValue 'attrValue' equals '" + attrValue + "' not '" + "EN-us" + "'";
		}
		return "hc_elementAddNewAttribute: OK";
	} catch (e) {
		return "hc_elementAddNewAttribute: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_elementassociatedattribute.xml" fleur="hc_elementassociatedattribute" native="hc_elementassociatedattribute"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var attributes;
		var domesticAttr;
		var specified;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		testEmployee = elementList.item(0);
		attributes = testEmployee.attributes;
		domesticAttr = attributes.getNamedItem("title");
		specified = domesticAttr.specified;
		if (specified !== true) {
			return "acronymTitleSpecified: 'specified' equals '" + specified + "' not true";
		}
		return "hc_elementAssociatedAttribute: OK";
	} catch (e) {
		return "hc_elementAssociatedAttribute: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var attributes;
		var domesticAttr;
		var specified;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		testEmployee = elementList.item(0);
		attributes = testEmployee.attributes;
		domesticAttr = attributes.getNamedItem("title");
		specified = domesticAttr.specified;
		if (specified !== true) {
			return "acronymTitleSpecified: 'specified' equals '" + specified + "' not true";
		}
		return "hc_elementAssociatedAttribute: OK";
	} catch (e) {
		return "hc_elementAssociatedAttribute: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_elementchangeattributevalue.xml" fleur="hc_elementchangeattributevalue" native="hc_elementchangeattributevalue"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var attrValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		testEmployee = elementList.item(3);
		testEmployee.setAttribute("class", "Neither");
		attrValue = testEmployee.getAttribute("class");
		if ("Neither" !== attrValue) {
			return "hc_elementChangeAttributeValue: #elementChangeAttributeValueAssert 'attrValue' equals '" + attrValue + "' not '" + "Neither" + "'";
		}
		return "hc_elementChangeAttributeValue: OK";
	} catch (e) {
		return "hc_elementChangeAttributeValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var attrValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		testEmployee = elementList.item(3);
		testEmployee.setAttribute("class", "Neither");
		attrValue = testEmployee.getAttribute("class");
		if ("Neither" !== attrValue) {
			return "hc_elementChangeAttributeValue: #elementChangeAttributeValueAssert 'attrValue' equals '" + attrValue + "' not '" + "Neither" + "'";
		}
		return "hc_elementChangeAttributeValue: OK";
	} catch (e) {
		return "hc_elementChangeAttributeValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_elementcreatenewattribute.xml" fleur="hc_elementcreatenewattribute" native="hc_elementcreatenewattribute"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testAddress;
		var newAttribute;
		var oldAttr;
		var districtAttr;
		var attrVal;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		testAddress = elementList.item(0);
		newAttribute = doc.createAttribute("lang");
		oldAttr = testAddress.setAttributeNode(newAttribute);
		if (oldAttr != null) {
			return "hc_elementCreateNewAttribute: #old_attr_doesnt_exist 'oldAttr' equals '" + oldAttr + "' not null";
		}
		districtAttr = testAddress.getAttributeNode("lang");
		if (districtAttr == null) {
			return "hc_elementCreateNewAttribute: #new_district_accessible 'districtAttr' is null";
		}
		attrVal = testAddress.getAttribute("lang");
		if ("" !== attrVal) {
			return "hc_elementCreateNewAttribute: #attr_value 'attrVal' equals '" + attrVal + "' not '" + "" + "'";
		}
		return "hc_elementCreateNewAttribute: OK";
	} catch (e) {
		return "hc_elementCreateNewAttribute: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testAddress;
		var newAttribute;
		var oldAttr;
		var districtAttr;
		var attrVal;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		testAddress = elementList.item(0);
		newAttribute = doc.createAttribute("lang");
		oldAttr = testAddress.setAttributeNode(newAttribute);
		if (oldAttr != null) {
			return "hc_elementCreateNewAttribute: #old_attr_doesnt_exist 'oldAttr' equals '" + oldAttr + "' not null";
		}
		districtAttr = testAddress.getAttributeNode("lang");
		if (districtAttr == null) {
			return "hc_elementCreateNewAttribute: #new_district_accessible 'districtAttr' is null";
		}
		attrVal = testAddress.getAttribute("lang");
		if ("" !== attrVal) {
			return "hc_elementCreateNewAttribute: #attr_value 'attrVal' equals '" + attrVal + "' not '" + "" + "'";
		}
		return "hc_elementCreateNewAttribute: OK";
	} catch (e) {
		return "hc_elementCreateNewAttribute: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_elementgetattributenode.xml" fleur="hc_elementgetattributenode" native="hc_elementgetattributenode"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var domesticAttr;
		var nodeName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		testEmployee = elementList.item(0);
		domesticAttr = testEmployee.getAttributeNode("title");
		nodeName = domesticAttr.nodeName;
		if ("title" !== nodeName) {
			return "hc_elementgetattributenode: #nodeName 'nodeName' equals '" + nodeName + "' not '" + "title" + "'";
		}
		return "hc_elementgetattributenode: OK";
	} catch (e) {
		return "hc_elementgetattributenode: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var domesticAttr;
		var nodeName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		testEmployee = elementList.item(0);
		domesticAttr = testEmployee.getAttributeNode("title");
		nodeName = domesticAttr.nodeName;
		if ("title" !== nodeName) {
			return "hc_elementgetattributenode: #nodeName 'nodeName' equals '" + nodeName + "' not '" + "title" + "'";
		}
		return "hc_elementgetattributenode: OK";
	} catch (e) {
		return "hc_elementgetattributenode: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_elementgetattributenodenull.xml" fleur="hc_elementgetattributenodenull" native="hc_elementgetattributenodenull"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var domesticAttr;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		testEmployee = elementList.item(0);
		domesticAttr = testEmployee.getAttributeNode("invalidAttribute");
		if (domesticAttr != null) {
			return "hc_elementGetAttributeNodeNull: #elementGetAttributeNodeNullAssert 'domesticAttr' equals '" + domesticAttr + "' not null";
		}
		return "hc_elementGetAttributeNodeNull: OK";
	} catch (e) {
		return "hc_elementGetAttributeNodeNull: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var domesticAttr;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		testEmployee = elementList.item(0);
		domesticAttr = testEmployee.getAttributeNode("invalidAttribute");
		if (domesticAttr != null) {
			return "hc_elementGetAttributeNodeNull: #elementGetAttributeNodeNullAssert 'domesticAttr' equals '" + domesticAttr + "' not null";
		}
		return "hc_elementGetAttributeNodeNull: OK";
	} catch (e) {
		return "hc_elementGetAttributeNodeNull: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_elementgetelementempty.xml" fleur="hc_elementgetelementempty" native="hc_elementgetelementempty"><Fleur>(function(){
	var success;
	try {
		var doc;
		var newAttribute;
		var elementList;
		var testEmployee;
		var domesticAttr;
		var attrValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		newAttribute = doc.createAttribute("lang");
		elementList = doc.getElementsByTagName("acronym");
		testEmployee = elementList.item(3);
		domesticAttr = testEmployee.setAttributeNode(newAttribute);
		attrValue = testEmployee.getAttribute("lang");
		if ("" !== attrValue) {
			return "hc_elementGetElementEmpty: #elementGetElementEmptyAssert 'attrValue' equals '" + attrValue + "' not '" + "" + "'";
		}
		return "hc_elementGetElementEmpty: OK";
	} catch (e) {
		return "hc_elementGetElementEmpty: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var newAttribute;
		var elementList;
		var testEmployee;
		var domesticAttr;
		var attrValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		newAttribute = doc.createAttribute("lang");
		elementList = doc.getElementsByTagName("acronym");
		testEmployee = elementList.item(3);
		domesticAttr = testEmployee.setAttributeNode(newAttribute);
		attrValue = testEmployee.getAttribute("lang");
		if ("" !== attrValue) {
			return "hc_elementGetElementEmpty: #elementGetElementEmptyAssert 'attrValue' equals '" + attrValue + "' not '" + "" + "'";
		}
		return "hc_elementGetElementEmpty: OK";
	} catch (e) {
		return "hc_elementGetElementEmpty: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_elementgetelementsbytagname.xml" fleur="hc_elementgetelementsbytagname" native="hc_elementgetelementsbytagname"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("p");
		if (elementList.length !== 5) {
			return "hc_elementGetElementsByTagName: #elementGetElementsByTagNameAssert 'elementList.length' equals " + elementList.length + " not 5";
		}
		return "hc_elementGetElementsByTagName: OK";
	} catch (e) {
		return "hc_elementGetElementsByTagName: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("p");
		if (elementList.length !== 5) {
			return "hc_elementGetElementsByTagName: #elementGetElementsByTagNameAssert 'elementList.length' equals " + elementList.length + " not 5";
		}
		return "hc_elementGetElementsByTagName: OK";
	} catch (e) {
		return "hc_elementGetElementsByTagName: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_elementgetelementsbytagnameaccessnodelist.xml" fleur="hc_elementgetelementsbytagnameaccessnodelist" native="hc_elementgetelementsbytagnameaccessnodelist"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var firstC;
		var childName;
		var nodeType;
		var employeeIDNode;
		var employeeID;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("p");
		testEmployee = elementList.item(3);
		firstC = testEmployee.firstChild;
		nodeType = firstC.nodeType;
		while ((3 == nodeType)) {
			firstC = firstC.nextSibling;
			nodeType = firstC.nodeType;
		}
		childName = firstC.nodeName;
		if ("em" !== childName) {
			return "hc_elementGetElementsByTagName: #childName 'childName' equals '" + childName + "' not '" + "em" + "'";
		}
		employeeIDNode = firstC.firstChild;
		employeeID = employeeIDNode.nodeValue;
		if ("EMP0004" !== employeeID) {
			return "hc_elementGetElementsByTagName: #employeeID 'employeeID' equals '" + employeeID + "' not '" + "EMP0004" + "'";
		}
		return "hc_elementGetElementsByTagName: OK";
	} catch (e) {
		return "hc_elementGetElementsByTagName: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var firstC;
		var childName;
		var nodeType;
		var employeeIDNode;
		var employeeID;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("p");
		testEmployee = elementList.item(3);
		firstC = testEmployee.firstChild;
		nodeType = firstC.nodeType;
		while ((3 == nodeType)) {
			firstC = firstC.nextSibling;
			nodeType = firstC.nodeType;
		}
		childName = firstC.nodeName;
		if ("em" !== childName) {
			return "hc_elementGetElementsByTagName: #childName 'childName' equals '" + childName + "' not '" + "em" + "'";
		}
		employeeIDNode = firstC.firstChild;
		employeeID = employeeIDNode.nodeValue;
		if ("EMP0004" !== employeeID) {
			return "hc_elementGetElementsByTagName: #employeeID 'employeeID' equals '" + employeeID + "' not '" + "EMP0004" + "'";
		}
		return "hc_elementGetElementsByTagName: OK";
	} catch (e) {
		return "hc_elementGetElementsByTagName: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_elementgetelementsbytagnamenomatch.xml" fleur="hc_elementgetelementsbytagnamenomatch" native="hc_elementgetelementsbytagnamenomatch"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("noMatch");
		if (elementList.length !== 0) {
			return "hc_elementGetElementsByTagName: #elementGetElementsByTagNameNoMatchNoMatchAssert 'elementList.length' equals " + elementList.length + " not 0";
		}
		return "hc_elementGetElementsByTagName: OK";
	} catch (e) {
		return "hc_elementGetElementsByTagName: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("noMatch");
		if (elementList.length !== 0) {
			return "hc_elementGetElementsByTagName: #elementGetElementsByTagNameNoMatchNoMatchAssert 'elementList.length' equals " + elementList.length + " not 0";
		}
		return "hc_elementGetElementsByTagName: OK";
	} catch (e) {
		return "hc_elementGetElementsByTagName: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_elementgetelementsbytagnamespecialvalue.xml" fleur="hc_elementgetelementsbytagnamespecialvalue" native="hc_elementgetelementsbytagnamespecialvalue"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var lastEmployee;
		var lastempList;
		var child;
		var childName;
		var result = new Array();

		expectedResult = new Array();
		expectedResult[0] = "em";
		expectedResult[1] = "strong";
		expectedResult[2] = "code";
		expectedResult[3] = "sup";
		expectedResult[4] = "var";
		expectedResult[5] = "acronym";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("p");
		lastEmployee = elementList.item(4);
		lastempList = lastEmployee.getElementsByTagName("*");
		for (var index_id0x144f51f0 = 0; index_id0x144f51f0 &lt; lastempList.length; index_id0x144f51f0++) {
			child = lastempList.item(index_id0x144f51f0);
			childName = child.nodeName;
result[result.length] = childName;
		}
		if (expectedResult.join("|") !== result.join("|")) {
			return "hc_elementGetElementsByTagNamesSpecialValue: #tagNames 'result' equals '" + result.join("|") + "' not '" + expectedResult.join("|") + "'";
		}
		return "hc_elementGetElementsByTagNamesSpecialValue: OK";
	} catch (e) {
		return "hc_elementGetElementsByTagNamesSpecialValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var lastEmployee;
		var lastempList;
		var child;
		var childName;
		var result = new Array();

		expectedResult = new Array();
		expectedResult[0] = "em";
		expectedResult[1] = "strong";
		expectedResult[2] = "code";
		expectedResult[3] = "sup";
		expectedResult[4] = "var";
		expectedResult[5] = "acronym";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("p");
		lastEmployee = elementList.item(4);
		lastempList = lastEmployee.getElementsByTagName("*");
		for (var index_id0x144f51f0 = 0; index_id0x144f51f0 &lt; lastempList.length; index_id0x144f51f0++) {
			child = lastempList.item(index_id0x144f51f0);
			childName = child.nodeName;
result[result.length] = childName;
		}
		if (expectedResult.join("|") !== result.join("|")) {
			return "hc_elementGetElementsByTagNamesSpecialValue: #tagNames 'result' equals '" + result.join("|") + "' not '" + expectedResult.join("|") + "'";
		}
		return "hc_elementGetElementsByTagNamesSpecialValue: OK";
	} catch (e) {
		return "hc_elementGetElementsByTagNamesSpecialValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_elementgettagname.xml" fleur="hc_elementgettagname" native="hc_elementgettagname"><Fleur>(function(){
	var success;
	try {
		var doc;
		var root;
		var tagname;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		root = doc.documentElement;
		tagname = root.tagName;
		if (("text/xml" === "image/svg+xml")) {
			if ("svg" !== tagname) {
				return "hc_elementgettagname: #svgTagname 'tagname' equals '" + tagname + "' not '" + "svg" + "'";
			}
		} else {
			if ("html" !== tagname) {
				return "hc_elementgettagname: #tagname 'tagname' equals '" + tagname + "' not '" + "html" + "'";
			}
		}
		return "hc_elementgettagname: OK";
	} catch (e) {
		return "hc_elementgettagname: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var root;
		var tagname;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		root = doc.documentElement;
		tagname = root.tagName;
		if (("text/xml" === "image/svg+xml")) {
			if ("svg" !== tagname) {
				return "hc_elementgettagname: #svgTagname 'tagname' equals '" + tagname + "' not '" + "svg" + "'";
			}
		} else {
			if ("html" !== tagname) {
				return "hc_elementgettagname: #tagname 'tagname' equals '" + tagname + "' not '" + "html" + "'";
			}
		}
		return "hc_elementgettagname: OK";
	} catch (e) {
		return "hc_elementgettagname: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_elementinuseattributeerr.xml" fleur="hc_elementinuseattributeerr" native="hc_elementinuseattributeerr"><Fleur>(function(){
	var success;
	try {
		var doc;
		var newAttribute;
		var addressElementList;
		var testAddress;
		var newElement;
		var attrAddress;
		var appendedChild;
		var setAttr1;
		var setAttr2;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		addressElementList = doc.getElementsByTagName("body");
		testAddress = addressElementList.item(0);
		newElement = doc.createElement("p");
		appendedChild = testAddress.appendChild(newElement);
		newAttribute = doc.createAttribute("title");
		setAttr1 = newElement.setAttributeNode(newAttribute);
		success = false;
		try {
			setAttr2 = testAddress.setAttributeNode(newAttribute);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 10;
			}
		}
		if (!success) {
			return "hc_elementInUseAttributeErr: Exception INUSE_ATTRIBUTE_ERR expected";
		}
		return "hc_elementInUseAttributeErr: OK";
	} catch (e) {
		return "hc_elementInUseAttributeErr: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var newAttribute;
		var addressElementList;
		var testAddress;
		var newElement;
		var attrAddress;
		var appendedChild;
		var setAttr1;
		var setAttr2;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		addressElementList = doc.getElementsByTagName("body");
		testAddress = addressElementList.item(0);
		newElement = doc.createElement("p");
		appendedChild = testAddress.appendChild(newElement);
		newAttribute = doc.createAttribute("title");
		setAttr1 = newElement.setAttributeNode(newAttribute);
		success = false;
		try {
			setAttr2 = testAddress.setAttributeNode(newAttribute);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 10;
			}
		}
		if (!success) {
			return "hc_elementInUseAttributeErr: Exception INUSE_ATTRIBUTE_ERR expected";
		}
		return "hc_elementInUseAttributeErr: OK";
	} catch (e) {
		return "hc_elementInUseAttributeErr: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_elementinvalidcharacterexception.xml" fleur="hc_elementinvalidcharacterexception" native="hc_elementinvalidcharacterexception"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testAddress;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		testAddress = elementList.item(0);
		success = false;
		try {
			testAddress.setAttribute("invalid^Name", "value");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 5;
			}
		}
		if (!success) {
			return "hc_elementInvalidCharacterException: Exception INVALID_CHARACTER_ERR expected";
		}
		return "hc_elementInvalidCharacterException: OK";
	} catch (e) {
		return "hc_elementInvalidCharacterException: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testAddress;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		testAddress = elementList.item(0);
		success = false;
		try {
			testAddress.setAttribute("invalid^Name", "value");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 5;
			}
		}
		if (!success) {
			return "hc_elementInvalidCharacterException: Exception INVALID_CHARACTER_ERR expected";
		}
		return "hc_elementInvalidCharacterException: OK";
	} catch (e) {
		return "hc_elementInvalidCharacterException: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_elementinvalidcharacterexception1.xml" fleur="hc_elementinvalidcharacterexception1" native="hc_elementinvalidcharacterexception1"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testAddress;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		testAddress = elementList.item(0);
		success = false;
		try {
			testAddress.setAttribute("", "value");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 5;
			}
		}
		if (!success) {
			return "hc_elementinvalidcharacterexception1: Exception INVALID_CHARACTER_ERR expected";
		}
		return "hc_elementinvalidcharacterexception1: OK";
	} catch (e) {
		return "hc_elementinvalidcharacterexception1: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testAddress;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		testAddress = elementList.item(0);
		success = false;
		try {
			testAddress.setAttribute("", "value");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 5;
			}
		}
		if (!success) {
			return "hc_elementinvalidcharacterexception1: Exception INVALID_CHARACTER_ERR expected";
		}
		return "hc_elementinvalidcharacterexception1: OK";
	} catch (e) {
		return "hc_elementinvalidcharacterexception1: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_elementnormalize.xml" fleur="hc_elementnormalize" native="hc_elementnormalize"><Fleur>(function(){
	var success;
	try {
		var doc;
		var root;
		var elementList;
		var testName;
		var firstChild;
		var childValue;
		var textNode;
		var retNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("sup");
		testName = elementList.item(0);
		textNode = doc.createTextNode("");
		retNode = testName.appendChild(textNode);
		textNode = doc.createTextNode(",000");
		retNode = testName.appendChild(textNode);
		root = doc.documentElement;
		root.normalize();
		elementList = doc.getElementsByTagName("sup");
		testName = elementList.item(0);
		firstChild = testName.firstChild;
		childValue = firstChild.nodeValue;
		if ("56,000,000" !== childValue) {
			return "hc_elementnormalize: #elementNormalizeAssert 'childValue' equals '" + childValue + "' not '" + "56,000,000" + "'";
		}
		return "hc_elementnormalize: OK";
	} catch (e) {
		return "hc_elementnormalize: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var root;
		var elementList;
		var testName;
		var firstChild;
		var childValue;
		var textNode;
		var retNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("sup");
		testName = elementList.item(0);
		textNode = doc.createTextNode("");
		retNode = testName.appendChild(textNode);
		textNode = doc.createTextNode(",000");
		retNode = testName.appendChild(textNode);
		root = doc.documentElement;
		root.normalize();
		elementList = doc.getElementsByTagName("sup");
		testName = elementList.item(0);
		firstChild = testName.firstChild;
		childValue = firstChild.nodeValue;
		if ("56,000,000" !== childValue) {
			return "hc_elementnormalize: #elementNormalizeAssert 'childValue' equals '" + childValue + "' not '" + "56,000,000" + "'";
		}
		return "hc_elementnormalize: OK";
	} catch (e) {
		return "hc_elementnormalize: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_elementnormalize2.xml" fleur="hc_elementnormalize2" native="hc_elementnormalize2"><Fleur>(function(){
	var success;
	try {
		var doc;
		var root;
		var elementList;
		var element;
		var firstChild;
		var secondChild;
		var childValue;
		var emptyText;
		var attrNode;
		var retval;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		root = doc.documentElement;
		emptyText = doc.createTextNode("");
		elementList = root.getElementsByTagName("acronym");
		element = elementList.item(0);
		attrNode = element.getAttributeNode("title");
		retval = attrNode.appendChild(emptyText);
		element.normalize();
		attrNode = element.getAttributeNode("title");
		firstChild = attrNode.firstChild;
		childValue = firstChild.nodeValue;
		if ("Yes" !== childValue) {
			return "hc_elementnormalize2: #firstChild 'childValue' equals '" + childValue + "' not '" + "Yes" + "'";
		}
		secondChild = firstChild.nextSibling;
		if (secondChild != null) {
			return "hc_elementnormalize2: #secondChildNull 'secondChild' equals '" + secondChild + "' not null";
		}
		return "hc_elementnormalize2: OK";
	} catch (e) {
		return "hc_elementnormalize2: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var root;
		var elementList;
		var element;
		var firstChild;
		var secondChild;
		var childValue;
		var emptyText;
		var attrNode;
		var retval;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		root = doc.documentElement;
		emptyText = doc.createTextNode("");
		elementList = root.getElementsByTagName("acronym");
		element = elementList.item(0);
		attrNode = element.getAttributeNode("title");
		retval = attrNode.appendChild(emptyText);
		element.normalize();
		attrNode = element.getAttributeNode("title");
		firstChild = attrNode.firstChild;
		childValue = firstChild.nodeValue;
		if ("Yes" !== childValue) {
			return "hc_elementnormalize2: #firstChild 'childValue' equals '" + childValue + "' not '" + "Yes" + "'";
		}
		secondChild = firstChild.nextSibling;
		if (secondChild != null) {
			return "hc_elementnormalize2: #secondChildNull 'secondChild' equals '" + secondChild + "' not null";
		}
		return "hc_elementnormalize2: OK";
	} catch (e) {
		return "hc_elementnormalize2: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_elementnotfounderr.xml" fleur="hc_elementnotfounderr" native="hc_elementnotfounderr"><Fleur>(function(){
	var success;
	try {
		var doc;
		var oldAttribute;
		var addressElementList;
		var testAddress;
		var attrAddress;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		addressElementList = doc.getElementsByTagName("acronym");
		testAddress = addressElementList.item(4);
		oldAttribute = doc.createAttribute("title");
		success = false;
		try {
			attrAddress = testAddress.removeAttributeNode(oldAttribute);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 8;
			}
		}
		if (!success) {
			return "hc_elementNotFoundErr: Exception NOT_FOUND_ERR expected";
		}
		return "hc_elementNotFoundErr: OK";
	} catch (e) {
		return "hc_elementNotFoundErr: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var oldAttribute;
		var addressElementList;
		var testAddress;
		var attrAddress;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		addressElementList = doc.getElementsByTagName("acronym");
		testAddress = addressElementList.item(4);
		oldAttribute = doc.createAttribute("title");
		success = false;
		try {
			attrAddress = testAddress.removeAttributeNode(oldAttribute);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 8;
			}
		}
		if (!success) {
			return "hc_elementNotFoundErr: Exception NOT_FOUND_ERR expected";
		}
		return "hc_elementNotFoundErr: OK";
	} catch (e) {
		return "hc_elementNotFoundErr: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_elementremoveattribute.xml" fleur="hc_elementremoveattribute" native="hc_elementremoveattribute"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var attrValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		testEmployee = elementList.item(3);
		testEmployee.removeAttribute("class");
		attrValue = testEmployee.getAttribute("class");
		if ("" !== attrValue) {
			return "hc_elementRemoveAttribute: #attrValue 'attrValue' equals '" + attrValue + "' not '" + "" + "'";
		}
		return "hc_elementRemoveAttribute: OK";
	} catch (e) {
		return "hc_elementRemoveAttribute: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var attrValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		testEmployee = elementList.item(3);
		testEmployee.removeAttribute("class");
		attrValue = testEmployee.getAttribute("class");
		if ("" !== attrValue) {
			return "hc_elementRemoveAttribute: #attrValue 'attrValue' equals '" + attrValue + "' not '" + "" + "'";
		}
		return "hc_elementRemoveAttribute: OK";
	} catch (e) {
		return "hc_elementRemoveAttribute: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_elementremoveattributeaftercreate.xml" fleur="hc_elementremoveattributeaftercreate" native="hc_elementremoveattributeaftercreate"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var newAttribute;
		var attributes;
		var districtAttr;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		testEmployee = elementList.item(2);
		newAttribute = doc.createAttribute("lang");
		districtAttr = testEmployee.setAttributeNode(newAttribute);
		districtAttr = testEmployee.removeAttributeNode(newAttribute);
		attributes = testEmployee.attributes;
		districtAttr = attributes.getNamedItem("lang");
		if (districtAttr != null) {
			return "hc_elementRemoveAttributeAfterCreate: #removed_item_null 'districtAttr' equals '" + districtAttr + "' not null";
		}
		return "hc_elementRemoveAttributeAfterCreate: OK";
	} catch (e) {
		return "hc_elementRemoveAttributeAfterCreate: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var newAttribute;
		var attributes;
		var districtAttr;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		testEmployee = elementList.item(2);
		newAttribute = doc.createAttribute("lang");
		districtAttr = testEmployee.setAttributeNode(newAttribute);
		districtAttr = testEmployee.removeAttributeNode(newAttribute);
		attributes = testEmployee.attributes;
		districtAttr = attributes.getNamedItem("lang");
		if (districtAttr != null) {
			return "hc_elementRemoveAttributeAfterCreate: #removed_item_null 'districtAttr' equals '" + districtAttr + "' not null";
		}
		return "hc_elementRemoveAttributeAfterCreate: OK";
	} catch (e) {
		return "hc_elementRemoveAttributeAfterCreate: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_elementremoveattributenode.xml" fleur="hc_elementremoveattributenode" native="hc_elementremoveattributenode"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var streetAttr;
		var removedAttr;
		var removedValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		testEmployee = elementList.item(2);
		streetAttr = testEmployee.getAttributeNode("class");
		removedAttr = testEmployee.removeAttributeNode(streetAttr);
		if (removedAttr == null) {
			return "hc_elementRemoveAttributeNode: #removedAttrNotNull 'removedAttr' is null";
		}
		removedValue = removedAttr.value;
		if ("No" !== removedValue) {
			return "hc_elementRemoveAttributeNode: #elementRemoveAttributeNodeAssert 'removedValue' equals '" + removedValue + "' not '" + "No" + "'";
		}
		return "hc_elementRemoveAttributeNode: OK";
	} catch (e) {
		return "hc_elementRemoveAttributeNode: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var streetAttr;
		var removedAttr;
		var removedValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		testEmployee = elementList.item(2);
		streetAttr = testEmployee.getAttributeNode("class");
		removedAttr = testEmployee.removeAttributeNode(streetAttr);
		if (removedAttr == null) {
			return "hc_elementRemoveAttributeNode: #removedAttrNotNull 'removedAttr' is null";
		}
		removedValue = removedAttr.value;
		if ("No" !== removedValue) {
			return "hc_elementRemoveAttributeNode: #elementRemoveAttributeNodeAssert 'removedValue' equals '" + removedValue + "' not '" + "No" + "'";
		}
		return "hc_elementRemoveAttributeNode: OK";
	} catch (e) {
		return "hc_elementRemoveAttributeNode: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_elementreplaceattributewithself.xml" fleur="hc_elementreplaceattributewithself" native="hc_elementreplaceattributewithself"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var streetAttr;
		var replacedAttr;
		var value;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		testEmployee = elementList.item(2);
		streetAttr = testEmployee.getAttributeNode("class");
		replacedAttr = testEmployee.setAttributeNode(streetAttr);
		assertSame("replacedAttr",streetAttr,replacedAttr);
		return "hc_elementReplaceAttributeWithSelf: OK";
	} catch (e) {
		return "hc_elementReplaceAttributeWithSelf: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var streetAttr;
		var replacedAttr;
		var value;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		testEmployee = elementList.item(2);
		streetAttr = testEmployee.getAttributeNode("class");
		replacedAttr = testEmployee.setAttributeNode(streetAttr);
		assertSame("replacedAttr",streetAttr,replacedAttr);
		return "hc_elementReplaceAttributeWithSelf: OK";
	} catch (e) {
		return "hc_elementReplaceAttributeWithSelf: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_elementreplaceexistingattribute.xml" fleur="hc_elementreplaceexistingattribute" native="hc_elementreplaceexistingattribute"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var newAttribute;
		var strong;
		var setAttr;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		testEmployee = elementList.item(2);
		newAttribute = doc.createAttribute("class");
		setAttr = testEmployee.setAttributeNode(newAttribute);
		strong = testEmployee.getAttribute("class");
		if ("" !== strong) {
			return "hc_elementReplaceExistingAttribute: #replacedValue 'strong' equals '" + strong + "' not '" + "" + "'";
		}
		return "hc_elementReplaceExistingAttribute: OK";
	} catch (e) {
		return "hc_elementReplaceExistingAttribute: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var newAttribute;
		var strong;
		var setAttr;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		testEmployee = elementList.item(2);
		newAttribute = doc.createAttribute("class");
		setAttr = testEmployee.setAttributeNode(newAttribute);
		strong = testEmployee.getAttribute("class");
		if ("" !== strong) {
			return "hc_elementReplaceExistingAttribute: #replacedValue 'strong' equals '" + strong + "' not '" + "" + "'";
		}
		return "hc_elementReplaceExistingAttribute: OK";
	} catch (e) {
		return "hc_elementReplaceExistingAttribute: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_elementreplaceexistingattributegevalue.xml" fleur="hc_elementreplaceexistingattributegevalue" native="hc_elementreplaceexistingattributegevalue"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var newAttribute;
		var streetAttr;
		var value;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		testEmployee = elementList.item(2);
		newAttribute = doc.createAttribute("class");
		streetAttr = testEmployee.setAttributeNode(newAttribute);
		if (streetAttr == null) {
			return "hc_elementReplaceExistingAttributeGeValue: #previousAttrNotNull 'streetAttr' is null";
		}
		value = streetAttr.value;
		if ("No" !== value) {
			return "hc_elementReplaceExistingAttributeGeValue: #previousAttrValue 'value' equals '" + value + "' not '" + "No" + "'";
		}
		return "hc_elementReplaceExistingAttributeGeValue: OK";
	} catch (e) {
		return "hc_elementReplaceExistingAttributeGeValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var newAttribute;
		var streetAttr;
		var value;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		testEmployee = elementList.item(2);
		newAttribute = doc.createAttribute("class");
		streetAttr = testEmployee.setAttributeNode(newAttribute);
		if (streetAttr == null) {
			return "hc_elementReplaceExistingAttributeGeValue: #previousAttrNotNull 'streetAttr' is null";
		}
		value = streetAttr.value;
		if ("No" !== value) {
			return "hc_elementReplaceExistingAttributeGeValue: #previousAttrValue 'value' equals '" + value + "' not '" + "No" + "'";
		}
		return "hc_elementReplaceExistingAttributeGeValue: OK";
	} catch (e) {
		return "hc_elementReplaceExistingAttributeGeValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_elementretrieveallattributes.xml" fleur="hc_elementretrieveallattributes" native="hc_elementretrieveallattributes"><Fleur>(function(){
	var success;
	try {
		var doc;
		var addressList;
		var testAddress;
		var attributes;
		var attribute;
		var attributeName;
		var actual = new Array();

		htmlExpected = new Array();
		htmlExpected[0] = "title";
		expected = new Array();
		expected[0] = "title";
		expected[1] = "dir";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		addressList = doc.getElementsByTagName("acronym");
		testAddress = addressList.item(0);
		attributes = testAddress.attributes;
		for (var index_id0x14c121f0 = 0; index_id0x14c121f0 &lt; attributes.length; index_id0x14c121f0++) {
			attribute = attributes.item(index_id0x14c121f0);
			attributeName = attribute.nodeName;
actual[actual.length] = attributeName;
		}
		if (("text/xml" === "text/html")) {
			if (htmlExpected.join("|").toLowerCase() !== actual.join("|").toLowerCase()) {
				return "hc_elementretrieveallattributes: #htmlAttributeNames 'actual' equals '" + actual.join("|").toLowerCase() + "' not '" + htmlExpected.join("|").toLowerCase() + "'";
			}
		} else {
			if (expected.join("|").toLowerCase() !== actual.join("|").toLowerCase()) {
				return "hc_elementretrieveallattributes: #attributeNames 'actual' equals '" + actual.join("|").toLowerCase() + "' not '" + expected.join("|").toLowerCase() + "'";
			}
		}
		return "hc_elementretrieveallattributes: OK";
	} catch (e) {
		return "hc_elementretrieveallattributes: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var addressList;
		var testAddress;
		var attributes;
		var attribute;
		var attributeName;
		var actual = new Array();

		htmlExpected = new Array();
		htmlExpected[0] = "title";
		expected = new Array();
		expected[0] = "title";
		expected[1] = "dir";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		addressList = doc.getElementsByTagName("acronym");
		testAddress = addressList.item(0);
		attributes = testAddress.attributes;
		for (var index_id0x14c121f0 = 0; index_id0x14c121f0 &lt; attributes.length; index_id0x14c121f0++) {
			attribute = attributes.item(index_id0x14c121f0);
			attributeName = attribute.nodeName;
actual[actual.length] = attributeName;
		}
		if (("text/xml" === "text/html")) {
			if (htmlExpected.join("|").toLowerCase() !== actual.join("|").toLowerCase()) {
				return "hc_elementretrieveallattributes: #htmlAttributeNames 'actual' equals '" + actual.join("|").toLowerCase() + "' not '" + htmlExpected.join("|").toLowerCase() + "'";
			}
		} else {
			if (expected.join("|").toLowerCase() !== actual.join("|").toLowerCase()) {
				return "hc_elementretrieveallattributes: #attributeNames 'actual' equals '" + actual.join("|").toLowerCase() + "' not '" + expected.join("|").toLowerCase() + "'";
			}
		}
		return "hc_elementretrieveallattributes: OK";
	} catch (e) {
		return "hc_elementretrieveallattributes: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_elementretrieveattrvalue.xml" fleur="hc_elementretrieveattrvalue" native="hc_elementretrieveattrvalue"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testAddress;
		var attrValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		testAddress = elementList.item(2);
		attrValue = testAddress.getAttribute("class");
		if ("No" !== attrValue) {
			return "hc_elementRetrieveAttrValue: #attrValue 'attrValue' equals '" + attrValue + "' not '" + "No" + "'";
		}
		return "hc_elementRetrieveAttrValue: OK";
	} catch (e) {
		return "hc_elementRetrieveAttrValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testAddress;
		var attrValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		testAddress = elementList.item(2);
		attrValue = testAddress.getAttribute("class");
		if ("No" !== attrValue) {
			return "hc_elementRetrieveAttrValue: #attrValue 'attrValue' equals '" + attrValue + "' not '" + "No" + "'";
		}
		return "hc_elementRetrieveAttrValue: OK";
	} catch (e) {
		return "hc_elementRetrieveAttrValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_elementretrievetagname.xml" fleur="hc_elementretrievetagname" native="hc_elementretrievetagname"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var strong;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("code");
		testEmployee = elementList.item(1);
		strong = testEmployee.nodeName;
		if ("code" !== strong) {
			return "hc_elementRetrieveTagName: #nodename 'strong' equals '" + strong + "' not '" + "code" + "'";
		}
		strong = testEmployee.tagName;
		if ("code" !== strong) {
			return "hc_elementRetrieveTagName: #tagname 'strong' equals '" + strong + "' not '" + "code" + "'";
		}
		return "hc_elementRetrieveTagName: OK";
	} catch (e) {
		return "hc_elementRetrieveTagName: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var strong;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("code");
		testEmployee = elementList.item(1);
		strong = testEmployee.nodeName;
		if ("code" !== strong) {
			return "hc_elementRetrieveTagName: #nodename 'strong' equals '" + strong + "' not '" + "code" + "'";
		}
		strong = testEmployee.tagName;
		if ("code" !== strong) {
			return "hc_elementRetrieveTagName: #tagname 'strong' equals '" + strong + "' not '" + "code" + "'";
		}
		return "hc_elementRetrieveTagName: OK";
	} catch (e) {
		return "hc_elementRetrieveTagName: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_elementsetattributenodenull.xml" fleur="hc_elementsetattributenodenull" native="hc_elementsetattributenodenull"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var newAttribute;
		var districtAttr;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		testEmployee = elementList.item(2);
		newAttribute = doc.createAttribute("lang");
		districtAttr = testEmployee.setAttributeNode(newAttribute);
		if (districtAttr != null) {
			return "hc_elementSetAttributeNodeNull: #elementSetAttributeNodeNullAssert 'districtAttr' equals '" + districtAttr + "' not null";
		}
		return "hc_elementSetAttributeNodeNull: OK";
	} catch (e) {
		return "hc_elementSetAttributeNodeNull: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var newAttribute;
		var districtAttr;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		testEmployee = elementList.item(2);
		newAttribute = doc.createAttribute("lang");
		districtAttr = testEmployee.setAttributeNode(newAttribute);
		if (districtAttr != null) {
			return "hc_elementSetAttributeNodeNull: #elementSetAttributeNodeNullAssert 'districtAttr' equals '" + districtAttr + "' not null";
		}
		return "hc_elementSetAttributeNodeNull: OK";
	} catch (e) {
		return "hc_elementSetAttributeNodeNull: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_elementwrongdocumenterr.xml" fleur="hc_elementwrongdocumenterr" native="hc_elementwrongdocumenterr"><Fleur>(function(){
	var success;
	try {
		var doc1;
		var doc2;
		var newAttribute;
		var addressElementList;
		var testAddress;
		var attrAddress;
		var doc1Req = new XMLHttpRequest();
		doc1Req.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		doc1Req.send();
		doc1 = new Fleur.DOMParser().parseFromString(doc1Req.responseText, "text/xml");
		var doc2Req = new XMLHttpRequest();
		doc2Req.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		doc2Req.send();
		doc2 = new Fleur.DOMParser().parseFromString(doc2Req.responseText, "text/xml");
		newAttribute = doc2.createAttribute("newAttribute");
		addressElementList = doc1.getElementsByTagName("acronym");
		testAddress = addressElementList.item(4);
		success = false;
		try {
			attrAddress = testAddress.setAttributeNode(newAttribute);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 4;
			}
		}
		if (!success) {
			return "hc_elementWrongDocumentErr: Exception WRONG_DOCUMENT_ERR expected";
		}
		return "hc_elementWrongDocumentErr: OK";
	} catch (e) {
		return "hc_elementWrongDocumentErr: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc1;
		var doc2;
		var newAttribute;
		var addressElementList;
		var testAddress;
		var attrAddress;
		var doc1Req = new XMLHttpRequest();
		doc1Req.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		doc1Req.send();
		doc1 = new DOMParser().parseFromString(doc1Req.responseText, "text/xml");
		var doc2Req = new XMLHttpRequest();
		doc2Req.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		doc2Req.send();
		doc2 = new DOMParser().parseFromString(doc2Req.responseText, "text/xml");
		newAttribute = doc2.createAttribute("newAttribute");
		addressElementList = doc1.getElementsByTagName("acronym");
		testAddress = addressElementList.item(4);
		success = false;
		try {
			attrAddress = testAddress.setAttributeNode(newAttribute);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 4;
			}
		}
		if (!success) {
			return "hc_elementWrongDocumentErr: Exception WRONG_DOCUMENT_ERR expected";
		}
		return "hc_elementWrongDocumentErr: OK";
	} catch (e) {
		return "hc_elementWrongDocumentErr: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_entitiesremovenameditem1.xml" fleur="hc_entitiesremovenameditem1" native="hc_entitiesremovenameditem1"><Fleur>(function(){
	var success;
	try {
				var doc;
		var entities;
		var docType;
		var retval;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		if (!(("text/xml" === "text/html"))) {
			if (docType == null) {
				return "hc_entitiesremovenameditem1: #docTypeNotNull 'docType' is null";
			}
			entities = docType.entities;
			if (entities == null) {
				return "hc_entitiesremovenameditem1: #entitiesNotNull 'entities' is null";
			}
			success = false;
			try {
				retval = entities.removeNamedItem("alpha");
			} catch (ex) {
				if (typeof ex.code != 'undefined') {
					success = ex.code === 7;
				}
			}
			if (!success) {
				return "hc_entitiesremovenameditem1: Exception NO_MODIFICATION_ALLOWED_ERR expected";
			}
		}
		return "hc_entitiesremovenameditem1: OK";
	} catch (e) {
		return "hc_entitiesremovenameditem1: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
				var doc;
		var entities;
		var docType;
		var retval;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		if (!(("text/xml" === "text/html"))) {
			if (docType == null) {
				return "hc_entitiesremovenameditem1: #docTypeNotNull 'docType' is null";
			}
			entities = docType.entities;
			if (entities == null) {
				return "hc_entitiesremovenameditem1: #entitiesNotNull 'entities' is null";
			}
			success = false;
			try {
				retval = entities.removeNamedItem("alpha");
			} catch (ex) {
				if (typeof ex.code != 'undefined') {
					success = ex.code === 7;
				}
			}
			if (!success) {
				return "hc_entitiesremovenameditem1: Exception NO_MODIFICATION_ALLOWED_ERR expected";
			}
		}
		return "hc_entitiesremovenameditem1: OK";
	} catch (e) {
		return "hc_entitiesremovenameditem1: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_entitiessetnameditem1.xml" fleur="hc_entitiessetnameditem1" native="hc_entitiessetnameditem1"><Fleur>(function(){
	var success;
	try {
				var doc;
		var entities;
		var docType;
		var retval;
		var elem;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		if (!(("text/xml" === "text/html"))) {
			if (docType == null) {
				return "hc_entitiessetnameditem1: #docTypeNotNull 'docType' is null";
			}
			entities = docType.entities;
			if (entities == null) {
				return "hc_entitiessetnameditem1: #entitiesNotNull 'entities' is null";
			}
			elem = doc.createElement("br");
			try {
				retval = entities.setNamedItem(elem);
				fail("throw_HIER_OR_NO_MOD_ERR");
			} catch (ex) {
				if (typeof(ex.code) != 'undefined') {      
					switch (ex.code) {
						case 	/* HIERARCHY_REQUEST_ERR */ 3 :
							break;
						case 	/* NO_MODIFICATION_ALLOWED_ERR */ 7 :
							break;
						default:
							throw ex;
					}
				} else { 
					throw ex;
				}
			}
		}
		return "hc_entitiessetnameditem1: OK";
	} catch (e) {
		return "hc_entitiessetnameditem1: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
				var doc;
		var entities;
		var docType;
		var retval;
		var elem;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		if (!(("text/xml" === "text/html"))) {
			if (docType == null) {
				return "hc_entitiessetnameditem1: #docTypeNotNull 'docType' is null";
			}
			entities = docType.entities;
			if (entities == null) {
				return "hc_entitiessetnameditem1: #entitiesNotNull 'entities' is null";
			}
			elem = doc.createElement("br");
			try {
				retval = entities.setNamedItem(elem);
				fail("throw_HIER_OR_NO_MOD_ERR");
			} catch (ex) {
				if (typeof(ex.code) != 'undefined') {      
					switch (ex.code) {
						case 	/* HIERARCHY_REQUEST_ERR */ 3 :
							break;
						case 	/* NO_MODIFICATION_ALLOWED_ERR */ 7 :
							break;
						default:
							throw ex;
					}
				} else { 
					throw ex;
				}
			}
		}
		return "hc_entitiessetnameditem1: OK";
	} catch (e) {
		return "hc_entitiessetnameditem1: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_namednodemapchildnoderange.xml" fleur="hc_namednodemapchildnoderange" native="hc_namednodemapchildnoderange"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var attributes;
		var child;
		var strong;
		var length;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		testEmployee = elementList.item(2);
		attributes = testEmployee.attributes;
		length = attributes.length;
		if (("text/xml" === "text/html")) {
			if (2 !== length) {
				return "hc_namednodemapchildnoderange: #htmlLength 'length' equals '" + length + "' not '" + 2 + "'";
			}
		} else {
			if (3 !== length) {
				return "hc_namednodemapchildnoderange: #length 'length' equals '" + length + "' not '" + 3 + "'";
			}
			child = attributes.item(2);
			if (child == null) {
				return "hc_namednodemapchildnoderange: #attr2 'child' is null";
			}
		}
		child = attributes.item(0);
		if (child == null) {
			return "hc_namednodemapchildnoderange: #attr0 'child' is null";
		}
		child = attributes.item(1);
		if (child == null) {
			return "hc_namednodemapchildnoderange: #attr1 'child' is null";
		}
		child = attributes.item(3);
		if (child != null) {
			return "hc_namednodemapchildnoderange: #attr3 'child' equals '" + child + "' not null";
		}
		return "hc_namednodemapchildnoderange: OK";
	} catch (e) {
		return "hc_namednodemapchildnoderange: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var attributes;
		var child;
		var strong;
		var length;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		testEmployee = elementList.item(2);
		attributes = testEmployee.attributes;
		length = attributes.length;
		if (("text/xml" === "text/html")) {
			if (2 !== length) {
				return "hc_namednodemapchildnoderange: #htmlLength 'length' equals '" + length + "' not '" + 2 + "'";
			}
		} else {
			if (3 !== length) {
				return "hc_namednodemapchildnoderange: #length 'length' equals '" + length + "' not '" + 3 + "'";
			}
			child = attributes.item(2);
			if (child == null) {
				return "hc_namednodemapchildnoderange: #attr2 'child' is null";
			}
		}
		child = attributes.item(0);
		if (child == null) {
			return "hc_namednodemapchildnoderange: #attr0 'child' is null";
		}
		child = attributes.item(1);
		if (child == null) {
			return "hc_namednodemapchildnoderange: #attr1 'child' is null";
		}
		child = attributes.item(3);
		if (child != null) {
			return "hc_namednodemapchildnoderange: #attr3 'child' equals '" + child + "' not null";
		}
		return "hc_namednodemapchildnoderange: OK";
	} catch (e) {
		return "hc_namednodemapchildnoderange: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_namednodemapgetnameditem.xml" fleur="hc_namednodemapgetnameditem" native="hc_namednodemapgetnameditem"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var attributes;
		var domesticAttr;
		var attrName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		testEmployee = elementList.item(1);
		attributes = testEmployee.attributes;
		domesticAttr = attributes.getNamedItem("title");
		attrName = domesticAttr.nodeName;
		if ("title" !== attrName) {
			return "hc_namednodemapgetnameditem: #nodeName 'attrName' equals '" + attrName + "' not '" + "title" + "'";
		}
		return "hc_namednodemapgetnameditem: OK";
	} catch (e) {
		return "hc_namednodemapgetnameditem: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var attributes;
		var domesticAttr;
		var attrName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		testEmployee = elementList.item(1);
		attributes = testEmployee.attributes;
		domesticAttr = attributes.getNamedItem("title");
		attrName = domesticAttr.nodeName;
		if ("title" !== attrName) {
			return "hc_namednodemapgetnameditem: #nodeName 'attrName' equals '" + attrName + "' not '" + "title" + "'";
		}
		return "hc_namednodemapgetnameditem: OK";
	} catch (e) {
		return "hc_namednodemapgetnameditem: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_namednodemapinuseattributeerr.xml" fleur="hc_namednodemapinuseattributeerr" native="hc_namednodemapinuseattributeerr"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var firstNode;
		var testNode;
		var attributes;
		var domesticAttr;
		var setAttr;
		var setNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		firstNode = elementList.item(0);
		domesticAttr = doc.createAttribute("title");
		domesticAttr.value = "Yα";
		setAttr = firstNode.setAttributeNode(domesticAttr);
		elementList = doc.getElementsByTagName("acronym");
		testNode = elementList.item(2);
		attributes = testNode.attributes;
		success = false;
		try {
			setNode = attributes.setNamedItem(domesticAttr);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 10;
			}
		}
		if (!success) {
			return "hc_namedNodeMapInUseAttributeErr: Exception INUSE_ATTRIBUTE_ERR expected";
		}
		return "hc_namedNodeMapInUseAttributeErr: OK";
	} catch (e) {
		return "hc_namedNodeMapInUseAttributeErr: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var firstNode;
		var testNode;
		var attributes;
		var domesticAttr;
		var setAttr;
		var setNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		firstNode = elementList.item(0);
		domesticAttr = doc.createAttribute("title");
		domesticAttr.value = "Yα";
		setAttr = firstNode.setAttributeNode(domesticAttr);
		elementList = doc.getElementsByTagName("acronym");
		testNode = elementList.item(2);
		attributes = testNode.attributes;
		success = false;
		try {
			setNode = attributes.setNamedItem(domesticAttr);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 10;
			}
		}
		if (!success) {
			return "hc_namedNodeMapInUseAttributeErr: Exception INUSE_ATTRIBUTE_ERR expected";
		}
		return "hc_namedNodeMapInUseAttributeErr: OK";
	} catch (e) {
		return "hc_namedNodeMapInUseAttributeErr: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_namednodemapnotfounderr.xml" fleur="hc_namednodemapnotfounderr" native="hc_namednodemapnotfounderr"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var attributes;
		var removedNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		testEmployee = elementList.item(2);
		attributes = testEmployee.attributes;
		success = false;
		try {
			removedNode = attributes.removeNamedItem("lang");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 8;
			}
		}
		if (!success) {
			return "hc_namednodemapNotFoundErr: Exception NOT_FOUND_ERR expected";
		}
		return "hc_namednodemapNotFoundErr: OK";
	} catch (e) {
		return "hc_namednodemapNotFoundErr: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var attributes;
		var removedNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		testEmployee = elementList.item(2);
		attributes = testEmployee.attributes;
		success = false;
		try {
			removedNode = attributes.removeNamedItem("lang");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 8;
			}
		}
		if (!success) {
			return "hc_namednodemapNotFoundErr: Exception NOT_FOUND_ERR expected";
		}
		return "hc_namednodemapNotFoundErr: OK";
	} catch (e) {
		return "hc_namednodemapNotFoundErr: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_namednodemapnumberofnodes.xml" fleur="hc_namednodemapnumberofnodes" native="hc_namednodemapnumberofnodes"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var attributes;
		var length;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		testEmployee = elementList.item(2);
		attributes = testEmployee.attributes;
		length = attributes.length;
		if (("text/xml" === "text/html")) {
			if (2 !== length) {
				return "hc_namednodemapnumberofnodes: #htmlLength 'length' equals '" + length + "' not '" + 2 + "'";
			}
		} else {
			if (3 !== length) {
				return "hc_namednodemapnumberofnodes: #length 'length' equals '" + length + "' not '" + 3 + "'";
			}
		}
		return "hc_namednodemapnumberofnodes: OK";
	} catch (e) {
		return "hc_namednodemapnumberofnodes: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var attributes;
		var length;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		testEmployee = elementList.item(2);
		attributes = testEmployee.attributes;
		length = attributes.length;
		if (("text/xml" === "text/html")) {
			if (2 !== length) {
				return "hc_namednodemapnumberofnodes: #htmlLength 'length' equals '" + length + "' not '" + 2 + "'";
			}
		} else {
			if (3 !== length) {
				return "hc_namednodemapnumberofnodes: #length 'length' equals '" + length + "' not '" + 3 + "'";
			}
		}
		return "hc_namednodemapnumberofnodes: OK";
	} catch (e) {
		return "hc_namednodemapnumberofnodes: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_namednodemapremovenameditem.xml" fleur="hc_namednodemapremovenameditem" native="hc_namednodemapremovenameditem"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var newAttribute;
		var testAddress;
		var attributes;
		var streetAttr;
		var specified;
		var removedNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		testAddress = elementList.item(2);
		attributes = testAddress.attributes;
		removedNode = attributes.removeNamedItem("class");
		streetAttr = attributes.getNamedItem("class");
		if (streetAttr != null) {
			return "hc_namednodemapRemoveNamedItem: #isnull 'streetAttr' equals '" + streetAttr + "' not null";
		}
		return "hc_namednodemapRemoveNamedItem: OK";
	} catch (e) {
		return "hc_namednodemapRemoveNamedItem: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var newAttribute;
		var testAddress;
		var attributes;
		var streetAttr;
		var specified;
		var removedNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		testAddress = elementList.item(2);
		attributes = testAddress.attributes;
		removedNode = attributes.removeNamedItem("class");
		streetAttr = attributes.getNamedItem("class");
		if (streetAttr != null) {
			return "hc_namednodemapRemoveNamedItem: #isnull 'streetAttr' equals '" + streetAttr + "' not null";
		}
		return "hc_namednodemapRemoveNamedItem: OK";
	} catch (e) {
		return "hc_namednodemapRemoveNamedItem: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_namednodemapreturnattrnode.xml" fleur="hc_namednodemapreturnattrnode" native="hc_namednodemapreturnattrnode"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var attributes;
		var streetAttr;
		var attrName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		testEmployee = elementList.item(1);
		attributes = testEmployee.attributes;
		streetAttr = attributes.getNamedItem("class");
		assertInstanceOf("typeAssert","Attr",streetAttr);
		attrName = streetAttr.nodeName;
		if ("class" !== attrName) {
			return "hc_namednodemapreturnattrnode: #nodeName 'attrName' equals '" + attrName + "' not '" + "class" + "'";
		}
		attrName = streetAttr.name;
		if ("class" !== attrName) {
			return "hc_namednodemapreturnattrnode: #name 'attrName' equals '" + attrName + "' not '" + "class" + "'";
		}
		return "hc_namednodemapreturnattrnode: OK";
	} catch (e) {
		return "hc_namednodemapreturnattrnode: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var attributes;
		var streetAttr;
		var attrName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		testEmployee = elementList.item(1);
		attributes = testEmployee.attributes;
		streetAttr = attributes.getNamedItem("class");
		assertInstanceOf("typeAssert","Attr",streetAttr);
		attrName = streetAttr.nodeName;
		if ("class" !== attrName) {
			return "hc_namednodemapreturnattrnode: #nodeName 'attrName' equals '" + attrName + "' not '" + "class" + "'";
		}
		attrName = streetAttr.name;
		if ("class" !== attrName) {
			return "hc_namednodemapreturnattrnode: #name 'attrName' equals '" + attrName + "' not '" + "class" + "'";
		}
		return "hc_namednodemapreturnattrnode: OK";
	} catch (e) {
		return "hc_namednodemapreturnattrnode: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_namednodemapreturnfirstitem.xml" fleur="hc_namednodemapreturnfirstitem" native="hc_namednodemapreturnfirstitem"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testAddress;
		var attributes;
		var child;
		var nodeName;
		htmlExpected = new Array();
		htmlExpected[0] = "title";
		htmlExpected[1] = "class";
		expected = new Array();
		expected[0] = "title";
		expected[1] = "class";
		expected[2] = "dir";
		var actual = new Array();

		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		testAddress = elementList.item(1);
		attributes = testAddress.attributes;
		for (var index_id0x16683470 = 0; index_id0x16683470 &lt; attributes.length; index_id0x16683470++) {
			child = attributes.item(index_id0x16683470);
			nodeName = child.nodeName;
actual[actual.length] = nodeName;
		}
		if (("text/xml" === "text/html")) {
			if (htmlExpected.join("|").toLowerCase() !== actual.join("|").toLowerCase()) {
				return "hc_namednodemapReturnFirstItem: #attrName_html 'actual' equals '" + actual.join("|").toLowerCase() + "' not '" + htmlExpected.join("|").toLowerCase() + "'";
			}
		} else {
			if (expected.join("|") !== actual.join("|")) {
				return "hc_namednodemapReturnFirstItem: #attrName 'actual' equals '" + actual.join("|") + "' not '" + expected.join("|") + "'";
			}
		}
		return "hc_namednodemapReturnFirstItem: OK";
	} catch (e) {
		return "hc_namednodemapReturnFirstItem: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testAddress;
		var attributes;
		var child;
		var nodeName;
		htmlExpected = new Array();
		htmlExpected[0] = "title";
		htmlExpected[1] = "class";
		expected = new Array();
		expected[0] = "title";
		expected[1] = "class";
		expected[2] = "dir";
		var actual = new Array();

		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		testAddress = elementList.item(1);
		attributes = testAddress.attributes;
		for (var index_id0x16683470 = 0; index_id0x16683470 &lt; attributes.length; index_id0x16683470++) {
			child = attributes.item(index_id0x16683470);
			nodeName = child.nodeName;
actual[actual.length] = nodeName;
		}
		if (("text/xml" === "text/html")) {
			if (htmlExpected.join("|").toLowerCase() !== actual.join("|").toLowerCase()) {
				return "hc_namednodemapReturnFirstItem: #attrName_html 'actual' equals '" + actual.join("|").toLowerCase() + "' not '" + htmlExpected.join("|").toLowerCase() + "'";
			}
		} else {
			if (expected.join("|") !== actual.join("|")) {
				return "hc_namednodemapReturnFirstItem: #attrName 'actual' equals '" + actual.join("|") + "' not '" + expected.join("|") + "'";
			}
		}
		return "hc_namednodemapReturnFirstItem: OK";
	} catch (e) {
		return "hc_namednodemapReturnFirstItem: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_namednodemapreturnlastitem.xml" fleur="hc_namednodemapreturnlastitem" native="hc_namednodemapreturnlastitem"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var attributes;
		var child;
		var nodeName;
		htmlExpected = new Array();
		htmlExpected[0] = "title";
		htmlExpected[1] = "class";
		expected = new Array();
		expected[0] = "title";
		expected[1] = "class";
		expected[2] = "dir";
		var actual = new Array();

		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		testEmployee = elementList.item(1);
		attributes = testEmployee.attributes;
		for (var index_id0x16721a10 = 0; index_id0x16721a10 &lt; attributes.length; index_id0x16721a10++) {
			child = attributes.item(index_id0x16721a10);
			nodeName = child.nodeName;
actual[actual.length] = nodeName;
		}
		if (("text/xml" === "text/html")) {
			if (htmlExpected.join("|").toLowerCase() !== actual.join("|").toLowerCase()) {
				return "hc_namednodemapReturnLastItem: #attrName_html 'actual' equals '" + actual.join("|").toLowerCase() + "' not '" + htmlExpected.join("|").toLowerCase() + "'";
			}
		} else {
			if (expected.join("|") !== actual.join("|")) {
				return "hc_namednodemapReturnLastItem: #attrName 'actual' equals '" + actual.join("|") + "' not '" + expected.join("|") + "'";
			}
		}
		return "hc_namednodemapReturnLastItem: OK";
	} catch (e) {
		return "hc_namednodemapReturnLastItem: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var attributes;
		var child;
		var nodeName;
		htmlExpected = new Array();
		htmlExpected[0] = "title";
		htmlExpected[1] = "class";
		expected = new Array();
		expected[0] = "title";
		expected[1] = "class";
		expected[2] = "dir";
		var actual = new Array();

		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		testEmployee = elementList.item(1);
		attributes = testEmployee.attributes;
		for (var index_id0x16721a10 = 0; index_id0x16721a10 &lt; attributes.length; index_id0x16721a10++) {
			child = attributes.item(index_id0x16721a10);
			nodeName = child.nodeName;
actual[actual.length] = nodeName;
		}
		if (("text/xml" === "text/html")) {
			if (htmlExpected.join("|").toLowerCase() !== actual.join("|").toLowerCase()) {
				return "hc_namednodemapReturnLastItem: #attrName_html 'actual' equals '" + actual.join("|").toLowerCase() + "' not '" + htmlExpected.join("|").toLowerCase() + "'";
			}
		} else {
			if (expected.join("|") !== actual.join("|")) {
				return "hc_namednodemapReturnLastItem: #attrName 'actual' equals '" + actual.join("|") + "' not '" + expected.join("|") + "'";
			}
		}
		return "hc_namednodemapReturnLastItem: OK";
	} catch (e) {
		return "hc_namednodemapReturnLastItem: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_namednodemapreturnnull.xml" fleur="hc_namednodemapreturnnull" native="hc_namednodemapreturnnull"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var attributes;
		var districtNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		testEmployee = elementList.item(1);
		attributes = testEmployee.attributes;
		districtNode = attributes.getNamedItem("lang");
		if (districtNode != null) {
			return "hc_namednodemapReturnNull: #langAttrNull 'districtNode' equals '" + districtNode + "' not null";
		}
		return "hc_namednodemapReturnNull: OK";
	} catch (e) {
		return "hc_namednodemapReturnNull: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var attributes;
		var districtNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		testEmployee = elementList.item(1);
		attributes = testEmployee.attributes;
		districtNode = attributes.getNamedItem("lang");
		if (districtNode != null) {
			return "hc_namednodemapReturnNull: #langAttrNull 'districtNode' equals '" + districtNode + "' not null";
		}
		return "hc_namednodemapReturnNull: OK";
	} catch (e) {
		return "hc_namednodemapReturnNull: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_namednodemapsetnameditem.xml" fleur="hc_namednodemapsetnameditem" native="hc_namednodemapsetnameditem"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var newAttribute;
		var testAddress;
		var attributes;
		var districtNode;
		var attrName;
		var setNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		testAddress = elementList.item(1);
		newAttribute = doc.createAttribute("lang");
		attributes = testAddress.attributes;
		setNode = attributes.setNamedItem(newAttribute);
		districtNode = attributes.getNamedItem("lang");
		attrName = districtNode.nodeName;
		if ("lang" !== attrName) {
			return "hc_namednodemapsetnameditem: #nodeName 'attrName' equals '" + attrName + "' not '" + "lang" + "'";
		}
		return "hc_namednodemapsetnameditem: OK";
	} catch (e) {
		return "hc_namednodemapsetnameditem: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var newAttribute;
		var testAddress;
		var attributes;
		var districtNode;
		var attrName;
		var setNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		testAddress = elementList.item(1);
		newAttribute = doc.createAttribute("lang");
		attributes = testAddress.attributes;
		setNode = attributes.setNamedItem(newAttribute);
		districtNode = attributes.getNamedItem("lang");
		attrName = districtNode.nodeName;
		if ("lang" !== attrName) {
			return "hc_namednodemapsetnameditem: #nodeName 'attrName' equals '" + attrName + "' not '" + "lang" + "'";
		}
		return "hc_namednodemapsetnameditem: OK";
	} catch (e) {
		return "hc_namednodemapsetnameditem: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_namednodemapsetnameditemreturnvalue.xml" fleur="hc_namednodemapsetnameditemreturnvalue" native="hc_namednodemapsetnameditemreturnvalue"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var newAttribute;
		var testAddress;
		var attributes;
		var newNode;
		var attrValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		testAddress = elementList.item(2);
		newAttribute = doc.createAttribute("class");
		attributes = testAddress.attributes;
		newNode = attributes.setNamedItem(newAttribute);
		if (newNode == null) {
			return "hc_namednodemapSetNamedItemReturnValue: #previousAttrNotNull 'newNode' is null";
		}
		attrValue = newNode.nodeValue;
		if ("No" !== attrValue) {
			return "hc_namednodemapSetNamedItemReturnValue: #previousAttrValue 'attrValue' equals '" + attrValue + "' not '" + "No" + "'";
		}
		return "hc_namednodemapSetNamedItemReturnValue: OK";
	} catch (e) {
		return "hc_namednodemapSetNamedItemReturnValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var newAttribute;
		var testAddress;
		var attributes;
		var newNode;
		var attrValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		testAddress = elementList.item(2);
		newAttribute = doc.createAttribute("class");
		attributes = testAddress.attributes;
		newNode = attributes.setNamedItem(newAttribute);
		if (newNode == null) {
			return "hc_namednodemapSetNamedItemReturnValue: #previousAttrNotNull 'newNode' is null";
		}
		attrValue = newNode.nodeValue;
		if ("No" !== attrValue) {
			return "hc_namednodemapSetNamedItemReturnValue: #previousAttrValue 'attrValue' equals '" + attrValue + "' not '" + "No" + "'";
		}
		return "hc_namednodemapSetNamedItemReturnValue: OK";
	} catch (e) {
		return "hc_namednodemapSetNamedItemReturnValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_namednodemapsetnameditemthatexists.xml" fleur="hc_namednodemapsetnameditemthatexists" native="hc_namednodemapsetnameditemthatexists"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var newAttribute;
		var testAddress;
		var attributes;
		var districtNode;
		var attrValue;
		var setNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		testAddress = elementList.item(1);
		newAttribute = doc.createAttribute("class");
		attributes = testAddress.attributes;
		setNode = attributes.setNamedItem(newAttribute);
		districtNode = attributes.getNamedItem("class");
		attrValue = districtNode.nodeValue;
		if ("" !== attrValue) {
			return "hc_namednodemapSetNamedItemThatExists: #namednodemapSetNamedItemThatExistsAssert 'attrValue' equals '" + attrValue + "' not '" + "" + "'";
		}
		return "hc_namednodemapSetNamedItemThatExists: OK";
	} catch (e) {
		return "hc_namednodemapSetNamedItemThatExists: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var newAttribute;
		var testAddress;
		var attributes;
		var districtNode;
		var attrValue;
		var setNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		testAddress = elementList.item(1);
		newAttribute = doc.createAttribute("class");
		attributes = testAddress.attributes;
		setNode = attributes.setNamedItem(newAttribute);
		districtNode = attributes.getNamedItem("class");
		attrValue = districtNode.nodeValue;
		if ("" !== attrValue) {
			return "hc_namednodemapSetNamedItemThatExists: #namednodemapSetNamedItemThatExistsAssert 'attrValue' equals '" + attrValue + "' not '" + "" + "'";
		}
		return "hc_namednodemapSetNamedItemThatExists: OK";
	} catch (e) {
		return "hc_namednodemapSetNamedItemThatExists: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_namednodemapsetnameditemwithnewvalue.xml" fleur="hc_namednodemapsetnameditemwithnewvalue" native="hc_namednodemapsetnameditemwithnewvalue"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var newAttribute;
		var testAddress;
		var attributes;
		var newNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		testAddress = elementList.item(2);
		newAttribute = doc.createAttribute("lang");
		attributes = testAddress.attributes;
		newNode = attributes.setNamedItem(newAttribute);
		if (newNode != null) {
			return "hc_namednodemapSetNamedItemWithNewValue: #prevValueNull 'newNode' equals '" + newNode + "' not null";
		}
		return "hc_namednodemapSetNamedItemWithNewValue: OK";
	} catch (e) {
		return "hc_namednodemapSetNamedItemWithNewValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var newAttribute;
		var testAddress;
		var attributes;
		var newNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		testAddress = elementList.item(2);
		newAttribute = doc.createAttribute("lang");
		attributes = testAddress.attributes;
		newNode = attributes.setNamedItem(newAttribute);
		if (newNode != null) {
			return "hc_namednodemapSetNamedItemWithNewValue: #prevValueNull 'newNode' equals '" + newNode + "' not null";
		}
		return "hc_namednodemapSetNamedItemWithNewValue: OK";
	} catch (e) {
		return "hc_namednodemapSetNamedItemWithNewValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_namednodemapwrongdocumenterr.xml" fleur="hc_namednodemapwrongdocumenterr" native="hc_namednodemapwrongdocumenterr"><Fleur>(function(){
	var success;
	try {
		var doc1;
		var doc2;
		var elementList;
		var testAddress;
		var attributes;
		var newAttribute;
		var strong;
		var setNode;
		var doc1Req = new XMLHttpRequest();
		doc1Req.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		doc1Req.send();
		doc1 = new Fleur.DOMParser().parseFromString(doc1Req.responseText, "text/xml");
		var doc2Req = new XMLHttpRequest();
		doc2Req.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		doc2Req.send();
		doc2 = new Fleur.DOMParser().parseFromString(doc2Req.responseText, "text/xml");
		elementList = doc1.getElementsByTagName("acronym");
		testAddress = elementList.item(2);
		newAttribute = doc2.createAttribute("newAttribute");
		attributes = testAddress.attributes;
		success = false;
		try {
			setNode = attributes.setNamedItem(newAttribute);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 4;
			}
		}
		if (!success) {
			return "hc_namednodemapWrongDocumentErr: Exception WRONG_DOCUMENT_ERR expected";
		}
		return "hc_namednodemapWrongDocumentErr: OK";
	} catch (e) {
		return "hc_namednodemapWrongDocumentErr: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc1;
		var doc2;
		var elementList;
		var testAddress;
		var attributes;
		var newAttribute;
		var strong;
		var setNode;
		var doc1Req = new XMLHttpRequest();
		doc1Req.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		doc1Req.send();
		doc1 = new DOMParser().parseFromString(doc1Req.responseText, "text/xml");
		var doc2Req = new XMLHttpRequest();
		doc2Req.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		doc2Req.send();
		doc2 = new DOMParser().parseFromString(doc2Req.responseText, "text/xml");
		elementList = doc1.getElementsByTagName("acronym");
		testAddress = elementList.item(2);
		newAttribute = doc2.createAttribute("newAttribute");
		attributes = testAddress.attributes;
		success = false;
		try {
			setNode = attributes.setNamedItem(newAttribute);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 4;
			}
		}
		if (!success) {
			return "hc_namednodemapWrongDocumentErr: Exception WRONG_DOCUMENT_ERR expected";
		}
		return "hc_namednodemapWrongDocumentErr: OK";
	} catch (e) {
		return "hc_namednodemapWrongDocumentErr: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_nodeappendchild.xml" fleur="hc_nodeappendchild" native="hc_nodeappendchild"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var childList;
		var createdNode;
		var lchild;
		var childName;
		var appendedChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("p");
		employeeNode = elementList.item(1);
		childList = employeeNode.childNodes;
		createdNode = doc.createElement("br");
		appendedChild = employeeNode.appendChild(createdNode);
		lchild = employeeNode.lastChild;
		childName = lchild.nodeName;
		if ("br" !== childName) {
			return "hc_nodeAppendChild: #nodeName 'childName' equals '" + childName + "' not '" + "br" + "'";
		}
		return "hc_nodeAppendChild: OK";
	} catch (e) {
		return "hc_nodeAppendChild: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var childList;
		var createdNode;
		var lchild;
		var childName;
		var appendedChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("p");
		employeeNode = elementList.item(1);
		childList = employeeNode.childNodes;
		createdNode = doc.createElement("br");
		appendedChild = employeeNode.appendChild(createdNode);
		lchild = employeeNode.lastChild;
		childName = lchild.nodeName;
		if ("br" !== childName) {
			return "hc_nodeAppendChild: #nodeName 'childName' equals '" + childName + "' not '" + "br" + "'";
		}
		return "hc_nodeAppendChild: OK";
	} catch (e) {
		return "hc_nodeAppendChild: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_nodeappendchildchildexists.xml" fleur="hc_nodeappendchildchildexists" native="hc_nodeappendchildchildexists"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var childList;
		var childNode;
		var newChild;
		var memberNode;
		var memberName;
		var refreshedActual = new Array();

		var actual = new Array();

		var nodeType;
		expected = new Array();
		expected[0] = "strong";
		expected[1] = "code";
		expected[2] = "sup";
		expected[3] = "var";
		expected[4] = "acronym";
		expected[5] = "em";
		var appendedChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("p");
		childNode = elementList.item(1);
		childList = childNode.getElementsByTagName("*");
		newChild = childList.item(0);
		appendedChild = childNode.appendChild(newChild);
		for (var index_id0x16c83790 = 0; index_id0x16c83790 &lt; childList.length; index_id0x16c83790++) {
			memberNode = childList.item(index_id0x16c83790);
			memberName = memberNode.nodeName;
actual[actual.length] = memberName;
		}
		if (expected.join("|") !== actual.join("|")) {
			return "hc_nodeAppendChildChildExists: #liveByTagName 'actual' equals '" + actual.join("|") + "' not '" + expected.join("|") + "'";
		}
		childList = childNode.childNodes;
		for (var index_id0x16c83b00 = 0; index_id0x16c83b00 &lt; childList.length; index_id0x16c83b00++) {
			memberNode = childList.item(index_id0x16c83b00);
			nodeType = memberNode.nodeType;
			if ((1 == nodeType)) {
				memberName = memberNode.nodeName;
refreshedActual[refreshedActual.length] = memberName;
			}
		}
		if (expected.join("|") !== refreshedActual.join("|")) {
			return "hc_nodeAppendChildChildExists: #refreshedChildNodes 'refreshedActual' equals '" + refreshedActual.join("|") + "' not '" + expected.join("|") + "'";
		}
		return "hc_nodeAppendChildChildExists: OK";
	} catch (e) {
		return "hc_nodeAppendChildChildExists: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var childList;
		var childNode;
		var newChild;
		var memberNode;
		var memberName;
		var refreshedActual = new Array();

		var actual = new Array();

		var nodeType;
		expected = new Array();
		expected[0] = "strong";
		expected[1] = "code";
		expected[2] = "sup";
		expected[3] = "var";
		expected[4] = "acronym";
		expected[5] = "em";
		var appendedChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("p");
		childNode = elementList.item(1);
		childList = childNode.getElementsByTagName("*");
		newChild = childList.item(0);
		appendedChild = childNode.appendChild(newChild);
		for (var index_id0x16c83790 = 0; index_id0x16c83790 &lt; childList.length; index_id0x16c83790++) {
			memberNode = childList.item(index_id0x16c83790);
			memberName = memberNode.nodeName;
actual[actual.length] = memberName;
		}
		if (expected.join("|") !== actual.join("|")) {
			return "hc_nodeAppendChildChildExists: #liveByTagName 'actual' equals '" + actual.join("|") + "' not '" + expected.join("|") + "'";
		}
		childList = childNode.childNodes;
		for (var index_id0x16c83b00 = 0; index_id0x16c83b00 &lt; childList.length; index_id0x16c83b00++) {
			memberNode = childList.item(index_id0x16c83b00);
			nodeType = memberNode.nodeType;
			if ((1 == nodeType)) {
				memberName = memberNode.nodeName;
refreshedActual[refreshedActual.length] = memberName;
			}
		}
		if (expected.join("|") !== refreshedActual.join("|")) {
			return "hc_nodeAppendChildChildExists: #refreshedChildNodes 'refreshedActual' equals '" + refreshedActual.join("|") + "' not '" + expected.join("|") + "'";
		}
		return "hc_nodeAppendChildChildExists: OK";
	} catch (e) {
		return "hc_nodeAppendChildChildExists: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_nodeappendchilddocfragment.xml" fleur="hc_nodeappendchilddocfragment" native="hc_nodeappendchilddocfragment"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var childList;
		var newdocFragment;
		var newChild1;
		var newChild2;
		var child;
		var childName;
		var result = new Array();

		var appendedChild;
		var nodeType;
		expected = new Array();
		expected[0] = "em";
		expected[1] = "strong";
		expected[2] = "code";
		expected[3] = "sup";
		expected[4] = "var";
		expected[5] = "acronym";
		expected[6] = "br";
		expected[7] = "b";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("p");
		employeeNode = elementList.item(1);
		childList = employeeNode.childNodes;
		newdocFragment = doc.createDocumentFragment();
		newChild1 = doc.createElement("br");
		newChild2 = doc.createElement("b");
		appendedChild = newdocFragment.appendChild(newChild1);
		appendedChild = newdocFragment.appendChild(newChild2);
		appendedChild = employeeNode.appendChild(newdocFragment);
		for (var index_id0x16f0f100 = 0; index_id0x16f0f100 &lt; childList.length; index_id0x16f0f100++) {
			child = childList.item(index_id0x16f0f100);
			nodeType = child.nodeType;
			if ((1 == nodeType)) {
				childName = child.nodeName;
result[result.length] = childName;
			}
		}
		if (expected.join("|") !== result.join("|")) {
			return "hc_nodeAppendChildDocFragment: #nodeNames 'result' equals '" + result.join("|") + "' not '" + expected.join("|") + "'";
		}
		return "hc_nodeAppendChildDocFragment: OK";
	} catch (e) {
		return "hc_nodeAppendChildDocFragment: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var childList;
		var newdocFragment;
		var newChild1;
		var newChild2;
		var child;
		var childName;
		var result = new Array();

		var appendedChild;
		var nodeType;
		expected = new Array();
		expected[0] = "em";
		expected[1] = "strong";
		expected[2] = "code";
		expected[3] = "sup";
		expected[4] = "var";
		expected[5] = "acronym";
		expected[6] = "br";
		expected[7] = "b";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("p");
		employeeNode = elementList.item(1);
		childList = employeeNode.childNodes;
		newdocFragment = doc.createDocumentFragment();
		newChild1 = doc.createElement("br");
		newChild2 = doc.createElement("b");
		appendedChild = newdocFragment.appendChild(newChild1);
		appendedChild = newdocFragment.appendChild(newChild2);
		appendedChild = employeeNode.appendChild(newdocFragment);
		for (var index_id0x16f0f100 = 0; index_id0x16f0f100 &lt; childList.length; index_id0x16f0f100++) {
			child = childList.item(index_id0x16f0f100);
			nodeType = child.nodeType;
			if ((1 == nodeType)) {
				childName = child.nodeName;
result[result.length] = childName;
			}
		}
		if (expected.join("|") !== result.join("|")) {
			return "hc_nodeAppendChildDocFragment: #nodeNames 'result' equals '" + result.join("|") + "' not '" + expected.join("|") + "'";
		}
		return "hc_nodeAppendChildDocFragment: OK";
	} catch (e) {
		return "hc_nodeAppendChildDocFragment: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_nodeappendchildgetnodename.xml" fleur="hc_nodeappendchildgetnodename" native="hc_nodeappendchildgetnodename"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var childList;
		var newChild;
		var appendNode;
		var childName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("p");
		employeeNode = elementList.item(1);
		childList = employeeNode.childNodes;
		newChild = doc.createElement("br");
		appendNode = employeeNode.appendChild(newChild);
		childName = appendNode.nodeName;
		if ("br" !== childName) {
			return "hc_nodeAppendChildGetNodeName: #nodeName 'childName' equals '" + childName + "' not '" + "br" + "'";
		}
		return "hc_nodeAppendChildGetNodeName: OK";
	} catch (e) {
		return "hc_nodeAppendChildGetNodeName: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var childList;
		var newChild;
		var appendNode;
		var childName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("p");
		employeeNode = elementList.item(1);
		childList = employeeNode.childNodes;
		newChild = doc.createElement("br");
		appendNode = employeeNode.appendChild(newChild);
		childName = appendNode.nodeName;
		if ("br" !== childName) {
			return "hc_nodeAppendChildGetNodeName: #nodeName 'childName' equals '" + childName + "' not '" + "br" + "'";
		}
		return "hc_nodeAppendChildGetNodeName: OK";
	} catch (e) {
		return "hc_nodeAppendChildGetNodeName: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_nodeappendchildinvalidnodetype.xml" fleur="hc_nodeappendchildinvalidnodetype" native="hc_nodeappendchildinvalidnodetype"><Fleur>(function(){
	var success;
	try {
		var doc;
		var rootNode;
		var newChild;
		var appendedChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		rootNode = doc.documentElement;
		newChild = doc.createAttribute("newAttribute");
		success = false;
		try {
			appendedChild = rootNode.appendChild(newChild);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 3;
			}
		}
		if (!success) {
			return "hc_nodeAppendChildInvalidNodeType: Exception HIERARCHY_REQUEST_ERR expected";
		}
		return "hc_nodeAppendChildInvalidNodeType: OK";
	} catch (e) {
		return "hc_nodeAppendChildInvalidNodeType: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var rootNode;
		var newChild;
		var appendedChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		rootNode = doc.documentElement;
		newChild = doc.createAttribute("newAttribute");
		success = false;
		try {
			appendedChild = rootNode.appendChild(newChild);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 3;
			}
		}
		if (!success) {
			return "hc_nodeAppendChildInvalidNodeType: Exception HIERARCHY_REQUEST_ERR expected";
		}
		return "hc_nodeAppendChildInvalidNodeType: OK";
	} catch (e) {
		return "hc_nodeAppendChildInvalidNodeType: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_nodeappendchildnewchilddiffdocument.xml" fleur="hc_nodeappendchildnewchilddiffdocument" native="hc_nodeappendchildnewchilddiffdocument"><Fleur>(function(){
	var success;
	try {
		var doc1;
		var doc2;
		var newChild;
		var elementList;
		var elementNode;
		var appendedChild;
		var doc1Req = new XMLHttpRequest();
		doc1Req.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		doc1Req.send();
		doc1 = new Fleur.DOMParser().parseFromString(doc1Req.responseText, "text/xml");
		var doc2Req = new XMLHttpRequest();
		doc2Req.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		doc2Req.send();
		doc2 = new Fleur.DOMParser().parseFromString(doc2Req.responseText, "text/xml");
		newChild = doc1.createElement("br");
		elementList = doc2.getElementsByTagName("p");
		elementNode = elementList.item(1);
		success = false;
		try {
			appendedChild = elementNode.appendChild(newChild);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 4;
			}
		}
		if (!success) {
			return "hc_nodeAppendChildNewChildDiffDocument: Exception WRONG_DOCUMENT_ERR expected";
		}
		return "hc_nodeAppendChildNewChildDiffDocument: OK";
	} catch (e) {
		return "hc_nodeAppendChildNewChildDiffDocument: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc1;
		var doc2;
		var newChild;
		var elementList;
		var elementNode;
		var appendedChild;
		var doc1Req = new XMLHttpRequest();
		doc1Req.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		doc1Req.send();
		doc1 = new DOMParser().parseFromString(doc1Req.responseText, "text/xml");
		var doc2Req = new XMLHttpRequest();
		doc2Req.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		doc2Req.send();
		doc2 = new DOMParser().parseFromString(doc2Req.responseText, "text/xml");
		newChild = doc1.createElement("br");
		elementList = doc2.getElementsByTagName("p");
		elementNode = elementList.item(1);
		success = false;
		try {
			appendedChild = elementNode.appendChild(newChild);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 4;
			}
		}
		if (!success) {
			return "hc_nodeAppendChildNewChildDiffDocument: Exception WRONG_DOCUMENT_ERR expected";
		}
		return "hc_nodeAppendChildNewChildDiffDocument: OK";
	} catch (e) {
		return "hc_nodeAppendChildNewChildDiffDocument: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_nodeappendchildnodeancestor.xml" fleur="hc_nodeappendchildnodeancestor" native="hc_nodeappendchildnodeancestor"><Fleur>(function(){
	var success;
	try {
		var doc;
		var newChild;
		var elementList;
		var employeeNode;
		var childList;
		var oldChild;
		var appendedChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		newChild = doc.documentElement;
		elementList = doc.getElementsByTagName("p");
		employeeNode = elementList.item(1);
		success = false;
		try {
			appendedChild = employeeNode.appendChild(newChild);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 3;
			}
		}
		if (!success) {
			return "hc_nodeAppendChildNodeAncestor: Exception HIERARCHY_REQUEST_ERR expected";
		}
		return "hc_nodeAppendChildNodeAncestor: OK";
	} catch (e) {
		return "hc_nodeAppendChildNodeAncestor: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var newChild;
		var elementList;
		var employeeNode;
		var childList;
		var oldChild;
		var appendedChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		newChild = doc.documentElement;
		elementList = doc.getElementsByTagName("p");
		employeeNode = elementList.item(1);
		success = false;
		try {
			appendedChild = employeeNode.appendChild(newChild);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 3;
			}
		}
		if (!success) {
			return "hc_nodeAppendChildNodeAncestor: Exception HIERARCHY_REQUEST_ERR expected";
		}
		return "hc_nodeAppendChildNodeAncestor: OK";
	} catch (e) {
		return "hc_nodeAppendChildNodeAncestor: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_nodeattributenodeattribute.xml" fleur="hc_nodeattributenodeattribute" native="hc_nodeattributenodeattribute"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testAddr;
		var addrAttr;
		var attrNode;
		var attrList;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		testAddr = elementList.item(0);
		addrAttr = testAddr.attributes;
		attrNode = addrAttr.item(0);
		attrList = attrNode.attributes;
		if (attrList != null) {
			return "hc_characterdataDeleteDataEnd: #nodeAttributeNodeAttributeAssert1 'attrList' equals '" + attrList + "' not null";
		}
		return "hc_characterdataDeleteDataEnd: OK";
	} catch (e) {
		return "hc_characterdataDeleteDataEnd: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testAddr;
		var addrAttr;
		var attrNode;
		var attrList;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		testAddr = elementList.item(0);
		addrAttr = testAddr.attributes;
		attrNode = addrAttr.item(0);
		attrList = attrNode.attributes;
		if (attrList != null) {
			return "hc_characterdataDeleteDataEnd: #nodeAttributeNodeAttributeAssert1 'attrList' equals '" + attrList + "' not null";
		}
		return "hc_characterdataDeleteDataEnd: OK";
	} catch (e) {
		return "hc_characterdataDeleteDataEnd: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_nodeattributenodename.xml" fleur="hc_nodeattributenodename" native="hc_nodeattributenodename"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testAddr;
		var addrAttr;
		var attrName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		testAddr = elementList.item(0);
		addrAttr = testAddr.getAttributeNode("title");
		attrName = addrAttr.nodeName;
		if ("title" !== attrName) {
			return "hc_nodeattributenodename: #nodeName 'attrName' equals '" + attrName + "' not '" + "title" + "'";
		}
		return "hc_nodeattributenodename: OK";
	} catch (e) {
		return "hc_nodeattributenodename: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testAddr;
		var addrAttr;
		var attrName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		testAddr = elementList.item(0);
		addrAttr = testAddr.getAttributeNode("title");
		attrName = addrAttr.nodeName;
		if ("title" !== attrName) {
			return "hc_nodeattributenodename: #nodeName 'attrName' equals '" + attrName + "' not '" + "title" + "'";
		}
		return "hc_nodeattributenodename: OK";
	} catch (e) {
		return "hc_nodeattributenodename: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_nodeattributenodetype.xml" fleur="hc_nodeattributenodetype" native="hc_nodeattributenodetype"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testAddr;
		var addrAttr;
		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		testAddr = elementList.item(0);
		addrAttr = testAddr.getAttributeNode("title");
		nodeType = addrAttr.nodeType;
		if (2 !== nodeType) {
			return "hc_nodeAttributeNodeType: #nodeAttrNodeTypeAssert1 'nodeType' equals '" + nodeType + "' not '" + 2 + "'";
		}
		return "hc_nodeAttributeNodeType: OK";
	} catch (e) {
		return "hc_nodeAttributeNodeType: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testAddr;
		var addrAttr;
		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		testAddr = elementList.item(0);
		addrAttr = testAddr.getAttributeNode("title");
		nodeType = addrAttr.nodeType;
		if (2 !== nodeType) {
			return "hc_nodeAttributeNodeType: #nodeAttrNodeTypeAssert1 'nodeType' equals '" + nodeType + "' not '" + 2 + "'";
		}
		return "hc_nodeAttributeNodeType: OK";
	} catch (e) {
		return "hc_nodeAttributeNodeType: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_nodeattributenodevalue.xml" fleur="hc_nodeattributenodevalue" native="hc_nodeattributenodevalue"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testAddr;
		var addrAttr;
		var attrValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		testAddr = elementList.item(0);
		addrAttr = testAddr.getAttributeNode("title");
		attrValue = addrAttr.nodeValue;
		if ("Yes" !== attrValue) {
			return "hc_nodeAttributeNodeValue: #nodeValue 'attrValue' equals '" + attrValue + "' not '" + "Yes" + "'";
		}
		return "hc_nodeAttributeNodeValue: OK";
	} catch (e) {
		return "hc_nodeAttributeNodeValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testAddr;
		var addrAttr;
		var attrValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		testAddr = elementList.item(0);
		addrAttr = testAddr.getAttributeNode("title");
		attrValue = addrAttr.nodeValue;
		if ("Yes" !== attrValue) {
			return "hc_nodeAttributeNodeValue: #nodeValue 'attrValue' equals '" + attrValue + "' not '" + "Yes" + "'";
		}
		return "hc_nodeAttributeNodeValue: OK";
	} catch (e) {
		return "hc_nodeAttributeNodeValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_nodechildnodes.xml" fleur="hc_nodechildnodes" native="hc_nodechildnodes"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var childNode;
		var childNodes;
		var nodeType;
		var childName;
		var actual = new Array();

		expected = new Array();
		expected[0] = "em";
		expected[1] = "strong";
		expected[2] = "code";
		expected[3] = "sup";
		expected[4] = "var";
		expected[5] = "acronym";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("p");
		employeeNode = elementList.item(1);
		childNodes = employeeNode.childNodes;
		for (var index_id0x17434790 = 0; index_id0x17434790 &lt; childNodes.length; index_id0x17434790++) {
			childNode = childNodes.item(index_id0x17434790);
			nodeType = childNode.nodeType;
			childName = childNode.nodeName;
			if ((1 == nodeType)) {
actual[actual.length] = childName;
			} else {
				if (3 !== nodeType) {
					return "hc_nodeChildNodes: #textNodeType 'nodeType' equals '" + nodeType + "' not '" + 3 + "'";
				}
			}
		}
		if (expected.join("|") !== actual.join("|")) {
			return "hc_nodeChildNodes: #elementNames 'actual' equals '" + actual.join("|") + "' not '" + expected.join("|") + "'";
		}
		return "hc_nodeChildNodes: OK";
	} catch (e) {
		return "hc_nodeChildNodes: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var childNode;
		var childNodes;
		var nodeType;
		var childName;
		var actual = new Array();

		expected = new Array();
		expected[0] = "em";
		expected[1] = "strong";
		expected[2] = "code";
		expected[3] = "sup";
		expected[4] = "var";
		expected[5] = "acronym";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("p");
		employeeNode = elementList.item(1);
		childNodes = employeeNode.childNodes;
		for (var index_id0x17434790 = 0; index_id0x17434790 &lt; childNodes.length; index_id0x17434790++) {
			childNode = childNodes.item(index_id0x17434790);
			nodeType = childNode.nodeType;
			childName = childNode.nodeName;
			if ((1 == nodeType)) {
actual[actual.length] = childName;
			} else {
				if (3 !== nodeType) {
					return "hc_nodeChildNodes: #textNodeType 'nodeType' equals '" + nodeType + "' not '" + 3 + "'";
				}
			}
		}
		if (expected.join("|") !== actual.join("|")) {
			return "hc_nodeChildNodes: #elementNames 'actual' equals '" + actual.join("|") + "' not '" + expected.join("|") + "'";
		}
		return "hc_nodeChildNodes: OK";
	} catch (e) {
		return "hc_nodeChildNodes: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_nodechildnodesappendchild.xml" fleur="hc_nodechildnodesappendchild" native="hc_nodechildnodesappendchild"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var childList;
		var createdNode;
		var childNode;
		var childName;
		var childType;
		var textNode;
		var actual = new Array();

		expected = new Array();
		expected[0] = "em";
		expected[1] = "strong";
		expected[2] = "code";
		expected[3] = "sup";
		expected[4] = "var";
		expected[5] = "acronym";
		expected[6] = "br";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("p");
		employeeNode = elementList.item(1);
		childList = employeeNode.childNodes;
		createdNode = doc.createElement("br");
		employeeNode = employeeNode.appendChild(createdNode);
		for (var index_id0x177645b0 = 0; index_id0x177645b0 &lt; childList.length; index_id0x177645b0++) {
			childNode = childList.item(index_id0x177645b0);
			childName = childNode.nodeName;
			childType = childNode.nodeType;
			if ((1 == childType)) {
actual[actual.length] = childName;
			} else {
				if (3 !== childType) {
					return "hc_nodeChildNodesAppendChild: #textNodeType 'childType' equals '" + childType + "' not '" + 3 + "'";
				}
			}
		}
		if (expected.join("|") !== actual.join("|")) {
			return "hc_nodeChildNodesAppendChild: #childElements 'actual' equals '" + actual.join("|") + "' not '" + expected.join("|") + "'";
		}
		return "hc_nodeChildNodesAppendChild: OK";
	} catch (e) {
		return "hc_nodeChildNodesAppendChild: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var childList;
		var createdNode;
		var childNode;
		var childName;
		var childType;
		var textNode;
		var actual = new Array();

		expected = new Array();
		expected[0] = "em";
		expected[1] = "strong";
		expected[2] = "code";
		expected[3] = "sup";
		expected[4] = "var";
		expected[5] = "acronym";
		expected[6] = "br";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("p");
		employeeNode = elementList.item(1);
		childList = employeeNode.childNodes;
		createdNode = doc.createElement("br");
		employeeNode = employeeNode.appendChild(createdNode);
		for (var index_id0x177645b0 = 0; index_id0x177645b0 &lt; childList.length; index_id0x177645b0++) {
			childNode = childList.item(index_id0x177645b0);
			childName = childNode.nodeName;
			childType = childNode.nodeType;
			if ((1 == childType)) {
actual[actual.length] = childName;
			} else {
				if (3 !== childType) {
					return "hc_nodeChildNodesAppendChild: #textNodeType 'childType' equals '" + childType + "' not '" + 3 + "'";
				}
			}
		}
		if (expected.join("|") !== actual.join("|")) {
			return "hc_nodeChildNodesAppendChild: #childElements 'actual' equals '" + actual.join("|") + "' not '" + expected.join("|") + "'";
		}
		return "hc_nodeChildNodesAppendChild: OK";
	} catch (e) {
		return "hc_nodeChildNodesAppendChild: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_nodechildnodesempty.xml" fleur="hc_nodechildnodesempty" native="hc_nodechildnodesempty"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var childList;
		var employeeNode;
		var textNode;
		var length;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("em");
		employeeNode = elementList.item(1);
		textNode = employeeNode.firstChild();
		childList = textNode.childNodes;
		length = childList.length;
		if (0 !== length) {
			return "hc_nodeChildNodesEmpty: #length_zero 'length' equals '" + length + "' not '" + 0 + "'";
		}
		return "hc_nodeChildNodesEmpty: OK";
	} catch (e) {
		return "hc_nodeChildNodesEmpty: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var childList;
		var employeeNode;
		var textNode;
		var length;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("em");
		employeeNode = elementList.item(1);
		textNode = employeeNode.firstChild();
		childList = textNode.childNodes;
		length = childList.length;
		if (0 !== length) {
			return "hc_nodeChildNodesEmpty: #length_zero 'length' equals '" + length + "' not '" + 0 + "'";
		}
		return "hc_nodeChildNodesEmpty: OK";
	} catch (e) {
		return "hc_nodeChildNodesEmpty: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_nodecloneattributescopied.xml" fleur="hc_nodecloneattributescopied" native="hc_nodecloneattributescopied"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var addressNode;
		var clonedNode;
		var attributes;
		var attributeNode;
		var attributeName;
		var result = new Array();

		htmlExpected = new Array();
		htmlExpected[0] = "class";
		htmlExpected[1] = "title";
		expected = new Array();
		expected[0] = "class";
		expected[1] = "title";
		expected[2] = "dir";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		addressNode = elementList.item(1);
		clonedNode = addressNode.cloneNode(false);
		attributes = clonedNode.attributes;
		for (var index_id0x17796bf0 = 0; index_id0x17796bf0 &lt; attributes.length; index_id0x17796bf0++) {
			attributeNode = attributes.item(index_id0x17796bf0);
			attributeName = attributeNode.nodeName;
result[result.length] = attributeName;
		}
		if (("text/xml" === "text/html")) {
			if (htmlExpected.join("|").toLowerCase() !== result.join("|").toLowerCase()) {
				return "hc_nodecloneattributescopied: #nodeNames_html 'result' equals '" + result.join("|").toLowerCase() + "' not '" + htmlExpected.join("|").toLowerCase() + "'";
			}
		} else {
			if (expected.join("|") !== result.join("|")) {
				return "hc_nodecloneattributescopied: #nodeNames 'result' equals '" + result.join("|") + "' not '" + expected.join("|") + "'";
			}
		}
		return "hc_nodecloneattributescopied: OK";
	} catch (e) {
		return "hc_nodecloneattributescopied: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var addressNode;
		var clonedNode;
		var attributes;
		var attributeNode;
		var attributeName;
		var result = new Array();

		htmlExpected = new Array();
		htmlExpected[0] = "class";
		htmlExpected[1] = "title";
		expected = new Array();
		expected[0] = "class";
		expected[1] = "title";
		expected[2] = "dir";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		addressNode = elementList.item(1);
		clonedNode = addressNode.cloneNode(false);
		attributes = clonedNode.attributes;
		for (var index_id0x17796bf0 = 0; index_id0x17796bf0 &lt; attributes.length; index_id0x17796bf0++) {
			attributeNode = attributes.item(index_id0x17796bf0);
			attributeName = attributeNode.nodeName;
result[result.length] = attributeName;
		}
		if (("text/xml" === "text/html")) {
			if (htmlExpected.join("|").toLowerCase() !== result.join("|").toLowerCase()) {
				return "hc_nodecloneattributescopied: #nodeNames_html 'result' equals '" + result.join("|").toLowerCase() + "' not '" + htmlExpected.join("|").toLowerCase() + "'";
			}
		} else {
			if (expected.join("|") !== result.join("|")) {
				return "hc_nodecloneattributescopied: #nodeNames 'result' equals '" + result.join("|") + "' not '" + expected.join("|") + "'";
			}
		}
		return "hc_nodecloneattributescopied: OK";
	} catch (e) {
		return "hc_nodecloneattributescopied: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_nodeclonefalsenocopytext.xml" fleur="hc_nodeclonefalsenocopytext" native="hc_nodeclonefalsenocopytext"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var childList;
		var childNode;
		var clonedNode;
		var lastChildNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("p");
		employeeNode = elementList.item(1);
		childList = employeeNode.childNodes;
		childNode = childList.item(3);
		clonedNode = childNode.cloneNode(false);
		lastChildNode = clonedNode.lastChild;
		if (lastChildNode != null) {
			return "hc_nodeCloneFalseNoCopyText: #nodeCloneFalseNoCopyTextAssert1 'lastChildNode' equals '" + lastChildNode + "' not null";
		}
		return "hc_nodeCloneFalseNoCopyText: OK";
	} catch (e) {
		return "hc_nodeCloneFalseNoCopyText: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var childList;
		var childNode;
		var clonedNode;
		var lastChildNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("p");
		employeeNode = elementList.item(1);
		childList = employeeNode.childNodes;
		childNode = childList.item(3);
		clonedNode = childNode.cloneNode(false);
		lastChildNode = clonedNode.lastChild;
		if (lastChildNode != null) {
			return "hc_nodeCloneFalseNoCopyText: #nodeCloneFalseNoCopyTextAssert1 'lastChildNode' equals '" + lastChildNode + "' not null";
		}
		return "hc_nodeCloneFalseNoCopyText: OK";
	} catch (e) {
		return "hc_nodeCloneFalseNoCopyText: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_nodeclonegetparentnull.xml" fleur="hc_nodeclonegetparentnull" native="hc_nodeclonegetparentnull"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var clonedNode;
		var parentNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("p");
		employeeNode = elementList.item(1);
		clonedNode = employeeNode.cloneNode(false);
		parentNode = clonedNode.parentNode;
		if (parentNode != null) {
			return "hc_nodeCloneGetParentNull: #nodeCloneGetParentNullAssert1 'parentNode' equals '" + parentNode + "' not null";
		}
		return "hc_nodeCloneGetParentNull: OK";
	} catch (e) {
		return "hc_nodeCloneGetParentNull: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var clonedNode;
		var parentNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("p");
		employeeNode = elementList.item(1);
		clonedNode = employeeNode.cloneNode(false);
		parentNode = clonedNode.parentNode;
		if (parentNode != null) {
			return "hc_nodeCloneGetParentNull: #nodeCloneGetParentNullAssert1 'parentNode' equals '" + parentNode + "' not null";
		}
		return "hc_nodeCloneGetParentNull: OK";
	} catch (e) {
		return "hc_nodeCloneGetParentNull: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_nodeclonenodefalse.xml" fleur="hc_nodeclonenodefalse" native="hc_nodeclonenodefalse"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var clonedNode;
		var cloneName;
		var cloneChildren;
		var length;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("p");
		employeeNode = elementList.item(1);
		clonedNode = employeeNode.cloneNode(false);
		cloneName = clonedNode.nodeName;
		if ("p" !== cloneName) {
			return "hc_nodeCloneNodeFalse: #strong 'cloneName' equals '" + cloneName + "' not '" + "p" + "'";
		}
		cloneChildren = clonedNode.childNodes;
		length = cloneChildren.length;
		if (0 !== length) {
			return "hc_nodeCloneNodeFalse: #length 'length' equals '" + length + "' not '" + 0 + "'";
		}
		return "hc_nodeCloneNodeFalse: OK";
	} catch (e) {
		return "hc_nodeCloneNodeFalse: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var clonedNode;
		var cloneName;
		var cloneChildren;
		var length;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("p");
		employeeNode = elementList.item(1);
		clonedNode = employeeNode.cloneNode(false);
		cloneName = clonedNode.nodeName;
		if ("p" !== cloneName) {
			return "hc_nodeCloneNodeFalse: #strong 'cloneName' equals '" + cloneName + "' not '" + "p" + "'";
		}
		cloneChildren = clonedNode.childNodes;
		length = cloneChildren.length;
		if (0 !== length) {
			return "hc_nodeCloneNodeFalse: #length 'length' equals '" + length + "' not '" + 0 + "'";
		}
		return "hc_nodeCloneNodeFalse: OK";
	} catch (e) {
		return "hc_nodeCloneNodeFalse: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_nodeclonenodetrue.xml" fleur="hc_nodeclonenodetrue" native="hc_nodeclonenodetrue"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var clonedNode;
		var clonedList;
		var clonedChild;
		var clonedChildName;
		var origList;
		var origChild;
		var origChildName;
		var result = new Array();

		var expected = new Array();

		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("p");
		employeeNode = elementList.item(1);
		origList = employeeNode.childNodes;
		for (var index_id0x178c0bf0 = 0; index_id0x178c0bf0 &lt; origList.length; index_id0x178c0bf0++) {
			origChild = origList.item(index_id0x178c0bf0);
			origChildName = origChild.nodeName;
expected[expected.length] = origChildName;
		}
		clonedNode = employeeNode.cloneNode(true);
		clonedList = clonedNode.childNodes;
		for (var index_id0x178c0e70 = 0; index_id0x178c0e70 &lt; clonedList.length; index_id0x178c0e70++) {
			clonedChild = clonedList.item(index_id0x178c0e70);
			clonedChildName = clonedChild.nodeName;
result[result.length] = clonedChildName;
		}
		if (expected.join("|") !== result.join("|")) {
			return "hc_nodeCloneNodeTrue: #clone 'result' equals '" + result.join("|") + "' not '" + expected.join("|") + "'";
		}
		return "hc_nodeCloneNodeTrue: OK";
	} catch (e) {
		return "hc_nodeCloneNodeTrue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var clonedNode;
		var clonedList;
		var clonedChild;
		var clonedChildName;
		var origList;
		var origChild;
		var origChildName;
		var result = new Array();

		var expected = new Array();

		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("p");
		employeeNode = elementList.item(1);
		origList = employeeNode.childNodes;
		for (var index_id0x178c0bf0 = 0; index_id0x178c0bf0 &lt; origList.length; index_id0x178c0bf0++) {
			origChild = origList.item(index_id0x178c0bf0);
			origChildName = origChild.nodeName;
expected[expected.length] = origChildName;
		}
		clonedNode = employeeNode.cloneNode(true);
		clonedList = clonedNode.childNodes;
		for (var index_id0x178c0e70 = 0; index_id0x178c0e70 &lt; clonedList.length; index_id0x178c0e70++) {
			clonedChild = clonedList.item(index_id0x178c0e70);
			clonedChildName = clonedChild.nodeName;
result[result.length] = clonedChildName;
		}
		if (expected.join("|") !== result.join("|")) {
			return "hc_nodeCloneNodeTrue: #clone 'result' equals '" + result.join("|") + "' not '" + expected.join("|") + "'";
		}
		return "hc_nodeCloneNodeTrue: OK";
	} catch (e) {
		return "hc_nodeCloneNodeTrue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_nodeclonetruecopytext.xml" fleur="hc_nodeclonetruecopytext" native="hc_nodeclonetruecopytext"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var childNode;
		var clonedNode;
		var lastChildNode;
		var childValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("sup");
		childNode = elementList.item(1);
		clonedNode = childNode.cloneNode(true);
		lastChildNode = clonedNode.lastChild;
		childValue = lastChildNode.nodeValue;
		if ("35,000" !== childValue) {
			return "hc_nodeCloneTrueCopyText: #cloneContainsText 'childValue' equals '" + childValue + "' not '" + "35,000" + "'";
		}
		return "hc_nodeCloneTrueCopyText: OK";
	} catch (e) {
		return "hc_nodeCloneTrueCopyText: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var childNode;
		var clonedNode;
		var lastChildNode;
		var childValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("sup");
		childNode = elementList.item(1);
		clonedNode = childNode.cloneNode(true);
		lastChildNode = clonedNode.lastChild;
		childValue = lastChildNode.nodeValue;
		if ("35,000" !== childValue) {
			return "hc_nodeCloneTrueCopyText: #cloneContainsText 'childValue' equals '" + childValue + "' not '" + "35,000" + "'";
		}
		return "hc_nodeCloneTrueCopyText: OK";
	} catch (e) {
		return "hc_nodeCloneTrueCopyText: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_nodecommentnodeattributes.xml" fleur="hc_nodecommentnodeattributes" native="hc_nodecommentnodeattributes"><Fleur>(function(){
	var success;
	try {
		var doc;
		var commentNode;
		var nodeList;
		var attrList;
		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		nodeList = doc.childNodes;
		for (var index_id0x1799f790 = 0; index_id0x1799f790 &lt; nodeList.length; index_id0x1799f790++) {
			commentNode = nodeList.item(index_id0x1799f790);
			nodeType = commentNode.nodeType;
			if ((8 == nodeType)) {
				attrList = commentNode.attributes;
				if (attrList != null) {
					return "hc_nodeCommentNodeAttributes: #existingCommentAttributesNull 'attrList' equals '" + attrList + "' not null";
				}
			}
		}
		commentNode = doc.createComment("This is a comment");
		attrList = commentNode.attributes;
		if (attrList != null) {
			return "hc_nodeCommentNodeAttributes: #createdCommentAttributesNull 'attrList' equals '" + attrList + "' not null";
		}
		return "hc_nodeCommentNodeAttributes: OK";
	} catch (e) {
		return "hc_nodeCommentNodeAttributes: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var commentNode;
		var nodeList;
		var attrList;
		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		nodeList = doc.childNodes;
		for (var index_id0x1799f790 = 0; index_id0x1799f790 &lt; nodeList.length; index_id0x1799f790++) {
			commentNode = nodeList.item(index_id0x1799f790);
			nodeType = commentNode.nodeType;
			if ((8 == nodeType)) {
				attrList = commentNode.attributes;
				if (attrList != null) {
					return "hc_nodeCommentNodeAttributes: #existingCommentAttributesNull 'attrList' equals '" + attrList + "' not null";
				}
			}
		}
		commentNode = doc.createComment("This is a comment");
		attrList = commentNode.attributes;
		if (attrList != null) {
			return "hc_nodeCommentNodeAttributes: #createdCommentAttributesNull 'attrList' equals '" + attrList + "' not null";
		}
		return "hc_nodeCommentNodeAttributes: OK";
	} catch (e) {
		return "hc_nodeCommentNodeAttributes: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_nodecommentnodename.xml" fleur="hc_nodecommentnodename" native="hc_nodecommentnodename"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var commentNode;
		var nodeType;
		var commentName;
		var commentNodeName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.childNodes;
		for (var index_id0x179db8d0 = 0; index_id0x179db8d0 &lt; elementList.length; index_id0x179db8d0++) {
			commentNode = elementList.item(index_id0x179db8d0);
			nodeType = commentNode.nodeType;
			if ((8 == nodeType)) {
				commentNodeName = commentNode.nodeName;
				if ("#comment" !== commentNodeName) {
					return "hc_nodeCommentNodeName: #existingNodeName 'commentNodeName' equals '" + commentNodeName + "' not '" + "#comment" + "'";
				}
			}
		}
		commentNode = doc.createComment("This is a comment");
		commentNodeName = commentNode.nodeName;
		if ("#comment" !== commentNodeName) {
			return "hc_nodeCommentNodeName: #createdNodeName 'commentNodeName' equals '" + commentNodeName + "' not '" + "#comment" + "'";
		}
		return "hc_nodeCommentNodeName: OK";
	} catch (e) {
		return "hc_nodeCommentNodeName: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var commentNode;
		var nodeType;
		var commentName;
		var commentNodeName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.childNodes;
		for (var index_id0x179db8d0 = 0; index_id0x179db8d0 &lt; elementList.length; index_id0x179db8d0++) {
			commentNode = elementList.item(index_id0x179db8d0);
			nodeType = commentNode.nodeType;
			if ((8 == nodeType)) {
				commentNodeName = commentNode.nodeName;
				if ("#comment" !== commentNodeName) {
					return "hc_nodeCommentNodeName: #existingNodeName 'commentNodeName' equals '" + commentNodeName + "' not '" + "#comment" + "'";
				}
			}
		}
		commentNode = doc.createComment("This is a comment");
		commentNodeName = commentNode.nodeName;
		if ("#comment" !== commentNodeName) {
			return "hc_nodeCommentNodeName: #createdNodeName 'commentNodeName' equals '" + commentNodeName + "' not '" + "#comment" + "'";
		}
		return "hc_nodeCommentNodeName: OK";
	} catch (e) {
		return "hc_nodeCommentNodeName: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_nodecommentnodetype.xml" fleur="hc_nodecommentnodetype" native="hc_nodecommentnodetype"><Fleur>(function(){
	var success;
	try {
		var doc;
		var testList;
		var commentNode;
		var commentNodeName;
		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		testList = doc.childNodes;
		for (var index_id0x179e6830 = 0; index_id0x179e6830 &lt; testList.length; index_id0x179e6830++) {
			commentNode = testList.item(index_id0x179e6830);
			commentNodeName = commentNode.nodeName;
			if (("#comment" == commentNodeName)) {
				nodeType = commentNode.nodeType;
				if (8 !== nodeType) {
					return "hc_nodeCommentNodeType: #existingCommentNodeType 'nodeType' equals '" + nodeType + "' not '" + 8 + "'";
				}
			}
		}
		commentNode = doc.createComment("This is a comment");
		nodeType = commentNode.nodeType;
		if (8 !== nodeType) {
			return "hc_nodeCommentNodeType: #createdCommentNodeType 'nodeType' equals '" + nodeType + "' not '" + 8 + "'";
		}
		return "hc_nodeCommentNodeType: OK";
	} catch (e) {
		return "hc_nodeCommentNodeType: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var testList;
		var commentNode;
		var commentNodeName;
		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		testList = doc.childNodes;
		for (var index_id0x179e6830 = 0; index_id0x179e6830 &lt; testList.length; index_id0x179e6830++) {
			commentNode = testList.item(index_id0x179e6830);
			commentNodeName = commentNode.nodeName;
			if (("#comment" == commentNodeName)) {
				nodeType = commentNode.nodeType;
				if (8 !== nodeType) {
					return "hc_nodeCommentNodeType: #existingCommentNodeType 'nodeType' equals '" + nodeType + "' not '" + 8 + "'";
				}
			}
		}
		commentNode = doc.createComment("This is a comment");
		nodeType = commentNode.nodeType;
		if (8 !== nodeType) {
			return "hc_nodeCommentNodeType: #createdCommentNodeType 'nodeType' equals '" + nodeType + "' not '" + 8 + "'";
		}
		return "hc_nodeCommentNodeType: OK";
	} catch (e) {
		return "hc_nodeCommentNodeType: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_nodecommentnodevalue.xml" fleur="hc_nodecommentnodevalue" native="hc_nodecommentnodevalue"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var commentNode;
		var commentName;
		var commentValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.childNodes;
		for (var index_id0x17a14330 = 0; index_id0x17a14330 &lt; elementList.length; index_id0x17a14330++) {
			commentNode = elementList.item(index_id0x17a14330);
			commentName = commentNode.nodeName;
			if (("#comment" == commentName)) {
				commentValue = commentNode.nodeValue;
				if (" This is comment number 1." !== commentValue) {
					return "hc_nodeCommentNodeValue: #value 'commentValue' equals '" + commentValue + "' not '" + " This is comment number 1." + "'";
				}
			}
		}
		commentNode = doc.createComment(" This is a comment");
		commentValue = commentNode.nodeValue;
		if (" This is a comment" !== commentValue) {
			return "hc_nodeCommentNodeValue: #createdCommentNodeValue 'commentValue' equals '" + commentValue + "' not '" + " This is a comment" + "'";
		}
		return "hc_nodeCommentNodeValue: OK";
	} catch (e) {
		return "hc_nodeCommentNodeValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var commentNode;
		var commentName;
		var commentValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.childNodes;
		for (var index_id0x17a14330 = 0; index_id0x17a14330 &lt; elementList.length; index_id0x17a14330++) {
			commentNode = elementList.item(index_id0x17a14330);
			commentName = commentNode.nodeName;
			if (("#comment" == commentName)) {
				commentValue = commentNode.nodeValue;
				if (" This is comment number 1." !== commentValue) {
					return "hc_nodeCommentNodeValue: #value 'commentValue' equals '" + commentValue + "' not '" + " This is comment number 1." + "'";
				}
			}
		}
		commentNode = doc.createComment(" This is a comment");
		commentValue = commentNode.nodeValue;
		if (" This is a comment" !== commentValue) {
			return "hc_nodeCommentNodeValue: #createdCommentNodeValue 'commentValue' equals '" + commentValue + "' not '" + " This is a comment" + "'";
		}
		return "hc_nodeCommentNodeValue: OK";
	} catch (e) {
		return "hc_nodeCommentNodeValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_nodedocumentfragmentnodename.xml" fleur="hc_nodedocumentfragmentnodename" native="hc_nodedocumentfragmentnodename"><Fleur>(function(){
	var success;
	try {
		var doc;
		var docFragment;
		var documentFragmentName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		docFragment = doc.createDocumentFragment();
		documentFragmentName = docFragment.nodeName;
		if ("#document-fragment" !== documentFragmentName) {
			return "hc_nodeDocumentFragmentNodeName: #nodeDocumentFragmentNodeNameAssert1 'documentFragmentName' equals '" + documentFragmentName + "' not '" + "#document-fragment" + "'";
		}
		return "hc_nodeDocumentFragmentNodeName: OK";
	} catch (e) {
		return "hc_nodeDocumentFragmentNodeName: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var docFragment;
		var documentFragmentName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		docFragment = doc.createDocumentFragment();
		documentFragmentName = docFragment.nodeName;
		if ("#document-fragment" !== documentFragmentName) {
			return "hc_nodeDocumentFragmentNodeName: #nodeDocumentFragmentNodeNameAssert1 'documentFragmentName' equals '" + documentFragmentName + "' not '" + "#document-fragment" + "'";
		}
		return "hc_nodeDocumentFragmentNodeName: OK";
	} catch (e) {
		return "hc_nodeDocumentFragmentNodeName: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_nodedocumentfragmentnodetype.xml" fleur="hc_nodedocumentfragmentnodetype" native="hc_nodedocumentfragmentnodetype"><Fleur>(function(){
	var success;
	try {
		var doc;
		var documentFragmentNode;
		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		documentFragmentNode = doc.createDocumentFragment();
		nodeType = documentFragmentNode.nodeType;
		if (11 !== nodeType) {
			return "hc_nodeDocumentFragmentNodeType: #nodeDocumentFragmentNodeTypeAssert1 'nodeType' equals '" + nodeType + "' not '" + 11 + "'";
		}
		return "hc_nodeDocumentFragmentNodeType: OK";
	} catch (e) {
		return "hc_nodeDocumentFragmentNodeType: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var documentFragmentNode;
		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		documentFragmentNode = doc.createDocumentFragment();
		nodeType = documentFragmentNode.nodeType;
		if (11 !== nodeType) {
			return "hc_nodeDocumentFragmentNodeType: #nodeDocumentFragmentNodeTypeAssert1 'nodeType' equals '" + nodeType + "' not '" + 11 + "'";
		}
		return "hc_nodeDocumentFragmentNodeType: OK";
	} catch (e) {
		return "hc_nodeDocumentFragmentNodeType: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_nodedocumentfragmentnodevalue.xml" fleur="hc_nodedocumentfragmentnodevalue" native="hc_nodedocumentfragmentnodevalue"><Fleur>(function(){
	var success;
	try {
		var doc;
		var docFragment;
		var attrList;
		var value;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		docFragment = doc.createDocumentFragment();
		attrList = docFragment.attributes;
		if (attrList != null) {
			return "hc_nodeDocumentFragmentNodeValue: #attributesNull 'attrList' equals '" + attrList + "' not null";
		}
		value = docFragment.nodeValue;
		if (value != null) {
			return "hc_nodeDocumentFragmentNodeValue: #initiallyNull 'value' equals '" + value + "' not null";
		}
		return "hc_nodeDocumentFragmentNodeValue: OK";
	} catch (e) {
		return "hc_nodeDocumentFragmentNodeValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var docFragment;
		var attrList;
		var value;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		docFragment = doc.createDocumentFragment();
		attrList = docFragment.attributes;
		if (attrList != null) {
			return "hc_nodeDocumentFragmentNodeValue: #attributesNull 'attrList' equals '" + attrList + "' not null";
		}
		value = docFragment.nodeValue;
		if (value != null) {
			return "hc_nodeDocumentFragmentNodeValue: #initiallyNull 'value' equals '" + value + "' not null";
		}
		return "hc_nodeDocumentFragmentNodeValue: OK";
	} catch (e) {
		return "hc_nodeDocumentFragmentNodeValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_nodedocumentnodeattribute.xml" fleur="hc_nodedocumentnodeattribute" native="hc_nodedocumentnodeattribute"><Fleur>(function(){
	var success;
	try {
		var doc;
		var attrList;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		attrList = doc.attributes;
		if (attrList != null) {
			return "hc_nodedocumentnodeattribute: #doc_attributes_is_null 'attrList' equals '" + attrList + "' not null";
		}
		return "hc_nodedocumentnodeattribute: OK";
	} catch (e) {
		return "hc_nodedocumentnodeattribute: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var attrList;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		attrList = doc.attributes;
		if (attrList != null) {
			return "hc_nodedocumentnodeattribute: #doc_attributes_is_null 'attrList' equals '" + attrList + "' not null";
		}
		return "hc_nodedocumentnodeattribute: OK";
	} catch (e) {
		return "hc_nodedocumentnodeattribute: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_nodedocumentnodename.xml" fleur="hc_nodedocumentnodename" native="hc_nodedocumentnodename"><Fleur>(function(){
	var success;
	try {
		var doc;
		var documentName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		documentName = doc.nodeName;
		if ("#document" !== documentName) {
			return "hc_nodeDocumentNodeName: #documentNodeName 'documentName' equals '" + documentName + "' not '" + "#document" + "'";
		}
		return "hc_nodeDocumentNodeName: OK";
	} catch (e) {
		return "hc_nodeDocumentNodeName: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var documentName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		documentName = doc.nodeName;
		if ("#document" !== documentName) {
			return "hc_nodeDocumentNodeName: #documentNodeName 'documentName' equals '" + documentName + "' not '" + "#document" + "'";
		}
		return "hc_nodeDocumentNodeName: OK";
	} catch (e) {
		return "hc_nodeDocumentNodeName: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_nodedocumentnodetype.xml" fleur="hc_nodedocumentnodetype" native="hc_nodedocumentnodetype"><Fleur>(function(){
	var success;
	try {
		var doc;
		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		nodeType = doc.nodeType;
		if (9 !== nodeType) {
			return "hc_nodeDocumentNodeType: #nodeDocumentNodeTypeAssert1 'nodeType' equals '" + nodeType + "' not '" + 9 + "'";
		}
		return "hc_nodeDocumentNodeType: OK";
	} catch (e) {
		return "hc_nodeDocumentNodeType: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		nodeType = doc.nodeType;
		if (9 !== nodeType) {
			return "hc_nodeDocumentNodeType: #nodeDocumentNodeTypeAssert1 'nodeType' equals '" + nodeType + "' not '" + 9 + "'";
		}
		return "hc_nodeDocumentNodeType: OK";
	} catch (e) {
		return "hc_nodeDocumentNodeType: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_nodedocumentnodevalue.xml" fleur="hc_nodedocumentnodevalue" native="hc_nodedocumentnodevalue"><Fleur>(function(){
	var success;
	try {
		var doc;
		var documentValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		documentValue = doc.nodeValue;
		if (documentValue != null) {
			return "hc_nodeDocumentNodeValue: #documentNodeValue 'documentValue' equals '" + documentValue + "' not null";
		}
		return "hc_nodeDocumentNodeValue: OK";
	} catch (e) {
		return "hc_nodeDocumentNodeValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var documentValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		documentValue = doc.nodeValue;
		if (documentValue != null) {
			return "hc_nodeDocumentNodeValue: #documentNodeValue 'documentValue' equals '" + documentValue + "' not null";
		}
		return "hc_nodeDocumentNodeValue: OK";
	} catch (e) {
		return "hc_nodeDocumentNodeValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_nodeelementnodeattributes.xml" fleur="hc_nodeelementnodeattributes" native="hc_nodeelementnodeattributes"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testAddr;
		var addrAttr;
		var attrNode;
		var attrName;
		var attrList = new Array();

		htmlExpected = new Array();
		htmlExpected[0] = "title";
		htmlExpected[1] = "class";
		expected = new Array();
		expected[0] = "title";
		expected[1] = "class";
		expected[2] = "dir";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		testAddr = elementList.item(2);
		addrAttr = testAddr.attributes;
		for (var index_id0x187615b0 = 0; index_id0x187615b0 &lt; addrAttr.length; index_id0x187615b0++) {
			attrNode = addrAttr.item(index_id0x187615b0);
			attrName = attrNode.nodeName;
attrList[attrList.length] = attrName;
		}
		if (("text/xml" === "text/html")) {
			if (htmlExpected.join("|").toLowerCase() !== attrList.join("|").toLowerCase()) {
				return "hc_nodeelementnodeattributes: #attrNames_html 'attrList' equals '" + attrList.join("|").toLowerCase() + "' not '" + htmlExpected.join("|").toLowerCase() + "'";
			}
		} else {
			if (expected.join("|") !== attrList.join("|")) {
				return "hc_nodeelementnodeattributes: #attrNames 'attrList' equals '" + attrList.join("|") + "' not '" + expected.join("|") + "'";
			}
		}
		return "hc_nodeelementnodeattributes: OK";
	} catch (e) {
		return "hc_nodeelementnodeattributes: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testAddr;
		var addrAttr;
		var attrNode;
		var attrName;
		var attrList = new Array();

		htmlExpected = new Array();
		htmlExpected[0] = "title";
		htmlExpected[1] = "class";
		expected = new Array();
		expected[0] = "title";
		expected[1] = "class";
		expected[2] = "dir";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		testAddr = elementList.item(2);
		addrAttr = testAddr.attributes;
		for (var index_id0x187615b0 = 0; index_id0x187615b0 &lt; addrAttr.length; index_id0x187615b0++) {
			attrNode = addrAttr.item(index_id0x187615b0);
			attrName = attrNode.nodeName;
attrList[attrList.length] = attrName;
		}
		if (("text/xml" === "text/html")) {
			if (htmlExpected.join("|").toLowerCase() !== attrList.join("|").toLowerCase()) {
				return "hc_nodeelementnodeattributes: #attrNames_html 'attrList' equals '" + attrList.join("|").toLowerCase() + "' not '" + htmlExpected.join("|").toLowerCase() + "'";
			}
		} else {
			if (expected.join("|") !== attrList.join("|")) {
				return "hc_nodeelementnodeattributes: #attrNames 'attrList' equals '" + attrList.join("|") + "' not '" + expected.join("|") + "'";
			}
		}
		return "hc_nodeelementnodeattributes: OK";
	} catch (e) {
		return "hc_nodeelementnodeattributes: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_nodeelementnodename.xml" fleur="hc_nodeelementnodename" native="hc_nodeelementnodename"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementNode;
		var elementName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementNode = doc.documentElement;
		elementName = elementNode.nodeName;
		if (("text/xml" === "image/svg+xml")) {
			if ("svg" !== elementName) {
				return "hc_nodeelementnodename: #svgNodeName 'elementName' equals '" + elementName + "' not '" + "svg" + "'";
			}
		} else {
			if ("html" !== elementName) {
				return "hc_nodeelementnodename: #nodeName 'elementName' equals '" + elementName + "' not '" + "html" + "'";
			}
		}
		return "hc_nodeelementnodename: OK";
	} catch (e) {
		return "hc_nodeelementnodename: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementNode;
		var elementName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementNode = doc.documentElement;
		elementName = elementNode.nodeName;
		if (("text/xml" === "image/svg+xml")) {
			if ("svg" !== elementName) {
				return "hc_nodeelementnodename: #svgNodeName 'elementName' equals '" + elementName + "' not '" + "svg" + "'";
			}
		} else {
			if ("html" !== elementName) {
				return "hc_nodeelementnodename: #nodeName 'elementName' equals '" + elementName + "' not '" + "html" + "'";
			}
		}
		return "hc_nodeelementnodename: OK";
	} catch (e) {
		return "hc_nodeelementnodename: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_nodeelementnodetype.xml" fleur="hc_nodeelementnodetype" native="hc_nodeelementnodetype"><Fleur>(function(){
	var success;
	try {
		var doc;
		var rootNode;
		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		rootNode = doc.documentElement;
		nodeType = rootNode.nodeType;
		if (1 !== nodeType) {
			return "hc_nodeElementNodeType: #nodeElementNodeTypeAssert1 'nodeType' equals '" + nodeType + "' not '" + 1 + "'";
		}
		return "hc_nodeElementNodeType: OK";
	} catch (e) {
		return "hc_nodeElementNodeType: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var rootNode;
		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		rootNode = doc.documentElement;
		nodeType = rootNode.nodeType;
		if (1 !== nodeType) {
			return "hc_nodeElementNodeType: #nodeElementNodeTypeAssert1 'nodeType' equals '" + nodeType + "' not '" + 1 + "'";
		}
		return "hc_nodeElementNodeType: OK";
	} catch (e) {
		return "hc_nodeElementNodeType: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_nodeelementnodevalue.xml" fleur="hc_nodeelementnodevalue" native="hc_nodeelementnodevalue"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementNode;
		var elementValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementNode = doc.documentElement;
		elementValue = elementNode.nodeValue;
		if (elementValue != null) {
			return "hc_nodeElementNodeValue: #elementNodeValue 'elementValue' equals '" + elementValue + "' not null";
		}
		return "hc_nodeElementNodeValue: OK";
	} catch (e) {
		return "hc_nodeElementNodeValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementNode;
		var elementValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementNode = doc.documentElement;
		elementValue = elementNode.nodeValue;
		if (elementValue != null) {
			return "hc_nodeElementNodeValue: #elementNodeValue 'elementValue' equals '" + elementValue + "' not null";
		}
		return "hc_nodeElementNodeValue: OK";
	} catch (e) {
		return "hc_nodeElementNodeValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_nodegetfirstchild.xml" fleur="hc_nodegetfirstchild" native="hc_nodegetfirstchild"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var fchildNode;
		var childName;
		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("p");
		employeeNode = elementList.item(1);
		fchildNode = employeeNode.firstChild;
		childName = fchildNode.nodeName;
		if (("#text" == childName)) {
			if ("#text" !== childName) {
				return "hc_nodeGetFirstChild: #firstChild_w_whitespace 'childName' equals '" + childName + "' not '" + "#text" + "'";
			}
		} else {
			if ("em" !== childName) {
				return "hc_nodeGetFirstChild: #firstChild_wo_whitespace 'childName' equals '" + childName + "' not '" + "em" + "'";
			}
		}
		return "hc_nodeGetFirstChild: OK";
	} catch (e) {
		return "hc_nodeGetFirstChild: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var fchildNode;
		var childName;
		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("p");
		employeeNode = elementList.item(1);
		fchildNode = employeeNode.firstChild;
		childName = fchildNode.nodeName;
		if (("#text" == childName)) {
			if ("#text" !== childName) {
				return "hc_nodeGetFirstChild: #firstChild_w_whitespace 'childName' equals '" + childName + "' not '" + "#text" + "'";
			}
		} else {
			if ("em" !== childName) {
				return "hc_nodeGetFirstChild: #firstChild_wo_whitespace 'childName' equals '" + childName + "' not '" + "em" + "'";
			}
		}
		return "hc_nodeGetFirstChild: OK";
	} catch (e) {
		return "hc_nodeGetFirstChild: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_nodegetfirstchildnull.xml" fleur="hc_nodegetfirstchildnull" native="hc_nodegetfirstchildnull"><Fleur>(function(){
	var success;
	try {
		var doc;
		var emList;
		var emNode;
		var emText;
		var nullChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		emList = doc.getElementsByTagName("em");
		emNode = emList.item(0);
		emText = emNode.firstChild;
		nullChild = emText.firstChild;
		if (nullChild != null) {
			return "hc_nodeGetFirstChildNull: #nullChild 'nullChild' equals '" + nullChild + "' not null";
		}
		return "hc_nodeGetFirstChildNull: OK";
	} catch (e) {
		return "hc_nodeGetFirstChildNull: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var emList;
		var emNode;
		var emText;
		var nullChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		emList = doc.getElementsByTagName("em");
		emNode = emList.item(0);
		emText = emNode.firstChild;
		nullChild = emText.firstChild;
		if (nullChild != null) {
			return "hc_nodeGetFirstChildNull: #nullChild 'nullChild' equals '" + nullChild + "' not null";
		}
		return "hc_nodeGetFirstChildNull: OK";
	} catch (e) {
		return "hc_nodeGetFirstChildNull: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_nodegetlastchild.xml" fleur="hc_nodegetlastchild" native="hc_nodegetlastchild"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var lchildNode;
		var childName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("p");
		employeeNode = elementList.item(1);
		lchildNode = employeeNode.lastChild;
		childName = lchildNode.nodeName;
		if ("#text" !== childName) {
			return "hc_nodeGetLastChild: #whitespace 'childName' equals '" + childName + "' not '" + "#text" + "'";
		}
		return "hc_nodeGetLastChild: OK";
	} catch (e) {
		return "hc_nodeGetLastChild: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var lchildNode;
		var childName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("p");
		employeeNode = elementList.item(1);
		lchildNode = employeeNode.lastChild;
		childName = lchildNode.nodeName;
		if ("#text" !== childName) {
			return "hc_nodeGetLastChild: #whitespace 'childName' equals '" + childName + "' not '" + "#text" + "'";
		}
		return "hc_nodeGetLastChild: OK";
	} catch (e) {
		return "hc_nodeGetLastChild: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_nodegetlastchildnull.xml" fleur="hc_nodegetlastchildnull" native="hc_nodegetlastchildnull"><Fleur>(function(){
	var success;
	try {
		var doc;
		var emList;
		var emNode;
		var emText;
		var nullChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		emList = doc.getElementsByTagName("em");
		emNode = emList.item(0);
		emText = emNode.firstChild;
		nullChild = emText.lastChild;
		if (nullChild != null) {
			return "hc_nodeGetLastChildNull: #nullChild 'nullChild' equals '" + nullChild + "' not null";
		}
		return "hc_nodeGetLastChildNull: OK";
	} catch (e) {
		return "hc_nodeGetLastChildNull: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var emList;
		var emNode;
		var emText;
		var nullChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		emList = doc.getElementsByTagName("em");
		emNode = emList.item(0);
		emText = emNode.firstChild;
		nullChild = emText.lastChild;
		if (nullChild != null) {
			return "hc_nodeGetLastChildNull: #nullChild 'nullChild' equals '" + nullChild + "' not null";
		}
		return "hc_nodeGetLastChildNull: OK";
	} catch (e) {
		return "hc_nodeGetLastChildNull: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_nodegetnextsibling.xml" fleur="hc_nodegetnextsibling" native="hc_nodegetnextsibling"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var emNode;
		var nsNode;
		var nsName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("em");
		emNode = elementList.item(1);
		nsNode = emNode.nextSibling;
		nsName = nsNode.nodeName;
		if ("#text" !== nsName) {
			return "hc_nodeGetNextSibling: #whitespace 'nsName' equals '" + nsName + "' not '" + "#text" + "'";
		}
		return "hc_nodeGetNextSibling: OK";
	} catch (e) {
		return "hc_nodeGetNextSibling: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var emNode;
		var nsNode;
		var nsName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("em");
		emNode = elementList.item(1);
		nsNode = emNode.nextSibling;
		nsName = nsNode.nodeName;
		if ("#text" !== nsName) {
			return "hc_nodeGetNextSibling: #whitespace 'nsName' equals '" + nsName + "' not '" + "#text" + "'";
		}
		return "hc_nodeGetNextSibling: OK";
	} catch (e) {
		return "hc_nodeGetNextSibling: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_nodegetnextsiblingnull.xml" fleur="hc_nodegetnextsiblingnull" native="hc_nodegetnextsiblingnull"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var lcNode;
		var nsNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("p");
		employeeNode = elementList.item(1);
		lcNode = employeeNode.lastChild;
		nsNode = lcNode.nextSibling;
		if (nsNode != null) {
			return "hc_nodeGetNextSiblingNull: #nodeGetNextSiblingNullAssert1 'nsNode' equals '" + nsNode + "' not null";
		}
		return "hc_nodeGetNextSiblingNull: OK";
	} catch (e) {
		return "hc_nodeGetNextSiblingNull: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var lcNode;
		var nsNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("p");
		employeeNode = elementList.item(1);
		lcNode = employeeNode.lastChild;
		nsNode = lcNode.nextSibling;
		if (nsNode != null) {
			return "hc_nodeGetNextSiblingNull: #nodeGetNextSiblingNullAssert1 'nsNode' equals '" + nsNode + "' not null";
		}
		return "hc_nodeGetNextSiblingNull: OK";
	} catch (e) {
		return "hc_nodeGetNextSiblingNull: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_nodegetownerdocument.xml" fleur="hc_nodegetownerdocument" native="hc_nodegetownerdocument"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var docNode;
		var ownerDocument;
		var docElement;
		var elementName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("p");
		docNode = elementList.item(1);
		ownerDocument = docNode.ownerDocument;
		docElement = ownerDocument.documentElement;
		elementName = docElement.nodeName;
		if (("text/xml" === "image/svg+xml")) {
			if ("svg" !== elementName) {
				return "hc_nodegetownerdocument: #svgNodeName 'elementName' equals '" + elementName + "' not '" + "svg" + "'";
			}
		} else {
			if ("html" !== elementName) {
				return "hc_nodegetownerdocument: #ownerDocElemTagName 'elementName' equals '" + elementName + "' not '" + "html" + "'";
			}
		}
		return "hc_nodegetownerdocument: OK";
	} catch (e) {
		return "hc_nodegetownerdocument: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var docNode;
		var ownerDocument;
		var docElement;
		var elementName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("p");
		docNode = elementList.item(1);
		ownerDocument = docNode.ownerDocument;
		docElement = ownerDocument.documentElement;
		elementName = docElement.nodeName;
		if (("text/xml" === "image/svg+xml")) {
			if ("svg" !== elementName) {
				return "hc_nodegetownerdocument: #svgNodeName 'elementName' equals '" + elementName + "' not '" + "svg" + "'";
			}
		} else {
			if ("html" !== elementName) {
				return "hc_nodegetownerdocument: #ownerDocElemTagName 'elementName' equals '" + elementName + "' not '" + "html" + "'";
			}
		}
		return "hc_nodegetownerdocument: OK";
	} catch (e) {
		return "hc_nodegetownerdocument: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_nodegetownerdocumentnull.xml" fleur="hc_nodegetownerdocumentnull" native="hc_nodegetownerdocumentnull"><Fleur>(function(){
	var success;
	try {
		var doc;
		var ownerDocument;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		ownerDocument = doc.ownerDocument;
		if (ownerDocument != null) {
			return "hc_nodeGetOwnerDocumentNull: #nodeGetOwnerDocumentNullAssert1 'ownerDocument' equals '" + ownerDocument + "' not null";
		}
		return "hc_nodeGetOwnerDocumentNull: OK";
	} catch (e) {
		return "hc_nodeGetOwnerDocumentNull: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var ownerDocument;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		ownerDocument = doc.ownerDocument;
		if (ownerDocument != null) {
			return "hc_nodeGetOwnerDocumentNull: #nodeGetOwnerDocumentNullAssert1 'ownerDocument' equals '" + ownerDocument + "' not null";
		}
		return "hc_nodeGetOwnerDocumentNull: OK";
	} catch (e) {
		return "hc_nodeGetOwnerDocumentNull: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_nodegetprevioussibling.xml" fleur="hc_nodegetprevioussibling" native="hc_nodegetprevioussibling"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var psNode;
		var psName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("strong");
		nameNode = elementList.item(1);
		psNode = nameNode.previousSibling;
		psName = psNode.nodeName;
		if ("#text" !== psName) {
			return "hc_nodeGetPreviousSibling: #whitespace 'psName' equals '" + psName + "' not '" + "#text" + "'";
		}
		return "hc_nodeGetPreviousSibling: OK";
	} catch (e) {
		return "hc_nodeGetPreviousSibling: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var psNode;
		var psName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("strong");
		nameNode = elementList.item(1);
		psNode = nameNode.previousSibling;
		psName = psNode.nodeName;
		if ("#text" !== psName) {
			return "hc_nodeGetPreviousSibling: #whitespace 'psName' equals '" + psName + "' not '" + "#text" + "'";
		}
		return "hc_nodeGetPreviousSibling: OK";
	} catch (e) {
		return "hc_nodeGetPreviousSibling: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_nodegetprevioussiblingnull.xml" fleur="hc_nodegetprevioussiblingnull" native="hc_nodegetprevioussiblingnull"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var fcNode;
		var psNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("p");
		employeeNode = elementList.item(2);
		fcNode = employeeNode.firstChild;
		psNode = fcNode.previousSibling;
		if (psNode != null) {
			return "hc_nodeGetPreviousSiblingNull: #nodeGetPreviousSiblingNullAssert1 'psNode' equals '" + psNode + "' not null";
		}
		return "hc_nodeGetPreviousSiblingNull: OK";
	} catch (e) {
		return "hc_nodeGetPreviousSiblingNull: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var fcNode;
		var psNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("p");
		employeeNode = elementList.item(2);
		fcNode = employeeNode.firstChild;
		psNode = fcNode.previousSibling;
		if (psNode != null) {
			return "hc_nodeGetPreviousSiblingNull: #nodeGetPreviousSiblingNullAssert1 'psNode' equals '" + psNode + "' not null";
		}
		return "hc_nodeGetPreviousSiblingNull: OK";
	} catch (e) {
		return "hc_nodeGetPreviousSiblingNull: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_nodehaschildnodes.xml" fleur="hc_nodehaschildnodes" native="hc_nodehaschildnodes"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var state;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("p");
		employeeNode = elementList.item(1);
		state = employeeNode.hasChildNodes();
		if (state !== true) {
			return "nodeHasChildAssert1: 'state' equals '" + state + "' not true";
		}
		return "hc_nodeHasChildNodes: OK";
	} catch (e) {
		return "hc_nodeHasChildNodes: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var state;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("p");
		employeeNode = elementList.item(1);
		state = employeeNode.hasChildNodes();
		if (state !== true) {
			return "nodeHasChildAssert1: 'state' equals '" + state + "' not true";
		}
		return "hc_nodeHasChildNodes: OK";
	} catch (e) {
		return "hc_nodeHasChildNodes: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_nodehaschildnodesfalse.xml" fleur="hc_nodehaschildnodesfalse" native="hc_nodehaschildnodesfalse"><Fleur>(function(){
	var success;
	try {
		var doc;
		var emList;
		var emNode;
		var emText;
		var hasChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		emList = doc.getElementsByTagName("em");
		emNode = emList.item(0);
		emText = emNode.firstChild;
		hasChild = emText.hasChildNodes();
		if (hasChild !== false) {
			return "hasChild: 'hasChild' equals '" + hasChild + "' not false";
		}
		return "hc_nodeHasChildNodesFalse: OK";
	} catch (e) {
		return "hc_nodeHasChildNodesFalse: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var emList;
		var emNode;
		var emText;
		var hasChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		emList = doc.getElementsByTagName("em");
		emNode = emList.item(0);
		emText = emNode.firstChild;
		hasChild = emText.hasChildNodes();
		if (hasChild !== false) {
			return "hasChild: 'hasChild' equals '" + hasChild + "' not false";
		}
		return "hc_nodeHasChildNodesFalse: OK";
	} catch (e) {
		return "hc_nodeHasChildNodesFalse: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_nodeinsertbefore.xml" fleur="hc_nodeinsertbefore" native="hc_nodeinsertbefore"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var childList;
		var refChild;
		var newChild;
		var child;
		var childName;
		var insertedNode;
		var actual = new Array();

		expected = new Array();
		expected[0] = "em";
		expected[1] = "strong";
		expected[2] = "code";
		expected[3] = "br";
		expected[4] = "sup";
		expected[5] = "var";
		expected[6] = "acronym";
		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("sup");
		refChild = elementList.item(2);
		employeeNode = refChild.parentNode;
		childList = employeeNode.childNodes;
		newChild = doc.createElement("br");
		insertedNode = employeeNode.insertBefore(newChild, refChild);
		for (var index_id0x18acec90 = 0; index_id0x18acec90 &lt; childList.length; index_id0x18acec90++) {
			child = childList.item(index_id0x18acec90);
			nodeType = child.nodeType;
			if ((1 == nodeType)) {
				childName = child.nodeName;
actual[actual.length] = childName;
			}
		}
		if (expected.join("|") !== actual.join("|")) {
			return "hc_nodeInsertBefore: #nodeNames 'actual' equals '" + actual.join("|") + "' not '" + expected.join("|") + "'";
		}
		return "hc_nodeInsertBefore: OK";
	} catch (e) {
		return "hc_nodeInsertBefore: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var childList;
		var refChild;
		var newChild;
		var child;
		var childName;
		var insertedNode;
		var actual = new Array();

		expected = new Array();
		expected[0] = "em";
		expected[1] = "strong";
		expected[2] = "code";
		expected[3] = "br";
		expected[4] = "sup";
		expected[5] = "var";
		expected[6] = "acronym";
		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("sup");
		refChild = elementList.item(2);
		employeeNode = refChild.parentNode;
		childList = employeeNode.childNodes;
		newChild = doc.createElement("br");
		insertedNode = employeeNode.insertBefore(newChild, refChild);
		for (var index_id0x18acec90 = 0; index_id0x18acec90 &lt; childList.length; index_id0x18acec90++) {
			child = childList.item(index_id0x18acec90);
			nodeType = child.nodeType;
			if ((1 == nodeType)) {
				childName = child.nodeName;
actual[actual.length] = childName;
			}
		}
		if (expected.join("|") !== actual.join("|")) {
			return "hc_nodeInsertBefore: #nodeNames 'actual' equals '" + actual.join("|") + "' not '" + expected.join("|") + "'";
		}
		return "hc_nodeInsertBefore: OK";
	} catch (e) {
		return "hc_nodeInsertBefore: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_nodeinsertbeforedocfragment.xml" fleur="hc_nodeinsertbeforedocfragment" native="hc_nodeinsertbeforedocfragment"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var childList;
		var refChild;
		var newdocFragment;
		var newChild1;
		var newChild2;
		var child;
		var childName;
		var appendedChild;
		var insertedNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("p");
		employeeNode = elementList.item(1);
		childList = employeeNode.childNodes;
		refChild = childList.item(3);
		newdocFragment = doc.createDocumentFragment();
		newChild1 = doc.createElement("br");
		newChild2 = doc.createElement("b");
		appendedChild = newdocFragment.appendChild(newChild1);
		appendedChild = newdocFragment.appendChild(newChild2);
		insertedNode = employeeNode.insertBefore(newdocFragment, refChild);
		child = childList.item(3);
		childName = child.nodeName;
		if ("br" !== childName) {
			return "hc_nodeInsertBeforeDocFragment: #childName3 'childName' equals '" + childName + "' not '" + "br" + "'";
		}
		child = childList.item(4);
		childName = child.nodeName;
		if ("b" !== childName) {
			return "hc_nodeInsertBeforeDocFragment: #childName4 'childName' equals '" + childName + "' not '" + "b" + "'";
		}
		return "hc_nodeInsertBeforeDocFragment: OK";
	} catch (e) {
		return "hc_nodeInsertBeforeDocFragment: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var childList;
		var refChild;
		var newdocFragment;
		var newChild1;
		var newChild2;
		var child;
		var childName;
		var appendedChild;
		var insertedNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("p");
		employeeNode = elementList.item(1);
		childList = employeeNode.childNodes;
		refChild = childList.item(3);
		newdocFragment = doc.createDocumentFragment();
		newChild1 = doc.createElement("br");
		newChild2 = doc.createElement("b");
		appendedChild = newdocFragment.appendChild(newChild1);
		appendedChild = newdocFragment.appendChild(newChild2);
		insertedNode = employeeNode.insertBefore(newdocFragment, refChild);
		child = childList.item(3);
		childName = child.nodeName;
		if ("br" !== childName) {
			return "hc_nodeInsertBeforeDocFragment: #childName3 'childName' equals '" + childName + "' not '" + "br" + "'";
		}
		child = childList.item(4);
		childName = child.nodeName;
		if ("b" !== childName) {
			return "hc_nodeInsertBeforeDocFragment: #childName4 'childName' equals '" + childName + "' not '" + "b" + "'";
		}
		return "hc_nodeInsertBeforeDocFragment: OK";
	} catch (e) {
		return "hc_nodeInsertBeforeDocFragment: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_nodeinsertbeforeinvalidnodetype.xml" fleur="hc_nodeinsertbeforeinvalidnodetype" native="hc_nodeinsertbeforeinvalidnodetype"><Fleur>(function(){
	var success;
	try {
		var doc;
		var rootNode;
		var newChild;
		var elementList;
		var refChild;
		var insertedNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		newChild = doc.createAttribute("title");
		elementList = doc.getElementsByTagName("p");
		refChild = elementList.item(1);
		rootNode = refChild.parentNode;
		success = false;
		try {
			insertedNode = rootNode.insertBefore(newChild, refChild);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 3;
			}
		}
		if (!success) {
			return "hc_nodeInsertBeforeInvalidNodeType: Exception HIERARCHY_REQUEST_ERR expected";
		}
		return "hc_nodeInsertBeforeInvalidNodeType: OK";
	} catch (e) {
		return "hc_nodeInsertBeforeInvalidNodeType: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var rootNode;
		var newChild;
		var elementList;
		var refChild;
		var insertedNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		newChild = doc.createAttribute("title");
		elementList = doc.getElementsByTagName("p");
		refChild = elementList.item(1);
		rootNode = refChild.parentNode;
		success = false;
		try {
			insertedNode = rootNode.insertBefore(newChild, refChild);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 3;
			}
		}
		if (!success) {
			return "hc_nodeInsertBeforeInvalidNodeType: Exception HIERARCHY_REQUEST_ERR expected";
		}
		return "hc_nodeInsertBeforeInvalidNodeType: OK";
	} catch (e) {
		return "hc_nodeInsertBeforeInvalidNodeType: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_nodeinsertbeforenewchilddiffdocument.xml" fleur="hc_nodeinsertbeforenewchilddiffdocument" native="hc_nodeinsertbeforenewchilddiffdocument"><Fleur>(function(){
	var success;
	try {
		var doc1;
		var doc2;
		var refChild;
		var newChild;
		var elementList;
		var elementNode;
		var insertedNode;
		var doc1Req = new XMLHttpRequest();
		doc1Req.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		doc1Req.send();
		doc1 = new Fleur.DOMParser().parseFromString(doc1Req.responseText, "text/xml");
		var doc2Req = new XMLHttpRequest();
		doc2Req.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		doc2Req.send();
		doc2 = new Fleur.DOMParser().parseFromString(doc2Req.responseText, "text/xml");
		newChild = doc1.createElement("br");
		elementList = doc2.getElementsByTagName("p");
		elementNode = elementList.item(1);
		refChild = elementNode.firstChild;
		success = false;
		try {
			insertedNode = elementNode.insertBefore(newChild, refChild);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 4;
			}
		}
		if (!success) {
			return "hc_nodeInsertBeforeNewChildDiffDocument: Exception WRONG_DOCUMENT_ERR expected";
		}
		return "hc_nodeInsertBeforeNewChildDiffDocument: OK";
	} catch (e) {
		return "hc_nodeInsertBeforeNewChildDiffDocument: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc1;
		var doc2;
		var refChild;
		var newChild;
		var elementList;
		var elementNode;
		var insertedNode;
		var doc1Req = new XMLHttpRequest();
		doc1Req.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		doc1Req.send();
		doc1 = new DOMParser().parseFromString(doc1Req.responseText, "text/xml");
		var doc2Req = new XMLHttpRequest();
		doc2Req.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		doc2Req.send();
		doc2 = new DOMParser().parseFromString(doc2Req.responseText, "text/xml");
		newChild = doc1.createElement("br");
		elementList = doc2.getElementsByTagName("p");
		elementNode = elementList.item(1);
		refChild = elementNode.firstChild;
		success = false;
		try {
			insertedNode = elementNode.insertBefore(newChild, refChild);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 4;
			}
		}
		if (!success) {
			return "hc_nodeInsertBeforeNewChildDiffDocument: Exception WRONG_DOCUMENT_ERR expected";
		}
		return "hc_nodeInsertBeforeNewChildDiffDocument: OK";
	} catch (e) {
		return "hc_nodeInsertBeforeNewChildDiffDocument: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_nodeinsertbeforenewchildexists.xml" fleur="hc_nodeinsertbeforenewchildexists" native="hc_nodeinsertbeforenewchildexists"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var childList;
		var refChild;
		var newChild;
		var child;
		var childName;
		var insertedNode;
		expected = new Array();
		expected[0] = "strong";
		expected[1] = "code";
		expected[2] = "sup";
		expected[3] = "var";
		expected[4] = "em";
		expected[5] = "acronym";
		var result = new Array();

		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("p");
		employeeNode = elementList.item(1);
		childList = employeeNode.getElementsByTagName("*");
		refChild = childList.item(5);
		newChild = childList.item(0);
		insertedNode = employeeNode.insertBefore(newChild, refChild);
		for (var index_id0x18b74f10 = 0; index_id0x18b74f10 &lt; childList.length; index_id0x18b74f10++) {
			child = childList.item(index_id0x18b74f10);
			nodeType = child.nodeType;
			if ((1 == nodeType)) {
				childName = child.nodeName;
result[result.length] = childName;
			}
		}
		if (expected.join("|") !== result.join("|")) {
			return "hc_nodeInsertBeforeNewChildExists: #childNames 'result' equals '" + result.join("|") + "' not '" + expected.join("|") + "'";
		}
		return "hc_nodeInsertBeforeNewChildExists: OK";
	} catch (e) {
		return "hc_nodeInsertBeforeNewChildExists: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var childList;
		var refChild;
		var newChild;
		var child;
		var childName;
		var insertedNode;
		expected = new Array();
		expected[0] = "strong";
		expected[1] = "code";
		expected[2] = "sup";
		expected[3] = "var";
		expected[4] = "em";
		expected[5] = "acronym";
		var result = new Array();

		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("p");
		employeeNode = elementList.item(1);
		childList = employeeNode.getElementsByTagName("*");
		refChild = childList.item(5);
		newChild = childList.item(0);
		insertedNode = employeeNode.insertBefore(newChild, refChild);
		for (var index_id0x18b74f10 = 0; index_id0x18b74f10 &lt; childList.length; index_id0x18b74f10++) {
			child = childList.item(index_id0x18b74f10);
			nodeType = child.nodeType;
			if ((1 == nodeType)) {
				childName = child.nodeName;
result[result.length] = childName;
			}
		}
		if (expected.join("|") !== result.join("|")) {
			return "hc_nodeInsertBeforeNewChildExists: #childNames 'result' equals '" + result.join("|") + "' not '" + expected.join("|") + "'";
		}
		return "hc_nodeInsertBeforeNewChildExists: OK";
	} catch (e) {
		return "hc_nodeInsertBeforeNewChildExists: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_nodeinsertbeforenodeancestor.xml" fleur="hc_nodeinsertbeforenodeancestor" native="hc_nodeinsertbeforenodeancestor"><Fleur>(function(){
	var success;
	try {
		var doc;
		var newChild;
		var elementList;
		var employeeNode;
		var childList;
		var refChild;
		var insertedNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		newChild = doc.documentElement;
		elementList = doc.getElementsByTagName("p");
		employeeNode = elementList.item(1);
		childList = employeeNode.childNodes;
		refChild = childList.item(0);
		success = false;
		try {
			insertedNode = employeeNode.insertBefore(newChild, refChild);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 3;
			}
		}
		if (!success) {
			return "hc_nodeInsertBeforeNodeAncestor: Exception HIERARCHY_REQUEST_ERR expected";
		}
		return "hc_nodeInsertBeforeNodeAncestor: OK";
	} catch (e) {
		return "hc_nodeInsertBeforeNodeAncestor: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var newChild;
		var elementList;
		var employeeNode;
		var childList;
		var refChild;
		var insertedNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		newChild = doc.documentElement;
		elementList = doc.getElementsByTagName("p");
		employeeNode = elementList.item(1);
		childList = employeeNode.childNodes;
		refChild = childList.item(0);
		success = false;
		try {
			insertedNode = employeeNode.insertBefore(newChild, refChild);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 3;
			}
		}
		if (!success) {
			return "hc_nodeInsertBeforeNodeAncestor: Exception HIERARCHY_REQUEST_ERR expected";
		}
		return "hc_nodeInsertBeforeNodeAncestor: OK";
	} catch (e) {
		return "hc_nodeInsertBeforeNodeAncestor: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_nodeinsertbeforenodename.xml" fleur="hc_nodeinsertbeforenodename" native="hc_nodeinsertbeforenodename"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var childList;
		var refChild;
		var newChild;
		var insertedNode;
		var childName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("p");
		employeeNode = elementList.item(1);
		childList = employeeNode.childNodes;
		refChild = childList.item(3);
		newChild = doc.createElement("br");
		insertedNode = employeeNode.insertBefore(newChild, refChild);
		childName = insertedNode.nodeName;
		if ("br" !== childName) {
			return "hc_nodeInsertBeforeNodeName: #nodeName 'childName' equals '" + childName + "' not '" + "br" + "'";
		}
		return "hc_nodeInsertBeforeNodeName: OK";
	} catch (e) {
		return "hc_nodeInsertBeforeNodeName: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var childList;
		var refChild;
		var newChild;
		var insertedNode;
		var childName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("p");
		employeeNode = elementList.item(1);
		childList = employeeNode.childNodes;
		refChild = childList.item(3);
		newChild = doc.createElement("br");
		insertedNode = employeeNode.insertBefore(newChild, refChild);
		childName = insertedNode.nodeName;
		if ("br" !== childName) {
			return "hc_nodeInsertBeforeNodeName: #nodeName 'childName' equals '" + childName + "' not '" + "br" + "'";
		}
		return "hc_nodeInsertBeforeNodeName: OK";
	} catch (e) {
		return "hc_nodeInsertBeforeNodeName: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_nodeinsertbeforerefchildnonexistent.xml" fleur="hc_nodeinsertbeforerefchildnonexistent" native="hc_nodeinsertbeforerefchildnonexistent"><Fleur>(function(){
	var success;
	try {
		var doc;
		var refChild;
		var newChild;
		var elementList;
		var elementNode;
		var insertedNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		newChild = doc.createElement("br");
		refChild = doc.createElement("b");
		elementList = doc.getElementsByTagName("p");
		elementNode = elementList.item(1);
		success = false;
		try {
			insertedNode = elementNode.insertBefore(newChild, refChild);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 8;
			}
		}
		if (!success) {
			return "hc_nodeInsertBeforeRefChildNonexistent: Exception NOT_FOUND_ERR expected";
		}
		return "hc_nodeInsertBeforeRefChildNonexistent: OK";
	} catch (e) {
		return "hc_nodeInsertBeforeRefChildNonexistent: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var refChild;
		var newChild;
		var elementList;
		var elementNode;
		var insertedNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		newChild = doc.createElement("br");
		refChild = doc.createElement("b");
		elementList = doc.getElementsByTagName("p");
		elementNode = elementList.item(1);
		success = false;
		try {
			insertedNode = elementNode.insertBefore(newChild, refChild);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 8;
			}
		}
		if (!success) {
			return "hc_nodeInsertBeforeRefChildNonexistent: Exception NOT_FOUND_ERR expected";
		}
		return "hc_nodeInsertBeforeRefChildNonexistent: OK";
	} catch (e) {
		return "hc_nodeInsertBeforeRefChildNonexistent: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_nodeinsertbeforerefchildnull.xml" fleur="hc_nodeinsertbeforerefchildnull" native="hc_nodeinsertbeforerefchildnull"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var childList;
		var refChild = null;
		var newChild;
		var child;
		var childName;
		var insertedNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("p");
		employeeNode = elementList.item(1);
		childList = employeeNode.childNodes;
		newChild = doc.createElement("br");
		insertedNode = employeeNode.insertBefore(newChild, refChild);
		child = employeeNode.lastChild;
		childName = child.nodeName;
		if ("br" !== childName) {
			return "hc_nodeInsertBeforeRefChildNull: #nodeName 'childName' equals '" + childName + "' not '" + "br" + "'";
		}
		return "hc_nodeInsertBeforeRefChildNull: OK";
	} catch (e) {
		return "hc_nodeInsertBeforeRefChildNull: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var childList;
		var refChild = null;
		var newChild;
		var child;
		var childName;
		var insertedNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("p");
		employeeNode = elementList.item(1);
		childList = employeeNode.childNodes;
		newChild = doc.createElement("br");
		insertedNode = employeeNode.insertBefore(newChild, refChild);
		child = employeeNode.lastChild;
		childName = child.nodeName;
		if ("br" !== childName) {
			return "hc_nodeInsertBeforeRefChildNull: #nodeName 'childName' equals '" + childName + "' not '" + "br" + "'";
		}
		return "hc_nodeInsertBeforeRefChildNull: OK";
	} catch (e) {
		return "hc_nodeInsertBeforeRefChildNull: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_nodelistindexequalzero.xml" fleur="hc_nodelistindexequalzero" native="hc_nodelistindexequalzero"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var employeeList;
		var child;
		var childName;
		var length;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("p");
		employeeNode = elementList.item(2);
		employeeList = employeeNode.childNodes;
		length = employeeList.length;
		child = employeeList.item(0);
		childName = child.nodeName;
		if ((13 == length)) {
			if ("#text" !== childName) {
				return "hc_nodelistIndexEqualZero: #childName_w_whitespace 'childName' equals '" + childName + "' not '" + "#text" + "'";
			}
		} else {
			if ("em" !== childName) {
				return "hc_nodelistIndexEqualZero: #childName_wo_whitespace 'childName' equals '" + childName + "' not '" + "em" + "'";
			}
		}
		return "hc_nodelistIndexEqualZero: OK";
	} catch (e) {
		return "hc_nodelistIndexEqualZero: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var employeeList;
		var child;
		var childName;
		var length;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("p");
		employeeNode = elementList.item(2);
		employeeList = employeeNode.childNodes;
		length = employeeList.length;
		child = employeeList.item(0);
		childName = child.nodeName;
		if ((13 == length)) {
			if ("#text" !== childName) {
				return "hc_nodelistIndexEqualZero: #childName_w_whitespace 'childName' equals '" + childName + "' not '" + "#text" + "'";
			}
		} else {
			if ("em" !== childName) {
				return "hc_nodelistIndexEqualZero: #childName_wo_whitespace 'childName' equals '" + childName + "' not '" + "em" + "'";
			}
		}
		return "hc_nodelistIndexEqualZero: OK";
	} catch (e) {
		return "hc_nodelistIndexEqualZero: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_nodelistindexgetlength.xml" fleur="hc_nodelistindexgetlength" native="hc_nodelistindexgetlength"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var employeeList;
		var length;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("p");
		employeeNode = elementList.item(2);
		employeeList = employeeNode.childNodes;
		length = employeeList.length;
		if ((6 == length)) {
			if (6 !== length) {
				return "hc_nodelistIndexGetLength: #length_wo_space 'length' equals '" + length + "' not '" + 6 + "'";
			}
		} else {
			if (13 !== length) {
				return "hc_nodelistIndexGetLength: #length_w_space 'length' equals '" + length + "' not '" + 13 + "'";
			}
		}
		return "hc_nodelistIndexGetLength: OK";
	} catch (e) {
		return "hc_nodelistIndexGetLength: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var employeeList;
		var length;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("p");
		employeeNode = elementList.item(2);
		employeeList = employeeNode.childNodes;
		length = employeeList.length;
		if ((6 == length)) {
			if (6 !== length) {
				return "hc_nodelistIndexGetLength: #length_wo_space 'length' equals '" + length + "' not '" + 6 + "'";
			}
		} else {
			if (13 !== length) {
				return "hc_nodelistIndexGetLength: #length_w_space 'length' equals '" + length + "' not '" + 13 + "'";
			}
		}
		return "hc_nodelistIndexGetLength: OK";
	} catch (e) {
		return "hc_nodelistIndexGetLength: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_nodelistindexgetlengthofemptylist.xml" fleur="hc_nodelistindexgetlengthofemptylist" native="hc_nodelistindexgetlengthofemptylist"><Fleur>(function(){
	var success;
	try {
		var doc;
		var emList;
		var emNode;
		var textNode;
		var textList;
		var length;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		emList = doc.getElementsByTagName("em");
		emNode = emList.item(2);
		textNode = emNode.firstChild();
		textList = textNode.childNodes;
		length = textList.length;
		if (0 !== length) {
			return "hc_nodelistIndexGetLengthOfEmptyList: #length 'length' equals '" + length + "' not '" + 0 + "'";
		}
		return "hc_nodelistIndexGetLengthOfEmptyList: OK";
	} catch (e) {
		return "hc_nodelistIndexGetLengthOfEmptyList: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var emList;
		var emNode;
		var textNode;
		var textList;
		var length;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		emList = doc.getElementsByTagName("em");
		emNode = emList.item(2);
		textNode = emNode.firstChild();
		textList = textNode.childNodes;
		length = textList.length;
		if (0 !== length) {
			return "hc_nodelistIndexGetLengthOfEmptyList: #length 'length' equals '" + length + "' not '" + 0 + "'";
		}
		return "hc_nodelistIndexGetLengthOfEmptyList: OK";
	} catch (e) {
		return "hc_nodelistIndexGetLengthOfEmptyList: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_nodelistindexnotzero.xml" fleur="hc_nodelistindexnotzero" native="hc_nodelistindexnotzero"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var employeeList;
		var child;
		var childName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("p");
		employeeNode = elementList.item(2);
		employeeList = employeeNode.childNodes;
		child = employeeList.item(3);
		childName = child.nodeName;
		if (("#text" == childName)) {
			if ("#text" !== childName) {
				return "hc_nodelistIndexNotZero: #childName_space 'childName' equals '" + childName + "' not '" + "#text" + "'";
			}
		} else {
			if ("strong" !== childName) {
				return "hc_nodelistIndexNotZero: #childName_strong 'childName' equals '" + childName + "' not '" + "strong" + "'";
			}
		}
		return "hc_nodelistIndexNotZero: OK";
	} catch (e) {
		return "hc_nodelistIndexNotZero: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var employeeList;
		var child;
		var childName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("p");
		employeeNode = elementList.item(2);
		employeeList = employeeNode.childNodes;
		child = employeeList.item(3);
		childName = child.nodeName;
		if (("#text" == childName)) {
			if ("#text" !== childName) {
				return "hc_nodelistIndexNotZero: #childName_space 'childName' equals '" + childName + "' not '" + "#text" + "'";
			}
		} else {
			if ("strong" !== childName) {
				return "hc_nodelistIndexNotZero: #childName_strong 'childName' equals '" + childName + "' not '" + "strong" + "'";
			}
		}
		return "hc_nodelistIndexNotZero: OK";
	} catch (e) {
		return "hc_nodelistIndexNotZero: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_nodelistreturnfirstitem.xml" fleur="hc_nodelistreturnfirstitem" native="hc_nodelistreturnfirstitem"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var employeeList;
		var child;
		var childName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("p");
		employeeNode = elementList.item(2);
		employeeList = employeeNode.childNodes;
		child = employeeList.item(0);
		childName = child.nodeName;
		if (("#text" == childName)) {
			if ("#text" !== childName) {
				return "hc_nodelistReturnFirstItem: #nodeName_w_space 'childName' equals '" + childName + "' not '" + "#text" + "'";
			}
		} else {
			if ("em" !== childName) {
				return "hc_nodelistReturnFirstItem: #nodeName_wo_space 'childName' equals '" + childName + "' not '" + "em" + "'";
			}
		}
		return "hc_nodelistReturnFirstItem: OK";
	} catch (e) {
		return "hc_nodelistReturnFirstItem: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var employeeList;
		var child;
		var childName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("p");
		employeeNode = elementList.item(2);
		employeeList = employeeNode.childNodes;
		child = employeeList.item(0);
		childName = child.nodeName;
		if (("#text" == childName)) {
			if ("#text" !== childName) {
				return "hc_nodelistReturnFirstItem: #nodeName_w_space 'childName' equals '" + childName + "' not '" + "#text" + "'";
			}
		} else {
			if ("em" !== childName) {
				return "hc_nodelistReturnFirstItem: #nodeName_wo_space 'childName' equals '" + childName + "' not '" + "em" + "'";
			}
		}
		return "hc_nodelistReturnFirstItem: OK";
	} catch (e) {
		return "hc_nodelistReturnFirstItem: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_nodelistreturnlastitem.xml" fleur="hc_nodelistreturnlastitem" native="hc_nodelistreturnlastitem"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var employeeList;
		var child;
		var childName;
		var index;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("p");
		employeeNode = elementList.item(2);
		employeeList = employeeNode.childNodes;
		index = employeeList.length;
		index -= 1;
		child = employeeList.item(index);
		childName = child.nodeName;
		if ((12 == index)) {
			if ("#text" !== childName) {
				return "hc_nodelistReturnLastItem: #lastNodeName_w_whitespace 'childName' equals '" + childName + "' not '" + "#text" + "'";
			}
		} else {
			if ("acronym" !== childName) {
				return "hc_nodelistReturnLastItem: #lastNodeName 'childName' equals '" + childName + "' not '" + "acronym" + "'";
			}
			if (5 !== index) {
				return "hc_nodelistReturnLastItem: #index 'index' equals '" + index + "' not '" + 5 + "'";
			}
		}
		return "hc_nodelistReturnLastItem: OK";
	} catch (e) {
		return "hc_nodelistReturnLastItem: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var employeeList;
		var child;
		var childName;
		var index;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("p");
		employeeNode = elementList.item(2);
		employeeList = employeeNode.childNodes;
		index = employeeList.length;
		index -= 1;
		child = employeeList.item(index);
		childName = child.nodeName;
		if ((12 == index)) {
			if ("#text" !== childName) {
				return "hc_nodelistReturnLastItem: #lastNodeName_w_whitespace 'childName' equals '" + childName + "' not '" + "#text" + "'";
			}
		} else {
			if ("acronym" !== childName) {
				return "hc_nodelistReturnLastItem: #lastNodeName 'childName' equals '" + childName + "' not '" + "acronym" + "'";
			}
			if (5 !== index) {
				return "hc_nodelistReturnLastItem: #index 'index' equals '" + index + "' not '" + 5 + "'";
			}
		}
		return "hc_nodelistReturnLastItem: OK";
	} catch (e) {
		return "hc_nodelistReturnLastItem: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_nodelisttraverselist.xml" fleur="hc_nodelisttraverselist" native="hc_nodelisttraverselist"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var employeeList;
		var child;
		var childName;
		var nodeType;
		var result = new Array();

		expected = new Array();
		expected[0] = "em";
		expected[1] = "strong";
		expected[2] = "code";
		expected[3] = "sup";
		expected[4] = "var";
		expected[5] = "acronym";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("p");
		employeeNode = elementList.item(2);
		employeeList = employeeNode.childNodes;
		for (var index_id0x19f9dc40 = 0; index_id0x19f9dc40 &lt; employeeList.length; index_id0x19f9dc40++) {
			child = employeeList.item(index_id0x19f9dc40);
			nodeType = child.nodeType;
			childName = child.nodeName;
			if ((1 == nodeType)) {
result[result.length] = childName;
			} else {
				if (3 !== nodeType) {
					return "hc_nodelistTraverseList: #textNodeType 'nodeType' equals '" + nodeType + "' not '" + 3 + "'";
				}
				if ("#text" !== childName) {
					return "hc_nodelistTraverseList: #textNodeName 'childName' equals '" + childName + "' not '" + "#text" + "'";
				}
			}
		}
		if (expected.join("|") !== result.join("|")) {
			return "hc_nodelistTraverseList: #nodeNames 'result' equals '" + result.join("|") + "' not '" + expected.join("|") + "'";
		}
		return "hc_nodelistTraverseList: OK";
	} catch (e) {
		return "hc_nodelistTraverseList: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var employeeList;
		var child;
		var childName;
		var nodeType;
		var result = new Array();

		expected = new Array();
		expected[0] = "em";
		expected[1] = "strong";
		expected[2] = "code";
		expected[3] = "sup";
		expected[4] = "var";
		expected[5] = "acronym";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("p");
		employeeNode = elementList.item(2);
		employeeList = employeeNode.childNodes;
		for (var index_id0x19f9dc40 = 0; index_id0x19f9dc40 &lt; employeeList.length; index_id0x19f9dc40++) {
			child = employeeList.item(index_id0x19f9dc40);
			nodeType = child.nodeType;
			childName = child.nodeName;
			if ((1 == nodeType)) {
result[result.length] = childName;
			} else {
				if (3 !== nodeType) {
					return "hc_nodelistTraverseList: #textNodeType 'nodeType' equals '" + nodeType + "' not '" + 3 + "'";
				}
				if ("#text" !== childName) {
					return "hc_nodelistTraverseList: #textNodeName 'childName' equals '" + childName + "' not '" + "#text" + "'";
				}
			}
		}
		if (expected.join("|") !== result.join("|")) {
			return "hc_nodelistTraverseList: #nodeNames 'result' equals '" + result.join("|") + "' not '" + expected.join("|") + "'";
		}
		return "hc_nodelistTraverseList: OK";
	} catch (e) {
		return "hc_nodelistTraverseList: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_nodeparentnode.xml" fleur="hc_nodeparentnode" native="hc_nodeparentnode"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var parentNode;
		var parentName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("p");
		employeeNode = elementList.item(1);
		parentNode = employeeNode.parentNode;
		parentName = parentNode.nodeName;
		if ("body" !== parentName) {
			return "hc_nodeParentNode: #parentNodeName 'parentName' equals '" + parentName + "' not '" + "body" + "'";
		}
		return "hc_nodeParentNode: OK";
	} catch (e) {
		return "hc_nodeParentNode: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var parentNode;
		var parentName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("p");
		employeeNode = elementList.item(1);
		parentNode = employeeNode.parentNode;
		parentName = parentNode.nodeName;
		if ("body" !== parentName) {
			return "hc_nodeParentNode: #parentNodeName 'parentName' equals '" + parentName + "' not '" + "body" + "'";
		}
		return "hc_nodeParentNode: OK";
	} catch (e) {
		return "hc_nodeParentNode: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_nodeparentnodenull.xml" fleur="hc_nodeparentnodenull" native="hc_nodeparentnodenull"><Fleur>(function(){
	var success;
	try {
		var doc;
		var createdNode;
		var parentNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		createdNode = doc.createElement("br");
		parentNode = createdNode.parentNode;
		if (parentNode != null) {
			return "hc_nodeParentNodeNull: #parentNode 'parentNode' equals '" + parentNode + "' not null";
		}
		return "hc_nodeParentNodeNull: OK";
	} catch (e) {
		return "hc_nodeParentNodeNull: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var createdNode;
		var parentNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		createdNode = doc.createElement("br");
		parentNode = createdNode.parentNode;
		if (parentNode != null) {
			return "hc_nodeParentNodeNull: #parentNode 'parentNode' equals '" + parentNode + "' not null";
		}
		return "hc_nodeParentNodeNull: OK";
	} catch (e) {
		return "hc_nodeParentNodeNull: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_noderemovechild.xml" fleur="hc_noderemovechild" native="hc_noderemovechild"><Fleur>(function(){
	var success;
	try {
		var doc;
		var rootNode;
		var childList;
		var childToRemove;
		var removedChild;
		var parentNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		rootNode = doc.documentElement;
		childList = rootNode.childNodes;
		childToRemove = childList.item(1);
		removedChild = rootNode.removeChild(childToRemove);
		parentNode = removedChild.parentNode;
		if (parentNode != null) {
			return "hc_nodeRemoveChild: #parentNodeNull 'parentNode' equals '" + parentNode + "' not null";
		}
		return "hc_nodeRemoveChild: OK";
	} catch (e) {
		return "hc_nodeRemoveChild: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var rootNode;
		var childList;
		var childToRemove;
		var removedChild;
		var parentNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		rootNode = doc.documentElement;
		childList = rootNode.childNodes;
		childToRemove = childList.item(1);
		removedChild = rootNode.removeChild(childToRemove);
		parentNode = removedChild.parentNode;
		if (parentNode != null) {
			return "hc_nodeRemoveChild: #parentNodeNull 'parentNode' equals '" + parentNode + "' not null";
		}
		return "hc_nodeRemoveChild: OK";
	} catch (e) {
		return "hc_nodeRemoveChild: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_noderemovechildgetnodename.xml" fleur="hc_noderemovechildgetnodename" native="hc_noderemovechildgetnodename"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var childList;
		var oldChild;
		var removedChild;
		var childName;
		var oldName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("p");
		employeeNode = elementList.item(1);
		childList = employeeNode.childNodes;
		oldChild = childList.item(0);
		oldName = oldChild.nodeName;
		removedChild = employeeNode.removeChild(oldChild);
		if (removedChild == null) {
			return "hc_nodeRemoveChildGetNodeName: #notnull 'removedChild' is null";
		}
		childName = removedChild.nodeName;
		if (oldName !== childName) {
			return "hc_nodeRemoveChildGetNodeName: #nodeName 'childName' equals '" + childName + "' not '" + oldName + "'";
		}
		return "hc_nodeRemoveChildGetNodeName: OK";
	} catch (e) {
		return "hc_nodeRemoveChildGetNodeName: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var childList;
		var oldChild;
		var removedChild;
		var childName;
		var oldName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("p");
		employeeNode = elementList.item(1);
		childList = employeeNode.childNodes;
		oldChild = childList.item(0);
		oldName = oldChild.nodeName;
		removedChild = employeeNode.removeChild(oldChild);
		if (removedChild == null) {
			return "hc_nodeRemoveChildGetNodeName: #notnull 'removedChild' is null";
		}
		childName = removedChild.nodeName;
		if (oldName !== childName) {
			return "hc_nodeRemoveChildGetNodeName: #nodeName 'childName' equals '" + childName + "' not '" + oldName + "'";
		}
		return "hc_nodeRemoveChildGetNodeName: OK";
	} catch (e) {
		return "hc_nodeRemoveChildGetNodeName: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_noderemovechildnode.xml" fleur="hc_noderemovechildnode" native="hc_noderemovechildnode"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var emList;
		var employeeNode;
		var childList;
		var oldChild;
		var child;
		var childName;
		var length;
		var removedChild;
		var removedName;
		var nodeType;
		expected = new Array();
		expected[0] = "strong";
		expected[1] = "code";
		expected[2] = "sup";
		expected[3] = "var";
		expected[4] = "acronym";
		var actual = new Array();

		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("p");
		employeeNode = elementList.item(1);
		childList = employeeNode.childNodes;
		emList = employeeNode.getElementsByTagName("em");
		oldChild = emList.item(0);
		removedChild = employeeNode.removeChild(oldChild);
		removedName = removedChild.nodeName;
		if ("em" !== removedName) {
			return "hc_noderemovechildnode: #removedName 'removedName' equals '" + removedName + "' not '" + "em" + "'";
		}
		for (var index_id0x1a15d560 = 0; index_id0x1a15d560 &lt; childList.length; index_id0x1a15d560++) {
			child = childList.item(index_id0x1a15d560);
			nodeType = child.nodeType;
			childName = child.nodeName;
			if ((1 == nodeType)) {
actual[actual.length] = childName;
			} else {
				if (3 !== nodeType) {
					return "hc_noderemovechildnode: #textNodeType 'nodeType' equals '" + nodeType + "' not '" + 3 + "'";
				}
				if ("#text" !== childName) {
					return "hc_noderemovechildnode: #textNodeName 'childName' equals '" + childName + "' not '" + "#text" + "'";
				}
			}
		}
		if (expected.join("|") !== actual.join("|")) {
			return "hc_noderemovechildnode: #childNames 'actual' equals '" + actual.join("|") + "' not '" + expected.join("|") + "'";
		}
		return "hc_noderemovechildnode: OK";
	} catch (e) {
		return "hc_noderemovechildnode: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var emList;
		var employeeNode;
		var childList;
		var oldChild;
		var child;
		var childName;
		var length;
		var removedChild;
		var removedName;
		var nodeType;
		expected = new Array();
		expected[0] = "strong";
		expected[1] = "code";
		expected[2] = "sup";
		expected[3] = "var";
		expected[4] = "acronym";
		var actual = new Array();

		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("p");
		employeeNode = elementList.item(1);
		childList = employeeNode.childNodes;
		emList = employeeNode.getElementsByTagName("em");
		oldChild = emList.item(0);
		removedChild = employeeNode.removeChild(oldChild);
		removedName = removedChild.nodeName;
		if ("em" !== removedName) {
			return "hc_noderemovechildnode: #removedName 'removedName' equals '" + removedName + "' not '" + "em" + "'";
		}
		for (var index_id0x1a15d560 = 0; index_id0x1a15d560 &lt; childList.length; index_id0x1a15d560++) {
			child = childList.item(index_id0x1a15d560);
			nodeType = child.nodeType;
			childName = child.nodeName;
			if ((1 == nodeType)) {
actual[actual.length] = childName;
			} else {
				if (3 !== nodeType) {
					return "hc_noderemovechildnode: #textNodeType 'nodeType' equals '" + nodeType + "' not '" + 3 + "'";
				}
				if ("#text" !== childName) {
					return "hc_noderemovechildnode: #textNodeName 'childName' equals '" + childName + "' not '" + "#text" + "'";
				}
			}
		}
		if (expected.join("|") !== actual.join("|")) {
			return "hc_noderemovechildnode: #childNames 'actual' equals '" + actual.join("|") + "' not '" + expected.join("|") + "'";
		}
		return "hc_noderemovechildnode: OK";
	} catch (e) {
		return "hc_noderemovechildnode: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_noderemovechildoldchildnonexistent.xml" fleur="hc_noderemovechildoldchildnonexistent" native="hc_noderemovechildoldchildnonexistent"><Fleur>(function(){
	var success;
	try {
		var doc;
		var oldChild;
		var elementList;
		var elementNode;
		var removedChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		oldChild = doc.createElement("br");
		elementList = doc.getElementsByTagName("p");
		elementNode = elementList.item(1);
		success = false;
		try {
			removedChild = elementNode.removeChild(oldChild);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 8;
			}
		}
		if (!success) {
			return "hc_nodeRemoveChildOldChildNonexistent: Exception NOT_FOUND_ERR expected";
		}
		return "hc_nodeRemoveChildOldChildNonexistent: OK";
	} catch (e) {
		return "hc_nodeRemoveChildOldChildNonexistent: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var oldChild;
		var elementList;
		var elementNode;
		var removedChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		oldChild = doc.createElement("br");
		elementList = doc.getElementsByTagName("p");
		elementNode = elementList.item(1);
		success = false;
		try {
			removedChild = elementNode.removeChild(oldChild);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 8;
			}
		}
		if (!success) {
			return "hc_nodeRemoveChildOldChildNonexistent: Exception NOT_FOUND_ERR expected";
		}
		return "hc_nodeRemoveChildOldChildNonexistent: OK";
	} catch (e) {
		return "hc_nodeRemoveChildOldChildNonexistent: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_nodereplacechild.xml" fleur="hc_nodereplacechild" native="hc_nodereplacechild"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var childList;
		var oldChild;
		var newChild;
		var child;
		var childName;
		var replacedNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("p");
		employeeNode = elementList.item(1);
		childList = employeeNode.childNodes;
		oldChild = childList.item(0);
		newChild = doc.createElement("br");
		replacedNode = employeeNode.replaceChild(newChild, oldChild);
		child = childList.item(0);
		childName = child.nodeName;
		if ("br" !== childName) {
			return "hc_nodeReplaceChild: #nodeName 'childName' equals '" + childName + "' not '" + "br" + "'";
		}
		return "hc_nodeReplaceChild: OK";
	} catch (e) {
		return "hc_nodeReplaceChild: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var childList;
		var oldChild;
		var newChild;
		var child;
		var childName;
		var replacedNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("p");
		employeeNode = elementList.item(1);
		childList = employeeNode.childNodes;
		oldChild = childList.item(0);
		newChild = doc.createElement("br");
		replacedNode = employeeNode.replaceChild(newChild, oldChild);
		child = childList.item(0);
		childName = child.nodeName;
		if ("br" !== childName) {
			return "hc_nodeReplaceChild: #nodeName 'childName' equals '" + childName + "' not '" + "br" + "'";
		}
		return "hc_nodeReplaceChild: OK";
	} catch (e) {
		return "hc_nodeReplaceChild: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_nodereplacechildinvalidnodetype.xml" fleur="hc_nodereplacechildinvalidnodetype" native="hc_nodereplacechildinvalidnodetype"><Fleur>(function(){
	var success;
	try {
		var doc;
		var rootNode;
		var newChild;
		var elementList;
		var oldChild;
		var replacedChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		newChild = doc.createAttribute("lang");
		elementList = doc.getElementsByTagName("p");
		oldChild = elementList.item(1);
		rootNode = oldChild.parentNode;
		success = false;
		try {
			replacedChild = rootNode.replaceChild(newChild, oldChild);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 3;
			}
		}
		if (!success) {
			return "hc_nodeReplaceChildInvalidNodeType: Exception HIERARCHY_REQUEST_ERR expected";
		}
		return "hc_nodeReplaceChildInvalidNodeType: OK";
	} catch (e) {
		return "hc_nodeReplaceChildInvalidNodeType: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var rootNode;
		var newChild;
		var elementList;
		var oldChild;
		var replacedChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		newChild = doc.createAttribute("lang");
		elementList = doc.getElementsByTagName("p");
		oldChild = elementList.item(1);
		rootNode = oldChild.parentNode;
		success = false;
		try {
			replacedChild = rootNode.replaceChild(newChild, oldChild);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 3;
			}
		}
		if (!success) {
			return "hc_nodeReplaceChildInvalidNodeType: Exception HIERARCHY_REQUEST_ERR expected";
		}
		return "hc_nodeReplaceChildInvalidNodeType: OK";
	} catch (e) {
		return "hc_nodeReplaceChildInvalidNodeType: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_nodereplacechildnewchilddiffdocument.xml" fleur="hc_nodereplacechildnewchilddiffdocument" native="hc_nodereplacechildnewchilddiffdocument"><Fleur>(function(){
	var success;
	try {
		var doc1;
		var doc2;
		var oldChild;
		var newChild;
		var elementList;
		var elementNode;
		var replacedChild;
		var doc1Req = new XMLHttpRequest();
		doc1Req.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		doc1Req.send();
		doc1 = new Fleur.DOMParser().parseFromString(doc1Req.responseText, "text/xml");
		var doc2Req = new XMLHttpRequest();
		doc2Req.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		doc2Req.send();
		doc2 = new Fleur.DOMParser().parseFromString(doc2Req.responseText, "text/xml");
		newChild = doc1.createElement("br");
		elementList = doc2.getElementsByTagName("p");
		elementNode = elementList.item(1);
		oldChild = elementNode.firstChild;
		success = false;
		try {
			replacedChild = elementNode.replaceChild(newChild, oldChild);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 4;
			}
		}
		if (!success) {
			return "hc_nodeReplaceChildNewChildDiffDocument: Exception WRONG_DOCUMENT_ERR expected";
		}
		return "hc_nodeReplaceChildNewChildDiffDocument: OK";
	} catch (e) {
		return "hc_nodeReplaceChildNewChildDiffDocument: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc1;
		var doc2;
		var oldChild;
		var newChild;
		var elementList;
		var elementNode;
		var replacedChild;
		var doc1Req = new XMLHttpRequest();
		doc1Req.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		doc1Req.send();
		doc1 = new DOMParser().parseFromString(doc1Req.responseText, "text/xml");
		var doc2Req = new XMLHttpRequest();
		doc2Req.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		doc2Req.send();
		doc2 = new DOMParser().parseFromString(doc2Req.responseText, "text/xml");
		newChild = doc1.createElement("br");
		elementList = doc2.getElementsByTagName("p");
		elementNode = elementList.item(1);
		oldChild = elementNode.firstChild;
		success = false;
		try {
			replacedChild = elementNode.replaceChild(newChild, oldChild);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 4;
			}
		}
		if (!success) {
			return "hc_nodeReplaceChildNewChildDiffDocument: Exception WRONG_DOCUMENT_ERR expected";
		}
		return "hc_nodeReplaceChildNewChildDiffDocument: OK";
	} catch (e) {
		return "hc_nodeReplaceChildNewChildDiffDocument: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_nodereplacechildnewchildexists.xml" fleur="hc_nodereplacechildnewchildexists" native="hc_nodereplacechildnewchildexists"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var childList;
		var oldChild = null;
		var newChild = null;
		var child;
		var childName;
		var childNode;
		var actual = new Array();

		expected = new Array();
		expected[0] = "strong";
		expected[1] = "code";
		expected[2] = "sup";
		expected[3] = "var";
		expected[4] = "em";
		var replacedChild;
		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("p");
		employeeNode = elementList.item(1);
		childList = employeeNode.getElementsByTagName("*");
		newChild = childList.item(0);
		oldChild = childList.item(5);
		replacedChild = employeeNode.replaceChild(newChild, oldChild);
		assertSame("return_value_same",oldChild,replacedChild);
		for (var index_id0x1a61c100 = 0; index_id0x1a61c100 &lt; childList.length; index_id0x1a61c100++) {
			childNode = childList.item(index_id0x1a61c100);
			childName = childNode.nodeName;
			nodeType = childNode.nodeType;
			if ((1 == nodeType)) {
actual[actual.length] = childName;
			} else {
				if (3 !== nodeType) {
					return "hc_nodeReplaceChildNewChildExists: #textNodeType 'nodeType' equals '" + nodeType + "' not '" + 3 + "'";
				}
				if ("#text" !== childName) {
					return "hc_nodeReplaceChildNewChildExists: #textNodeName 'childName' equals '" + childName + "' not '" + "#text" + "'";
				}
			}
		}
		if (expected.join("|") !== actual.join("|")) {
			return "hc_nodeReplaceChildNewChildExists: #childNames 'actual' equals '" + actual.join("|") + "' not '" + expected.join("|") + "'";
		}
		return "hc_nodeReplaceChildNewChildExists: OK";
	} catch (e) {
		return "hc_nodeReplaceChildNewChildExists: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var childList;
		var oldChild = null;
		var newChild = null;
		var child;
		var childName;
		var childNode;
		var actual = new Array();

		expected = new Array();
		expected[0] = "strong";
		expected[1] = "code";
		expected[2] = "sup";
		expected[3] = "var";
		expected[4] = "em";
		var replacedChild;
		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("p");
		employeeNode = elementList.item(1);
		childList = employeeNode.getElementsByTagName("*");
		newChild = childList.item(0);
		oldChild = childList.item(5);
		replacedChild = employeeNode.replaceChild(newChild, oldChild);
		assertSame("return_value_same",oldChild,replacedChild);
		for (var index_id0x1a61c100 = 0; index_id0x1a61c100 &lt; childList.length; index_id0x1a61c100++) {
			childNode = childList.item(index_id0x1a61c100);
			childName = childNode.nodeName;
			nodeType = childNode.nodeType;
			if ((1 == nodeType)) {
actual[actual.length] = childName;
			} else {
				if (3 !== nodeType) {
					return "hc_nodeReplaceChildNewChildExists: #textNodeType 'nodeType' equals '" + nodeType + "' not '" + 3 + "'";
				}
				if ("#text" !== childName) {
					return "hc_nodeReplaceChildNewChildExists: #textNodeName 'childName' equals '" + childName + "' not '" + "#text" + "'";
				}
			}
		}
		if (expected.join("|") !== actual.join("|")) {
			return "hc_nodeReplaceChildNewChildExists: #childNames 'actual' equals '" + actual.join("|") + "' not '" + expected.join("|") + "'";
		}
		return "hc_nodeReplaceChildNewChildExists: OK";
	} catch (e) {
		return "hc_nodeReplaceChildNewChildExists: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_nodereplacechildnodeancestor.xml" fleur="hc_nodereplacechildnodeancestor" native="hc_nodereplacechildnodeancestor"><Fleur>(function(){
	var success;
	try {
		var doc;
		var newChild;
		var elementList;
		var employeeNode;
		var childList;
		var oldChild;
		var replacedNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		newChild = doc.documentElement;
		elementList = doc.getElementsByTagName("p");
		employeeNode = elementList.item(1);
		childList = employeeNode.childNodes;
		oldChild = childList.item(0);
		success = false;
		try {
			replacedNode = employeeNode.replaceChild(newChild, oldChild);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 3;
			}
		}
		if (!success) {
			return "hc_nodeReplaceChildNodeAncestor: Exception HIERARCHY_REQUEST_ERR expected";
		}
		return "hc_nodeReplaceChildNodeAncestor: OK";
	} catch (e) {
		return "hc_nodeReplaceChildNodeAncestor: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var newChild;
		var elementList;
		var employeeNode;
		var childList;
		var oldChild;
		var replacedNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		newChild = doc.documentElement;
		elementList = doc.getElementsByTagName("p");
		employeeNode = elementList.item(1);
		childList = employeeNode.childNodes;
		oldChild = childList.item(0);
		success = false;
		try {
			replacedNode = employeeNode.replaceChild(newChild, oldChild);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 3;
			}
		}
		if (!success) {
			return "hc_nodeReplaceChildNodeAncestor: Exception HIERARCHY_REQUEST_ERR expected";
		}
		return "hc_nodeReplaceChildNodeAncestor: OK";
	} catch (e) {
		return "hc_nodeReplaceChildNodeAncestor: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_nodereplacechildnodename.xml" fleur="hc_nodereplacechildnodename" native="hc_nodereplacechildnodename"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var childList;
		var oldChild;
		var newChild;
		var replacedNode;
		var childName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("p");
		employeeNode = elementList.item(1);
		childList = employeeNode.getElementsByTagName("em");
		oldChild = childList.item(0);
		newChild = doc.createElement("br");
		replacedNode = employeeNode.replaceChild(newChild, oldChild);
		childName = replacedNode.nodeName;
		if ("em" !== childName) {
			return "hc_nodeReplaceChildNodeName: #replacedNodeName 'childName' equals '" + childName + "' not '" + "em" + "'";
		}
		return "hc_nodeReplaceChildNodeName: OK";
	} catch (e) {
		return "hc_nodeReplaceChildNodeName: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var childList;
		var oldChild;
		var newChild;
		var replacedNode;
		var childName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("p");
		employeeNode = elementList.item(1);
		childList = employeeNode.getElementsByTagName("em");
		oldChild = childList.item(0);
		newChild = doc.createElement("br");
		replacedNode = employeeNode.replaceChild(newChild, oldChild);
		childName = replacedNode.nodeName;
		if ("em" !== childName) {
			return "hc_nodeReplaceChildNodeName: #replacedNodeName 'childName' equals '" + childName + "' not '" + "em" + "'";
		}
		return "hc_nodeReplaceChildNodeName: OK";
	} catch (e) {
		return "hc_nodeReplaceChildNodeName: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_nodereplacechildoldchildnonexistent.xml" fleur="hc_nodereplacechildoldchildnonexistent" native="hc_nodereplacechildoldchildnonexistent"><Fleur>(function(){
	var success;
	try {
		var doc;
		var oldChild;
		var newChild;
		var elementList;
		var elementNode;
		var replacedNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		newChild = doc.createElement("br");
		oldChild = doc.createElement("b");
		elementList = doc.getElementsByTagName("p");
		elementNode = elementList.item(1);
		success = false;
		try {
			replacedNode = elementNode.replaceChild(newChild, oldChild);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 8;
			}
		}
		if (!success) {
			return "hc_nodeReplaceChildOldChildNonexistent: Exception NOT_FOUND_ERR expected";
		}
		return "hc_nodeReplaceChildOldChildNonexistent: OK";
	} catch (e) {
		return "hc_nodeReplaceChildOldChildNonexistent: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var oldChild;
		var newChild;
		var elementList;
		var elementNode;
		var replacedNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		newChild = doc.createElement("br");
		oldChild = doc.createElement("b");
		elementList = doc.getElementsByTagName("p");
		elementNode = elementList.item(1);
		success = false;
		try {
			replacedNode = elementNode.replaceChild(newChild, oldChild);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 8;
			}
		}
		if (!success) {
			return "hc_nodeReplaceChildOldChildNonexistent: Exception NOT_FOUND_ERR expected";
		}
		return "hc_nodeReplaceChildOldChildNonexistent: OK";
	} catch (e) {
		return "hc_nodeReplaceChildOldChildNonexistent: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_nodetextnodeattribute.xml" fleur="hc_nodetextnodeattribute" native="hc_nodetextnodeattribute"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testAddr;
		var textNode;
		var attrList;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		testAddr = elementList.item(0);
		textNode = testAddr.firstChild;
		attrList = textNode.attributes;
		if (attrList != null) {
			return "hc_nodeTextNodeAttribute: #text_attributes_is_null 'attrList' equals '" + attrList + "' not null";
		}
		return "hc_nodeTextNodeAttribute: OK";
	} catch (e) {
		return "hc_nodeTextNodeAttribute: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testAddr;
		var textNode;
		var attrList;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		testAddr = elementList.item(0);
		textNode = testAddr.firstChild;
		attrList = textNode.attributes;
		if (attrList != null) {
			return "hc_nodeTextNodeAttribute: #text_attributes_is_null 'attrList' equals '" + attrList + "' not null";
		}
		return "hc_nodeTextNodeAttribute: OK";
	} catch (e) {
		return "hc_nodeTextNodeAttribute: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_nodetextnodename.xml" fleur="hc_nodetextnodename" native="hc_nodetextnodename"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testAddr;
		var textNode;
		var textName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		testAddr = elementList.item(0);
		textNode = testAddr.firstChild;
		textName = textNode.nodeName;
		if ("#text" !== textName) {
			return "hc_nodeTextNodeName: #textNodeName 'textName' equals '" + textName + "' not '" + "#text" + "'";
		}
		return "hc_nodeTextNodeName: OK";
	} catch (e) {
		return "hc_nodeTextNodeName: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testAddr;
		var textNode;
		var textName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		testAddr = elementList.item(0);
		textNode = testAddr.firstChild;
		textName = textNode.nodeName;
		if ("#text" !== textName) {
			return "hc_nodeTextNodeName: #textNodeName 'textName' equals '" + textName + "' not '" + "#text" + "'";
		}
		return "hc_nodeTextNodeName: OK";
	} catch (e) {
		return "hc_nodeTextNodeName: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_nodetextnodetype.xml" fleur="hc_nodetextnodetype" native="hc_nodetextnodetype"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testAddr;
		var textNode;
		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		testAddr = elementList.item(0);
		textNode = testAddr.firstChild;
		nodeType = textNode.nodeType;
		if (3 !== nodeType) {
			return "hc_nodeTextNodeType: #nodeTextNodeTypeAssert1 'nodeType' equals '" + nodeType + "' not '" + 3 + "'";
		}
		return "hc_nodeTextNodeType: OK";
	} catch (e) {
		return "hc_nodeTextNodeType: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testAddr;
		var textNode;
		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		testAddr = elementList.item(0);
		textNode = testAddr.firstChild;
		nodeType = textNode.nodeType;
		if (3 !== nodeType) {
			return "hc_nodeTextNodeType: #nodeTextNodeTypeAssert1 'nodeType' equals '" + nodeType + "' not '" + 3 + "'";
		}
		return "hc_nodeTextNodeType: OK";
	} catch (e) {
		return "hc_nodeTextNodeType: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_nodetextnodevalue.xml" fleur="hc_nodetextnodevalue" native="hc_nodetextnodevalue"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testAddr;
		var textNode;
		var textValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		testAddr = elementList.item(0);
		textNode = testAddr.firstChild;
		textValue = textNode.nodeValue;
		if ("1230 North Ave. Dallas, Texas 98551" !== textValue) {
			return "hc_nodeTextNodeValue: #textNodeValue 'textValue' equals '" + textValue + "' not '" + "1230 North Ave. Dallas, Texas 98551" + "'";
		}
		return "hc_nodeTextNodeValue: OK";
	} catch (e) {
		return "hc_nodeTextNodeValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testAddr;
		var textNode;
		var textValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		testAddr = elementList.item(0);
		textNode = testAddr.firstChild;
		textValue = textNode.nodeValue;
		if ("1230 North Ave. Dallas, Texas 98551" !== textValue) {
			return "hc_nodeTextNodeValue: #textNodeValue 'textValue' equals '" + textValue + "' not '" + "1230 North Ave. Dallas, Texas 98551" + "'";
		}
		return "hc_nodeTextNodeValue: OK";
	} catch (e) {
		return "hc_nodeTextNodeValue: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_nodevalue01.xml" fleur="hc_nodevalue01" native="hc_nodevalue01"><Fleur>(function(){
	var success;
	try {
		var doc;
		var newNode;
		var newValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		newNode = doc.createElement("acronym");
		newValue = newNode.nodeValue;
		if (newValue != null) {
			return "hc_nodevalue01: #initiallyNull 'newValue' equals '" + newValue + "' not null";
		}
		newNode.nodeValue = "This should have no effect";
		newValue = newNode.nodeValue;
		if (newValue != null) {
			return "hc_nodevalue01: #nullAfterAttemptedChange 'newValue' equals '" + newValue + "' not null";
		}
		return "hc_nodevalue01: OK";
	} catch (e) {
		return "hc_nodevalue01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var newNode;
		var newValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		newNode = doc.createElement("acronym");
		newValue = newNode.nodeValue;
		if (newValue != null) {
			return "hc_nodevalue01: #initiallyNull 'newValue' equals '" + newValue + "' not null";
		}
		newNode.nodeValue = "This should have no effect";
		newValue = newNode.nodeValue;
		if (newValue != null) {
			return "hc_nodevalue01: #nullAfterAttemptedChange 'newValue' equals '" + newValue + "' not null";
		}
		return "hc_nodevalue01: OK";
	} catch (e) {
		return "hc_nodevalue01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_nodevalue02.xml" fleur="hc_nodevalue02" native="hc_nodevalue02"><Fleur>(function(){
	var success;
	try {
		var doc;
		var newNode;
		var newValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		newNode = doc.createComment("This is a new Comment node");
		newValue = newNode.nodeValue;
		if ("This is a new Comment node" !== newValue) {
			return "hc_nodevalue02: #initial 'newValue' equals '" + newValue + "' not '" + "This is a new Comment node" + "'";
		}
		newNode.nodeValue = "This should have an effect";
		newValue = newNode.nodeValue;
		if ("This should have an effect" !== newValue) {
			return "hc_nodevalue02: #afterChange 'newValue' equals '" + newValue + "' not '" + "This should have an effect" + "'";
		}
		return "hc_nodevalue02: OK";
	} catch (e) {
		return "hc_nodevalue02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var newNode;
		var newValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		newNode = doc.createComment("This is a new Comment node");
		newValue = newNode.nodeValue;
		if ("This is a new Comment node" !== newValue) {
			return "hc_nodevalue02: #initial 'newValue' equals '" + newValue + "' not '" + "This is a new Comment node" + "'";
		}
		newNode.nodeValue = "This should have an effect";
		newValue = newNode.nodeValue;
		if ("This should have an effect" !== newValue) {
			return "hc_nodevalue02: #afterChange 'newValue' equals '" + newValue + "' not '" + "This should have an effect" + "'";
		}
		return "hc_nodevalue02: OK";
	} catch (e) {
		return "hc_nodevalue02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_nodevalue03.xml" fleur="hc_nodevalue03" native="hc_nodevalue03"><Fleur>(function(){
	var success;
	try {
		var doc;
		var newNode;
		var newValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		if (("text/xml" === "text/html")) {
			success = false;
			try {
				newNode = doc.createEntityReference("ent1");
			} catch (ex) {
				if (typeof ex.code != 'undefined') {
					success = ex.code === 9;
				}
			}
			if (!success) {
				return "hc_nodevalue03: Exception NOT_SUPPORTED_ERR expected";
			}
		} else {
			newNode = doc.createEntityReference("ent1");
			if (newNode == null) {
				return "hc_nodevalue03: #createdEntRefNotNull 'newNode' is null";
			}
			newValue = newNode.nodeValue;
			if (newValue != null) {
				return "hc_nodevalue03: #initiallyNull 'newValue' equals '" + newValue + "' not null";
			}
			newNode.nodeValue = "This should have no effect";
			newValue = newNode.nodeValue;
			if (newValue != null) {
				return "hc_nodevalue03: #nullAfterAttemptedChange 'newValue' equals '" + newValue + "' not null";
			}
		}
		return "hc_nodevalue03: OK";
	} catch (e) {
		return "hc_nodevalue03: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var newNode;
		var newValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		if (("text/xml" === "text/html")) {
			success = false;
			try {
				newNode = doc.createEntityReference("ent1");
			} catch (ex) {
				if (typeof ex.code != 'undefined') {
					success = ex.code === 9;
				}
			}
			if (!success) {
				return "hc_nodevalue03: Exception NOT_SUPPORTED_ERR expected";
			}
		} else {
			newNode = doc.createEntityReference("ent1");
			if (newNode == null) {
				return "hc_nodevalue03: #createdEntRefNotNull 'newNode' is null";
			}
			newValue = newNode.nodeValue;
			if (newValue != null) {
				return "hc_nodevalue03: #initiallyNull 'newValue' equals '" + newValue + "' not null";
			}
			newNode.nodeValue = "This should have no effect";
			newValue = newNode.nodeValue;
			if (newValue != null) {
				return "hc_nodevalue03: #nullAfterAttemptedChange 'newValue' equals '" + newValue + "' not null";
			}
		}
		return "hc_nodevalue03: OK";
	} catch (e) {
		return "hc_nodevalue03: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_nodevalue04.xml" fleur="hc_nodevalue04" native="hc_nodevalue04"><Fleur>(function(){
	var success;
	try {
		var doc;
		var newNode;
		var newValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		newNode = doc.doctype;
		if (((newNode != null) || ("text/xml" === "text/html")) !== true) {
			return "docTypeNotNullOrDocIsHTML: '((newNode != null) || (~text/xml~ === ~text/html~))' equals '" + ((newNode != null) || ("text/xml" === "text/html")) + "' not true";
		}
		if ((newNode != null)) {
			if (newNode == null) {
				return "hc_nodevalue04: #docTypeNotNull 'newNode' is null";
			}
			newValue = newNode.nodeValue;
			if (newValue != null) {
				return "hc_nodevalue04: #initiallyNull 'newValue' equals '" + newValue + "' not null";
			}
			newNode.nodeValue = "This should have no effect";
			newValue = newNode.nodeValue;
			if (newValue != null) {
				return "hc_nodevalue04: #nullAfterAttemptedChange 'newValue' equals '" + newValue + "' not null";
			}
		}
		return "hc_nodevalue04: OK";
	} catch (e) {
		return "hc_nodevalue04: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var newNode;
		var newValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		newNode = doc.doctype;
		if (((newNode != null) || ("text/xml" === "text/html")) !== true) {
			return "docTypeNotNullOrDocIsHTML: '((newNode != null) || (~text/xml~ === ~text/html~))' equals '" + ((newNode != null) || ("text/xml" === "text/html")) + "' not true";
		}
		if ((newNode != null)) {
			if (newNode == null) {
				return "hc_nodevalue04: #docTypeNotNull 'newNode' is null";
			}
			newValue = newNode.nodeValue;
			if (newValue != null) {
				return "hc_nodevalue04: #initiallyNull 'newValue' equals '" + newValue + "' not null";
			}
			newNode.nodeValue = "This should have no effect";
			newValue = newNode.nodeValue;
			if (newValue != null) {
				return "hc_nodevalue04: #nullAfterAttemptedChange 'newValue' equals '" + newValue + "' not null";
			}
		}
		return "hc_nodevalue04: OK";
	} catch (e) {
		return "hc_nodevalue04: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_nodevalue05.xml" fleur="hc_nodevalue05" native="hc_nodevalue05"><Fleur>(function(){
	var success;
	try {
		var doc;
		var newNode;
		var newValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		newNode = doc.createDocumentFragment();
		newValue = newNode.nodeValue;
		if (newValue != null) {
			return "hc_nodevalue05: #initiallyNull 'newValue' equals '" + newValue + "' not null";
		}
		newNode.nodeValue = "This should have no effect";
		newValue = newNode.nodeValue;
		if (newValue != null) {
			return "hc_nodevalue05: #nullAfterAttemptedChange 'newValue' equals '" + newValue + "' not null";
		}
		return "hc_nodevalue05: OK";
	} catch (e) {
		return "hc_nodevalue05: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var newNode;
		var newValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		newNode = doc.createDocumentFragment();
		newValue = newNode.nodeValue;
		if (newValue != null) {
			return "hc_nodevalue05: #initiallyNull 'newValue' equals '" + newValue + "' not null";
		}
		newNode.nodeValue = "This should have no effect";
		newValue = newNode.nodeValue;
		if (newValue != null) {
			return "hc_nodevalue05: #nullAfterAttemptedChange 'newValue' equals '" + newValue + "' not null";
		}
		return "hc_nodevalue05: OK";
	} catch (e) {
		return "hc_nodevalue05: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_nodevalue06.xml" fleur="hc_nodevalue06" native="hc_nodevalue06"><Fleur>(function(){
	var success;
	try {
		var newNode;
		var newValue;
		var newNodeReq = new XMLHttpRequest();
		newNodeReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		newNodeReq.send();
		newNode = new Fleur.DOMParser().parseFromString(newNodeReq.responseText, "text/xml");
		newValue = newNode.nodeValue;
		if (newValue != null) {
			return "hc_nodevalue06: #initiallyNull 'newValue' equals '" + newValue + "' not null";
		}
		newNode.nodeValue = "This should have no effect";
		newValue = newNode.nodeValue;
		if (newValue != null) {
			return "hc_nodevalue06: #nullAfterAttemptedChange 'newValue' equals '" + newValue + "' not null";
		}
		return "hc_nodevalue06: OK";
	} catch (e) {
		return "hc_nodevalue06: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var newNode;
		var newValue;
		var newNodeReq = new XMLHttpRequest();
		newNodeReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		newNodeReq.send();
		newNode = new DOMParser().parseFromString(newNodeReq.responseText, "text/xml");
		newValue = newNode.nodeValue;
		if (newValue != null) {
			return "hc_nodevalue06: #initiallyNull 'newValue' equals '" + newValue + "' not null";
		}
		newNode.nodeValue = "This should have no effect";
		newValue = newNode.nodeValue;
		if (newValue != null) {
			return "hc_nodevalue06: #nullAfterAttemptedChange 'newValue' equals '" + newValue + "' not null";
		}
		return "hc_nodevalue06: OK";
	} catch (e) {
		return "hc_nodevalue06: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_nodevalue07.xml" fleur="hc_nodevalue07" native="hc_nodevalue07"><Fleur>(function(){
	var success;
	try {
				var doc;
		var newNode;
		var newValue;
		var nodeMap;
		var docType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		if (!(("text/xml" === "text/html"))) {
			if (docType == null) {
				return "hc_nodevalue07: #docTypeNotNull 'docType' is null";
			}
			nodeMap = docType.entities;
			if (nodeMap == null) {
				return "hc_nodevalue07: #entitiesNotNull 'nodeMap' is null";
			}
			newNode = nodeMap.getNamedItem("alpha");
			if (newNode == null) {
				return "hc_nodevalue07: #entityNotNull 'newNode' is null";
			}
			newValue = newNode.nodeValue;
			if (newValue != null) {
				return "hc_nodevalue07: #initiallyNull 'newValue' equals '" + newValue + "' not null";
			}
			newNode.nodeValue = "This should have no effect";
			newValue = newNode.nodeValue;
			if (newValue != null) {
				return "hc_nodevalue07: #nullAfterAttemptedChange 'newValue' equals '" + newValue + "' not null";
			}
		}
		return "hc_nodevalue07: OK";
	} catch (e) {
		return "hc_nodevalue07: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
				var doc;
		var newNode;
		var newValue;
		var nodeMap;
		var docType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		if (!(("text/xml" === "text/html"))) {
			if (docType == null) {
				return "hc_nodevalue07: #docTypeNotNull 'docType' is null";
			}
			nodeMap = docType.entities;
			if (nodeMap == null) {
				return "hc_nodevalue07: #entitiesNotNull 'nodeMap' is null";
			}
			newNode = nodeMap.getNamedItem("alpha");
			if (newNode == null) {
				return "hc_nodevalue07: #entityNotNull 'newNode' is null";
			}
			newValue = newNode.nodeValue;
			if (newValue != null) {
				return "hc_nodevalue07: #initiallyNull 'newValue' equals '" + newValue + "' not null";
			}
			newNode.nodeValue = "This should have no effect";
			newValue = newNode.nodeValue;
			if (newValue != null) {
				return "hc_nodevalue07: #nullAfterAttemptedChange 'newValue' equals '" + newValue + "' not null";
			}
		}
		return "hc_nodevalue07: OK";
	} catch (e) {
		return "hc_nodevalue07: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_nodevalue08.xml" fleur="hc_nodevalue08" native="hc_nodevalue08"><Fleur>(function(){
	var success;
	try {
				var doc;
		var docType;
		var newNode;
		var newValue;
		var nodeMap;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		if (!(("text/xml" === "text/html"))) {
			if (docType == null) {
				return "hc_nodevalue08: #docTypeNotNull 'docType' is null";
			}
			nodeMap = docType.notations;
			if (nodeMap == null) {
				return "hc_nodevalue08: #notationsNotNull 'nodeMap' is null";
			}
			newNode = nodeMap.getNamedItem("notation1");
			if (newNode == null) {
				return "hc_nodevalue08: #notationNotNull 'newNode' is null";
			}
			newValue = newNode.nodeValue;
			if (newValue != null) {
				return "hc_nodevalue08: #initiallyNull 'newValue' equals '" + newValue + "' not null";
			}
			newNode.nodeValue = "This should have no effect";
			newValue = newNode.nodeValue;
			if (newValue != null) {
				return "hc_nodevalue08: #nullAfterAttemptedChange 'newValue' equals '" + newValue + "' not null";
			}
		}
		return "hc_nodevalue08: OK";
	} catch (e) {
		return "hc_nodevalue08: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
				var doc;
		var docType;
		var newNode;
		var newValue;
		var nodeMap;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		if (!(("text/xml" === "text/html"))) {
			if (docType == null) {
				return "hc_nodevalue08: #docTypeNotNull 'docType' is null";
			}
			nodeMap = docType.notations;
			if (nodeMap == null) {
				return "hc_nodevalue08: #notationsNotNull 'nodeMap' is null";
			}
			newNode = nodeMap.getNamedItem("notation1");
			if (newNode == null) {
				return "hc_nodevalue08: #notationNotNull 'newNode' is null";
			}
			newValue = newNode.nodeValue;
			if (newValue != null) {
				return "hc_nodevalue08: #initiallyNull 'newValue' equals '" + newValue + "' not null";
			}
			newNode.nodeValue = "This should have no effect";
			newValue = newNode.nodeValue;
			if (newValue != null) {
				return "hc_nodevalue08: #nullAfterAttemptedChange 'newValue' equals '" + newValue + "' not null";
			}
		}
		return "hc_nodevalue08: OK";
	} catch (e) {
		return "hc_nodevalue08: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_notationsremovenameditem1.xml" fleur="hc_notationsremovenameditem1" native="hc_notationsremovenameditem1"><Fleur>(function(){
	var success;
	try {
				var doc;
		var notations;
		var docType;
		var retval;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		if (!(("text/xml" === "text/html"))) {
			if (docType == null) {
				return "hc_notationsremovenameditem1: #docTypeNotNull 'docType' is null";
			}
			notations = docType.notations;
			if (notations == null) {
				return "hc_notationsremovenameditem1: #notationsNotNull 'notations' is null";
			}
			success = false;
			try {
				retval = notations.removeNamedItem("notation1");
			} catch (ex) {
				if (typeof ex.code != 'undefined') {
					success = ex.code === 7;
				}
			}
			if (!success) {
				return "hc_notationsremovenameditem1: Exception NO_MODIFICATION_ALLOWED_ERR expected";
			}
		}
		return "hc_notationsremovenameditem1: OK";
	} catch (e) {
		return "hc_notationsremovenameditem1: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
				var doc;
		var notations;
		var docType;
		var retval;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		if (!(("text/xml" === "text/html"))) {
			if (docType == null) {
				return "hc_notationsremovenameditem1: #docTypeNotNull 'docType' is null";
			}
			notations = docType.notations;
			if (notations == null) {
				return "hc_notationsremovenameditem1: #notationsNotNull 'notations' is null";
			}
			success = false;
			try {
				retval = notations.removeNamedItem("notation1");
			} catch (ex) {
				if (typeof ex.code != 'undefined') {
					success = ex.code === 7;
				}
			}
			if (!success) {
				return "hc_notationsremovenameditem1: Exception NO_MODIFICATION_ALLOWED_ERR expected";
			}
		}
		return "hc_notationsremovenameditem1: OK";
	} catch (e) {
		return "hc_notationsremovenameditem1: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_notationssetnameditem1.xml" fleur="hc_notationssetnameditem1" native="hc_notationssetnameditem1"><Fleur>(function(){
	var success;
	try {
				var doc;
		var notations;
		var docType;
		var retval;
		var elem;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		if (!(("text/xml" === "text/html"))) {
			if (docType == null) {
				return "hc_notationssetnameditem1: #docTypeNotNull 'docType' is null";
			}
			notations = docType.notations;
			if (notations == null) {
				return "hc_notationssetnameditem1: #notationsNotNull 'notations' is null";
			}
			elem = doc.createElement("br");
			try {
				retval = notations.setNamedItem(elem);
				fail("throw_HIER_OR_NO_MOD_ERR");
			} catch (ex) {
				if (typeof(ex.code) != 'undefined') {      
					switch (ex.code) {
						case 	/* HIERARCHY_REQUEST_ERR */ 3 :
							break;
						case 	/* NO_MODIFICATION_ALLOWED_ERR */ 7 :
							break;
						default:
							throw ex;
					}
				} else { 
					throw ex;
				}
			}
		}
		return "hc_notationssetnameditem1: OK";
	} catch (e) {
		return "hc_notationssetnameditem1: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
				var doc;
		var notations;
		var docType;
		var retval;
		var elem;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		if (!(("text/xml" === "text/html"))) {
			if (docType == null) {
				return "hc_notationssetnameditem1: #docTypeNotNull 'docType' is null";
			}
			notations = docType.notations;
			if (notations == null) {
				return "hc_notationssetnameditem1: #notationsNotNull 'notations' is null";
			}
			elem = doc.createElement("br");
			try {
				retval = notations.setNamedItem(elem);
				fail("throw_HIER_OR_NO_MOD_ERR");
			} catch (ex) {
				if (typeof(ex.code) != 'undefined') {      
					switch (ex.code) {
						case 	/* HIERARCHY_REQUEST_ERR */ 3 :
							break;
						case 	/* NO_MODIFICATION_ALLOWED_ERR */ 7 :
							break;
						default:
							throw ex;
					}
				} else { 
					throw ex;
				}
			}
		}
		return "hc_notationssetnameditem1: OK";
	} catch (e) {
		return "hc_notationssetnameditem1: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_textindexsizeerrnegativeoffset.xml" fleur="hc_textindexsizeerrnegativeoffset" native="hc_textindexsizeerrnegativeoffset"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var textNode;
		var splitNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("strong");
		nameNode = elementList.item(2);
		textNode = nameNode.firstChild;
		success = false;
		try {
			splitNode = textNode.splitText(-69);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 1;
			}
		}
		if (!success) {
			return "hc_textIndexSizeErrNegativeOffset: Exception INDEX_SIZE_ERR expected";
		}
		return "hc_textIndexSizeErrNegativeOffset: OK";
	} catch (e) {
		return "hc_textIndexSizeErrNegativeOffset: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var textNode;
		var splitNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("strong");
		nameNode = elementList.item(2);
		textNode = nameNode.firstChild;
		success = false;
		try {
			splitNode = textNode.splitText(-69);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 1;
			}
		}
		if (!success) {
			return "hc_textIndexSizeErrNegativeOffset: Exception INDEX_SIZE_ERR expected";
		}
		return "hc_textIndexSizeErrNegativeOffset: OK";
	} catch (e) {
		return "hc_textIndexSizeErrNegativeOffset: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_textindexsizeerroffsetoutofbounds.xml" fleur="hc_textindexsizeerroffsetoutofbounds" native="hc_textindexsizeerroffsetoutofbounds"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var textNode;
		var splitNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("strong");
		nameNode = elementList.item(2);
		textNode = nameNode.firstChild;
		success = false;
		try {
			splitNode = textNode.splitText(300);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 1;
			}
		}
		if (!success) {
			return "hc_textIndexSizeErrOffsetOutOfBounds: Exception INDEX_SIZE_ERR expected";
		}
		return "hc_textIndexSizeErrOffsetOutOfBounds: OK";
	} catch (e) {
		return "hc_textIndexSizeErrOffsetOutOfBounds: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var textNode;
		var splitNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("strong");
		nameNode = elementList.item(2);
		textNode = nameNode.firstChild;
		success = false;
		try {
			splitNode = textNode.splitText(300);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 1;
			}
		}
		if (!success) {
			return "hc_textIndexSizeErrOffsetOutOfBounds: Exception INDEX_SIZE_ERR expected";
		}
		return "hc_textIndexSizeErrOffsetOutOfBounds: OK";
	} catch (e) {
		return "hc_textIndexSizeErrOffsetOutOfBounds: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_textparseintolistofelements.xml" fleur="hc_textparseintolistofelements" native="hc_textparseintolistofelements"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var addressNode;
		var childList;
		var child;
		var value;
		var grandChild;
		var length;
		var result = new Array();

		expectedNormal = new Array();
		expectedNormal[0] = "β";
		expectedNormal[1] = " Dallas, ";
		expectedNormal[2] = "γ";
		expectedNormal[3] = "\n 98554";
		expectedExpanded = new Array();
		expectedExpanded[0] = "β Dallas, γ\n 98554";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		addressNode = elementList.item(1);
		childList = addressNode.childNodes;
		length = childList.length;
		for (var index_id0x058ec9c0 = 0; index_id0x058ec9c0 &lt; childList.length; index_id0x058ec9c0++) {
			child = childList.item(index_id0x058ec9c0);
			value = child.nodeValue;
			if ((value == null)) {
				grandChild = child.firstChild;
				if (grandChild == null) {
					return "hc_textParseIntoListOfElements: #grandChildNotNull 'grandChild' is null";
				}
				value = grandChild.nodeValue;
result[result.length] = value;
			} else {
result[result.length] = value;
			}
		}
		if ((1 == length)) {
			if (expectedExpanded.join("|") !== result.join("|")) {
				return "hc_textParseIntoListOfElements: #assertEqCoalescing 'result' equals '" + result.join("|") + "' not '" + expectedExpanded.join("|") + "'";
			}
		} else {
			if (expectedNormal.join("|") !== result.join("|")) {
				return "hc_textParseIntoListOfElements: #assertEqNormal 'result' equals '" + result.join("|") + "' not '" + expectedNormal.join("|") + "'";
			}
		}
		return "hc_textParseIntoListOfElements: OK";
	} catch (e) {
		return "hc_textParseIntoListOfElements: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var addressNode;
		var childList;
		var child;
		var value;
		var grandChild;
		var length;
		var result = new Array();

		expectedNormal = new Array();
		expectedNormal[0] = "β";
		expectedNormal[1] = " Dallas, ";
		expectedNormal[2] = "γ";
		expectedNormal[3] = "\n 98554";
		expectedExpanded = new Array();
		expectedExpanded[0] = "β Dallas, γ\n 98554";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		addressNode = elementList.item(1);
		childList = addressNode.childNodes;
		length = childList.length;
		for (var index_id0x058ec9c0 = 0; index_id0x058ec9c0 &lt; childList.length; index_id0x058ec9c0++) {
			child = childList.item(index_id0x058ec9c0);
			value = child.nodeValue;
			if ((value == null)) {
				grandChild = child.firstChild;
				if (grandChild == null) {
					return "hc_textParseIntoListOfElements: #grandChildNotNull 'grandChild' is null";
				}
				value = grandChild.nodeValue;
result[result.length] = value;
			} else {
result[result.length] = value;
			}
		}
		if ((1 == length)) {
			if (expectedExpanded.join("|") !== result.join("|")) {
				return "hc_textParseIntoListOfElements: #assertEqCoalescing 'result' equals '" + result.join("|") + "' not '" + expectedExpanded.join("|") + "'";
			}
		} else {
			if (expectedNormal.join("|") !== result.join("|")) {
				return "hc_textParseIntoListOfElements: #assertEqNormal 'result' equals '" + result.join("|") + "' not '" + expectedNormal.join("|") + "'";
			}
		}
		return "hc_textParseIntoListOfElements: OK";
	} catch (e) {
		return "hc_textParseIntoListOfElements: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_textsplittextfour.xml" fleur="hc_textsplittextfour" native="hc_textsplittextfour"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var addressNode;
		var textNode;
		var splitNode;
		var value;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		addressNode = elementList.item(0);
		textNode = addressNode.firstChild;
		splitNode = textNode.splitText(30);
		value = splitNode.nodeValue;
		if ("98551" !== value) {
			return "hc_textSplitTextFour: #textSplitTextFourAssert 'value' equals '" + value + "' not '" + "98551" + "'";
		}
		return "hc_textSplitTextFour: OK";
	} catch (e) {
		return "hc_textSplitTextFour: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var addressNode;
		var textNode;
		var splitNode;
		var value;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("acronym");
		addressNode = elementList.item(0);
		textNode = addressNode.firstChild;
		splitNode = textNode.splitText(30);
		value = splitNode.nodeValue;
		if ("98551" !== value) {
			return "hc_textSplitTextFour: #textSplitTextFourAssert 'value' equals '" + value + "' not '" + "98551" + "'";
		}
		return "hc_textSplitTextFour: OK";
	} catch (e) {
		return "hc_textSplitTextFour: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_textsplittextone.xml" fleur="hc_textsplittextone" native="hc_textsplittextone"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var textNode;
		var splitNode;
		var secondPart;
		var value;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("strong");
		nameNode = elementList.item(2);
		textNode = nameNode.firstChild;
		splitNode = textNode.splitText(7);
		secondPart = textNode.nextSibling;
		value = secondPart.nodeValue;
		if ("Jones" !== value) {
			return "hc_textSplitTextOne: #textSplitTextOneAssert 'value' equals '" + value + "' not '" + "Jones" + "'";
		}
		return "hc_textSplitTextOne: OK";
	} catch (e) {
		return "hc_textSplitTextOne: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var textNode;
		var splitNode;
		var secondPart;
		var value;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("strong");
		nameNode = elementList.item(2);
		textNode = nameNode.firstChild;
		splitNode = textNode.splitText(7);
		secondPart = textNode.nextSibling;
		value = secondPart.nodeValue;
		if ("Jones" !== value) {
			return "hc_textSplitTextOne: #textSplitTextOneAssert 'value' equals '" + value + "' not '" + "Jones" + "'";
		}
		return "hc_textSplitTextOne: OK";
	} catch (e) {
		return "hc_textSplitTextOne: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_textsplittextthree.xml" fleur="hc_textsplittextthree" native="hc_textsplittextthree"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var textNode;
		var splitNode;
		var value;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("strong");
		nameNode = elementList.item(2);
		textNode = nameNode.firstChild;
		splitNode = textNode.splitText(6);
		value = splitNode.nodeValue;
		if (" Jones" !== value) {
			return "hc_textSplitTextThree: #textSplitTextThreeAssert 'value' equals '" + value + "' not '" + " Jones" + "'";
		}
		return "hc_textSplitTextThree: OK";
	} catch (e) {
		return "hc_textSplitTextThree: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var textNode;
		var splitNode;
		var value;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("strong");
		nameNode = elementList.item(2);
		textNode = nameNode.firstChild;
		splitNode = textNode.splitText(6);
		value = splitNode.nodeValue;
		if (" Jones" !== value) {
			return "hc_textSplitTextThree: #textSplitTextThreeAssert 'value' equals '" + value + "' not '" + " Jones" + "'";
		}
		return "hc_textSplitTextThree: OK";
	} catch (e) {
		return "hc_textSplitTextThree: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_textsplittexttwo.xml" fleur="hc_textsplittexttwo" native="hc_textsplittexttwo"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var textNode;
		var splitNode;
		var value;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("strong");
		nameNode = elementList.item(2);
		textNode = nameNode.firstChild;
		splitNode = textNode.splitText(5);
		value = textNode.nodeValue;
		if ("Roger" !== value) {
			return "hc_textSplitTextTwo: #textSplitTextTwoAssert 'value' equals '" + value + "' not '" + "Roger" + "'";
		}
		return "hc_textSplitTextTwo: OK";
	} catch (e) {
		return "hc_textSplitTextTwo: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var textNode;
		var splitNode;
		var value;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("strong");
		nameNode = elementList.item(2);
		textNode = nameNode.firstChild;
		splitNode = textNode.splitText(5);
		value = textNode.nodeValue;
		if ("Roger" !== value) {
			return "hc_textSplitTextTwo: #textSplitTextTwoAssert 'value' equals '" + value + "' not '" + "Roger" + "'";
		}
		return "hc_textSplitTextTwo: OK";
	} catch (e) {
		return "hc_textSplitTextTwo: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_textwithnomarkup.xml" fleur="hc_textwithnomarkup" native="hc_textwithnomarkup"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var nodeV;
		var value;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("strong");
		nameNode = elementList.item(2);
		nodeV = nameNode.firstChild;
		value = nodeV.nodeValue;
		if ("Roger\n Jones" !== value) {
			return "hc_textWithNoMarkup: #textWithNoMarkupAssert 'value' equals '" + value + "' not '" + "Roger\n Jones" + "'";
		}
		return "hc_textWithNoMarkup: OK";
	} catch (e) {
		return "hc_textWithNoMarkup: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var nameNode;
		var nodeV;
		var value;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("strong");
		nameNode = elementList.item(2);
		nodeV = nameNode.firstChild;
		value = nodeV.nodeValue;
		if ("Roger\n Jones" !== value) {
			return "hc_textWithNoMarkup: #textWithNoMarkupAssert 'value' equals '" + value + "' not '" + "Roger\n Jones" + "'";
		}
		return "hc_textWithNoMarkup: OK";
	} catch (e) {
		return "hc_textWithNoMarkup: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>

<suite.member href="hc_attrappendchild1.xml" fleur="hc_attrappendchild1" native="hc_attrappendchild1"><Fleur>(function(){
	var success;
	try {
		var doc;
		var acronymList;
		var testNode;
		var attributes;
		var titleAttr;
		var value;
		var textNode;
		var retval;
		var lastChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		acronymList = doc.getElementsByTagName("acronym");
		testNode = acronymList.item(3);
		attributes = testNode.attributes;
		titleAttr = attributes.getNamedItem("title");
		textNode = doc.createTextNode("terday");
		retval = titleAttr.appendChild(textNode);
		value = titleAttr.value;
		if ("Yesterday" !== value) {
			return "hc_attrappendchild1: #attrValue 'value' equals '" + value + "' not '" + "Yesterday" + "'";
		}
		value = titleAttr.nodeValue;
		if ("Yesterday" !== value) {
			return "hc_attrappendchild1: #attrNodeValue 'value' equals '" + value + "' not '" + "Yesterday" + "'";
		}
		value = retval.nodeValue;
		if ("terday" !== value) {
			return "hc_attrappendchild1: #retvalValue 'value' equals '" + value + "' not '" + "terday" + "'";
		}
		lastChild = titleAttr.lastChild;
		value = lastChild.nodeValue;
		if ("terday" !== value) {
			return "hc_attrappendchild1: #lastChildValue 'value' equals '" + value + "' not '" + "terday" + "'";
		}
		return "hc_attrappendchild1: OK";
	} catch (e) {
		return "hc_attrappendchild1: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var acronymList;
		var testNode;
		var attributes;
		var titleAttr;
		var value;
		var textNode;
		var retval;
		var lastChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		acronymList = doc.getElementsByTagName("acronym");
		testNode = acronymList.item(3);
		attributes = testNode.attributes;
		titleAttr = attributes.getNamedItem("title");
		textNode = doc.createTextNode("terday");
		retval = titleAttr.appendChild(textNode);
		value = titleAttr.value;
		if ("Yesterday" !== value) {
			return "hc_attrappendchild1: #attrValue 'value' equals '" + value + "' not '" + "Yesterday" + "'";
		}
		value = titleAttr.nodeValue;
		if ("Yesterday" !== value) {
			return "hc_attrappendchild1: #attrNodeValue 'value' equals '" + value + "' not '" + "Yesterday" + "'";
		}
		value = retval.nodeValue;
		if ("terday" !== value) {
			return "hc_attrappendchild1: #retvalValue 'value' equals '" + value + "' not '" + "terday" + "'";
		}
		lastChild = titleAttr.lastChild;
		value = lastChild.nodeValue;
		if ("terday" !== value) {
			return "hc_attrappendchild1: #lastChildValue 'value' equals '" + value + "' not '" + "terday" + "'";
		}
		return "hc_attrappendchild1: OK";
	} catch (e) {
		return "hc_attrappendchild1: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_attrappendchild2.xml" fleur="hc_attrappendchild2" native="hc_attrappendchild2"><Fleur>(function(){
	var success;
	try {
		var doc;
		var acronymList;
		var testNode;
		var attributes;
		var titleAttr;
		var value;
		var newChild;
		var retval;
		var lastChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		acronymList = doc.getElementsByTagName("acronym");
		testNode = acronymList.item(3);
		attributes = testNode.attributes;
		titleAttr = attributes.getNamedItem("title");
		newChild = doc.createElement("terday");
		success = false;
		try {
			retval = titleAttr.appendChild(newChild);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 3;
			}
		}
		if (!success) {
			return "hc_attrappendchild2: Exception HIERARCHY_REQUEST_ERR expected";
		}
		return "hc_attrappendchild2: OK";
	} catch (e) {
		return "hc_attrappendchild2: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var acronymList;
		var testNode;
		var attributes;
		var titleAttr;
		var value;
		var newChild;
		var retval;
		var lastChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		acronymList = doc.getElementsByTagName("acronym");
		testNode = acronymList.item(3);
		attributes = testNode.attributes;
		titleAttr = attributes.getNamedItem("title");
		newChild = doc.createElement("terday");
		success = false;
		try {
			retval = titleAttr.appendChild(newChild);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 3;
			}
		}
		if (!success) {
			return "hc_attrappendchild2: Exception HIERARCHY_REQUEST_ERR expected";
		}
		return "hc_attrappendchild2: OK";
	} catch (e) {
		return "hc_attrappendchild2: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_attrappendchild3.xml" fleur="hc_attrappendchild3" native="hc_attrappendchild3"><Fleur>(function(){
	var success;
	try {
		var doc;
		var acronymList;
		var testNode;
		var attributes;
		var titleAttr;
		var value;
		var terNode;
		var dayNode;
		var retval;
		var lastChild;
		var docFrag;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		acronymList = doc.getElementsByTagName("acronym");
		testNode = acronymList.item(3);
		attributes = testNode.attributes;
		titleAttr = attributes.getNamedItem("title");
		terNode = doc.createTextNode("ter");
		dayNode = doc.createTextNode("day");
		docFrag = doc.createDocumentFragment();
		retval = docFrag.appendChild(terNode);
		retval = docFrag.appendChild(dayNode);
		retval = titleAttr.appendChild(docFrag);
		value = titleAttr.value;
		if ("Yesterday" !== value) {
			return "hc_attrappendchild3: #attrValue 'value' equals '" + value + "' not '" + "Yesterday" + "'";
		}
		value = titleAttr.nodeValue;
		if ("Yesterday" !== value) {
			return "hc_attrappendchild3: #attrNodeValue 'value' equals '" + value + "' not '" + "Yesterday" + "'";
		}
		value = retval.nodeValue;
		if (value != null) {
			return "hc_attrappendchild3: #retvalValue 'value' equals '" + value + "' not null";
		}
		lastChild = titleAttr.lastChild;
		value = lastChild.nodeValue;
		if ("day" !== value) {
			return "hc_attrappendchild3: #lastChildValue 'value' equals '" + value + "' not '" + "day" + "'";
		}
		return "hc_attrappendchild3: OK";
	} catch (e) {
		return "hc_attrappendchild3: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var acronymList;
		var testNode;
		var attributes;
		var titleAttr;
		var value;
		var terNode;
		var dayNode;
		var retval;
		var lastChild;
		var docFrag;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		acronymList = doc.getElementsByTagName("acronym");
		testNode = acronymList.item(3);
		attributes = testNode.attributes;
		titleAttr = attributes.getNamedItem("title");
		terNode = doc.createTextNode("ter");
		dayNode = doc.createTextNode("day");
		docFrag = doc.createDocumentFragment();
		retval = docFrag.appendChild(terNode);
		retval = docFrag.appendChild(dayNode);
		retval = titleAttr.appendChild(docFrag);
		value = titleAttr.value;
		if ("Yesterday" !== value) {
			return "hc_attrappendchild3: #attrValue 'value' equals '" + value + "' not '" + "Yesterday" + "'";
		}
		value = titleAttr.nodeValue;
		if ("Yesterday" !== value) {
			return "hc_attrappendchild3: #attrNodeValue 'value' equals '" + value + "' not '" + "Yesterday" + "'";
		}
		value = retval.nodeValue;
		if (value != null) {
			return "hc_attrappendchild3: #retvalValue 'value' equals '" + value + "' not null";
		}
		lastChild = titleAttr.lastChild;
		value = lastChild.nodeValue;
		if ("day" !== value) {
			return "hc_attrappendchild3: #lastChildValue 'value' equals '" + value + "' not '" + "day" + "'";
		}
		return "hc_attrappendchild3: OK";
	} catch (e) {
		return "hc_attrappendchild3: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_attrappendchild4.xml" fleur="hc_attrappendchild4" native="hc_attrappendchild4"><Fleur>(function(){
	var success;
	try {
				var doc;
		var acronymList;
		var testNode;
		var attributes;
		var titleAttr;
		var value;
		var textNode;
		var retval;
		var lastChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		acronymList = doc.getElementsByTagName("acronym");
		testNode = acronymList.item(3);
		attributes = testNode.attributes;
		titleAttr = attributes.getNamedItem("title");
		if (("text/xml" === "text/html")) {
			success = false;
			try {
				textNode = doc.createCDATASection("terday");
			} catch (ex) {
				if (typeof ex.code != 'undefined') {
					success = ex.code === 9;
				}
			}
			if (!success) {
				return "hc_attrappendchild4: Exception NOT_SUPPORTED_ERR expected";
			}
		} else {
			textNode = doc.createCDATASection("terday");
			success = false;
			try {
				retval = titleAttr.appendChild(textNode);
			} catch (ex) {
				if (typeof ex.code != 'undefined') {
					success = ex.code === 3;
				}
			}
			if (!success) {
				return "hc_attrappendchild4: Exception HIERARCHY_REQUEST_ERR expected";
			}
		}
		return "hc_attrappendchild4: OK";
	} catch (e) {
		return "hc_attrappendchild4: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
				var doc;
		var acronymList;
		var testNode;
		var attributes;
		var titleAttr;
		var value;
		var textNode;
		var retval;
		var lastChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		acronymList = doc.getElementsByTagName("acronym");
		testNode = acronymList.item(3);
		attributes = testNode.attributes;
		titleAttr = attributes.getNamedItem("title");
		if (("text/xml" === "text/html")) {
			success = false;
			try {
				textNode = doc.createCDATASection("terday");
			} catch (ex) {
				if (typeof ex.code != 'undefined') {
					success = ex.code === 9;
				}
			}
			if (!success) {
				return "hc_attrappendchild4: Exception NOT_SUPPORTED_ERR expected";
			}
		} else {
			textNode = doc.createCDATASection("terday");
			success = false;
			try {
				retval = titleAttr.appendChild(textNode);
			} catch (ex) {
				if (typeof ex.code != 'undefined') {
					success = ex.code === 3;
				}
			}
			if (!success) {
				return "hc_attrappendchild4: Exception HIERARCHY_REQUEST_ERR expected";
			}
		}
		return "hc_attrappendchild4: OK";
	} catch (e) {
		return "hc_attrappendchild4: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_attrappendchild5.xml" fleur="hc_attrappendchild5" native="hc_attrappendchild5"><Fleur>(function(){
	var success;
	try {
		var doc;
		var acronymList;
		var testNode;
		var attributes;
		var titleAttr;
		var value;
		var textNode;
		var retval;
		var lastChild;
		var otherDoc;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		var otherDocReq = new XMLHttpRequest();
		otherDocReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		otherDocReq.send();
		otherDoc = new Fleur.DOMParser().parseFromString(otherDocReq.responseText, "text/xml");
		acronymList = doc.getElementsByTagName("acronym");
		testNode = acronymList.item(3);
		attributes = testNode.attributes;
		titleAttr = attributes.getNamedItem("title");
		textNode = otherDoc.createTextNode("terday");
		success = false;
		try {
			retval = titleAttr.appendChild(textNode);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 4;
			}
		}
		if (!success) {
			return "hc_attrappendchild5: Exception WRONG_DOCUMENT_ERR expected";
		}
		return "hc_attrappendchild5: OK";
	} catch (e) {
		return "hc_attrappendchild5: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var acronymList;
		var testNode;
		var attributes;
		var titleAttr;
		var value;
		var textNode;
		var retval;
		var lastChild;
		var otherDoc;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		var otherDocReq = new XMLHttpRequest();
		otherDocReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		otherDocReq.send();
		otherDoc = new DOMParser().parseFromString(otherDocReq.responseText, "text/xml");
		acronymList = doc.getElementsByTagName("acronym");
		testNode = acronymList.item(3);
		attributes = testNode.attributes;
		titleAttr = attributes.getNamedItem("title");
		textNode = otherDoc.createTextNode("terday");
		success = false;
		try {
			retval = titleAttr.appendChild(textNode);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 4;
			}
		}
		if (!success) {
			return "hc_attrappendchild5: Exception WRONG_DOCUMENT_ERR expected";
		}
		return "hc_attrappendchild5: OK";
	} catch (e) {
		return "hc_attrappendchild5: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_attrappendchild6.xml" fleur="hc_attrappendchild6" native="hc_attrappendchild6"><Fleur>(function(){
	var success;
	try {
		var doc;
		var acronymList;
		var testNode;
		var attributes;
		var titleAttr;
		var value;
		var textNode;
		var retval;
		var lastChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		titleAttr = doc.createAttribute("title");
		textNode = doc.createTextNode("Yesterday");
		retval = titleAttr.appendChild(textNode);
		value = titleAttr.value;
		if ("Yesterday" !== value) {
			return "hc_attrappendchild6: #attrValue 'value' equals '" + value + "' not '" + "Yesterday" + "'";
		}
		value = titleAttr.nodeValue;
		if ("Yesterday" !== value) {
			return "hc_attrappendchild6: #attrNodeValue 'value' equals '" + value + "' not '" + "Yesterday" + "'";
		}
		value = retval.nodeValue;
		if ("Yesterday" !== value) {
			return "hc_attrappendchild6: #retvalValue 'value' equals '" + value + "' not '" + "Yesterday" + "'";
		}
		lastChild = titleAttr.lastChild;
		value = lastChild.nodeValue;
		if ("Yesterday" !== value) {
			return "hc_attrappendchild6: #lastChildValue 'value' equals '" + value + "' not '" + "Yesterday" + "'";
		}
		return "hc_attrappendchild6: OK";
	} catch (e) {
		return "hc_attrappendchild6: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var acronymList;
		var testNode;
		var attributes;
		var titleAttr;
		var value;
		var textNode;
		var retval;
		var lastChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		titleAttr = doc.createAttribute("title");
		textNode = doc.createTextNode("Yesterday");
		retval = titleAttr.appendChild(textNode);
		value = titleAttr.value;
		if ("Yesterday" !== value) {
			return "hc_attrappendchild6: #attrValue 'value' equals '" + value + "' not '" + "Yesterday" + "'";
		}
		value = titleAttr.nodeValue;
		if ("Yesterday" !== value) {
			return "hc_attrappendchild6: #attrNodeValue 'value' equals '" + value + "' not '" + "Yesterday" + "'";
		}
		value = retval.nodeValue;
		if ("Yesterday" !== value) {
			return "hc_attrappendchild6: #retvalValue 'value' equals '" + value + "' not '" + "Yesterday" + "'";
		}
		lastChild = titleAttr.lastChild;
		value = lastChild.nodeValue;
		if ("Yesterday" !== value) {
			return "hc_attrappendchild6: #lastChildValue 'value' equals '" + value + "' not '" + "Yesterday" + "'";
		}
		return "hc_attrappendchild6: OK";
	} catch (e) {
		return "hc_attrappendchild6: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_attrchildnodes1.xml" fleur="hc_attrchildnodes1" native="hc_attrchildnodes1"><Fleur>(function(){
	var success;
	try {
		var doc;
		var acronymList;
		var testNode;
		var attributes;
		var titleAttr;
		var value;
		var textNode;
		var childNodes;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		acronymList = doc.getElementsByTagName("acronym");
		testNode = acronymList.item(3);
		attributes = testNode.attributes;
		titleAttr = attributes.getNamedItem("title");
		childNodes = titleAttr.childNodes;
		if (childNodes.length !== 1) {
			return "hc_attrchildnodes1: #childNodesSize 'childNodes.length' equals " + childNodes.length + " not 1";
		}
		textNode = childNodes.item(0);
		value = textNode.nodeValue;
		if ("Yes" !== value) {
			return "hc_attrchildnodes1: #child1IsYes 'value' equals '" + value + "' not '" + "Yes" + "'";
		}
		textNode = childNodes.item(1);
		if (textNode != null) {
			return "hc_attrchildnodes1: #secondItemIsNull 'textNode' equals '" + textNode + "' not null";
		}
		return "hc_attrchildnodes1: OK";
	} catch (e) {
		return "hc_attrchildnodes1: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var acronymList;
		var testNode;
		var attributes;
		var titleAttr;
		var value;
		var textNode;
		var childNodes;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		acronymList = doc.getElementsByTagName("acronym");
		testNode = acronymList.item(3);
		attributes = testNode.attributes;
		titleAttr = attributes.getNamedItem("title");
		childNodes = titleAttr.childNodes;
		if (childNodes.length !== 1) {
			return "hc_attrchildnodes1: #childNodesSize 'childNodes.length' equals " + childNodes.length + " not 1";
		}
		textNode = childNodes.item(0);
		value = textNode.nodeValue;
		if ("Yes" !== value) {
			return "hc_attrchildnodes1: #child1IsYes 'value' equals '" + value + "' not '" + "Yes" + "'";
		}
		textNode = childNodes.item(1);
		if (textNode != null) {
			return "hc_attrchildnodes1: #secondItemIsNull 'textNode' equals '" + textNode + "' not null";
		}
		return "hc_attrchildnodes1: OK";
	} catch (e) {
		return "hc_attrchildnodes1: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_attrchildnodes2.xml" fleur="hc_attrchildnodes2" native="hc_attrchildnodes2"><Fleur>(function(){
	var success;
	try {
		var doc;
		var acronymList;
		var testNode;
		var attributes;
		var titleAttr;
		var value;
		var textNode;
		var childNodes;
		var retval;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		acronymList = doc.getElementsByTagName("acronym");
		testNode = acronymList.item(3);
		attributes = testNode.attributes;
		titleAttr = attributes.getNamedItem("title");
		childNodes = titleAttr.childNodes;
		textNode = doc.createTextNode("terday");
		retval = titleAttr.appendChild(textNode);
		if (childNodes.length !== 2) {
			return "hc_attrchildnodes2: #childNodesSize 'childNodes.length' equals " + childNodes.length + " not 2";
		}
		textNode = childNodes.item(0);
		value = textNode.nodeValue;
		if ("Yes" !== value) {
			return "hc_attrchildnodes2: #child1IsYes 'value' equals '" + value + "' not '" + "Yes" + "'";
		}
		textNode = childNodes.item(1);
		value = textNode.nodeValue;
		if ("terday" !== value) {
			return "hc_attrchildnodes2: #child2IsTerday 'value' equals '" + value + "' not '" + "terday" + "'";
		}
		textNode = childNodes.item(2);
		if (textNode != null) {
			return "hc_attrchildnodes2: #thirdItemIsNull 'textNode' equals '" + textNode + "' not null";
		}
		return "hc_attrchildnodes2: OK";
	} catch (e) {
		return "hc_attrchildnodes2: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var acronymList;
		var testNode;
		var attributes;
		var titleAttr;
		var value;
		var textNode;
		var childNodes;
		var retval;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		acronymList = doc.getElementsByTagName("acronym");
		testNode = acronymList.item(3);
		attributes = testNode.attributes;
		titleAttr = attributes.getNamedItem("title");
		childNodes = titleAttr.childNodes;
		textNode = doc.createTextNode("terday");
		retval = titleAttr.appendChild(textNode);
		if (childNodes.length !== 2) {
			return "hc_attrchildnodes2: #childNodesSize 'childNodes.length' equals " + childNodes.length + " not 2";
		}
		textNode = childNodes.item(0);
		value = textNode.nodeValue;
		if ("Yes" !== value) {
			return "hc_attrchildnodes2: #child1IsYes 'value' equals '" + value + "' not '" + "Yes" + "'";
		}
		textNode = childNodes.item(1);
		value = textNode.nodeValue;
		if ("terday" !== value) {
			return "hc_attrchildnodes2: #child2IsTerday 'value' equals '" + value + "' not '" + "terday" + "'";
		}
		textNode = childNodes.item(2);
		if (textNode != null) {
			return "hc_attrchildnodes2: #thirdItemIsNull 'textNode' equals '" + textNode + "' not null";
		}
		return "hc_attrchildnodes2: OK";
	} catch (e) {
		return "hc_attrchildnodes2: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_attrclonenode1.xml" fleur="hc_attrclonenode1" native="hc_attrclonenode1"><Fleur>(function(){
	var success;
	try {
		var doc;
		var acronymList;
		var testNode;
		var attributes;
		var titleAttr;
		var value;
		var textNode;
		var retval;
		var lastChild;
		var clonedTitle;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		acronymList = doc.getElementsByTagName("acronym");
		testNode = acronymList.item(3);
		attributes = testNode.attributes;
		titleAttr = attributes.getNamedItem("title");
		textNode = doc.createTextNode("terday");
		retval = titleAttr.appendChild(textNode);
		clonedTitle = titleAttr.cloneNode(false);
		textNode.nodeValue = "text_node_not_cloned";
		value = clonedTitle.value;
		if ("Yesterday" !== value) {
			return "hc_attrclonenode1: #attrValue 'value' equals '" + value + "' not '" + "Yesterday" + "'";
		}
		value = clonedTitle.nodeValue;
		if ("Yesterday" !== value) {
			return "hc_attrclonenode1: #attrNodeValue 'value' equals '" + value + "' not '" + "Yesterday" + "'";
		}
		lastChild = clonedTitle.lastChild;
		value = lastChild.nodeValue;
		if ("terday" !== value) {
			return "hc_attrclonenode1: #lastChildValue 'value' equals '" + value + "' not '" + "terday" + "'";
		}
		return "hc_attrclonenode1: OK";
	} catch (e) {
		return "hc_attrclonenode1: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var acronymList;
		var testNode;
		var attributes;
		var titleAttr;
		var value;
		var textNode;
		var retval;
		var lastChild;
		var clonedTitle;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		acronymList = doc.getElementsByTagName("acronym");
		testNode = acronymList.item(3);
		attributes = testNode.attributes;
		titleAttr = attributes.getNamedItem("title");
		textNode = doc.createTextNode("terday");
		retval = titleAttr.appendChild(textNode);
		clonedTitle = titleAttr.cloneNode(false);
		textNode.nodeValue = "text_node_not_cloned";
		value = clonedTitle.value;
		if ("Yesterday" !== value) {
			return "hc_attrclonenode1: #attrValue 'value' equals '" + value + "' not '" + "Yesterday" + "'";
		}
		value = clonedTitle.nodeValue;
		if ("Yesterday" !== value) {
			return "hc_attrclonenode1: #attrNodeValue 'value' equals '" + value + "' not '" + "Yesterday" + "'";
		}
		lastChild = clonedTitle.lastChild;
		value = lastChild.nodeValue;
		if ("terday" !== value) {
			return "hc_attrclonenode1: #lastChildValue 'value' equals '" + value + "' not '" + "terday" + "'";
		}
		return "hc_attrclonenode1: OK";
	} catch (e) {
		return "hc_attrclonenode1: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_attrfirstchild.xml" fleur="hc_attrfirstchild" native="hc_attrfirstchild"><Fleur>(function(){
	var success;
	try {
		var doc;
		var acronymList;
		var testNode;
		var attributes;
		var titleAttr;
		var value;
		var textNode;
		var otherChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		acronymList = doc.getElementsByTagName("acronym");
		testNode = acronymList.item(3);
		attributes = testNode.attributes;
		titleAttr = attributes.getNamedItem("title");
		textNode = titleAttr.firstChild;
		if (textNode == null) {
			return "hc_attrfirstchild: #textNodeNotNull 'textNode' is null";
		}
		value = textNode.nodeValue;
		if ("Yes" !== value) {
			return "hc_attrfirstchild: #child1IsYes 'value' equals '" + value + "' not '" + "Yes" + "'";
		}
		otherChild = textNode.nextSibling;
		if (otherChild != null) {
			return "hc_attrfirstchild: #nextSiblingIsNull 'otherChild' equals '" + otherChild + "' not null";
		}
		otherChild = textNode.previousSibling;
		if (otherChild != null) {
			return "hc_attrfirstchild: #previousSiblingIsNull 'otherChild' equals '" + otherChild + "' not null";
		}
		return "hc_attrfirstchild: OK";
	} catch (e) {
		return "hc_attrfirstchild: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var acronymList;
		var testNode;
		var attributes;
		var titleAttr;
		var value;
		var textNode;
		var otherChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		acronymList = doc.getElementsByTagName("acronym");
		testNode = acronymList.item(3);
		attributes = testNode.attributes;
		titleAttr = attributes.getNamedItem("title");
		textNode = titleAttr.firstChild;
		if (textNode == null) {
			return "hc_attrfirstchild: #textNodeNotNull 'textNode' is null";
		}
		value = textNode.nodeValue;
		if ("Yes" !== value) {
			return "hc_attrfirstchild: #child1IsYes 'value' equals '" + value + "' not '" + "Yes" + "'";
		}
		otherChild = textNode.nextSibling;
		if (otherChild != null) {
			return "hc_attrfirstchild: #nextSiblingIsNull 'otherChild' equals '" + otherChild + "' not null";
		}
		otherChild = textNode.previousSibling;
		if (otherChild != null) {
			return "hc_attrfirstchild: #previousSiblingIsNull 'otherChild' equals '" + otherChild + "' not null";
		}
		return "hc_attrfirstchild: OK";
	} catch (e) {
		return "hc_attrfirstchild: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_attrgetvalue1.xml" fleur="hc_attrgetvalue1" native="hc_attrgetvalue1"><Fleur>(function(){
	var success;
	try {
		var doc;
		var acronymList;
		var testNode;
		var attributes;
		var titleAttr;
		var value;
		var textNode;
		var retval;
		var lastChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		acronymList = doc.getElementsByTagName("acronym");
		testNode = acronymList.item(3);
		attributes = testNode.attributes;
		titleAttr = attributes.getNamedItem("class");
		value = titleAttr.value;
		if ("Yα" !== value) {
			return "hc_attrgetvalue1: #attrValue1 'value' equals '" + value + "' not '" + "Yα" + "'";
		}
		return "hc_attrgetvalue1: OK";
	} catch (e) {
		return "hc_attrgetvalue1: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var acronymList;
		var testNode;
		var attributes;
		var titleAttr;
		var value;
		var textNode;
		var retval;
		var lastChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		acronymList = doc.getElementsByTagName("acronym");
		testNode = acronymList.item(3);
		attributes = testNode.attributes;
		titleAttr = attributes.getNamedItem("class");
		value = titleAttr.value;
		if ("Yα" !== value) {
			return "hc_attrgetvalue1: #attrValue1 'value' equals '" + value + "' not '" + "Yα" + "'";
		}
		return "hc_attrgetvalue1: OK";
	} catch (e) {
		return "hc_attrgetvalue1: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_attrgetvalue2.xml" fleur="hc_attrgetvalue2" native="hc_attrgetvalue2"><Fleur>(function(){
	var success;
	try {
				var doc;
		var acronymList;
		var testNode;
		var attributes;
		var titleAttr;
		var value;
		var textNode;
		var retval;
		var firstChild;
		var alphaRef;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		acronymList = doc.getElementsByTagName("acronym");
		testNode = acronymList.item(3);
		attributes = testNode.attributes;
		titleAttr = attributes.getNamedItem("class");
		if (("text/xml" === "text/html")) {
			success = false;
			try {
				alphaRef = doc.createEntityReference("alpha");
			} catch (ex) {
				if (typeof ex.code != 'undefined') {
					success = ex.code === 9;
				}
			}
			if (!success) {
				return "hc_attrgetvalue2: Exception NOT_SUPPORTED_ERR expected";
			}
		} else {
			alphaRef = doc.createEntityReference("alpha");
			firstChild = titleAttr.firstChild;
			retval = titleAttr.insertBefore(alphaRef, firstChild);
			value = titleAttr.value;
			if ("αYα" !== value) {
				return "hc_attrgetvalue2: #attrValue1 'value' equals '" + value + "' not '" + "αYα" + "'";
			}
		}
		return "hc_attrgetvalue2: OK";
	} catch (e) {
		return "hc_attrgetvalue2: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
				var doc;
		var acronymList;
		var testNode;
		var attributes;
		var titleAttr;
		var value;
		var textNode;
		var retval;
		var firstChild;
		var alphaRef;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		acronymList = doc.getElementsByTagName("acronym");
		testNode = acronymList.item(3);
		attributes = testNode.attributes;
		titleAttr = attributes.getNamedItem("class");
		if (("text/xml" === "text/html")) {
			success = false;
			try {
				alphaRef = doc.createEntityReference("alpha");
			} catch (ex) {
				if (typeof ex.code != 'undefined') {
					success = ex.code === 9;
				}
			}
			if (!success) {
				return "hc_attrgetvalue2: Exception NOT_SUPPORTED_ERR expected";
			}
		} else {
			alphaRef = doc.createEntityReference("alpha");
			firstChild = titleAttr.firstChild;
			retval = titleAttr.insertBefore(alphaRef, firstChild);
			value = titleAttr.value;
			if ("αYα" !== value) {
				return "hc_attrgetvalue2: #attrValue1 'value' equals '" + value + "' not '" + "αYα" + "'";
			}
		}
		return "hc_attrgetvalue2: OK";
	} catch (e) {
		return "hc_attrgetvalue2: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_attrhaschildnodes.xml" fleur="hc_attrhaschildnodes" native="hc_attrhaschildnodes"><Fleur>(function(){
	var success;
	try {
		var doc;
		var acronymList;
		var testNode;
		var attributes;
		var titleAttr;
		var hasChildNodes;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		acronymList = doc.getElementsByTagName("acronym");
		testNode = acronymList.item(3);
		attributes = testNode.attributes;
		titleAttr = attributes.getNamedItem("title");
		hasChildNodes = titleAttr.hasChildNodes();
		if (hasChildNodes !== true) {
			return "hasChildrenIsTrue: 'hasChildNodes' equals '" + hasChildNodes + "' not true";
		}
		return "hc_attrhaschildnodes: OK";
	} catch (e) {
		return "hc_attrhaschildnodes: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var acronymList;
		var testNode;
		var attributes;
		var titleAttr;
		var hasChildNodes;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		acronymList = doc.getElementsByTagName("acronym");
		testNode = acronymList.item(3);
		attributes = testNode.attributes;
		titleAttr = attributes.getNamedItem("title");
		hasChildNodes = titleAttr.hasChildNodes();
		if (hasChildNodes !== true) {
			return "hasChildrenIsTrue: 'hasChildNodes' equals '" + hasChildNodes + "' not true";
		}
		return "hc_attrhaschildnodes: OK";
	} catch (e) {
		return "hc_attrhaschildnodes: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_attrinsertbefore1.xml" fleur="hc_attrinsertbefore1" native="hc_attrinsertbefore1"><Fleur>(function(){
	var success;
	try {
		var doc;
		var acronymList;
		var testNode;
		var attributes;
		var titleAttr;
		var value;
		var textNode;
		var retval;
		var firstChild;
		var lastChild;
		var refChild = null;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		acronymList = doc.getElementsByTagName("acronym");
		testNode = acronymList.item(3);
		attributes = testNode.attributes;
		titleAttr = attributes.getNamedItem("title");
		textNode = doc.createTextNode("terday");
		retval = titleAttr.insertBefore(textNode, refChild);
		value = titleAttr.value;
		if ("Yesterday" !== value) {
			return "hc_attrinsertbefore1: #attrValue 'value' equals '" + value + "' not '" + "Yesterday" + "'";
		}
		value = titleAttr.nodeValue;
		if ("Yesterday" !== value) {
			return "hc_attrinsertbefore1: #attrNodeValue 'value' equals '" + value + "' not '" + "Yesterday" + "'";
		}
		value = retval.nodeValue;
		if ("terday" !== value) {
			return "hc_attrinsertbefore1: #retvalValue 'value' equals '" + value + "' not '" + "terday" + "'";
		}
		firstChild = titleAttr.firstChild;
		value = firstChild.nodeValue;
		if ("Yes" !== value) {
			return "hc_attrinsertbefore1: #firstChildValue 'value' equals '" + value + "' not '" + "Yes" + "'";
		}
		lastChild = titleAttr.lastChild;
		value = lastChild.nodeValue;
		if ("terday" !== value) {
			return "hc_attrinsertbefore1: #lastChildValue 'value' equals '" + value + "' not '" + "terday" + "'";
		}
		return "hc_attrinsertbefore1: OK";
	} catch (e) {
		return "hc_attrinsertbefore1: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var acronymList;
		var testNode;
		var attributes;
		var titleAttr;
		var value;
		var textNode;
		var retval;
		var firstChild;
		var lastChild;
		var refChild = null;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		acronymList = doc.getElementsByTagName("acronym");
		testNode = acronymList.item(3);
		attributes = testNode.attributes;
		titleAttr = attributes.getNamedItem("title");
		textNode = doc.createTextNode("terday");
		retval = titleAttr.insertBefore(textNode, refChild);
		value = titleAttr.value;
		if ("Yesterday" !== value) {
			return "hc_attrinsertbefore1: #attrValue 'value' equals '" + value + "' not '" + "Yesterday" + "'";
		}
		value = titleAttr.nodeValue;
		if ("Yesterday" !== value) {
			return "hc_attrinsertbefore1: #attrNodeValue 'value' equals '" + value + "' not '" + "Yesterday" + "'";
		}
		value = retval.nodeValue;
		if ("terday" !== value) {
			return "hc_attrinsertbefore1: #retvalValue 'value' equals '" + value + "' not '" + "terday" + "'";
		}
		firstChild = titleAttr.firstChild;
		value = firstChild.nodeValue;
		if ("Yes" !== value) {
			return "hc_attrinsertbefore1: #firstChildValue 'value' equals '" + value + "' not '" + "Yes" + "'";
		}
		lastChild = titleAttr.lastChild;
		value = lastChild.nodeValue;
		if ("terday" !== value) {
			return "hc_attrinsertbefore1: #lastChildValue 'value' equals '" + value + "' not '" + "terday" + "'";
		}
		return "hc_attrinsertbefore1: OK";
	} catch (e) {
		return "hc_attrinsertbefore1: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_attrinsertbefore2.xml" fleur="hc_attrinsertbefore2" native="hc_attrinsertbefore2"><Fleur>(function(){
	var success;
	try {
		var doc;
		var acronymList;
		var testNode;
		var attributes;
		var titleAttr;
		var value;
		var textNode;
		var retval;
		var lastChild;
		var firstChild;
		var refChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		acronymList = doc.getElementsByTagName("acronym");
		testNode = acronymList.item(3);
		attributes = testNode.attributes;
		titleAttr = attributes.getNamedItem("title");
		textNode = doc.createTextNode("terday");
		refChild = titleAttr.firstChild;
		retval = titleAttr.insertBefore(textNode, refChild);
		value = titleAttr.value;
		if ("terdayYes" !== value) {
			return "hc_attrinsertbefore2: #attrValue 'value' equals '" + value + "' not '" + "terdayYes" + "'";
		}
		value = titleAttr.nodeValue;
		if ("terdayYes" !== value) {
			return "hc_attrinsertbefore2: #attrNodeValue 'value' equals '" + value + "' not '" + "terdayYes" + "'";
		}
		value = retval.nodeValue;
		if ("terday" !== value) {
			return "hc_attrinsertbefore2: #retvalValue 'value' equals '" + value + "' not '" + "terday" + "'";
		}
		firstChild = titleAttr.firstChild;
		value = firstChild.nodeValue;
		if ("terday" !== value) {
			return "hc_attrinsertbefore2: #firstChildValue 'value' equals '" + value + "' not '" + "terday" + "'";
		}
		lastChild = titleAttr.lastChild;
		value = lastChild.nodeValue;
		if ("Yes" !== value) {
			return "hc_attrinsertbefore2: #lastChildValue 'value' equals '" + value + "' not '" + "Yes" + "'";
		}
		return "hc_attrinsertbefore2: OK";
	} catch (e) {
		return "hc_attrinsertbefore2: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var acronymList;
		var testNode;
		var attributes;
		var titleAttr;
		var value;
		var textNode;
		var retval;
		var lastChild;
		var firstChild;
		var refChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		acronymList = doc.getElementsByTagName("acronym");
		testNode = acronymList.item(3);
		attributes = testNode.attributes;
		titleAttr = attributes.getNamedItem("title");
		textNode = doc.createTextNode("terday");
		refChild = titleAttr.firstChild;
		retval = titleAttr.insertBefore(textNode, refChild);
		value = titleAttr.value;
		if ("terdayYes" !== value) {
			return "hc_attrinsertbefore2: #attrValue 'value' equals '" + value + "' not '" + "terdayYes" + "'";
		}
		value = titleAttr.nodeValue;
		if ("terdayYes" !== value) {
			return "hc_attrinsertbefore2: #attrNodeValue 'value' equals '" + value + "' not '" + "terdayYes" + "'";
		}
		value = retval.nodeValue;
		if ("terday" !== value) {
			return "hc_attrinsertbefore2: #retvalValue 'value' equals '" + value + "' not '" + "terday" + "'";
		}
		firstChild = titleAttr.firstChild;
		value = firstChild.nodeValue;
		if ("terday" !== value) {
			return "hc_attrinsertbefore2: #firstChildValue 'value' equals '" + value + "' not '" + "terday" + "'";
		}
		lastChild = titleAttr.lastChild;
		value = lastChild.nodeValue;
		if ("Yes" !== value) {
			return "hc_attrinsertbefore2: #lastChildValue 'value' equals '" + value + "' not '" + "Yes" + "'";
		}
		return "hc_attrinsertbefore2: OK";
	} catch (e) {
		return "hc_attrinsertbefore2: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_attrinsertbefore3.xml" fleur="hc_attrinsertbefore3" native="hc_attrinsertbefore3"><Fleur>(function(){
	var success;
	try {
		var doc;
		var acronymList;
		var testNode;
		var attributes;
		var titleAttr;
		var value;
		var terNode;
		var dayNode;
		var docFrag;
		var retval;
		var firstChild;
		var lastChild;
		var refChild = null;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		acronymList = doc.getElementsByTagName("acronym");
		testNode = acronymList.item(3);
		attributes = testNode.attributes;
		titleAttr = attributes.getNamedItem("title");
		terNode = doc.createTextNode("ter");
		dayNode = doc.createTextNode("day");
		docFrag = doc.createDocumentFragment();
		retval = docFrag.appendChild(terNode);
		retval = docFrag.appendChild(dayNode);
		retval = titleAttr.insertBefore(docFrag, refChild);
		value = titleAttr.value;
		if ("Yesterday" !== value) {
			return "hc_attrinsertbefore3: #attrValue 'value' equals '" + value + "' not '" + "Yesterday" + "'";
		}
		value = titleAttr.nodeValue;
		if ("Yesterday" !== value) {
			return "hc_attrinsertbefore3: #attrNodeValue 'value' equals '" + value + "' not '" + "Yesterday" + "'";
		}
		value = retval.nodeValue;
		if (value != null) {
			return "hc_attrinsertbefore3: #retvalValue 'value' equals '" + value + "' not null";
		}
		firstChild = titleAttr.firstChild;
		value = firstChild.nodeValue;
		if ("Yes" !== value) {
			return "hc_attrinsertbefore3: #firstChildValue 'value' equals '" + value + "' not '" + "Yes" + "'";
		}
		lastChild = titleAttr.lastChild;
		value = lastChild.nodeValue;
		if ("day" !== value) {
			return "hc_attrinsertbefore3: #lastChildValue 'value' equals '" + value + "' not '" + "day" + "'";
		}
		return "hc_attrinsertbefore3: OK";
	} catch (e) {
		return "hc_attrinsertbefore3: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var acronymList;
		var testNode;
		var attributes;
		var titleAttr;
		var value;
		var terNode;
		var dayNode;
		var docFrag;
		var retval;
		var firstChild;
		var lastChild;
		var refChild = null;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		acronymList = doc.getElementsByTagName("acronym");
		testNode = acronymList.item(3);
		attributes = testNode.attributes;
		titleAttr = attributes.getNamedItem("title");
		terNode = doc.createTextNode("ter");
		dayNode = doc.createTextNode("day");
		docFrag = doc.createDocumentFragment();
		retval = docFrag.appendChild(terNode);
		retval = docFrag.appendChild(dayNode);
		retval = titleAttr.insertBefore(docFrag, refChild);
		value = titleAttr.value;
		if ("Yesterday" !== value) {
			return "hc_attrinsertbefore3: #attrValue 'value' equals '" + value + "' not '" + "Yesterday" + "'";
		}
		value = titleAttr.nodeValue;
		if ("Yesterday" !== value) {
			return "hc_attrinsertbefore3: #attrNodeValue 'value' equals '" + value + "' not '" + "Yesterday" + "'";
		}
		value = retval.nodeValue;
		if (value != null) {
			return "hc_attrinsertbefore3: #retvalValue 'value' equals '" + value + "' not null";
		}
		firstChild = titleAttr.firstChild;
		value = firstChild.nodeValue;
		if ("Yes" !== value) {
			return "hc_attrinsertbefore3: #firstChildValue 'value' equals '" + value + "' not '" + "Yes" + "'";
		}
		lastChild = titleAttr.lastChild;
		value = lastChild.nodeValue;
		if ("day" !== value) {
			return "hc_attrinsertbefore3: #lastChildValue 'value' equals '" + value + "' not '" + "day" + "'";
		}
		return "hc_attrinsertbefore3: OK";
	} catch (e) {
		return "hc_attrinsertbefore3: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_attrinsertbefore4.xml" fleur="hc_attrinsertbefore4" native="hc_attrinsertbefore4"><Fleur>(function(){
	var success;
	try {
		var doc;
		var acronymList;
		var testNode;
		var attributes;
		var titleAttr;
		var value;
		var terNode;
		var dayNode;
		var docFrag;
		var retval;
		var firstChild;
		var lastChild;
		var refChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		acronymList = doc.getElementsByTagName("acronym");
		testNode = acronymList.item(3);
		attributes = testNode.attributes;
		titleAttr = attributes.getNamedItem("title");
		terNode = doc.createTextNode("ter");
		dayNode = doc.createTextNode("day");
		docFrag = doc.createDocumentFragment();
		retval = docFrag.appendChild(terNode);
		retval = docFrag.appendChild(dayNode);
		refChild = titleAttr.firstChild;
		retval = titleAttr.insertBefore(docFrag, refChild);
		value = titleAttr.value;
		if ("terdayYes" !== value) {
			return "hc_attrinsertbefore4: #attrValue 'value' equals '" + value + "' not '" + "terdayYes" + "'";
		}
		value = titleAttr.nodeValue;
		if ("terdayYes" !== value) {
			return "hc_attrinsertbefore4: #attrNodeValue 'value' equals '" + value + "' not '" + "terdayYes" + "'";
		}
		value = retval.nodeValue;
		if (value != null) {
			return "hc_attrinsertbefore4: #retvalValue 'value' equals '" + value + "' not null";
		}
		firstChild = titleAttr.firstChild;
		value = firstChild.nodeValue;
		if ("ter" !== value) {
			return "hc_attrinsertbefore4: #firstChildValue 'value' equals '" + value + "' not '" + "ter" + "'";
		}
		lastChild = titleAttr.lastChild;
		value = lastChild.nodeValue;
		if ("Yes" !== value) {
			return "hc_attrinsertbefore4: #lastChildValue 'value' equals '" + value + "' not '" + "Yes" + "'";
		}
		return "hc_attrinsertbefore4: OK";
	} catch (e) {
		return "hc_attrinsertbefore4: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var acronymList;
		var testNode;
		var attributes;
		var titleAttr;
		var value;
		var terNode;
		var dayNode;
		var docFrag;
		var retval;
		var firstChild;
		var lastChild;
		var refChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		acronymList = doc.getElementsByTagName("acronym");
		testNode = acronymList.item(3);
		attributes = testNode.attributes;
		titleAttr = attributes.getNamedItem("title");
		terNode = doc.createTextNode("ter");
		dayNode = doc.createTextNode("day");
		docFrag = doc.createDocumentFragment();
		retval = docFrag.appendChild(terNode);
		retval = docFrag.appendChild(dayNode);
		refChild = titleAttr.firstChild;
		retval = titleAttr.insertBefore(docFrag, refChild);
		value = titleAttr.value;
		if ("terdayYes" !== value) {
			return "hc_attrinsertbefore4: #attrValue 'value' equals '" + value + "' not '" + "terdayYes" + "'";
		}
		value = titleAttr.nodeValue;
		if ("terdayYes" !== value) {
			return "hc_attrinsertbefore4: #attrNodeValue 'value' equals '" + value + "' not '" + "terdayYes" + "'";
		}
		value = retval.nodeValue;
		if (value != null) {
			return "hc_attrinsertbefore4: #retvalValue 'value' equals '" + value + "' not null";
		}
		firstChild = titleAttr.firstChild;
		value = firstChild.nodeValue;
		if ("ter" !== value) {
			return "hc_attrinsertbefore4: #firstChildValue 'value' equals '" + value + "' not '" + "ter" + "'";
		}
		lastChild = titleAttr.lastChild;
		value = lastChild.nodeValue;
		if ("Yes" !== value) {
			return "hc_attrinsertbefore4: #lastChildValue 'value' equals '" + value + "' not '" + "Yes" + "'";
		}
		return "hc_attrinsertbefore4: OK";
	} catch (e) {
		return "hc_attrinsertbefore4: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_attrinsertbefore5.xml" fleur="hc_attrinsertbefore5" native="hc_attrinsertbefore5"><Fleur>(function(){
	var success;
	try {
				var doc;
		var acronymList;
		var testNode;
		var attributes;
		var titleAttr;
		var value;
		var textNode;
		var retval;
		var refChild = null;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		acronymList = doc.getElementsByTagName("acronym");
		testNode = acronymList.item(3);
		attributes = testNode.attributes;
		titleAttr = attributes.getNamedItem("title");
		if (("text/xml" === "text/html")) {
			success = false;
			try {
				textNode = doc.createCDATASection("terday");
			} catch (ex) {
				if (typeof ex.code != 'undefined') {
					success = ex.code === 9;
				}
			}
			if (!success) {
				return "hc_attrinsertbefore5: Exception NOT_SUPPORTED_ERR expected";
			}
		} else {
			textNode = doc.createCDATASection("terday");
			success = false;
			try {
				retval = titleAttr.insertBefore(textNode, refChild);
			} catch (ex) {
				if (typeof ex.code != 'undefined') {
					success = ex.code === 3;
				}
			}
			if (!success) {
				return "hc_attrinsertbefore5: Exception HIERARCHY_REQUEST_ERR expected";
			}
		}
		return "hc_attrinsertbefore5: OK";
	} catch (e) {
		return "hc_attrinsertbefore5: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
				var doc;
		var acronymList;
		var testNode;
		var attributes;
		var titleAttr;
		var value;
		var textNode;
		var retval;
		var refChild = null;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		acronymList = doc.getElementsByTagName("acronym");
		testNode = acronymList.item(3);
		attributes = testNode.attributes;
		titleAttr = attributes.getNamedItem("title");
		if (("text/xml" === "text/html")) {
			success = false;
			try {
				textNode = doc.createCDATASection("terday");
			} catch (ex) {
				if (typeof ex.code != 'undefined') {
					success = ex.code === 9;
				}
			}
			if (!success) {
				return "hc_attrinsertbefore5: Exception NOT_SUPPORTED_ERR expected";
			}
		} else {
			textNode = doc.createCDATASection("terday");
			success = false;
			try {
				retval = titleAttr.insertBefore(textNode, refChild);
			} catch (ex) {
				if (typeof ex.code != 'undefined') {
					success = ex.code === 3;
				}
			}
			if (!success) {
				return "hc_attrinsertbefore5: Exception HIERARCHY_REQUEST_ERR expected";
			}
		}
		return "hc_attrinsertbefore5: OK";
	} catch (e) {
		return "hc_attrinsertbefore5: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_attrinsertbefore6.xml" fleur="hc_attrinsertbefore6" native="hc_attrinsertbefore6"><Fleur>(function(){
	var success;
	try {
		var doc;
		var acronymList;
		var testNode;
		var attributes;
		var titleAttr;
		var value;
		var textNode;
		var retval;
		var refChild = null;
		var otherDoc;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		var otherDocReq = new XMLHttpRequest();
		otherDocReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		otherDocReq.send();
		otherDoc = new Fleur.DOMParser().parseFromString(otherDocReq.responseText, "text/xml");
		acronymList = doc.getElementsByTagName("acronym");
		testNode = acronymList.item(3);
		attributes = testNode.attributes;
		titleAttr = attributes.getNamedItem("title");
		textNode = otherDoc.createTextNode("terday");
		success = false;
		try {
			retval = titleAttr.insertBefore(textNode, refChild);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 4;
			}
		}
		if (!success) {
			return "hc_attrinsertbefore6: Exception WRONG_DOCUMENT_ERR expected";
		}
		return "hc_attrinsertbefore6: OK";
	} catch (e) {
		return "hc_attrinsertbefore6: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var acronymList;
		var testNode;
		var attributes;
		var titleAttr;
		var value;
		var textNode;
		var retval;
		var refChild = null;
		var otherDoc;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		var otherDocReq = new XMLHttpRequest();
		otherDocReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		otherDocReq.send();
		otherDoc = new DOMParser().parseFromString(otherDocReq.responseText, "text/xml");
		acronymList = doc.getElementsByTagName("acronym");
		testNode = acronymList.item(3);
		attributes = testNode.attributes;
		titleAttr = attributes.getNamedItem("title");
		textNode = otherDoc.createTextNode("terday");
		success = false;
		try {
			retval = titleAttr.insertBefore(textNode, refChild);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 4;
			}
		}
		if (!success) {
			return "hc_attrinsertbefore6: Exception WRONG_DOCUMENT_ERR expected";
		}
		return "hc_attrinsertbefore6: OK";
	} catch (e) {
		return "hc_attrinsertbefore6: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_attrinsertbefore7.xml" fleur="hc_attrinsertbefore7" native="hc_attrinsertbefore7"><Fleur>(function(){
	var success;
	try {
				var doc;
		var acronymList;
		var testNode;
		var attributes;
		var titleAttr;
		var value;
		var terNode;
		var dayNode;
		var docFrag;
		var retval;
		var firstChild;
		var lastChild;
		var refChild = null;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		acronymList = doc.getElementsByTagName("acronym");
		testNode = acronymList.item(3);
		attributes = testNode.attributes;
		titleAttr = attributes.getNamedItem("title");
		terNode = doc.createTextNode("ter");
		if (("text/xml" === "text/html")) {
			success = false;
			try {
				dayNode = doc.createCDATASection("day");
			} catch (ex) {
				if (typeof ex.code != 'undefined') {
					success = ex.code === 9;
				}
			}
			if (!success) {
				return "hc_attrinsertbefore7: Exception NOT_SUPPORTED_ERR expected";
			}
		} else {
			dayNode = doc.createCDATASection("day");
			docFrag = doc.createDocumentFragment();
			retval = docFrag.appendChild(terNode);
			retval = docFrag.appendChild(dayNode);
			success = false;
			try {
				retval = titleAttr.insertBefore(docFrag, refChild);
			} catch (ex) {
				if (typeof ex.code != 'undefined') {
					success = ex.code === 3;
				}
			}
			if (!success) {
				return "hc_attrinsertbefore7: Exception HIERARCHY_REQUEST_ERR expected";
			}
		}
		return "hc_attrinsertbefore7: OK";
	} catch (e) {
		return "hc_attrinsertbefore7: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
				var doc;
		var acronymList;
		var testNode;
		var attributes;
		var titleAttr;
		var value;
		var terNode;
		var dayNode;
		var docFrag;
		var retval;
		var firstChild;
		var lastChild;
		var refChild = null;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		acronymList = doc.getElementsByTagName("acronym");
		testNode = acronymList.item(3);
		attributes = testNode.attributes;
		titleAttr = attributes.getNamedItem("title");
		terNode = doc.createTextNode("ter");
		if (("text/xml" === "text/html")) {
			success = false;
			try {
				dayNode = doc.createCDATASection("day");
			} catch (ex) {
				if (typeof ex.code != 'undefined') {
					success = ex.code === 9;
				}
			}
			if (!success) {
				return "hc_attrinsertbefore7: Exception NOT_SUPPORTED_ERR expected";
			}
		} else {
			dayNode = doc.createCDATASection("day");
			docFrag = doc.createDocumentFragment();
			retval = docFrag.appendChild(terNode);
			retval = docFrag.appendChild(dayNode);
			success = false;
			try {
				retval = titleAttr.insertBefore(docFrag, refChild);
			} catch (ex) {
				if (typeof ex.code != 'undefined') {
					success = ex.code === 3;
				}
			}
			if (!success) {
				return "hc_attrinsertbefore7: Exception HIERARCHY_REQUEST_ERR expected";
			}
		}
		return "hc_attrinsertbefore7: OK";
	} catch (e) {
		return "hc_attrinsertbefore7: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_attrlastchild.xml" fleur="hc_attrlastchild" native="hc_attrlastchild"><Fleur>(function(){
	var success;
	try {
		var doc;
		var acronymList;
		var testNode;
		var attributes;
		var titleAttr;
		var value;
		var textNode;
		var otherChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		acronymList = doc.getElementsByTagName("acronym");
		testNode = acronymList.item(3);
		attributes = testNode.attributes;
		titleAttr = attributes.getNamedItem("title");
		textNode = titleAttr.firstChild;
		if (textNode == null) {
			return "hc_attrlastchild: #textNodeNotNull 'textNode' is null";
		}
		value = textNode.nodeValue;
		if ("Yes" !== value) {
			return "hc_attrlastchild: #child1IsYes 'value' equals '" + value + "' not '" + "Yes" + "'";
		}
		otherChild = textNode.nextSibling;
		if (otherChild != null) {
			return "hc_attrlastchild: #nextSiblingIsNull 'otherChild' equals '" + otherChild + "' not null";
		}
		otherChild = textNode.previousSibling;
		if (otherChild != null) {
			return "hc_attrlastchild: #previousSiblingIsNull 'otherChild' equals '" + otherChild + "' not null";
		}
		return "hc_attrlastchild: OK";
	} catch (e) {
		return "hc_attrlastchild: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var acronymList;
		var testNode;
		var attributes;
		var titleAttr;
		var value;
		var textNode;
		var otherChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		acronymList = doc.getElementsByTagName("acronym");
		testNode = acronymList.item(3);
		attributes = testNode.attributes;
		titleAttr = attributes.getNamedItem("title");
		textNode = titleAttr.firstChild;
		if (textNode == null) {
			return "hc_attrlastchild: #textNodeNotNull 'textNode' is null";
		}
		value = textNode.nodeValue;
		if ("Yes" !== value) {
			return "hc_attrlastchild: #child1IsYes 'value' equals '" + value + "' not '" + "Yes" + "'";
		}
		otherChild = textNode.nextSibling;
		if (otherChild != null) {
			return "hc_attrlastchild: #nextSiblingIsNull 'otherChild' equals '" + otherChild + "' not null";
		}
		otherChild = textNode.previousSibling;
		if (otherChild != null) {
			return "hc_attrlastchild: #previousSiblingIsNull 'otherChild' equals '" + otherChild + "' not null";
		}
		return "hc_attrlastchild: OK";
	} catch (e) {
		return "hc_attrlastchild: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_attrnormalize.xml" fleur="hc_attrnormalize" native="hc_attrnormalize"><Fleur>(function(){
	var success;
	try {
		var doc;
		var acronymList;
		var testNode;
		var attributes;
		var titleAttr;
		var value;
		var textNode;
		var retval;
		var firstChild;
		var secondChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		acronymList = doc.getElementsByTagName("acronym");
		testNode = acronymList.item(3);
		attributes = testNode.attributes;
		titleAttr = attributes.getNamedItem("title");
		textNode = doc.createTextNode("terday");
		retval = titleAttr.appendChild(textNode);
		textNode = doc.createTextNode("");
		retval = titleAttr.appendChild(textNode);
		testNode.normalize();
		value = titleAttr.nodeValue;
		if ("Yesterday" !== value) {
			return "hc_attrnormalize: #attrNodeValue 'value' equals '" + value + "' not '" + "Yesterday" + "'";
		}
		firstChild = titleAttr.firstChild;
		value = firstChild.nodeValue;
		if ("Yesterday" !== value) {
			return "hc_attrnormalize: #firstChildValue 'value' equals '" + value + "' not '" + "Yesterday" + "'";
		}
		secondChild = firstChild.nextSibling;
		if (secondChild != null) {
			return "hc_attrnormalize: #secondChildIsNull 'secondChild' equals '" + secondChild + "' not null";
		}
		return "hc_attrnormalize: OK";
	} catch (e) {
		return "hc_attrnormalize: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var acronymList;
		var testNode;
		var attributes;
		var titleAttr;
		var value;
		var textNode;
		var retval;
		var firstChild;
		var secondChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		acronymList = doc.getElementsByTagName("acronym");
		testNode = acronymList.item(3);
		attributes = testNode.attributes;
		titleAttr = attributes.getNamedItem("title");
		textNode = doc.createTextNode("terday");
		retval = titleAttr.appendChild(textNode);
		textNode = doc.createTextNode("");
		retval = titleAttr.appendChild(textNode);
		testNode.normalize();
		value = titleAttr.nodeValue;
		if ("Yesterday" !== value) {
			return "hc_attrnormalize: #attrNodeValue 'value' equals '" + value + "' not '" + "Yesterday" + "'";
		}
		firstChild = titleAttr.firstChild;
		value = firstChild.nodeValue;
		if ("Yesterday" !== value) {
			return "hc_attrnormalize: #firstChildValue 'value' equals '" + value + "' not '" + "Yesterday" + "'";
		}
		secondChild = firstChild.nextSibling;
		if (secondChild != null) {
			return "hc_attrnormalize: #secondChildIsNull 'secondChild' equals '" + secondChild + "' not null";
		}
		return "hc_attrnormalize: OK";
	} catch (e) {
		return "hc_attrnormalize: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_attrremovechild1.xml" fleur="hc_attrremovechild1" native="hc_attrremovechild1"><Fleur>(function(){
	var success;
	try {
		var doc;
		var acronymList;
		var testNode;
		var attributes;
		var titleAttr;
		var value;
		var textNode;
		var retval;
		var firstChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		acronymList = doc.getElementsByTagName("acronym");
		testNode = acronymList.item(3);
		attributes = testNode.attributes;
		titleAttr = attributes.getNamedItem("title");
		textNode = titleAttr.firstChild;
		if (textNode == null) {
			return "hc_attrremovechild1: #attrChildNotNull 'textNode' is null";
		}
		retval = titleAttr.removeChild(textNode);
		value = titleAttr.value;
		if ("" !== value) {
			return "hc_attrremovechild1: #attrValue 'value' equals '" + value + "' not '" + "" + "'";
		}
		value = titleAttr.nodeValue;
		if ("" !== value) {
			return "hc_attrremovechild1: #attrNodeValue 'value' equals '" + value + "' not '" + "" + "'";
		}
		value = retval.nodeValue;
		if ("Yes" !== value) {
			return "hc_attrremovechild1: #retvalValue 'value' equals '" + value + "' not '" + "Yes" + "'";
		}
		firstChild = titleAttr.firstChild;
		if (firstChild != null) {
			return "hc_attrremovechild1: #firstChildNull 'firstChild' equals '" + firstChild + "' not null";
		}
		return "hc_attrremovechild1: OK";
	} catch (e) {
		return "hc_attrremovechild1: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var acronymList;
		var testNode;
		var attributes;
		var titleAttr;
		var value;
		var textNode;
		var retval;
		var firstChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		acronymList = doc.getElementsByTagName("acronym");
		testNode = acronymList.item(3);
		attributes = testNode.attributes;
		titleAttr = attributes.getNamedItem("title");
		textNode = titleAttr.firstChild;
		if (textNode == null) {
			return "hc_attrremovechild1: #attrChildNotNull 'textNode' is null";
		}
		retval = titleAttr.removeChild(textNode);
		value = titleAttr.value;
		if ("" !== value) {
			return "hc_attrremovechild1: #attrValue 'value' equals '" + value + "' not '" + "" + "'";
		}
		value = titleAttr.nodeValue;
		if ("" !== value) {
			return "hc_attrremovechild1: #attrNodeValue 'value' equals '" + value + "' not '" + "" + "'";
		}
		value = retval.nodeValue;
		if ("Yes" !== value) {
			return "hc_attrremovechild1: #retvalValue 'value' equals '" + value + "' not '" + "Yes" + "'";
		}
		firstChild = titleAttr.firstChild;
		if (firstChild != null) {
			return "hc_attrremovechild1: #firstChildNull 'firstChild' equals '" + firstChild + "' not null";
		}
		return "hc_attrremovechild1: OK";
	} catch (e) {
		return "hc_attrremovechild1: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_attrremovechild2.xml" fleur="hc_attrremovechild2" native="hc_attrremovechild2"><Fleur>(function(){
	var success;
	try {
		var doc;
		var acronymList;
		var testNode;
		var attributes;
		var titleAttr;
		var value;
		var textNode;
		var retval;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		acronymList = doc.getElementsByTagName("acronym");
		testNode = acronymList.item(3);
		attributes = testNode.attributes;
		titleAttr = attributes.getNamedItem("title");
		textNode = doc.createTextNode("Yesterday");
		success = false;
		try {
			retval = titleAttr.removeChild(textNode);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 8;
			}
		}
		if (!success) {
			return "hc_attrremovechild2: Exception NOT_FOUND_ERR expected";
		}
		return "hc_attrremovechild2: OK";
	} catch (e) {
		return "hc_attrremovechild2: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var acronymList;
		var testNode;
		var attributes;
		var titleAttr;
		var value;
		var textNode;
		var retval;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		acronymList = doc.getElementsByTagName("acronym");
		testNode = acronymList.item(3);
		attributes = testNode.attributes;
		titleAttr = attributes.getNamedItem("title");
		textNode = doc.createTextNode("Yesterday");
		success = false;
		try {
			retval = titleAttr.removeChild(textNode);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 8;
			}
		}
		if (!success) {
			return "hc_attrremovechild2: Exception NOT_FOUND_ERR expected";
		}
		return "hc_attrremovechild2: OK";
	} catch (e) {
		return "hc_attrremovechild2: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_attrreplacechild1.xml" fleur="hc_attrreplacechild1" native="hc_attrreplacechild1"><Fleur>(function(){
	var success;
	try {
		var doc;
		var acronymList;
		var testNode;
		var attributes;
		var titleAttr;
		var value;
		var textNode;
		var retval;
		var firstChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		acronymList = doc.getElementsByTagName("acronym");
		testNode = acronymList.item(3);
		attributes = testNode.attributes;
		titleAttr = attributes.getNamedItem("title");
		textNode = doc.createTextNode("terday");
		firstChild = titleAttr.firstChild;
		if (firstChild == null) {
			return "hc_attrreplacechild1: #attrChildNotNull 'firstChild' is null";
		}
		retval = titleAttr.replaceChild(textNode, firstChild);
		value = titleAttr.value;
		if ("terday" !== value) {
			return "hc_attrreplacechild1: #attrValue 'value' equals '" + value + "' not '" + "terday" + "'";
		}
		value = titleAttr.nodeValue;
		if ("terday" !== value) {
			return "hc_attrreplacechild1: #attrNodeValue 'value' equals '" + value + "' not '" + "terday" + "'";
		}
		value = retval.nodeValue;
		if ("Yes" !== value) {
			return "hc_attrreplacechild1: #retvalValue 'value' equals '" + value + "' not '" + "Yes" + "'";
		}
		firstChild = titleAttr.firstChild;
		value = firstChild.nodeValue;
		if ("terday" !== value) {
			return "hc_attrreplacechild1: #firstChildValue 'value' equals '" + value + "' not '" + "terday" + "'";
		}
		return "hc_attrreplacechild1: OK";
	} catch (e) {
		return "hc_attrreplacechild1: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var acronymList;
		var testNode;
		var attributes;
		var titleAttr;
		var value;
		var textNode;
		var retval;
		var firstChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		acronymList = doc.getElementsByTagName("acronym");
		testNode = acronymList.item(3);
		attributes = testNode.attributes;
		titleAttr = attributes.getNamedItem("title");
		textNode = doc.createTextNode("terday");
		firstChild = titleAttr.firstChild;
		if (firstChild == null) {
			return "hc_attrreplacechild1: #attrChildNotNull 'firstChild' is null";
		}
		retval = titleAttr.replaceChild(textNode, firstChild);
		value = titleAttr.value;
		if ("terday" !== value) {
			return "hc_attrreplacechild1: #attrValue 'value' equals '" + value + "' not '" + "terday" + "'";
		}
		value = titleAttr.nodeValue;
		if ("terday" !== value) {
			return "hc_attrreplacechild1: #attrNodeValue 'value' equals '" + value + "' not '" + "terday" + "'";
		}
		value = retval.nodeValue;
		if ("Yes" !== value) {
			return "hc_attrreplacechild1: #retvalValue 'value' equals '" + value + "' not '" + "Yes" + "'";
		}
		firstChild = titleAttr.firstChild;
		value = firstChild.nodeValue;
		if ("terday" !== value) {
			return "hc_attrreplacechild1: #firstChildValue 'value' equals '" + value + "' not '" + "terday" + "'";
		}
		return "hc_attrreplacechild1: OK";
	} catch (e) {
		return "hc_attrreplacechild1: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_attrreplacechild2.xml" fleur="hc_attrreplacechild2" native="hc_attrreplacechild2"><Fleur>(function(){
	var success;
	try {
		var doc;
		var acronymList;
		var testNode;
		var attributes;
		var titleAttr;
		var value;
		var terNode;
		var dayNode;
		var docFrag;
		var retval;
		var firstChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		acronymList = doc.getElementsByTagName("acronym");
		testNode = acronymList.item(3);
		attributes = testNode.attributes;
		titleAttr = attributes.getNamedItem("title");
		terNode = doc.createTextNode("ter");
		dayNode = doc.createTextNode("day");
		docFrag = doc.createDocumentFragment();
		retval = docFrag.appendChild(terNode);
		retval = docFrag.appendChild(dayNode);
		firstChild = titleAttr.firstChild;
		if (firstChild == null) {
			return "hc_attrreplacechild2: #attrChildNotNull 'firstChild' is null";
		}
		retval = titleAttr.replaceChild(docFrag, firstChild);
		value = titleAttr.value;
		if ("terday" !== value) {
			return "hc_attrreplacechild2: #attrValue 'value' equals '" + value + "' not '" + "terday" + "'";
		}
		value = titleAttr.nodeValue;
		if ("terday" !== value) {
			return "hc_attrreplacechild2: #attrNodeValue 'value' equals '" + value + "' not '" + "terday" + "'";
		}
		value = retval.nodeValue;
		if ("Yes" !== value) {
			return "hc_attrreplacechild2: #retvalValue 'value' equals '" + value + "' not '" + "Yes" + "'";
		}
		firstChild = titleAttr.firstChild;
		value = firstChild.nodeValue;
		if ("ter" !== value) {
			return "hc_attrreplacechild2: #firstChildValue 'value' equals '" + value + "' not '" + "ter" + "'";
		}
		return "hc_attrreplacechild2: OK";
	} catch (e) {
		return "hc_attrreplacechild2: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var acronymList;
		var testNode;
		var attributes;
		var titleAttr;
		var value;
		var terNode;
		var dayNode;
		var docFrag;
		var retval;
		var firstChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		acronymList = doc.getElementsByTagName("acronym");
		testNode = acronymList.item(3);
		attributes = testNode.attributes;
		titleAttr = attributes.getNamedItem("title");
		terNode = doc.createTextNode("ter");
		dayNode = doc.createTextNode("day");
		docFrag = doc.createDocumentFragment();
		retval = docFrag.appendChild(terNode);
		retval = docFrag.appendChild(dayNode);
		firstChild = titleAttr.firstChild;
		if (firstChild == null) {
			return "hc_attrreplacechild2: #attrChildNotNull 'firstChild' is null";
		}
		retval = titleAttr.replaceChild(docFrag, firstChild);
		value = titleAttr.value;
		if ("terday" !== value) {
			return "hc_attrreplacechild2: #attrValue 'value' equals '" + value + "' not '" + "terday" + "'";
		}
		value = titleAttr.nodeValue;
		if ("terday" !== value) {
			return "hc_attrreplacechild2: #attrNodeValue 'value' equals '" + value + "' not '" + "terday" + "'";
		}
		value = retval.nodeValue;
		if ("Yes" !== value) {
			return "hc_attrreplacechild2: #retvalValue 'value' equals '" + value + "' not '" + "Yes" + "'";
		}
		firstChild = titleAttr.firstChild;
		value = firstChild.nodeValue;
		if ("ter" !== value) {
			return "hc_attrreplacechild2: #firstChildValue 'value' equals '" + value + "' not '" + "ter" + "'";
		}
		return "hc_attrreplacechild2: OK";
	} catch (e) {
		return "hc_attrreplacechild2: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_attrsetvalue1.xml" fleur="hc_attrsetvalue1" native="hc_attrsetvalue1"><Fleur>(function(){
	var success;
	try {
		var doc;
		var acronymList;
		var testNode;
		var attributes;
		var titleAttr;
		var value;
		var retval;
		var firstChild;
		var otherChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		acronymList = doc.getElementsByTagName("acronym");
		testNode = acronymList.item(3);
		attributes = testNode.attributes;
		titleAttr = attributes.getNamedItem("title");
		firstChild = titleAttr.firstChild;
		if (firstChild == null) {
			return "hc_attrsetvalue1: #attrChildNotNull 'firstChild' is null";
		}
		titleAttr.value = "Tomorrow";
		firstChild.nodeValue = "impl reused node";
		value = titleAttr.value;
		if ("Tomorrow" !== value) {
			return "hc_attrsetvalue1: #attrValue 'value' equals '" + value + "' not '" + "Tomorrow" + "'";
		}
		value = titleAttr.nodeValue;
		if ("Tomorrow" !== value) {
			return "hc_attrsetvalue1: #attrNodeValue 'value' equals '" + value + "' not '" + "Tomorrow" + "'";
		}
		firstChild = titleAttr.lastChild;
		value = firstChild.nodeValue;
		if ("Tomorrow" !== value) {
			return "hc_attrsetvalue1: #firstChildValue 'value' equals '" + value + "' not '" + "Tomorrow" + "'";
		}
		otherChild = firstChild.nextSibling;
		if (otherChild != null) {
			return "hc_attrsetvalue1: #nextSiblingIsNull 'otherChild' equals '" + otherChild + "' not null";
		}
		return "hc_attrsetvalue1: OK";
	} catch (e) {
		return "hc_attrsetvalue1: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var acronymList;
		var testNode;
		var attributes;
		var titleAttr;
		var value;
		var retval;
		var firstChild;
		var otherChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		acronymList = doc.getElementsByTagName("acronym");
		testNode = acronymList.item(3);
		attributes = testNode.attributes;
		titleAttr = attributes.getNamedItem("title");
		firstChild = titleAttr.firstChild;
		if (firstChild == null) {
			return "hc_attrsetvalue1: #attrChildNotNull 'firstChild' is null";
		}
		titleAttr.value = "Tomorrow";
		firstChild.nodeValue = "impl reused node";
		value = titleAttr.value;
		if ("Tomorrow" !== value) {
			return "hc_attrsetvalue1: #attrValue 'value' equals '" + value + "' not '" + "Tomorrow" + "'";
		}
		value = titleAttr.nodeValue;
		if ("Tomorrow" !== value) {
			return "hc_attrsetvalue1: #attrNodeValue 'value' equals '" + value + "' not '" + "Tomorrow" + "'";
		}
		firstChild = titleAttr.lastChild;
		value = firstChild.nodeValue;
		if ("Tomorrow" !== value) {
			return "hc_attrsetvalue1: #firstChildValue 'value' equals '" + value + "' not '" + "Tomorrow" + "'";
		}
		otherChild = firstChild.nextSibling;
		if (otherChild != null) {
			return "hc_attrsetvalue1: #nextSiblingIsNull 'otherChild' equals '" + otherChild + "' not null";
		}
		return "hc_attrsetvalue1: OK";
	} catch (e) {
		return "hc_attrsetvalue1: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="hc_attrsetvalue2.xml" fleur="hc_attrsetvalue2" native="hc_attrsetvalue2"><Fleur>(function(){
	var success;
	try {
		var doc;
		var acronymList;
		var testNode;
		var attributes;
		var titleAttr;
		var value;
		var textNode;
		var retval;
		var firstChild;
		var otherChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		acronymList = doc.getElementsByTagName("acronym");
		testNode = acronymList.item(3);
		attributes = testNode.attributes;
		titleAttr = attributes.getNamedItem("title");
		textNode = doc.createTextNode("terday");
		retval = titleAttr.appendChild(textNode);
		firstChild = titleAttr.firstChild;
		if (firstChild == null) {
			return "hc_attrsetvalue2: #attrChildNotNull 'firstChild' is null";
		}
		titleAttr.value = "Tomorrow";
		firstChild.nodeValue = "impl reused node";
		value = titleAttr.value;
		if ("Tomorrow" !== value) {
			return "hc_attrsetvalue2: #attrValue 'value' equals '" + value + "' not '" + "Tomorrow" + "'";
		}
		value = titleAttr.nodeValue;
		if ("Tomorrow" !== value) {
			return "hc_attrsetvalue2: #attrNodeValue 'value' equals '" + value + "' not '" + "Tomorrow" + "'";
		}
		firstChild = titleAttr.lastChild;
		value = firstChild.nodeValue;
		if ("Tomorrow" !== value) {
			return "hc_attrsetvalue2: #firstChildValue 'value' equals '" + value + "' not '" + "Tomorrow" + "'";
		}
		otherChild = firstChild.nextSibling;
		if (otherChild != null) {
			return "hc_attrsetvalue2: #nextSiblingIsNull 'otherChild' equals '" + otherChild + "' not null";
		}
		return "hc_attrsetvalue2: OK";
	} catch (e) {
		return "hc_attrsetvalue2: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var acronymList;
		var testNode;
		var attributes;
		var titleAttr;
		var value;
		var textNode;
		var retval;
		var firstChild;
		var otherChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		acronymList = doc.getElementsByTagName("acronym");
		testNode = acronymList.item(3);
		attributes = testNode.attributes;
		titleAttr = attributes.getNamedItem("title");
		textNode = doc.createTextNode("terday");
		retval = titleAttr.appendChild(textNode);
		firstChild = titleAttr.firstChild;
		if (firstChild == null) {
			return "hc_attrsetvalue2: #attrChildNotNull 'firstChild' is null";
		}
		titleAttr.value = "Tomorrow";
		firstChild.nodeValue = "impl reused node";
		value = titleAttr.value;
		if ("Tomorrow" !== value) {
			return "hc_attrsetvalue2: #attrValue 'value' equals '" + value + "' not '" + "Tomorrow" + "'";
		}
		value = titleAttr.nodeValue;
		if ("Tomorrow" !== value) {
			return "hc_attrsetvalue2: #attrNodeValue 'value' equals '" + value + "' not '" + "Tomorrow" + "'";
		}
		firstChild = titleAttr.lastChild;
		value = firstChild.nodeValue;
		if ("Tomorrow" !== value) {
			return "hc_attrsetvalue2: #firstChildValue 'value' equals '" + value + "' not '" + "Tomorrow" + "'";
		}
		otherChild = firstChild.nextSibling;
		if (otherChild != null) {
			return "hc_attrsetvalue2: #nextSiblingIsNull 'otherChild' equals '" + otherChild + "' not null";
		}
		return "hc_attrsetvalue2: OK";
	} catch (e) {
		return "hc_attrsetvalue2: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="attrremovechild1.xml" fleur="attrremovechild1" native="attrremovechild1"><Fleur>(function(){
	var success;
	try {
		var doc;
		var entRef;
		var entElement;
		var attrNode;
		var textNode;
		var removedNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		entRef = doc.createEntityReference("ent4");
		if (entRef == null) {
			return "attrremovechild1: #createdEntRefNotNull 'entRef' is null";
		}
		entElement = entRef.firstChild;
		if (entElement == null) {
			return "attrremovechild1: #entElementNotNull 'entElement' is null";
		}
		attrNode = entElement.getAttributeNode("domestic");
		textNode = attrNode.firstChild;
		if (textNode == null) {
			return "attrremovechild1: #attrChildNotNull 'textNode' is null";
		}
		success = false;
		try {
			removedNode = attrNode.removeChild(textNode);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "attrremovechild1: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "attrremovechild1: OK";
	} catch (e) {
		return "attrremovechild1: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var entRef;
		var entElement;
		var attrNode;
		var textNode;
		var removedNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		entRef = doc.createEntityReference("ent4");
		if (entRef == null) {
			return "attrremovechild1: #createdEntRefNotNull 'entRef' is null";
		}
		entElement = entRef.firstChild;
		if (entElement == null) {
			return "attrremovechild1: #entElementNotNull 'entElement' is null";
		}
		attrNode = entElement.getAttributeNode("domestic");
		textNode = attrNode.firstChild;
		if (textNode == null) {
			return "attrremovechild1: #attrChildNotNull 'textNode' is null";
		}
		success = false;
		try {
			removedNode = attrNode.removeChild(textNode);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "attrremovechild1: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "attrremovechild1: OK";
	} catch (e) {
		return "attrremovechild1: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
<suite.member href="attrreplacechild1.xml" fleur="attrreplacechild1" native="attrreplacechild1"><Fleur>(function(){
	var success;
	try {
		var doc;
		var entRef;
		var entElement;
		var attrNode;
		var textNode;
		var removedNode;
		var newChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		entRef = doc.createEntityReference("ent4");
		if (entRef == null) {
			return "attrreplacechild1: #createdEntRefNotNull 'entRef' is null";
		}
		entElement = entRef.firstChild;
		if (entElement == null) {
			return "attrreplacechild1: #entElementNotNull 'entElement' is null";
		}
		attrNode = entElement.getAttributeNode("domestic");
		textNode = attrNode.firstChild;
		if (textNode == null) {
			return "attrreplacechild1: #attrChildNotNull 'textNode' is null";
		}
		newChild = doc.createTextNode("Yesterday");
		success = false;
		try {
			removedNode = attrNode.replaceChild(newChild, textNode);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "attrreplacechild1: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "attrreplacechild1: OK";
	} catch (e) {
		return "attrreplacechild1: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var entRef;
		var entElement;
		var attrNode;
		var textNode;
		var removedNode;
		var newChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level1/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		entRef = doc.createEntityReference("ent4");
		if (entRef == null) {
			return "attrreplacechild1: #createdEntRefNotNull 'entRef' is null";
		}
		entElement = entRef.firstChild;
		if (entElement == null) {
			return "attrreplacechild1: #entElementNotNull 'entElement' is null";
		}
		attrNode = entElement.getAttributeNode("domestic");
		textNode = attrNode.firstChild;
		if (textNode == null) {
			return "attrreplacechild1: #attrChildNotNull 'textNode' is null";
		}
		newChild = doc.createTextNode("Yesterday");
		success = false;
		try {
			removedNode = attrNode.replaceChild(newChild, textNode);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "attrreplacechild1: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "attrreplacechild1: OK";
	} catch (e) {
		return "attrreplacechild1: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>

</suite>