<suite>

	 <suite.member href="attrgetownerelement01.xml" fleur="attrgetownerelement01" native="attrgetownerelement01"><Fleur>(function(){
	var success;
	try {
		var doc;
		var attr;
		var element;
		var ownerElement;
		var ownerElementName;
		var elementList;
		var attributes;
		var nullNS = null;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagNameNS("http://www.nist.gov", "employee");
		element = elementList.item(1);
		attributes = element.attributes;
		attr = attributes.getNamedItemNS(nullNS, "defaultAttr");
		ownerElement = attr.ownerElement;
		ownerElementName = ownerElement.nodeName;
		if ("emp:employee" !== ownerElementName) {
			return "attrgetownerelement01: #attrgetownerelement01 'ownerElementName' equals '" + ownerElementName + "' not '" + "emp:employee" + "'";
		}
		return "attrgetownerelement01: OK";
	} catch (e) {
		return "attrgetownerelement01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var attr;
		var element;
		var ownerElement;
		var ownerElementName;
		var elementList;
		var attributes;
		var nullNS = null;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagNameNS("http://www.nist.gov", "employee");
		element = elementList.item(1);
		attributes = element.attributes;
		attr = attributes.getNamedItemNS(nullNS, "defaultAttr");
		ownerElement = attr.ownerElement;
		ownerElementName = ownerElement.nodeName;
		if ("emp:employee" !== ownerElementName) {
			return "attrgetownerelement01: #attrgetownerelement01 'ownerElementName' equals '" + ownerElementName + "' not '" + "emp:employee" + "'";
		}
		return "attrgetownerelement01: OK";
	} catch (e) {
		return "attrgetownerelement01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="attrgetownerelement02.xml" fleur="attrgetownerelement02" native="attrgetownerelement02"><Fleur>(function(){
	var success;
	try {
		var doc;
		var element;
		var ownerElement;
		var ownerElementName;
		var attr;
		var newAttr;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		element = doc.createElement("root");
		attr = doc.createAttributeNS("http://www.w3.org/DOM/L1", "L1:att");
		newAttr = element.setAttributeNodeNS(attr);
		ownerElement = attr.ownerElement;
		ownerElementName = ownerElement.nodeName;
		if ("root".toLowerCase() !== ownerElementName.toLowerCase()) {
			return "attrgetownerelement02: #attrgetownerelement02 'ownerElementName' equals '" + ownerElementName.toLowerCase() + "' not '" + "root".toLowerCase() + "'";
		}
		return "attrgetownerelement02: OK";
	} catch (e) {
		return "attrgetownerelement02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var element;
		var ownerElement;
		var ownerElementName;
		var attr;
		var newAttr;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		element = doc.createElement("root");
		attr = doc.createAttributeNS("http://www.w3.org/DOM/L1", "L1:att");
		newAttr = element.setAttributeNodeNS(attr);
		ownerElement = attr.ownerElement;
		ownerElementName = ownerElement.nodeName;
		if ("root".toLowerCase() !== ownerElementName.toLowerCase()) {
			return "attrgetownerelement02: #attrgetownerelement02 'ownerElementName' equals '" + ownerElementName.toLowerCase() + "' not '" + "root".toLowerCase() + "'";
		}
		return "attrgetownerelement02: OK";
	} catch (e) {
		return "attrgetownerelement02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="attrgetownerelement03.xml" fleur="attrgetownerelement03" native="attrgetownerelement03"><Fleur>(function(){
	var success;
	try {
		var doc;
		var ownerElement;
		var attr;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		attr = doc.createAttributeNS("http://www.w3.org/DOM", "dom:attr");
		ownerElement = attr.ownerElement;
		if (ownerElement != null) {
			return "attrgetownerelement03: #attrgetownerelement03 'ownerElement' equals '" + ownerElement + "' not null";
		}
		return "attrgetownerelement03: OK";
	} catch (e) {
		return "attrgetownerelement03: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var ownerElement;
		var attr;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		attr = doc.createAttributeNS("http://www.w3.org/DOM", "dom:attr");
		ownerElement = attr.ownerElement;
		if (ownerElement != null) {
			return "attrgetownerelement03: #attrgetownerelement03 'ownerElement' equals '" + ownerElement + "' not null";
		}
		return "attrgetownerelement03: OK";
	} catch (e) {
		return "attrgetownerelement03: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="attrgetownerelement04.xml" fleur="attrgetownerelement04" native="attrgetownerelement04"><Fleur>(function(){
	var success;
	try {
		var doc;
		var docImp;
		var ownerElement;
		var element;
		var attr;
		var attrImp;
		var addresses;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		var docImpReq = new XMLHttpRequest();
		docImpReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docImpReq.send();
		docImp = new Fleur.DOMParser().parseFromString(docImpReq.responseText, "text/xml");
		addresses = doc.getElementsByTagNameNS("http://www.nist.gov", "address");
		element = addresses.item(1);
		if (element == null) {
			return "attrgetownerelement04: #empAddressNotNull 'element' is null";
		}
		attr = element.getAttributeNodeNS("http://www.nist.gov", "zone");
		attrImp = docImp.importNode(attr, true);
		ownerElement = attrImp.ownerElement;
		if (ownerElement != null) {
			return "attrgetownerelement04: #attrgetownerelement04 'ownerElement' equals '" + ownerElement + "' not null";
		}
		return "attrgetownerelement04: OK";
	} catch (e) {
		return "attrgetownerelement04: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var docImp;
		var ownerElement;
		var element;
		var attr;
		var attrImp;
		var addresses;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		var docImpReq = new XMLHttpRequest();
		docImpReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docImpReq.send();
		docImp = new DOMParser().parseFromString(docImpReq.responseText, "text/xml");
		addresses = doc.getElementsByTagNameNS("http://www.nist.gov", "address");
		element = addresses.item(1);
		if (element == null) {
			return "attrgetownerelement04: #empAddressNotNull 'element' is null";
		}
		attr = element.getAttributeNodeNS("http://www.nist.gov", "zone");
		attrImp = docImp.importNode(attr, true);
		ownerElement = attrImp.ownerElement;
		if (ownerElement != null) {
			return "attrgetownerelement04: #attrgetownerelement04 'ownerElement' equals '" + ownerElement + "' not null";
		}
		return "attrgetownerelement04: OK";
	} catch (e) {
		return "attrgetownerelement04: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="attrgetownerelement05.xml" fleur="attrgetownerelement05" native="attrgetownerelement05"><Fleur>(function(){
	var success;
	try {
		var doc;
		var element;
		var ownerElement;
		var parentElement;
		var elementList;
		var ownerElementName;
		var attr;
		var removedChild;
		var nodeMap;
		var nullNS = null;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagNameNS("*", "address");
		element = elementList.item(1);
		parentElement = element.parentNode;
		nodeMap = element.attributes;
		removedChild = parentElement.removeChild(element);
		attr = nodeMap.getNamedItemNS(nullNS, "street");
		ownerElement = attr.ownerElement;
		ownerElementName = ownerElement.nodeName;
		if ("address" !== ownerElementName) {
			return "attrgetownerelement05: #attrgetownerelement05 'ownerElementName' equals '" + ownerElementName + "' not '" + "address" + "'";
		}
		return "attrgetownerelement05: OK";
	} catch (e) {
		return "attrgetownerelement05: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var element;
		var ownerElement;
		var parentElement;
		var elementList;
		var ownerElementName;
		var attr;
		var removedChild;
		var nodeMap;
		var nullNS = null;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagNameNS("*", "address");
		element = elementList.item(1);
		parentElement = element.parentNode;
		nodeMap = element.attributes;
		removedChild = parentElement.removeChild(element);
		attr = nodeMap.getNamedItemNS(nullNS, "street");
		ownerElement = attr.ownerElement;
		ownerElementName = ownerElement.nodeName;
		if ("address" !== ownerElementName) {
			return "attrgetownerelement05: #attrgetownerelement05 'ownerElementName' equals '" + ownerElementName + "' not '" + "address" + "'";
		}
		return "attrgetownerelement05: OK";
	} catch (e) {
		return "attrgetownerelement05: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="createAttributeNS01.xml" fleur="createAttributeNS01" native="createAttributeNS01"><Fleur>(function(){
	var success;
	try {
		var namespaceURI = "http://www.ecommerce.org/";
		var malformedName = "prefix::local";
		var doc;
		var newAttr;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		success = false;
		try {
			newAttr = doc.createAttributeNS(namespaceURI, malformedName);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 14;
			}
		}
		if (!success) {
			return "createAttributeNS01: Exception NAMESPACE_ERR expected";
		}
		return "createAttributeNS01: OK";
	} catch (e) {
		return "createAttributeNS01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var namespaceURI = "http://www.ecommerce.org/";
		var malformedName = "prefix::local";
		var doc;
		var newAttr;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		success = false;
		try {
			newAttr = doc.createAttributeNS(namespaceURI, malformedName);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 14;
			}
		}
		if (!success) {
			return "createAttributeNS01: Exception NAMESPACE_ERR expected";
		}
		return "createAttributeNS01: OK";
	} catch (e) {
		return "createAttributeNS01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="createAttributeNS02.xml" fleur="createAttributeNS02" native="createAttributeNS02"><Fleur>(function(){
	var success;
	try {
		var namespaceURI = null;
		var qualifiedName = "prefix:local";
		var doc;
		var newAttr;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		success = false;
		try {
			newAttr = doc.createAttributeNS(namespaceURI, qualifiedName);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 14;
			}
		}
		if (!success) {
			return "createAttributeNS02: Exception NAMESPACE_ERR expected";
		}
		return "createAttributeNS02: OK";
	} catch (e) {
		return "createAttributeNS02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var namespaceURI = null;
		var qualifiedName = "prefix:local";
		var doc;
		var newAttr;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		success = false;
		try {
			newAttr = doc.createAttributeNS(namespaceURI, qualifiedName);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 14;
			}
		}
		if (!success) {
			return "createAttributeNS02: Exception NAMESPACE_ERR expected";
		}
		return "createAttributeNS02: OK";
	} catch (e) {
		return "createAttributeNS02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="createAttributeNS03.xml" fleur="createAttributeNS03" native="createAttributeNS03"><Fleur>(function(){
	var success;
	try {
		var namespaceURI = "http://www.wedding.com/";
		var qualifiedName;
		var doc;
		var newAttr;
		illegalQNames = new Array();
		illegalQNames[0] = "person:{";
		illegalQNames[1] = "person:}";
		illegalQNames[2] = "person:~";
		illegalQNames[3] = "person:'";
		illegalQNames[4] = "person:!";
		illegalQNames[5] = "person:@";
		illegalQNames[6] = "person:#";
		illegalQNames[7] = "person:$";
		illegalQNames[8] = "person:%";
		illegalQNames[9] = "person:^";
		illegalQNames[10] = "person:&amp;";
		illegalQNames[11] = "person:*";
		illegalQNames[12] = "person:(";
		illegalQNames[13] = "person:)";
		illegalQNames[14] = "person:+";
		illegalQNames[15] = "person:=";
		illegalQNames[16] = "person:[";
		illegalQNames[17] = "person:]";
		illegalQNames[18] = "person:\\";
		illegalQNames[19] = "person:/";
		illegalQNames[20] = "person:;";
		illegalQNames[21] = "person:`";
		illegalQNames[22] = "person:&lt;";
		illegalQNames[23] = "person:&gt;";
		illegalQNames[24] = "person:,";
		illegalQNames[25] = "person:a ";
		illegalQNames[26] = "person:\"";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		for (var index_id0x0737c650 = 0; index_id0x0737c650 &lt; illegalQNames.length; index_id0x0737c650++) {
			qualifiedName = illegalQNames[index_id0x0737c650];
			success = false;
			try {
				newAttr = doc.createAttributeNS(namespaceURI, qualifiedName);
			} catch (ex) {
				if (typeof ex.code != 'undefined') {
					success = ex.code === 5;
				}
			}
			if (!success) {
				return "createAttributeNS03: Exception INVALID_CHARACTER_ERR expected";
			}
		}
		return "createAttributeNS03: OK";
	} catch (e) {
		return "createAttributeNS03: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var namespaceURI = "http://www.wedding.com/";
		var qualifiedName;
		var doc;
		var newAttr;
		illegalQNames = new Array();
		illegalQNames[0] = "person:{";
		illegalQNames[1] = "person:}";
		illegalQNames[2] = "person:~";
		illegalQNames[3] = "person:'";
		illegalQNames[4] = "person:!";
		illegalQNames[5] = "person:@";
		illegalQNames[6] = "person:#";
		illegalQNames[7] = "person:$";
		illegalQNames[8] = "person:%";
		illegalQNames[9] = "person:^";
		illegalQNames[10] = "person:&amp;";
		illegalQNames[11] = "person:*";
		illegalQNames[12] = "person:(";
		illegalQNames[13] = "person:)";
		illegalQNames[14] = "person:+";
		illegalQNames[15] = "person:=";
		illegalQNames[16] = "person:[";
		illegalQNames[17] = "person:]";
		illegalQNames[18] = "person:\\";
		illegalQNames[19] = "person:/";
		illegalQNames[20] = "person:;";
		illegalQNames[21] = "person:`";
		illegalQNames[22] = "person:&lt;";
		illegalQNames[23] = "person:&gt;";
		illegalQNames[24] = "person:,";
		illegalQNames[25] = "person:a ";
		illegalQNames[26] = "person:\"";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		for (var index_id0x0737c650 = 0; index_id0x0737c650 &lt; illegalQNames.length; index_id0x0737c650++) {
			qualifiedName = illegalQNames[index_id0x0737c650];
			success = false;
			try {
				newAttr = doc.createAttributeNS(namespaceURI, qualifiedName);
			} catch (ex) {
				if (typeof ex.code != 'undefined') {
					success = ex.code === 5;
				}
			}
			if (!success) {
				return "createAttributeNS03: Exception INVALID_CHARACTER_ERR expected";
			}
		}
		return "createAttributeNS03: OK";
	} catch (e) {
		return "createAttributeNS03: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="createAttributeNS04.xml" fleur="createAttributeNS04" native="createAttributeNS04"><Fleur>(function(){
	var success;
	try {
		var namespaceURI = "http://www.w3.org/XML/1998/namespaces";
		var qualifiedName = "xml:attr1";
		var doc;
		var newAttr;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		success = false;
		try {
			newAttr = doc.createAttributeNS(namespaceURI, qualifiedName);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 14;
			}
		}
		if (!success) {
			return "createAttributeNS04: Exception NAMESPACE_ERR expected";
		}
		return "createAttributeNS04: OK";
	} catch (e) {
		return "createAttributeNS04: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var namespaceURI = "http://www.w3.org/XML/1998/namespaces";
		var qualifiedName = "xml:attr1";
		var doc;
		var newAttr;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		success = false;
		try {
			newAttr = doc.createAttributeNS(namespaceURI, qualifiedName);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 14;
			}
		}
		if (!success) {
			return "createAttributeNS04: Exception NAMESPACE_ERR expected";
		}
		return "createAttributeNS04: OK";
	} catch (e) {
		return "createAttributeNS04: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="createAttributeNS05.xml" fleur="createAttributeNS05" native="createAttributeNS05"><Fleur>(function(){
	var success;
	try {
		var namespaceURI = "http://www.ecommerce.org/";
		var qualifiedName = "econm:local";
		var doc;
		var newAttr;
		var attrName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		newAttr = doc.createAttributeNS(namespaceURI, qualifiedName);
		attrName = newAttr.name;
		if (qualifiedName !== attrName) {
			return "createAttributeNS05: #throw_Equals 'attrName' equals '" + attrName + "' not '" + qualifiedName + "'";
		}
		return "createAttributeNS05: OK";
	} catch (e) {
		return "createAttributeNS05: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var namespaceURI = "http://www.ecommerce.org/";
		var qualifiedName = "econm:local";
		var doc;
		var newAttr;
		var attrName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		newAttr = doc.createAttributeNS(namespaceURI, qualifiedName);
		attrName = newAttr.name;
		if (qualifiedName !== attrName) {
			return "createAttributeNS05: #throw_Equals 'attrName' equals '" + attrName + "' not '" + qualifiedName + "'";
		}
		return "createAttributeNS05: OK";
	} catch (e) {
		return "createAttributeNS05: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="createAttributeNS06.xml" fleur="createAttributeNS06" native="createAttributeNS06"><Fleur>(function(){
	var success;
	try {
		var namespaceURI = "http://www.example.com/";
		var qualifiedName;
		var doc;
		var newAttr;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		success = false;
		try {
			newAttr = doc.createAttributeNS(namespaceURI, "");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 5;
			}
		}
		if (!success) {
			return "createAttributeNS06: Exception INVALID_CHARACTER_ERR expected";
		}
		return "createAttributeNS06: OK";
	} catch (e) {
		return "createAttributeNS06: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var namespaceURI = "http://www.example.com/";
		var qualifiedName;
		var doc;
		var newAttr;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		success = false;
		try {
			newAttr = doc.createAttributeNS(namespaceURI, "");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 5;
			}
		}
		if (!success) {
			return "createAttributeNS06: Exception INVALID_CHARACTER_ERR expected";
		}
		return "createAttributeNS06: OK";
	} catch (e) {
		return "createAttributeNS06: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="createDocument01.xml" fleur="createDocument01" native="createDocument01"><Fleur>(function(){
	var success;
	try {
		var namespaceURI = "http://www.ecommerce.org/";
		var malformedName = "prefix::local";
		var doc;
		var docType = null;
		var domImpl;
		var aNewDoc;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		domImpl = doc.implementation;
		success = false;
		try {
			aNewDoc = domImpl.createDocument(namespaceURI, malformedName, docType);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 14;
			}
		}
		if (!success) {
			return "createDocument01: Exception NAMESPACE_ERR expected";
		}
		return "createDocument01: OK";
	} catch (e) {
		return "createDocument01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var namespaceURI = "http://www.ecommerce.org/";
		var malformedName = "prefix::local";
		var doc;
		var docType = null;
		var domImpl;
		var aNewDoc;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		domImpl = doc.implementation;
		success = false;
		try {
			aNewDoc = domImpl.createDocument(namespaceURI, malformedName, docType);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 14;
			}
		}
		if (!success) {
			return "createDocument01: Exception NAMESPACE_ERR expected";
		}
		return "createDocument01: OK";
	} catch (e) {
		return "createDocument01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="createDocument02.xml" fleur="createDocument02" native="createDocument02"><Fleur>(function(){
	var success;
	try {
		var namespaceURI = null;
		var qualifiedName = "k:local";
		var doc;
		var docType = null;
		var domImpl;
		var aNewDoc;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		domImpl = doc.implementation;
		success = false;
		try {
			aNewDoc = domImpl.createDocument(namespaceURI, qualifiedName, docType);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 14;
			}
		}
		if (!success) {
			return "createDocument02: Exception NAMESPACE_ERR expected";
		}
		return "createDocument02: OK";
	} catch (e) {
		return "createDocument02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var namespaceURI = null;
		var qualifiedName = "k:local";
		var doc;
		var docType = null;
		var domImpl;
		var aNewDoc;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		domImpl = doc.implementation;
		success = false;
		try {
			aNewDoc = domImpl.createDocument(namespaceURI, qualifiedName, docType);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 14;
			}
		}
		if (!success) {
			return "createDocument02: Exception NAMESPACE_ERR expected";
		}
		return "createDocument02: OK";
	} catch (e) {
		return "createDocument02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="createDocument03.xml" fleur="createDocument03" native="createDocument03"><Fleur>(function(){
	var success;
	try {
		var namespaceURI = "http://www.ecommerce.org/schema";
		var qualifiedName = "namespaceURI:x";
		var doc;
		var docType;
		var domImpl;
		var aNewDoc;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		domImpl = doc.implementation;
		success = false;
		try {
			aNewDoc = domImpl.createDocument(namespaceURI, qualifiedName, docType);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 4;
			}
		}
		if (!success) {
			return "createDocument03: Exception WRONG_DOCUMENT_ERR expected";
		}
		return "createDocument03: OK";
	} catch (e) {
		return "createDocument03: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var namespaceURI = "http://www.ecommerce.org/schema";
		var qualifiedName = "namespaceURI:x";
		var doc;
		var docType;
		var domImpl;
		var aNewDoc;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		domImpl = doc.implementation;
		success = false;
		try {
			aNewDoc = domImpl.createDocument(namespaceURI, qualifiedName, docType);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 4;
			}
		}
		if (!success) {
			return "createDocument03: Exception WRONG_DOCUMENT_ERR expected";
		}
		return "createDocument03: OK";
	} catch (e) {
		return "createDocument03: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="createDocument04.xml" fleur="createDocument04" native="createDocument04"><Fleur>(function(){
	var success;
	try {
		var namespaceURI = "http://www.ecommerce.org/schema";
		var qualifiedName = "namespaceURI:x";
		var doc;
		var docType;
		var domImpl;
		var aNewDoc;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		var aNewDocReq = new XMLHttpRequest();
		aNewDocReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		aNewDocReq.send();
		aNewDoc = new Fleur.DOMParser().parseFromString(aNewDocReq.responseText, "text/xml");
		docType = doc.doctype;
		domImpl = aNewDoc.implementation;
		success = false;
		try {
			aNewDoc = domImpl.createDocument(namespaceURI, qualifiedName, docType);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 4;
			}
		}
		if (!success) {
			return "createDocument04: Exception WRONG_DOCUMENT_ERR expected";
		}
		return "createDocument04: OK";
	} catch (e) {
		return "createDocument04: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var namespaceURI = "http://www.ecommerce.org/schema";
		var qualifiedName = "namespaceURI:x";
		var doc;
		var docType;
		var domImpl;
		var aNewDoc;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		var aNewDocReq = new XMLHttpRequest();
		aNewDocReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		aNewDocReq.send();
		aNewDoc = new DOMParser().parseFromString(aNewDocReq.responseText, "text/xml");
		docType = doc.doctype;
		domImpl = aNewDoc.implementation;
		success = false;
		try {
			aNewDoc = domImpl.createDocument(namespaceURI, qualifiedName, docType);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 4;
			}
		}
		if (!success) {
			return "createDocument04: Exception WRONG_DOCUMENT_ERR expected";
		}
		return "createDocument04: OK";
	} catch (e) {
		return "createDocument04: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="createDocument05.xml" fleur="createDocument05" native="createDocument05"><Fleur>(function(){
	var success;
	try {
		var namespaceURI = "http://www.ecommerce.org/schema";
		var qualifiedName;
		var doc;
		var docType = null;
		var domImpl;
		var aNewDoc;
		var charact;
		illegalQNames = new Array();
		illegalQNames[0] = "namespaceURI:{";
		illegalQNames[1] = "namespaceURI:}";
		illegalQNames[2] = "namespaceURI:~";
		illegalQNames[3] = "namespaceURI:'";
		illegalQNames[4] = "namespaceURI:!";
		illegalQNames[5] = "namespaceURI:@";
		illegalQNames[6] = "namespaceURI:#";
		illegalQNames[7] = "namespaceURI:$";
		illegalQNames[8] = "namespaceURI:%";
		illegalQNames[9] = "namespaceURI:^";
		illegalQNames[10] = "namespaceURI:&amp;";
		illegalQNames[11] = "namespaceURI:*";
		illegalQNames[12] = "namespaceURI:(";
		illegalQNames[13] = "namespaceURI:)";
		illegalQNames[14] = "namespaceURI:+";
		illegalQNames[15] = "namespaceURI:=";
		illegalQNames[16] = "namespaceURI:[";
		illegalQNames[17] = "namespaceURI:]";
		illegalQNames[18] = "namespaceURI:\\";
		illegalQNames[19] = "namespaceURI:/";
		illegalQNames[20] = "namespaceURI:;";
		illegalQNames[21] = "namespaceURI:`";
		illegalQNames[22] = "namespaceURI:&lt;";
		illegalQNames[23] = "namespaceURI:&gt;";
		illegalQNames[24] = "namespaceURI:,";
		illegalQNames[25] = "namespaceURI:a ";
		illegalQNames[26] = "namespaceURI:\"";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		for (var index_id0x075f7150 = 0; index_id0x075f7150 &lt; illegalQNames.length; index_id0x075f7150++) {
			qualifiedName = illegalQNames[index_id0x075f7150];
			domImpl = doc.implementation;
			success = false;
			try {
				aNewDoc = domImpl.createDocument(namespaceURI, qualifiedName, docType);
			} catch (ex) {
				if (typeof ex.code != 'undefined') {
					success = ex.code === 5;
				}
			}
			if (!success) {
				return "createDocument05: Exception INVALID_CHARACTER_ERR expected";
			}
		}
		return "createDocument05: OK";
	} catch (e) {
		return "createDocument05: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var namespaceURI = "http://www.ecommerce.org/schema";
		var qualifiedName;
		var doc;
		var docType = null;
		var domImpl;
		var aNewDoc;
		var charact;
		illegalQNames = new Array();
		illegalQNames[0] = "namespaceURI:{";
		illegalQNames[1] = "namespaceURI:}";
		illegalQNames[2] = "namespaceURI:~";
		illegalQNames[3] = "namespaceURI:'";
		illegalQNames[4] = "namespaceURI:!";
		illegalQNames[5] = "namespaceURI:@";
		illegalQNames[6] = "namespaceURI:#";
		illegalQNames[7] = "namespaceURI:$";
		illegalQNames[8] = "namespaceURI:%";
		illegalQNames[9] = "namespaceURI:^";
		illegalQNames[10] = "namespaceURI:&amp;";
		illegalQNames[11] = "namespaceURI:*";
		illegalQNames[12] = "namespaceURI:(";
		illegalQNames[13] = "namespaceURI:)";
		illegalQNames[14] = "namespaceURI:+";
		illegalQNames[15] = "namespaceURI:=";
		illegalQNames[16] = "namespaceURI:[";
		illegalQNames[17] = "namespaceURI:]";
		illegalQNames[18] = "namespaceURI:\\";
		illegalQNames[19] = "namespaceURI:/";
		illegalQNames[20] = "namespaceURI:;";
		illegalQNames[21] = "namespaceURI:`";
		illegalQNames[22] = "namespaceURI:&lt;";
		illegalQNames[23] = "namespaceURI:&gt;";
		illegalQNames[24] = "namespaceURI:,";
		illegalQNames[25] = "namespaceURI:a ";
		illegalQNames[26] = "namespaceURI:\"";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		for (var index_id0x075f7150 = 0; index_id0x075f7150 &lt; illegalQNames.length; index_id0x075f7150++) {
			qualifiedName = illegalQNames[index_id0x075f7150];
			domImpl = doc.implementation;
			success = false;
			try {
				aNewDoc = domImpl.createDocument(namespaceURI, qualifiedName, docType);
			} catch (ex) {
				if (typeof ex.code != 'undefined') {
					success = ex.code === 5;
				}
			}
			if (!success) {
				return "createDocument05: Exception INVALID_CHARACTER_ERR expected";
			}
		}
		return "createDocument05: OK";
	} catch (e) {
		return "createDocument05: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="createDocument06.xml" fleur="createDocument06" native="createDocument06"><Fleur>(function(){
	var success;
	try {
		var namespaceURI = "http://ecommerce.org/schema";
		var qualifiedName = "xml:local";
		var doc;
		var docType = null;
		var domImpl;
		var aNewDoc;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		domImpl = doc.implementation;
		success = false;
		try {
			aNewDoc = domImpl.createDocument(namespaceURI, qualifiedName, docType);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 14;
			}
		}
		if (!success) {
			return "createDocument06: Exception NAMESPACE_ERR expected";
		}
		return "createDocument06: OK";
	} catch (e) {
		return "createDocument06: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var namespaceURI = "http://ecommerce.org/schema";
		var qualifiedName = "xml:local";
		var doc;
		var docType = null;
		var domImpl;
		var aNewDoc;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		domImpl = doc.implementation;
		success = false;
		try {
			aNewDoc = domImpl.createDocument(namespaceURI, qualifiedName, docType);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 14;
			}
		}
		if (!success) {
			return "createDocument06: Exception NAMESPACE_ERR expected";
		}
		return "createDocument06: OK";
	} catch (e) {
		return "createDocument06: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="createDocument07.xml" fleur="createDocument07" native="createDocument07"><Fleur>(function(){
	var success;
	try {
		var namespaceURI = "http://www.ecommerce.org/schema";
		var qualifiedName = "y:x";
		var doc;
		var docType = null;
		var domImpl;
		var aNewDoc;
		var nodeName;
		var nodeValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		domImpl = doc.implementation;
		aNewDoc = domImpl.createDocument(namespaceURI, qualifiedName, docType);
		nodeName = aNewDoc.nodeName;
		nodeValue = aNewDoc.nodeValue;
		if ("#document" !== nodeName) {
			return "createDocument07: #nodeName 'nodeName' equals '" + nodeName + "' not '" + "#document" + "'";
		}
		if (nodeValue != null) {
			return "createDocument07: #nodeValue 'nodeValue' equals '" + nodeValue + "' not null";
		}
		return "createDocument07: OK";
	} catch (e) {
		return "createDocument07: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var namespaceURI = "http://www.ecommerce.org/schema";
		var qualifiedName = "y:x";
		var doc;
		var docType = null;
		var domImpl;
		var aNewDoc;
		var nodeName;
		var nodeValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		domImpl = doc.implementation;
		aNewDoc = domImpl.createDocument(namespaceURI, qualifiedName, docType);
		nodeName = aNewDoc.nodeName;
		nodeValue = aNewDoc.nodeValue;
		if ("#document" !== nodeName) {
			return "createDocument07: #nodeName 'nodeName' equals '" + nodeName + "' not '" + "#document" + "'";
		}
		if (nodeValue != null) {
			return "createDocument07: #nodeValue 'nodeValue' equals '" + nodeValue + "' not null";
		}
		return "createDocument07: OK";
	} catch (e) {
		return "createDocument07: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="createDocument08.xml" fleur="createDocument08" native="createDocument08"><Fleur>(function(){
	var success;
	try {
		var namespaceURI = "http://www.example.org/schema";
		var docType = null;
		var domImpl;
		var aNewDoc;
		var charact;
		domImpl = getImplementation();
		success = false;
		try {
			aNewDoc = domImpl.createDocument(namespaceURI, "", docType);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 5;
			}
		}
		if (!success) {
			return "createDocument08: Exception INVALID_CHARACTER_ERR expected";
		}
		return "createDocument08: OK";
	} catch (e) {
		return "createDocument08: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var namespaceURI = "http://www.example.org/schema";
		var docType = null;
		var domImpl;
		var aNewDoc;
		var charact;
		domImpl = getImplementation();
		success = false;
		try {
			aNewDoc = domImpl.createDocument(namespaceURI, "", docType);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 5;
			}
		}
		if (!success) {
			return "createDocument08: Exception INVALID_CHARACTER_ERR expected";
		}
		return "createDocument08: OK";
	} catch (e) {
		return "createDocument08: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="createDocumentType01.xml" fleur="createDocumentType01" native="createDocumentType01"><Fleur>(function(){
	var success;
	try {
		var publicId = "STAFF";
		var systemId = "staff.xml";
		var malformedName = "prefix::local";
		var doc;
		var domImpl;
		var newType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		domImpl = doc.implementation;
		success = false;
		try {
			newType = domImpl.createDocumentType(malformedName, publicId, systemId);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 14;
			}
		}
		if (!success) {
			return "createDocumentType01: Exception NAMESPACE_ERR expected";
		}
		return "createDocumentType01: OK";
	} catch (e) {
		return "createDocumentType01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var publicId = "STAFF";
		var systemId = "staff.xml";
		var malformedName = "prefix::local";
		var doc;
		var domImpl;
		var newType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		domImpl = doc.implementation;
		success = false;
		try {
			newType = domImpl.createDocumentType(malformedName, publicId, systemId);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 14;
			}
		}
		if (!success) {
			return "createDocumentType01: Exception NAMESPACE_ERR expected";
		}
		return "createDocumentType01: OK";
	} catch (e) {
		return "createDocumentType01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="createDocumentType02.xml" fleur="createDocumentType02" native="createDocumentType02"><Fleur>(function(){
	var success;
	try {
		var publicId = "http://www.localhost.com/";
		var systemId = "myDoc.dtd";
		var qualifiedName;
		var doc;
		var docType = null;
		var domImpl;
		illegalQNames = new Array();
		illegalQNames[0] = "edi:{";
		illegalQNames[1] = "edi:}";
		illegalQNames[2] = "edi:~";
		illegalQNames[3] = "edi:'";
		illegalQNames[4] = "edi:!";
		illegalQNames[5] = "edi:@";
		illegalQNames[6] = "edi:#";
		illegalQNames[7] = "edi:$";
		illegalQNames[8] = "edi:%";
		illegalQNames[9] = "edi:^";
		illegalQNames[10] = "edi:&amp;";
		illegalQNames[11] = "edi:*";
		illegalQNames[12] = "edi:(";
		illegalQNames[13] = "edi:)";
		illegalQNames[14] = "edi:+";
		illegalQNames[15] = "edi:=";
		illegalQNames[16] = "edi:[";
		illegalQNames[17] = "edi:]";
		illegalQNames[18] = "edi:\\";
		illegalQNames[19] = "edi:/";
		illegalQNames[20] = "edi:;";
		illegalQNames[21] = "edi:`";
		illegalQNames[22] = "edi:&lt;";
		illegalQNames[23] = "edi:&gt;";
		illegalQNames[24] = "edi:,";
		illegalQNames[25] = "edi:a ";
		illegalQNames[26] = "edi:\"";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		for (var index_id0x0789f6a0 = 0; index_id0x0789f6a0 &lt; illegalQNames.length; index_id0x0789f6a0++) {
			qualifiedName = illegalQNames[index_id0x0789f6a0];
			domImpl = doc.implementation;
			success = false;
			try {
				docType = domImpl.createDocumentType(qualifiedName, publicId, systemId);
			} catch (ex) {
				if (typeof ex.code != 'undefined') {
					success = ex.code === 5;
				}
			}
			if (!success) {
				return "createDocumentType02: Exception INVALID_CHARACTER_ERR expected";
			}
		}
		return "createDocumentType02: OK";
	} catch (e) {
		return "createDocumentType02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var publicId = "http://www.localhost.com/";
		var systemId = "myDoc.dtd";
		var qualifiedName;
		var doc;
		var docType = null;
		var domImpl;
		illegalQNames = new Array();
		illegalQNames[0] = "edi:{";
		illegalQNames[1] = "edi:}";
		illegalQNames[2] = "edi:~";
		illegalQNames[3] = "edi:'";
		illegalQNames[4] = "edi:!";
		illegalQNames[5] = "edi:@";
		illegalQNames[6] = "edi:#";
		illegalQNames[7] = "edi:$";
		illegalQNames[8] = "edi:%";
		illegalQNames[9] = "edi:^";
		illegalQNames[10] = "edi:&amp;";
		illegalQNames[11] = "edi:*";
		illegalQNames[12] = "edi:(";
		illegalQNames[13] = "edi:)";
		illegalQNames[14] = "edi:+";
		illegalQNames[15] = "edi:=";
		illegalQNames[16] = "edi:[";
		illegalQNames[17] = "edi:]";
		illegalQNames[18] = "edi:\\";
		illegalQNames[19] = "edi:/";
		illegalQNames[20] = "edi:;";
		illegalQNames[21] = "edi:`";
		illegalQNames[22] = "edi:&lt;";
		illegalQNames[23] = "edi:&gt;";
		illegalQNames[24] = "edi:,";
		illegalQNames[25] = "edi:a ";
		illegalQNames[26] = "edi:\"";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		for (var index_id0x0789f6a0 = 0; index_id0x0789f6a0 &lt; illegalQNames.length; index_id0x0789f6a0++) {
			qualifiedName = illegalQNames[index_id0x0789f6a0];
			domImpl = doc.implementation;
			success = false;
			try {
				docType = domImpl.createDocumentType(qualifiedName, publicId, systemId);
			} catch (ex) {
				if (typeof ex.code != 'undefined') {
					success = ex.code === 5;
				}
			}
			if (!success) {
				return "createDocumentType02: Exception INVALID_CHARACTER_ERR expected";
			}
		}
		return "createDocumentType02: OK";
	} catch (e) {
		return "createDocumentType02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="createDocumentType03.xml" fleur="createDocumentType03" native="createDocumentType03"><Fleur>(function(){
	var success;
	try {
		var namespaceURI = "http://ecommerce.org/schema";
		var qualifiedName = "prefix:myDoc";
		var publicId = "http://www.localhost.com";
		var systemId = "myDoc.dtd";
		var doc;
		var domImpl;
		var newType = null;
		var nodeName;
		var nodeValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		domImpl = doc.implementation;
		newType = domImpl.createDocumentType(qualifiedName, publicId, systemId);
		nodeName = newType.nodeName;
		if ("prefix:myDoc" !== nodeName) {
			return "createDocumentType03: #nodeName 'nodeName' equals '" + nodeName + "' not '" + "prefix:myDoc" + "'";
		}
		nodeValue = newType.nodeValue;
		if (nodeValue != null) {
			return "createDocumentType03: #nodeValue 'nodeValue' equals '" + nodeValue + "' not null";
		}
		return "createDocumentType03: OK";
	} catch (e) {
		return "createDocumentType03: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var namespaceURI = "http://ecommerce.org/schema";
		var qualifiedName = "prefix:myDoc";
		var publicId = "http://www.localhost.com";
		var systemId = "myDoc.dtd";
		var doc;
		var domImpl;
		var newType = null;
		var nodeName;
		var nodeValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		domImpl = doc.implementation;
		newType = domImpl.createDocumentType(qualifiedName, publicId, systemId);
		nodeName = newType.nodeName;
		if ("prefix:myDoc" !== nodeName) {
			return "createDocumentType03: #nodeName 'nodeName' equals '" + nodeName + "' not '" + "prefix:myDoc" + "'";
		}
		nodeValue = newType.nodeValue;
		if (nodeValue != null) {
			return "createDocumentType03: #nodeValue 'nodeValue' equals '" + nodeValue + "' not null";
		}
		return "createDocumentType03: OK";
	} catch (e) {
		return "createDocumentType03: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="createDocumentType04.xml" fleur="createDocumentType04" native="createDocumentType04"><Fleur>(function(){
	var success;
	try {
		var publicId = "http://www.example.com/";
		var systemId = "myDoc.dtd";
		var qualifiedName;
		var docType = null;
		var domImpl;
		domImpl = getImplementation();
		success = false;
		try {
			docType = domImpl.createDocumentType("", publicId, systemId);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 5;
			}
		}
		if (!success) {
			return "createDocumentType04: Exception INVALID_CHARACTER_ERR expected";
		}
		return "createDocumentType04: OK";
	} catch (e) {
		return "createDocumentType04: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var publicId = "http://www.example.com/";
		var systemId = "myDoc.dtd";
		var qualifiedName;
		var docType = null;
		var domImpl;
		domImpl = getImplementation();
		success = false;
		try {
			docType = domImpl.createDocumentType("", publicId, systemId);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 5;
			}
		}
		if (!success) {
			return "createDocumentType04: Exception INVALID_CHARACTER_ERR expected";
		}
		return "createDocumentType04: OK";
	} catch (e) {
		return "createDocumentType04: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="createElementNS01.xml" fleur="createElementNS01" native="createElementNS01"><Fleur>(function(){
	var success;
	try {
		var namespaceURI = "http://www.ecommerce.org/";
		var malformedName = "prefix::local";
		var doc;
		var newElement;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		success = false;
		try {
			newElement = doc.createElementNS(namespaceURI, malformedName);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 14;
			}
		}
		if (!success) {
			return "createElementNS01: Exception NAMESPACE_ERR expected";
		}
		return "createElementNS01: OK";
	} catch (e) {
		return "createElementNS01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var namespaceURI = "http://www.ecommerce.org/";
		var malformedName = "prefix::local";
		var doc;
		var newElement;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		success = false;
		try {
			newElement = doc.createElementNS(namespaceURI, malformedName);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 14;
			}
		}
		if (!success) {
			return "createElementNS01: Exception NAMESPACE_ERR expected";
		}
		return "createElementNS01: OK";
	} catch (e) {
		return "createElementNS01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="createElementNS02.xml" fleur="createElementNS02" native="createElementNS02"><Fleur>(function(){
	var success;
	try {
		var namespaceURI = null;
		var qualifiedName = "prefix:local";
		var doc;
		var newElement;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		success = false;
		try {
			newElement = doc.createElementNS(namespaceURI, qualifiedName);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 14;
			}
		}
		if (!success) {
			return "createElementNS02: Exception NAMESPACE_ERR expected";
		}
		return "createElementNS02: OK";
	} catch (e) {
		return "createElementNS02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var namespaceURI = null;
		var qualifiedName = "prefix:local";
		var doc;
		var newElement;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		success = false;
		try {
			newElement = doc.createElementNS(namespaceURI, qualifiedName);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 14;
			}
		}
		if (!success) {
			return "createElementNS02: Exception NAMESPACE_ERR expected";
		}
		return "createElementNS02: OK";
	} catch (e) {
		return "createElementNS02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="createElementNS03.xml" fleur="createElementNS03" native="createElementNS03"><Fleur>(function(){
	var success;
	try {
		var namespaceURI = "http://www.wedding.com/";
		var qualifiedName;
		var doc;
		var done;
		var newElement;
		var charact;
		illegalQNames = new Array();
		illegalQNames[0] = "person:{";
		illegalQNames[1] = "person:}";
		illegalQNames[2] = "person:~";
		illegalQNames[3] = "person:'";
		illegalQNames[4] = "person:!";
		illegalQNames[5] = "person:@";
		illegalQNames[6] = "person:#";
		illegalQNames[7] = "person:$";
		illegalQNames[8] = "person:%";
		illegalQNames[9] = "person:^";
		illegalQNames[10] = "person:&amp;";
		illegalQNames[11] = "person:*";
		illegalQNames[12] = "person:(";
		illegalQNames[13] = "person:)";
		illegalQNames[14] = "person:+";
		illegalQNames[15] = "person:=";
		illegalQNames[16] = "person:[";
		illegalQNames[17] = "person:]";
		illegalQNames[18] = "person:\\";
		illegalQNames[19] = "person:/";
		illegalQNames[20] = "person:;";
		illegalQNames[21] = "person:`";
		illegalQNames[22] = "person:&lt;";
		illegalQNames[23] = "person:&gt;";
		illegalQNames[24] = "person:,";
		illegalQNames[25] = "person:a ";
		illegalQNames[26] = "person:\"";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		for (var index_id0x079629c0 = 0; index_id0x079629c0 &lt; illegalQNames.length; index_id0x079629c0++) {
			qualifiedName = illegalQNames[index_id0x079629c0];
			success = false;
			try {
				newElement = doc.createElementNS(namespaceURI, qualifiedName);
			} catch (ex) {
				if (typeof ex.code != 'undefined') {
					success = ex.code === 5;
				}
			}
			if (!success) {
				return "createElementNS03: Exception INVALID_CHARACTER_ERR expected";
			}
		}
		return "createElementNS03: OK";
	} catch (e) {
		return "createElementNS03: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var namespaceURI = "http://www.wedding.com/";
		var qualifiedName;
		var doc;
		var done;
		var newElement;
		var charact;
		illegalQNames = new Array();
		illegalQNames[0] = "person:{";
		illegalQNames[1] = "person:}";
		illegalQNames[2] = "person:~";
		illegalQNames[3] = "person:'";
		illegalQNames[4] = "person:!";
		illegalQNames[5] = "person:@";
		illegalQNames[6] = "person:#";
		illegalQNames[7] = "person:$";
		illegalQNames[8] = "person:%";
		illegalQNames[9] = "person:^";
		illegalQNames[10] = "person:&amp;";
		illegalQNames[11] = "person:*";
		illegalQNames[12] = "person:(";
		illegalQNames[13] = "person:)";
		illegalQNames[14] = "person:+";
		illegalQNames[15] = "person:=";
		illegalQNames[16] = "person:[";
		illegalQNames[17] = "person:]";
		illegalQNames[18] = "person:\\";
		illegalQNames[19] = "person:/";
		illegalQNames[20] = "person:;";
		illegalQNames[21] = "person:`";
		illegalQNames[22] = "person:&lt;";
		illegalQNames[23] = "person:&gt;";
		illegalQNames[24] = "person:,";
		illegalQNames[25] = "person:a ";
		illegalQNames[26] = "person:\"";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		for (var index_id0x079629c0 = 0; index_id0x079629c0 &lt; illegalQNames.length; index_id0x079629c0++) {
			qualifiedName = illegalQNames[index_id0x079629c0];
			success = false;
			try {
				newElement = doc.createElementNS(namespaceURI, qualifiedName);
			} catch (ex) {
				if (typeof ex.code != 'undefined') {
					success = ex.code === 5;
				}
			}
			if (!success) {
				return "createElementNS03: Exception INVALID_CHARACTER_ERR expected";
			}
		}
		return "createElementNS03: OK";
	} catch (e) {
		return "createElementNS03: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="createElementNS04.xml" fleur="createElementNS04" native="createElementNS04"><Fleur>(function(){
	var success;
	try {
		var namespaceURI = "http://www.w3.org/XML/1998/namespaces";
		var qualifiedName = "xml:element1";
		var doc;
		var newElement;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		success = false;
		try {
			newElement = doc.createElementNS(namespaceURI, qualifiedName);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 14;
			}
		}
		if (!success) {
			return "createElementNS04: Exception NAMESPACE_ERR expected";
		}
		return "createElementNS04: OK";
	} catch (e) {
		return "createElementNS04: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var namespaceURI = "http://www.w3.org/XML/1998/namespaces";
		var qualifiedName = "xml:element1";
		var doc;
		var newElement;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		success = false;
		try {
			newElement = doc.createElementNS(namespaceURI, qualifiedName);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 14;
			}
		}
		if (!success) {
			return "createElementNS04: Exception NAMESPACE_ERR expected";
		}
		return "createElementNS04: OK";
	} catch (e) {
		return "createElementNS04: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="createElementNS05.xml" fleur="createElementNS05" native="createElementNS05"><Fleur>(function(){
	var success;
	try {
		var namespaceURI = "http://www.nist.gov";
		var qualifiedName = "gov:faculty";
		var doc;
		var newElement;
		var elementName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		newElement = doc.createElementNS(namespaceURI, qualifiedName);
		elementName = newElement.tagName;
		if (qualifiedName !== elementName) {
			return "createElementNS05: #throw_Equals 'elementName' equals '" + elementName + "' not '" + qualifiedName + "'";
		}
		return "createElementNS05: OK";
	} catch (e) {
		return "createElementNS05: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var namespaceURI = "http://www.nist.gov";
		var qualifiedName = "gov:faculty";
		var doc;
		var newElement;
		var elementName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		newElement = doc.createElementNS(namespaceURI, qualifiedName);
		elementName = newElement.tagName;
		if (qualifiedName !== elementName) {
			return "createElementNS05: #throw_Equals 'elementName' equals '" + elementName + "' not '" + qualifiedName + "'";
		}
		return "createElementNS05: OK";
	} catch (e) {
		return "createElementNS05: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="documentcreateattributeNS01.xml" fleur="documentcreateattributeNS01" native="documentcreateattributeNS01"><Fleur>(function(){
	var success;
	try {
		var doc;
		var attribute;
		var namespaceURI = null;
		var qualifiedName = "test";
		var name;
		var nodeName;
		var nodeValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		attribute = doc.createAttributeNS(namespaceURI, qualifiedName);
		nodeName = attribute.nodeName;
		nodeValue = attribute.nodeValue;
		if ("test" !== nodeName) {
			return "documentcreateattributeNS01: #documentcreateattributeNS01 'nodeName' equals '" + nodeName + "' not '" + "test" + "'";
		}
		return "documentcreateattributeNS01: OK";
	} catch (e) {
		return "documentcreateattributeNS01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var attribute;
		var namespaceURI = null;
		var qualifiedName = "test";
		var name;
		var nodeName;
		var nodeValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		attribute = doc.createAttributeNS(namespaceURI, qualifiedName);
		nodeName = attribute.nodeName;
		nodeValue = attribute.nodeValue;
		if ("test" !== nodeName) {
			return "documentcreateattributeNS01: #documentcreateattributeNS01 'nodeName' equals '" + nodeName + "' not '" + "test" + "'";
		}
		return "documentcreateattributeNS01: OK";
	} catch (e) {
		return "documentcreateattributeNS01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="documentcreateattributeNS02.xml" fleur="documentcreateattributeNS02" native="documentcreateattributeNS02"><Fleur>(function(){
	var success;
	try {
		var doc;
		var attribute1;
		var attribute2;
		var name;
		var nodeName;
		var nodeValue;
		var prefix;
		var namespaceURI;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		attribute1 = doc.createAttributeNS("http://www.w3.org/XML/1998/namespace", "xml:xml");
		name = attribute1.name;
		nodeName = attribute1.nodeName;
		nodeValue = attribute1.nodeValue;
		prefix = attribute1.prefix;
		namespaceURI = attribute1.namespaceURI;
		if ("xml:xml" !== name) {
			return "documentcreateattributeNS02: #documentcreateattributeNS02_att1_name 'name' equals '" + name + "' not '" + "xml:xml" + "'";
		}
		if ("xml:xml" !== nodeName) {
			return "documentcreateattributeNS02: #documentcreateattributeNS02_att1_nodeName 'nodeName' equals '" + nodeName + "' not '" + "xml:xml" + "'";
		}
		if ("" !== nodeValue) {
			return "documentcreateattributeNS02: #documentcreateattributeNS02_att1_nodeValue 'nodeValue' equals '" + nodeValue + "' not '" + "" + "'";
		}
		if ("xml" !== prefix) {
			return "documentcreateattributeNS02: #documentcreateattributeNS02_att1_prefix 'prefix' equals '" + prefix + "' not '" + "xml" + "'";
		}
		if ("http://www.w3.org/XML/1998/namespace" !== namespaceURI) {
			return "documentcreateattributeNS02: #documentcreateattributeNS02_att1_namespaceURI 'namespaceURI' equals '" + namespaceURI + "' not '" + "http://www.w3.org/XML/1998/namespace" + "'";
		}
		attribute2 = doc.createAttributeNS("http://www.w3.org/2000/xmlns/", "xmlns");
		name = attribute2.name;
		nodeName = attribute2.nodeName;
		nodeValue = attribute2.nodeValue;
		prefix = attribute2.prefix;
		namespaceURI = attribute2.namespaceURI;
		if ("xmlns" !== name) {
			return "documentcreateattributeNS02: #documentcreateattributeNS02_att2_name 'name' equals '" + name + "' not '" + "xmlns" + "'";
		}
		if ("xmlns" !== nodeName) {
			return "documentcreateattributeNS02: #documentcreateattributeNS02_att2_nodeName 'nodeName' equals '" + nodeName + "' not '" + "xmlns" + "'";
		}
		if ("" !== nodeValue) {
			return "documentcreateattributeNS02: #documentcreateattributeNS02_att2_nodeValue 'nodeValue' equals '" + nodeValue + "' not '" + "" + "'";
		}
		if ("http://www.w3.org/2000/xmlns/" !== namespaceURI) {
			return "documentcreateattributeNS02: #documentcreateattributeNS02_att2_namespaceURI 'namespaceURI' equals '" + namespaceURI + "' not '" + "http://www.w3.org/2000/xmlns/" + "'";
		}
		return "documentcreateattributeNS02: OK";
	} catch (e) {
		return "documentcreateattributeNS02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var attribute1;
		var attribute2;
		var name;
		var nodeName;
		var nodeValue;
		var prefix;
		var namespaceURI;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		attribute1 = doc.createAttributeNS("http://www.w3.org/XML/1998/namespace", "xml:xml");
		name = attribute1.name;
		nodeName = attribute1.nodeName;
		nodeValue = attribute1.nodeValue;
		prefix = attribute1.prefix;
		namespaceURI = attribute1.namespaceURI;
		if ("xml:xml" !== name) {
			return "documentcreateattributeNS02: #documentcreateattributeNS02_att1_name 'name' equals '" + name + "' not '" + "xml:xml" + "'";
		}
		if ("xml:xml" !== nodeName) {
			return "documentcreateattributeNS02: #documentcreateattributeNS02_att1_nodeName 'nodeName' equals '" + nodeName + "' not '" + "xml:xml" + "'";
		}
		if ("" !== nodeValue) {
			return "documentcreateattributeNS02: #documentcreateattributeNS02_att1_nodeValue 'nodeValue' equals '" + nodeValue + "' not '" + "" + "'";
		}
		if ("xml" !== prefix) {
			return "documentcreateattributeNS02: #documentcreateattributeNS02_att1_prefix 'prefix' equals '" + prefix + "' not '" + "xml" + "'";
		}
		if ("http://www.w3.org/XML/1998/namespace" !== namespaceURI) {
			return "documentcreateattributeNS02: #documentcreateattributeNS02_att1_namespaceURI 'namespaceURI' equals '" + namespaceURI + "' not '" + "http://www.w3.org/XML/1998/namespace" + "'";
		}
		attribute2 = doc.createAttributeNS("http://www.w3.org/2000/xmlns/", "xmlns");
		name = attribute2.name;
		nodeName = attribute2.nodeName;
		nodeValue = attribute2.nodeValue;
		prefix = attribute2.prefix;
		namespaceURI = attribute2.namespaceURI;
		if ("xmlns" !== name) {
			return "documentcreateattributeNS02: #documentcreateattributeNS02_att2_name 'name' equals '" + name + "' not '" + "xmlns" + "'";
		}
		if ("xmlns" !== nodeName) {
			return "documentcreateattributeNS02: #documentcreateattributeNS02_att2_nodeName 'nodeName' equals '" + nodeName + "' not '" + "xmlns" + "'";
		}
		if ("" !== nodeValue) {
			return "documentcreateattributeNS02: #documentcreateattributeNS02_att2_nodeValue 'nodeValue' equals '" + nodeValue + "' not '" + "" + "'";
		}
		if ("http://www.w3.org/2000/xmlns/" !== namespaceURI) {
			return "documentcreateattributeNS02: #documentcreateattributeNS02_att2_namespaceURI 'namespaceURI' equals '" + namespaceURI + "' not '" + "http://www.w3.org/2000/xmlns/" + "'";
		}
		return "documentcreateattributeNS02: OK";
	} catch (e) {
		return "documentcreateattributeNS02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="documentcreateattributeNS03.xml" fleur="documentcreateattributeNS03" native="documentcreateattributeNS03"><Fleur>(function(){
	var success;
	try {
		var doc;
		var attribute;
		var namespaceURI = "http://www.w3.org/DOM/Test/Level2";
		var qualifiedName;
		qualifiedNames = new Array();
		qualifiedNames[0] = "/";
		qualifiedNames[1] = "//";
		qualifiedNames[2] = "\\";
		qualifiedNames[3] = ";";
		qualifiedNames[4] = "&amp;";
		qualifiedNames[5] = "*";
		qualifiedNames[6] = "]]";
		qualifiedNames[7] = "&gt;";
		qualifiedNames[8] = "&lt;";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		for (var index_id0x07a76790 = 0; index_id0x07a76790 &lt; qualifiedNames.length; index_id0x07a76790++) {
			qualifiedName = qualifiedNames[index_id0x07a76790];
			success = false;
			try {
				attribute = doc.createAttributeNS(namespaceURI, qualifiedName);
			} catch (ex) {
				if (typeof ex.code != 'undefined') {
					success = ex.code === 5;
				}
			}
			if (!success) {
				return "documentcreateattributeNS03: Exception INVALID_CHARACTER_ERR expected";
			}
		}
		return "documentcreateattributeNS03: OK";
	} catch (e) {
		return "documentcreateattributeNS03: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var attribute;
		var namespaceURI = "http://www.w3.org/DOM/Test/Level2";
		var qualifiedName;
		qualifiedNames = new Array();
		qualifiedNames[0] = "/";
		qualifiedNames[1] = "//";
		qualifiedNames[2] = "\\";
		qualifiedNames[3] = ";";
		qualifiedNames[4] = "&amp;";
		qualifiedNames[5] = "*";
		qualifiedNames[6] = "]]";
		qualifiedNames[7] = "&gt;";
		qualifiedNames[8] = "&lt;";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		for (var index_id0x07a76790 = 0; index_id0x07a76790 &lt; qualifiedNames.length; index_id0x07a76790++) {
			qualifiedName = qualifiedNames[index_id0x07a76790];
			success = false;
			try {
				attribute = doc.createAttributeNS(namespaceURI, qualifiedName);
			} catch (ex) {
				if (typeof ex.code != 'undefined') {
					success = ex.code === 5;
				}
			}
			if (!success) {
				return "documentcreateattributeNS03: Exception INVALID_CHARACTER_ERR expected";
			}
		}
		return "documentcreateattributeNS03: OK";
	} catch (e) {
		return "documentcreateattributeNS03: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="documentcreateattributeNS04.xml" fleur="documentcreateattributeNS04" native="documentcreateattributeNS04"><Fleur>(function(){
	var success;
	try {
		var doc;
		var attribute;
		var namespaceURI = "http://www.w3.org/DOM/Test/Level2";
		var qualifiedName;
		qualifiedNames = new Array();
		qualifiedNames[0] = "_:";
		qualifiedNames[1] = ":0a";
		qualifiedNames[2] = ":";
		qualifiedNames[3] = "a:b:c";
		qualifiedNames[4] = "_::a";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		for (var index_id0x07a91ce0 = 0; index_id0x07a91ce0 &lt; qualifiedNames.length; index_id0x07a91ce0++) {
			qualifiedName = qualifiedNames[index_id0x07a91ce0];
			success = false;
			try {
				attribute = doc.createAttributeNS(namespaceURI, qualifiedName);
			} catch (ex) {
				if (typeof ex.code != 'undefined') {
					success = ex.code === 14;
				}
			}
			if (!success) {
				return "documentcreateattributeNS04: Exception NAMESPACE_ERR expected";
			}
		}
		return "documentcreateattributeNS04: OK";
	} catch (e) {
		return "documentcreateattributeNS04: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var attribute;
		var namespaceURI = "http://www.w3.org/DOM/Test/Level2";
		var qualifiedName;
		qualifiedNames = new Array();
		qualifiedNames[0] = "_:";
		qualifiedNames[1] = ":0a";
		qualifiedNames[2] = ":";
		qualifiedNames[3] = "a:b:c";
		qualifiedNames[4] = "_::a";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		for (var index_id0x07a91ce0 = 0; index_id0x07a91ce0 &lt; qualifiedNames.length; index_id0x07a91ce0++) {
			qualifiedName = qualifiedNames[index_id0x07a91ce0];
			success = false;
			try {
				attribute = doc.createAttributeNS(namespaceURI, qualifiedName);
			} catch (ex) {
				if (typeof ex.code != 'undefined') {
					success = ex.code === 14;
				}
			}
			if (!success) {
				return "documentcreateattributeNS04: Exception NAMESPACE_ERR expected";
			}
		}
		return "documentcreateattributeNS04: OK";
	} catch (e) {
		return "documentcreateattributeNS04: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="documentcreateattributeNS05.xml" fleur="documentcreateattributeNS05" native="documentcreateattributeNS05"><Fleur>(function(){
	var success;
	try {
		var doc;
		var newDoc;
		var docType = null;
		var domImpl;
		var attribute;
		var namespaceURI = null;
		var qualifiedName = "abc:def";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		domImpl = doc.implementation;
		newDoc = domImpl.createDocument("http://www.w3.org/DOM/Test", "dom:doc", docType);
		success = false;
		try {
			attribute = newDoc.createAttributeNS(namespaceURI, qualifiedName);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 14;
			}
		}
		if (!success) {
			return "documentcreateattributeNS05: Exception NAMESPACE_ERR expected";
		}
		return "documentcreateattributeNS05: OK";
	} catch (e) {
		return "documentcreateattributeNS05: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var newDoc;
		var docType = null;
		var domImpl;
		var attribute;
		var namespaceURI = null;
		var qualifiedName = "abc:def";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		domImpl = doc.implementation;
		newDoc = domImpl.createDocument("http://www.w3.org/DOM/Test", "dom:doc", docType);
		success = false;
		try {
			attribute = newDoc.createAttributeNS(namespaceURI, qualifiedName);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 14;
			}
		}
		if (!success) {
			return "documentcreateattributeNS05: Exception NAMESPACE_ERR expected";
		}
		return "documentcreateattributeNS05: OK";
	} catch (e) {
		return "documentcreateattributeNS05: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="documentcreateattributeNS06.xml" fleur="documentcreateattributeNS06" native="documentcreateattributeNS06"><Fleur>(function(){
	var success;
	try {
		var doc;
		var newDoc;
		var docType = null;
		var domImpl;
		var attribute;
		var namespaceURI = "http://www.w3.org/XML/1998 /namespace";
		var qualifiedName = "xml:root";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		domImpl = doc.implementation;
		newDoc = domImpl.createDocument("http://www.w3.org/DOM/Test", "dom:doc", docType);
		success = false;
		try {
			attribute = newDoc.createAttributeNS(namespaceURI, qualifiedName);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 14;
			}
		}
		if (!success) {
			return "documentcreateattributeNS06: Exception NAMESPACE_ERR expected";
		}
		return "documentcreateattributeNS06: OK";
	} catch (e) {
		return "documentcreateattributeNS06: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var newDoc;
		var docType = null;
		var domImpl;
		var attribute;
		var namespaceURI = "http://www.w3.org/XML/1998 /namespace";
		var qualifiedName = "xml:root";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		domImpl = doc.implementation;
		newDoc = domImpl.createDocument("http://www.w3.org/DOM/Test", "dom:doc", docType);
		success = false;
		try {
			attribute = newDoc.createAttributeNS(namespaceURI, qualifiedName);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 14;
			}
		}
		if (!success) {
			return "documentcreateattributeNS06: Exception NAMESPACE_ERR expected";
		}
		return "documentcreateattributeNS06: OK";
	} catch (e) {
		return "documentcreateattributeNS06: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="documentcreateattributeNS07.xml" fleur="documentcreateattributeNS07" native="documentcreateattributeNS07"><Fleur>(function(){
	var success;
	try {
		var doc;
		var attribute;
		var namespaceURI = "http://www.W3.org/2000/xmlns";
		var qualifiedName = "xmlns";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		success = false;
		try {
			attribute = doc.createAttributeNS(namespaceURI, qualifiedName);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 14;
			}
		}
		if (!success) {
			return "documentcreateattributeNS07: Exception NAMESPACE_ERR expected";
		}
		return "documentcreateattributeNS07: OK";
	} catch (e) {
		return "documentcreateattributeNS07: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var attribute;
		var namespaceURI = "http://www.W3.org/2000/xmlns";
		var qualifiedName = "xmlns";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		success = false;
		try {
			attribute = doc.createAttributeNS(namespaceURI, qualifiedName);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 14;
			}
		}
		if (!success) {
			return "documentcreateattributeNS07: Exception NAMESPACE_ERR expected";
		}
		return "documentcreateattributeNS07: OK";
	} catch (e) {
		return "documentcreateattributeNS07: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="documentcreateelementNS01.xml" fleur="documentcreateelementNS01" native="documentcreateelementNS01"><Fleur>(function(){
	var success;
	try {
		var doc;
		var element;
		var namespaceURI = "http://www.w3.org/DOM/Test/level2";
		var qualifiedName = "XML:XML";
		var nodeName;
		var nsURI;
		var localName;
		var prefix;
		var tagName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		element = doc.createElementNS(namespaceURI, qualifiedName);
		nodeName = element.nodeName;
		nsURI = element.namespaceURI;
		localName = element.localName;
		prefix = element.prefix;
		tagName = element.tagName;
		if ("XML:XML" !== nodeName) {
			return "documentcreateelementNS01: #documentcreateelementNS01_nodeName 'nodeName' equals '" + nodeName + "' not '" + "XML:XML" + "'";
		}
		if ("http://www.w3.org/DOM/Test/level2" !== nsURI) {
			return "documentcreateelementNS01: #documentcreateelementNS01_namespaceURI 'nsURI' equals '" + nsURI + "' not '" + "http://www.w3.org/DOM/Test/level2" + "'";
		}
		if ("XML" !== localName) {
			return "documentcreateelementNS01: #documentcreateelementNS01_localName 'localName' equals '" + localName + "' not '" + "XML" + "'";
		}
		if ("XML" !== prefix) {
			return "documentcreateelementNS01: #documentcreateelementNS01_prefix 'prefix' equals '" + prefix + "' not '" + "XML" + "'";
		}
		if ("XML:XML" !== tagName) {
			return "documentcreateelementNS01: #documentcreateelementNS01_tagName 'tagName' equals '" + tagName + "' not '" + "XML:XML" + "'";
		}
		return "documentcreateelementNS01: OK";
	} catch (e) {
		return "documentcreateelementNS01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var element;
		var namespaceURI = "http://www.w3.org/DOM/Test/level2";
		var qualifiedName = "XML:XML";
		var nodeName;
		var nsURI;
		var localName;
		var prefix;
		var tagName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		element = doc.createElementNS(namespaceURI, qualifiedName);
		nodeName = element.nodeName;
		nsURI = element.namespaceURI;
		localName = element.localName;
		prefix = element.prefix;
		tagName = element.tagName;
		if ("XML:XML" !== nodeName) {
			return "documentcreateelementNS01: #documentcreateelementNS01_nodeName 'nodeName' equals '" + nodeName + "' not '" + "XML:XML" + "'";
		}
		if ("http://www.w3.org/DOM/Test/level2" !== nsURI) {
			return "documentcreateelementNS01: #documentcreateelementNS01_namespaceURI 'nsURI' equals '" + nsURI + "' not '" + "http://www.w3.org/DOM/Test/level2" + "'";
		}
		if ("XML" !== localName) {
			return "documentcreateelementNS01: #documentcreateelementNS01_localName 'localName' equals '" + localName + "' not '" + "XML" + "'";
		}
		if ("XML" !== prefix) {
			return "documentcreateelementNS01: #documentcreateelementNS01_prefix 'prefix' equals '" + prefix + "' not '" + "XML" + "'";
		}
		if ("XML:XML" !== tagName) {
			return "documentcreateelementNS01: #documentcreateelementNS01_tagName 'tagName' equals '" + tagName + "' not '" + "XML:XML" + "'";
		}
		return "documentcreateelementNS01: OK";
	} catch (e) {
		return "documentcreateelementNS01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="documentcreateelementNS02.xml" fleur="documentcreateelementNS02" native="documentcreateelementNS02"><Fleur>(function(){
	var success;
	try {
		var doc;
		var element;
		var namespaceURI = null;
		var qualifiedName = "^^";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		success = false;
		try {
			element = doc.createElementNS(namespaceURI, qualifiedName);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 5;
			}
		}
		if (!success) {
			return "documentcreateelementNS02: Exception INVALID_CHARACTER_ERR expected";
		}
		return "documentcreateelementNS02: OK";
	} catch (e) {
		return "documentcreateelementNS02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var element;
		var namespaceURI = null;
		var qualifiedName = "^^";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		success = false;
		try {
			element = doc.createElementNS(namespaceURI, qualifiedName);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 5;
			}
		}
		if (!success) {
			return "documentcreateelementNS02: Exception INVALID_CHARACTER_ERR expected";
		}
		return "documentcreateelementNS02: OK";
	} catch (e) {
		return "documentcreateelementNS02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="documentcreateelementNS05.xml" fleur="documentcreateelementNS05" native="documentcreateelementNS05"><Fleur>(function(){
	var success;
	try {
		var doc;
		var element;
		var namespaceURI = null;
		var qualifiedName = "null:xml";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		success = false;
		try {
			element = doc.createElementNS(namespaceURI, qualifiedName);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 14;
			}
		}
		if (!success) {
			return "documentcreateelementNS05: Exception NAMESPACE_ERR expected";
		}
		return "documentcreateelementNS05: OK";
	} catch (e) {
		return "documentcreateelementNS05: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var element;
		var namespaceURI = null;
		var qualifiedName = "null:xml";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		success = false;
		try {
			element = doc.createElementNS(namespaceURI, qualifiedName);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 14;
			}
		}
		if (!success) {
			return "documentcreateelementNS05: Exception NAMESPACE_ERR expected";
		}
		return "documentcreateelementNS05: OK";
	} catch (e) {
		return "documentcreateelementNS05: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="documentcreateelementNS06.xml" fleur="documentcreateelementNS06" native="documentcreateelementNS06"><Fleur>(function(){
	var success;
	try {
		var doc;
		var newDoc;
		var docType = null;
		var domImpl;
		var element;
		var namespaceURI = "http://www.w3.org/xml/1998/namespace ";
		var qualifiedName = "xml:root";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		domImpl = doc.implementation;
		newDoc = domImpl.createDocument("http://www.w3.org/DOM/Test", "dom:doc", docType);
		success = false;
		try {
			element = newDoc.createElementNS(namespaceURI, qualifiedName);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 14;
			}
		}
		if (!success) {
			return "documentcreateelementNS06: Exception NAMESPACE_ERR expected";
		}
		return "documentcreateelementNS06: OK";
	} catch (e) {
		return "documentcreateelementNS06: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var newDoc;
		var docType = null;
		var domImpl;
		var element;
		var namespaceURI = "http://www.w3.org/xml/1998/namespace ";
		var qualifiedName = "xml:root";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		domImpl = doc.implementation;
		newDoc = domImpl.createDocument("http://www.w3.org/DOM/Test", "dom:doc", docType);
		success = false;
		try {
			element = newDoc.createElementNS(namespaceURI, qualifiedName);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 14;
			}
		}
		if (!success) {
			return "documentcreateelementNS06: Exception NAMESPACE_ERR expected";
		}
		return "documentcreateelementNS06: OK";
	} catch (e) {
		return "documentcreateelementNS06: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="documentgetelementbyid01.xml" fleur="documentgetelementbyid01" native="documentgetelementbyid01"><Fleur>(function(){
	var success;
	try {
		var doc;
		var element;
		var elementId = "---";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		element = doc.getElementById(elementId);
		if (element != null) {
			return "documentgetelementbyid01: #documentgetelementbyid01 'element' equals '" + element + "' not null";
		}
		return "documentgetelementbyid01: OK";
	} catch (e) {
		return "documentgetelementbyid01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var element;
		var elementId = "---";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		element = doc.getElementById(elementId);
		if (element != null) {
			return "documentgetelementbyid01: #documentgetelementbyid01 'element' equals '" + element + "' not null";
		}
		return "documentgetelementbyid01: OK";
	} catch (e) {
		return "documentgetelementbyid01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="documentgetelementsbytagnameNS01.xml" fleur="documentgetelementsbytagnameNS01" native="documentgetelementsbytagnameNS01"><Fleur>(function(){
	var success;
	try {
		var doc;
		var newDoc;
		var docType = null;
		var domImpl;
		var childList;
		var nullNS = null;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		domImpl = doc.implementation;
		newDoc = domImpl.createDocument(nullNS, "root", docType);
		childList = newDoc.getElementsByTagNameNS("*", "*");
		if (childList.length !== 1) {
			return "documentgetelementsbytagnameNS01: #documentgetelementsbytagnameNS01 'childList.length' equals " + childList.length + " not 1";
		}
		return "documentgetelementsbytagnameNS01: OK";
	} catch (e) {
		return "documentgetelementsbytagnameNS01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var newDoc;
		var docType = null;
		var domImpl;
		var childList;
		var nullNS = null;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		domImpl = doc.implementation;
		newDoc = domImpl.createDocument(nullNS, "root", docType);
		childList = newDoc.getElementsByTagNameNS("*", "*");
		if (childList.length !== 1) {
			return "documentgetelementsbytagnameNS01: #documentgetelementsbytagnameNS01 'childList.length' equals " + childList.length + " not 1";
		}
		return "documentgetelementsbytagnameNS01: OK";
	} catch (e) {
		return "documentgetelementsbytagnameNS01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="documentgetelementsbytagnameNS02.xml" fleur="documentgetelementsbytagnameNS02" native="documentgetelementsbytagnameNS02"><Fleur>(function(){
	var success;
	try {
		var doc;
		var docElem;
		var element;
		var childList;
		var appendedChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		docElem = doc.documentElement;
		element = doc.createElementNS("test", "employeeId");
		appendedChild = docElem.appendChild(element);
		childList = doc.getElementsByTagNameNS("*", "employeeId");
		if (childList.length !== 6) {
			return "documentgetelementsbytagnameNS02: #documentgetelementsbytagnameNS02 'childList.length' equals " + childList.length + " not 6";
		}
		return "documentgetelementsbytagnameNS02: OK";
	} catch (e) {
		return "documentgetelementsbytagnameNS02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var docElem;
		var element;
		var childList;
		var appendedChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		docElem = doc.documentElement;
		element = doc.createElementNS("test", "employeeId");
		appendedChild = docElem.appendChild(element);
		childList = doc.getElementsByTagNameNS("*", "employeeId");
		if (childList.length !== 6) {
			return "documentgetelementsbytagnameNS02: #documentgetelementsbytagnameNS02 'childList.length' equals " + childList.length + " not 6";
		}
		return "documentgetelementsbytagnameNS02: OK";
	} catch (e) {
		return "documentgetelementsbytagnameNS02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="documentgetelementsbytagnameNS03.xml" fleur="documentgetelementsbytagnameNS03" native="documentgetelementsbytagnameNS03"><Fleur>(function(){
	var success;
	try {
		var doc;
		var childList;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		childList = doc.getElementsByTagNameNS("**", "*");
		if (childList.length !== 0) {
			return "documentgetelementsbytagnameNS03: #documentgetelementsbytagnameNS03 'childList.length' equals " + childList.length + " not 0";
		}
		return "documentgetelementsbytagnameNS03: OK";
	} catch (e) {
		return "documentgetelementsbytagnameNS03: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var childList;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		childList = doc.getElementsByTagNameNS("**", "*");
		if (childList.length !== 0) {
			return "documentgetelementsbytagnameNS03: #documentgetelementsbytagnameNS03 'childList.length' equals " + childList.length + " not 0";
		}
		return "documentgetelementsbytagnameNS03: OK";
	} catch (e) {
		return "documentgetelementsbytagnameNS03: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="documentgetelementsbytagnameNS04.xml" fleur="documentgetelementsbytagnameNS04" native="documentgetelementsbytagnameNS04"><Fleur>(function(){
	var success;
	try {
		var doc;
		var childList;
		var nullNS = null;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		childList = doc.getElementsByTagNameNS(nullNS, "0");
		if (childList.length !== 0) {
			return "documentgetelementsbytagnameNS04: #documentgetelementsbytagnameNS04 'childList.length' equals " + childList.length + " not 0";
		}
		return "documentgetelementsbytagnameNS04: OK";
	} catch (e) {
		return "documentgetelementsbytagnameNS04: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var childList;
		var nullNS = null;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		childList = doc.getElementsByTagNameNS(nullNS, "0");
		if (childList.length !== 0) {
			return "documentgetelementsbytagnameNS04: #documentgetelementsbytagnameNS04 'childList.length' equals " + childList.length + " not 0";
		}
		return "documentgetelementsbytagnameNS04: OK";
	} catch (e) {
		return "documentgetelementsbytagnameNS04: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="documentgetelementsbytagnameNS05.xml" fleur="documentgetelementsbytagnameNS05" native="documentgetelementsbytagnameNS05"><Fleur>(function(){
	var success;
	try {
		var doc;
		var childList;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		childList = doc.getElementsByTagNameNS("null", "elementId");
		if (childList.length !== 0) {
			return "documentgetelementsbytagnameNS05: #documentgetelementsbytagnameNS05 'childList.length' equals " + childList.length + " not 0";
		}
		return "documentgetelementsbytagnameNS05: OK";
	} catch (e) {
		return "documentgetelementsbytagnameNS05: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var childList;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		childList = doc.getElementsByTagNameNS("null", "elementId");
		if (childList.length !== 0) {
			return "documentgetelementsbytagnameNS05: #documentgetelementsbytagnameNS05 'childList.length' equals " + childList.length + " not 0";
		}
		return "documentgetelementsbytagnameNS05: OK";
	} catch (e) {
		return "documentgetelementsbytagnameNS05: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="documentimportnode01.xml" fleur="documentimportnode01" native="documentimportnode01"><Fleur>(function(){
	var success;
	try {
		var doc;
		var element;
		var attr;
		var childList;
		var importedAttr;
		var nodeName;
		var nodeType;
		var nodeValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		childList = doc.getElementsByTagNameNS("http://www.nist.gov", "address");
		element = childList.item(1);
		attr = element.getAttributeNode("street");
		importedAttr = doc.importNode(attr, false);
		nodeName = importedAttr.nodeName;
		nodeValue = importedAttr.nodeValue;
		nodeType = importedAttr.nodeType;
		if ("street" !== nodeName) {
			return "documentimportnode01: #documentimportnode01_nodeName 'nodeName' equals '" + nodeName + "' not '" + "street" + "'";
		}
		if (2 !== nodeType) {
			return "documentimportnode01: #documentimportnode01_nodeType 'nodeType' equals '" + nodeType + "' not '" + 2 + "'";
		}
		if ("Yes" !== nodeValue) {
			return "documentimportnode01: #documentimportnode01_nodeValue 'nodeValue' equals '" + nodeValue + "' not '" + "Yes" + "'";
		}
		return "documentimportnode01: OK";
	} catch (e) {
		return "documentimportnode01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var element;
		var attr;
		var childList;
		var importedAttr;
		var nodeName;
		var nodeType;
		var nodeValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		childList = doc.getElementsByTagNameNS("http://www.nist.gov", "address");
		element = childList.item(1);
		attr = element.getAttributeNode("street");
		importedAttr = doc.importNode(attr, false);
		nodeName = importedAttr.nodeName;
		nodeValue = importedAttr.nodeValue;
		nodeType = importedAttr.nodeType;
		if ("street" !== nodeName) {
			return "documentimportnode01: #documentimportnode01_nodeName 'nodeName' equals '" + nodeName + "' not '" + "street" + "'";
		}
		if (2 !== nodeType) {
			return "documentimportnode01: #documentimportnode01_nodeType 'nodeType' equals '" + nodeType + "' not '" + 2 + "'";
		}
		if ("Yes" !== nodeValue) {
			return "documentimportnode01: #documentimportnode01_nodeValue 'nodeValue' equals '" + nodeValue + "' not '" + "Yes" + "'";
		}
		return "documentimportnode01: OK";
	} catch (e) {
		return "documentimportnode01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="documentimportnode02.xml" fleur="documentimportnode02" native="documentimportnode02"><Fleur>(function(){
	var success;
	try {
		var doc;
		var docImported;
		var element;
		var attr;
		var importedAttr;
		var nodeName;
		var nodeType;
		var nodeValue;
		var addresses;
		var attrsParent;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		var docImportedReq = new XMLHttpRequest();
		docImportedReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docImportedReq.send();
		docImported = new Fleur.DOMParser().parseFromString(docImportedReq.responseText, "text/xml");
		addresses = doc.getElementsByTagNameNS("http://www.nist.gov", "address");
		element = addresses.item(1);
		attr = element.getAttributeNodeNS("http://www.nist.gov", "zone");
		importedAttr = docImported.importNode(attr, false);
		nodeName = importedAttr.nodeName;
		nodeType = importedAttr.nodeType;
		nodeValue = importedAttr.nodeValue;
		attrsParent = importedAttr.parentNode;
		if (attrsParent != null) {
			return "documentimportnode02: #documentimportnode02_parentNull 'attrsParent' equals '" + attrsParent + "' not null";
		}
		if ("emp:zone" !== nodeName) {
			return "documentimportnode02: #documentimportnode02_nodeName 'nodeName' equals '" + nodeName + "' not '" + "emp:zone" + "'";
		}
		if (2 !== nodeType) {
			return "documentimportnode02: #documentimportnode02_nodeType 'nodeType' equals '" + nodeType + "' not '" + 2 + "'";
		}
		if ("CANADA" !== nodeValue) {
			return "documentimportnode02: #documentimportnode02_nodeValue 'nodeValue' equals '" + nodeValue + "' not '" + "CANADA" + "'";
		}
		return "documentimportnode02: OK";
	} catch (e) {
		return "documentimportnode02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var docImported;
		var element;
		var attr;
		var importedAttr;
		var nodeName;
		var nodeType;
		var nodeValue;
		var addresses;
		var attrsParent;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		var docImportedReq = new XMLHttpRequest();
		docImportedReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docImportedReq.send();
		docImported = new DOMParser().parseFromString(docImportedReq.responseText, "text/xml");
		addresses = doc.getElementsByTagNameNS("http://www.nist.gov", "address");
		element = addresses.item(1);
		attr = element.getAttributeNodeNS("http://www.nist.gov", "zone");
		importedAttr = docImported.importNode(attr, false);
		nodeName = importedAttr.nodeName;
		nodeType = importedAttr.nodeType;
		nodeValue = importedAttr.nodeValue;
		attrsParent = importedAttr.parentNode;
		if (attrsParent != null) {
			return "documentimportnode02: #documentimportnode02_parentNull 'attrsParent' equals '" + attrsParent + "' not null";
		}
		if ("emp:zone" !== nodeName) {
			return "documentimportnode02: #documentimportnode02_nodeName 'nodeName' equals '" + nodeName + "' not '" + "emp:zone" + "'";
		}
		if (2 !== nodeType) {
			return "documentimportnode02: #documentimportnode02_nodeType 'nodeType' equals '" + nodeType + "' not '" + 2 + "'";
		}
		if ("CANADA" !== nodeValue) {
			return "documentimportnode02: #documentimportnode02_nodeValue 'nodeValue' equals '" + nodeValue + "' not '" + "CANADA" + "'";
		}
		return "documentimportnode02: OK";
	} catch (e) {
		return "documentimportnode02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="documentimportnode03.xml" fleur="documentimportnode03" native="documentimportnode03"><Fleur>(function(){
	var success;
	try {
		var doc;
		var element;
		var attr;
		var childList;
		var importedAttr;
		var nodeName;
		var nodeType;
		var nodeValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		childList = doc.getElementsByTagNameNS("http://www.nist.gov", "employee");
		element = childList.item(1);
		attr = element.getAttributeNode("defaultAttr");
		importedAttr = doc.importNode(attr, false);
		nodeName = importedAttr.nodeName;
		nodeValue = importedAttr.nodeValue;
		nodeType = importedAttr.nodeType;
		if ("defaultAttr" !== nodeName) {
			return "documentimportnode03: #documentimportnode03_nodeName 'nodeName' equals '" + nodeName + "' not '" + "defaultAttr" + "'";
		}
		if (2 !== nodeType) {
			return "documentimportnode03: #documentimportnode03_nodeType 'nodeType' equals '" + nodeType + "' not '" + 2 + "'";
		}
		if ("defaultVal" !== nodeValue) {
			return "documentimportnode03: #documentimportnode03_nodeValue 'nodeValue' equals '" + nodeValue + "' not '" + "defaultVal" + "'";
		}
		return "documentimportnode03: OK";
	} catch (e) {
		return "documentimportnode03: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var element;
		var attr;
		var childList;
		var importedAttr;
		var nodeName;
		var nodeType;
		var nodeValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		childList = doc.getElementsByTagNameNS("http://www.nist.gov", "employee");
		element = childList.item(1);
		attr = element.getAttributeNode("defaultAttr");
		importedAttr = doc.importNode(attr, false);
		nodeName = importedAttr.nodeName;
		nodeValue = importedAttr.nodeValue;
		nodeType = importedAttr.nodeType;
		if ("defaultAttr" !== nodeName) {
			return "documentimportnode03: #documentimportnode03_nodeName 'nodeName' equals '" + nodeName + "' not '" + "defaultAttr" + "'";
		}
		if (2 !== nodeType) {
			return "documentimportnode03: #documentimportnode03_nodeType 'nodeType' equals '" + nodeType + "' not '" + 2 + "'";
		}
		if ("defaultVal" !== nodeValue) {
			return "documentimportnode03: #documentimportnode03_nodeValue 'nodeValue' equals '" + nodeValue + "' not '" + "defaultVal" + "'";
		}
		return "documentimportnode03: OK";
	} catch (e) {
		return "documentimportnode03: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="documentimportnode04.xml" fleur="documentimportnode04" native="documentimportnode04"><Fleur>(function(){
	var success;
	try {
		var doc;
		var newDoc;
		var docType = null;
		var domImpl;
		var element;
		var attr;
		var childList;
		var importedAttr;
		var nodeName;
		var nodeType;
		var nodeValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		domImpl = doc.implementation;
		newDoc = domImpl.createDocument("http://www.w3.org/DOM/Test", "l2:root", docType);
		childList = doc.getElementsByTagNameNS("http://www.nist.gov", "employee");
		element = childList.item(1);
		attr = element.getAttributeNode("defaultAttr");
		importedAttr = newDoc.importNode(attr, true);
		nodeName = importedAttr.nodeName;
		nodeValue = importedAttr.nodeValue;
		nodeType = importedAttr.nodeType;
		if ("defaultAttr" !== nodeName) {
			return "documentimportnode04: #documentimportnode04_nodeName 'nodeName' equals '" + nodeName + "' not '" + "defaultAttr" + "'";
		}
		if (2 !== nodeType) {
			return "documentimportnode04: #documentimportnode04_nodeType 'nodeType' equals '" + nodeType + "' not '" + 2 + "'";
		}
		if ("defaultVal" !== nodeValue) {
			return "documentimportnode04: #documentimportnode04_nodeValue 'nodeValue' equals '" + nodeValue + "' not '" + "defaultVal" + "'";
		}
		return "documentimportnode04: OK";
	} catch (e) {
		return "documentimportnode04: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var newDoc;
		var docType = null;
		var domImpl;
		var element;
		var attr;
		var childList;
		var importedAttr;
		var nodeName;
		var nodeType;
		var nodeValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		domImpl = doc.implementation;
		newDoc = domImpl.createDocument("http://www.w3.org/DOM/Test", "l2:root", docType);
		childList = doc.getElementsByTagNameNS("http://www.nist.gov", "employee");
		element = childList.item(1);
		attr = element.getAttributeNode("defaultAttr");
		importedAttr = newDoc.importNode(attr, true);
		nodeName = importedAttr.nodeName;
		nodeValue = importedAttr.nodeValue;
		nodeType = importedAttr.nodeType;
		if ("defaultAttr" !== nodeName) {
			return "documentimportnode04: #documentimportnode04_nodeName 'nodeName' equals '" + nodeName + "' not '" + "defaultAttr" + "'";
		}
		if (2 !== nodeType) {
			return "documentimportnode04: #documentimportnode04_nodeType 'nodeType' equals '" + nodeType + "' not '" + 2 + "'";
		}
		if ("defaultVal" !== nodeValue) {
			return "documentimportnode04: #documentimportnode04_nodeValue 'nodeValue' equals '" + nodeValue + "' not '" + "defaultVal" + "'";
		}
		return "documentimportnode04: OK";
	} catch (e) {
		return "documentimportnode04: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="documentimportnode05.xml" fleur="documentimportnode05" native="documentimportnode05"><Fleur>(function(){
	var success;
	try {
		var doc;
		var docImported;
		var attr;
		var importedAttr;
		var nodeName;
		var nodeType;
		var nodeValue;
		var namespaceURI;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		var docImportedReq = new XMLHttpRequest();
		docImportedReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docImportedReq.send();
		docImported = new Fleur.DOMParser().parseFromString(docImportedReq.responseText, "text/xml");
		attr = doc.createAttributeNS("http://www.w3.org/DOM/Test", "a_:b0");
		importedAttr = docImported.importNode(attr, false);
		nodeName = importedAttr.nodeName;
		nodeValue = importedAttr.nodeValue;
		nodeType = importedAttr.nodeType;
		namespaceURI = importedAttr.namespaceURI;
		if ("a_:b0" !== nodeName) {
			return "documentimportnode05: #documentimportnode05_nodeName 'nodeName' equals '" + nodeName + "' not '" + "a_:b0" + "'";
		}
		if (2 !== nodeType) {
			return "documentimportnode05: #documentimportnode05_nodeType 'nodeType' equals '" + nodeType + "' not '" + 2 + "'";
		}
		if ("" !== nodeValue) {
			return "documentimportnode05: #documentimportnode05_nodeValue 'nodeValue' equals '" + nodeValue + "' not '" + "" + "'";
		}
		if ("http://www.w3.org/DOM/Test" !== namespaceURI) {
			return "documentimportnode05: #documentimportnode05_namespaceURI 'namespaceURI' equals '" + namespaceURI + "' not '" + "http://www.w3.org/DOM/Test" + "'";
		}
		return "documentimportnode05: OK";
	} catch (e) {
		return "documentimportnode05: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var docImported;
		var attr;
		var importedAttr;
		var nodeName;
		var nodeType;
		var nodeValue;
		var namespaceURI;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		var docImportedReq = new XMLHttpRequest();
		docImportedReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docImportedReq.send();
		docImported = new DOMParser().parseFromString(docImportedReq.responseText, "text/xml");
		attr = doc.createAttributeNS("http://www.w3.org/DOM/Test", "a_:b0");
		importedAttr = docImported.importNode(attr, false);
		nodeName = importedAttr.nodeName;
		nodeValue = importedAttr.nodeValue;
		nodeType = importedAttr.nodeType;
		namespaceURI = importedAttr.namespaceURI;
		if ("a_:b0" !== nodeName) {
			return "documentimportnode05: #documentimportnode05_nodeName 'nodeName' equals '" + nodeName + "' not '" + "a_:b0" + "'";
		}
		if (2 !== nodeType) {
			return "documentimportnode05: #documentimportnode05_nodeType 'nodeType' equals '" + nodeType + "' not '" + 2 + "'";
		}
		if ("" !== nodeValue) {
			return "documentimportnode05: #documentimportnode05_nodeValue 'nodeValue' equals '" + nodeValue + "' not '" + "" + "'";
		}
		if ("http://www.w3.org/DOM/Test" !== namespaceURI) {
			return "documentimportnode05: #documentimportnode05_namespaceURI 'namespaceURI' equals '" + namespaceURI + "' not '" + "http://www.w3.org/DOM/Test" + "'";
		}
		return "documentimportnode05: OK";
	} catch (e) {
		return "documentimportnode05: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="documentimportnode06.xml" fleur="documentimportnode06" native="documentimportnode06"><Fleur>(function(){
	var success;
	try {
		var doc;
		var docImported;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		success = false;
		try {
			docImported = doc.importNode(doc, false);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 9;
			}
		}
		if (!success) {
			return "documentimportnode06: Exception NOT_SUPPORTED_ERR expected";
		}
		return "documentimportnode06: OK";
	} catch (e) {
		return "documentimportnode06: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var docImported;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		success = false;
		try {
			docImported = doc.importNode(doc, false);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 9;
			}
		}
		if (!success) {
			return "documentimportnode06: Exception NOT_SUPPORTED_ERR expected";
		}
		return "documentimportnode06: OK";
	} catch (e) {
		return "documentimportnode06: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="documentimportnode07.xml" fleur="documentimportnode07" native="documentimportnode07"><Fleur>(function(){
	var success;
	try {
		var doc;
		var imported;
		var docType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		success = false;
		try {
			imported = doc.importNode(docType, true);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 9;
			}
		}
		if (!success) {
			return "documentimportnode07: Exception NOT_SUPPORTED_ERR expected";
		}
		return "documentimportnode07: OK";
	} catch (e) {
		return "documentimportnode07: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var imported;
		var docType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		success = false;
		try {
			imported = doc.importNode(docType, true);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 9;
			}
		}
		if (!success) {
			return "documentimportnode07: Exception NOT_SUPPORTED_ERR expected";
		}
		return "documentimportnode07: OK";
	} catch (e) {
		return "documentimportnode07: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="documentimportnode08.xml" fleur="documentimportnode08" native="documentimportnode08"><Fleur>(function(){
	var success;
	try {
		var doc;
		var imported;
		var docType;
		var domImpl;
		var nullNS = null;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		domImpl = doc.implementation;
		docType = domImpl.createDocumentType("test:root", nullNS, nullNS);
		success = false;
		try {
			imported = doc.importNode(docType, true);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 9;
			}
		}
		if (!success) {
			return "documentimportnode08: Exception NOT_SUPPORTED_ERR expected";
		}
		return "documentimportnode08: OK";
	} catch (e) {
		return "documentimportnode08: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var imported;
		var docType;
		var domImpl;
		var nullNS = null;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		domImpl = doc.implementation;
		docType = domImpl.createDocumentType("test:root", nullNS, nullNS);
		success = false;
		try {
			imported = doc.importNode(docType, true);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 9;
			}
		}
		if (!success) {
			return "documentimportnode08: Exception NOT_SUPPORTED_ERR expected";
		}
		return "documentimportnode08: OK";
	} catch (e) {
		return "documentimportnode08: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="documentimportnode09.xml" fleur="documentimportnode09" native="documentimportnode09"><Fleur>(function(){
	var success;
	try {
		var doc;
		var docFragment;
		var childList;
		var success;
		var addressNode;
		var appendedChild;
		var importedDocFrag;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		docFragment = doc.createDocumentFragment();
		childList = doc.getElementsByTagNameNS("*", "address");
		addressNode = childList.item(0);
		appendedChild = docFragment.appendChild(addressNode);
		importedDocFrag = doc.importNode(docFragment, false);
		success = importedDocFrag.hasChildNodes();
		if (success !== false) {
			return "documentimportnode09: 'success' equals '" + success + "' not false";
		}
		return "documentimportnode09: OK";
	} catch (e) {
		return "documentimportnode09: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var docFragment;
		var childList;
		var success;
		var addressNode;
		var appendedChild;
		var importedDocFrag;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		docFragment = doc.createDocumentFragment();
		childList = doc.getElementsByTagNameNS("*", "address");
		addressNode = childList.item(0);
		appendedChild = docFragment.appendChild(addressNode);
		importedDocFrag = doc.importNode(docFragment, false);
		success = importedDocFrag.hasChildNodes();
		if (success !== false) {
			return "documentimportnode09: 'success' equals '" + success + "' not false";
		}
		return "documentimportnode09: OK";
	} catch (e) {
		return "documentimportnode09: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="documentimportnode10.xml" fleur="documentimportnode10" native="documentimportnode10"><Fleur>(function(){
	var success;
	try {
		var doc;
		var docFragment;
		var childList;
		var success;
		var addressNode;
		var appendedChild;
		var importedDocFrag;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		docFragment = doc.createDocumentFragment();
		childList = doc.getElementsByTagNameNS("*", "address");
		addressNode = childList.item(0);
		appendedChild = docFragment.appendChild(addressNode);
		importedDocFrag = doc.importNode(docFragment, true);
		success = importedDocFrag.hasChildNodes();
		if (success !== true) {
			return "documentimportnode10: 'success' equals '" + success + "' not true";
		}
		return "documentimportnode10: OK";
	} catch (e) {
		return "documentimportnode10: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var docFragment;
		var childList;
		var success;
		var addressNode;
		var appendedChild;
		var importedDocFrag;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		docFragment = doc.createDocumentFragment();
		childList = doc.getElementsByTagNameNS("*", "address");
		addressNode = childList.item(0);
		appendedChild = docFragment.appendChild(addressNode);
		importedDocFrag = doc.importNode(docFragment, true);
		success = importedDocFrag.hasChildNodes();
		if (success !== true) {
			return "documentimportnode10: 'success' equals '" + success + "' not true";
		}
		return "documentimportnode10: OK";
	} catch (e) {
		return "documentimportnode10: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="documentimportnode11.xml" fleur="documentimportnode11" native="documentimportnode11"><Fleur>(function(){
	var success;
	try {
		var doc;
		var docElement;
		var imported;
		var success;
		var nodeNameOrig;
		var nodeNameImported;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		docElement = doc.documentElement;
		imported = doc.importNode(docElement, false);
		success = imported.hasChildNodes();
		if (success !== false) {
			return "documentimportnode11: 'success' equals '" + success + "' not false";
		}
		nodeNameImported = imported.nodeName;
		nodeNameOrig = docElement.nodeName;
		if (nodeNameImported !== nodeNameOrig) {
			return "documentimportnode11: #documentimportnode11_NodeName 'nodeNameOrig' equals '" + nodeNameOrig + "' not '" + nodeNameImported + "'";
		}
		return "documentimportnode11: OK";
	} catch (e) {
		return "documentimportnode11: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var docElement;
		var imported;
		var success;
		var nodeNameOrig;
		var nodeNameImported;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		docElement = doc.documentElement;
		imported = doc.importNode(docElement, false);
		success = imported.hasChildNodes();
		if (success !== false) {
			return "documentimportnode11: 'success' equals '" + success + "' not false";
		}
		nodeNameImported = imported.nodeName;
		nodeNameOrig = docElement.nodeName;
		if (nodeNameImported !== nodeNameOrig) {
			return "documentimportnode11: #documentimportnode11_NodeName 'nodeNameOrig' equals '" + nodeNameOrig + "' not '" + nodeNameImported + "'";
		}
		return "documentimportnode11: OK";
	} catch (e) {
		return "documentimportnode11: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="documentimportnode12.xml" fleur="documentimportnode12" native="documentimportnode12"><Fleur>(function(){
	var success;
	try {
		var doc;
		var childList;
		var imported;
		var addressElem;
		var addressElemChildren;
		var importedChildren;
		var addressElemLen;
		var importedLen;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		childList = doc.getElementsByTagNameNS("*", "address");
		addressElem = childList.item(0);
		imported = doc.importNode(addressElem, true);
		addressElemChildren = addressElem.childNodes;
		importedChildren = imported.childNodes;
		addressElemLen = addressElemChildren.length;
		importedLen = importedChildren.length;
		if (importedLen !== addressElemLen) {
			return "documentimportnode12: #documentimportnode12 'addressElemLen' equals '" + addressElemLen + "' not '" + importedLen + "'";
		}
		return "documentimportnode12: OK";
	} catch (e) {
		return "documentimportnode12: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var childList;
		var imported;
		var addressElem;
		var addressElemChildren;
		var importedChildren;
		var addressElemLen;
		var importedLen;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		childList = doc.getElementsByTagNameNS("*", "address");
		addressElem = childList.item(0);
		imported = doc.importNode(addressElem, true);
		addressElemChildren = addressElem.childNodes;
		importedChildren = imported.childNodes;
		addressElemLen = addressElemChildren.length;
		importedLen = importedChildren.length;
		if (importedLen !== addressElemLen) {
			return "documentimportnode12: #documentimportnode12 'addressElemLen' equals '" + addressElemLen + "' not '" + importedLen + "'";
		}
		return "documentimportnode12: OK";
	} catch (e) {
		return "documentimportnode12: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="documentimportnode13.xml" fleur="documentimportnode13" native="documentimportnode13"><Fleur>(function(){
	var success;
	try {
		var doc;
		var childList;
		var imported;
		var importedList;
		var employeeElem;
		var importedLen;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		childList = doc.getElementsByTagNameNS("*", "employee");
		employeeElem = childList.item(0);
		imported = doc.importNode(employeeElem, false);
		importedList = imported.childNodes;
		importedLen = importedList.length;
		if (0 !== importedLen) {
			return "documentimportnode13: #documentimportnode13 'importedLen' equals '" + importedLen + "' not '" + 0 + "'";
		}
		return "documentimportnode13: OK";
	} catch (e) {
		return "documentimportnode13: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var childList;
		var imported;
		var importedList;
		var employeeElem;
		var importedLen;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		childList = doc.getElementsByTagNameNS("*", "employee");
		employeeElem = childList.item(0);
		imported = doc.importNode(employeeElem, false);
		importedList = imported.childNodes;
		importedLen = importedList.length;
		if (0 !== importedLen) {
			return "documentimportnode13: #documentimportnode13 'importedLen' equals '" + importedLen + "' not '" + 0 + "'";
		}
		return "documentimportnode13: OK";
	} catch (e) {
		return "documentimportnode13: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="documentimportnode14.xml" fleur="documentimportnode14" native="documentimportnode14"><Fleur>(function(){
	var success;
	try {
		var doc;
		var newDoc;
		var domImpl;
		var nullDocType = null;
		var childList;
		var imported;
		var employeeElem;
		var attrNode;
		var attrValue;
		var nullNS = null;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		childList = doc.getElementsByTagNameNS("*", "employee");
		employeeElem = childList.item(3);
		domImpl = getImplementation();
		newDoc = domImpl.createDocument(nullNS, "staff", nullDocType);
		imported = newDoc.importNode(employeeElem, true);
		attrNode = imported.getAttributeNodeNS(nullNS, "defaultAttr");
		if (attrNode != null) {
			return "documentimportnode14: #defaultAttrNotImported 'attrNode' equals '" + attrNode + "' not null";
		}
		attrValue = imported.getAttributeNS("http://www.w3.org/2000/xmlns/", "emp");
		if ("http://www.nist.gov" !== attrValue) {
			return "documentimportnode14: #explicitAttrImported 'attrValue' equals '" + attrValue + "' not '" + "http://www.nist.gov" + "'";
		}
		return "documentimportnode14: OK";
	} catch (e) {
		return "documentimportnode14: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var newDoc;
		var domImpl;
		var nullDocType = null;
		var childList;
		var imported;
		var employeeElem;
		var attrNode;
		var attrValue;
		var nullNS = null;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		childList = doc.getElementsByTagNameNS("*", "employee");
		employeeElem = childList.item(3);
		domImpl = getImplementation();
		newDoc = domImpl.createDocument(nullNS, "staff", nullDocType);
		imported = newDoc.importNode(employeeElem, true);
		attrNode = imported.getAttributeNodeNS(nullNS, "defaultAttr");
		if (attrNode != null) {
			return "documentimportnode14: #defaultAttrNotImported 'attrNode' equals '" + attrNode + "' not null";
		}
		attrValue = imported.getAttributeNS("http://www.w3.org/2000/xmlns/", "emp");
		if ("http://www.nist.gov" !== attrValue) {
			return "documentimportnode14: #explicitAttrImported 'attrValue' equals '" + attrValue + "' not '" + "http://www.nist.gov" + "'";
		}
		return "documentimportnode14: OK";
	} catch (e) {
		return "documentimportnode14: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="documentimportnode15.xml" fleur="documentimportnode15" native="documentimportnode15"><Fleur>(function(){
	var success;
	try {
		var doc;
		var docImp;
		var textImport;
		var textToImport;
		var nodeValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		var docImpReq = new XMLHttpRequest();
		docImpReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docImpReq.send();
		docImp = new Fleur.DOMParser().parseFromString(docImpReq.responseText, "text/xml");
		textToImport = doc.createTextNode("Document.importNode test for a TEXT_NODE");
		textImport = doc.importNode(textToImport, true);
		nodeValue = textImport.nodeValue;
		if ("Document.importNode test for a TEXT_NODE" !== nodeValue) {
			return "documentimportnode15: #documentimportnode15 'nodeValue' equals '" + nodeValue + "' not '" + "Document.importNode test for a TEXT_NODE" + "'";
		}
		return "documentimportnode15: OK";
	} catch (e) {
		return "documentimportnode15: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var docImp;
		var textImport;
		var textToImport;
		var nodeValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		var docImpReq = new XMLHttpRequest();
		docImpReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docImpReq.send();
		docImp = new DOMParser().parseFromString(docImpReq.responseText, "text/xml");
		textToImport = doc.createTextNode("Document.importNode test for a TEXT_NODE");
		textImport = doc.importNode(textToImport, true);
		nodeValue = textImport.nodeValue;
		if ("Document.importNode test for a TEXT_NODE" !== nodeValue) {
			return "documentimportnode15: #documentimportnode15 'nodeValue' equals '" + nodeValue + "' not '" + "Document.importNode test for a TEXT_NODE" + "'";
		}
		return "documentimportnode15: OK";
	} catch (e) {
		return "documentimportnode15: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="documentimportnode17.xml" fleur="documentimportnode17" native="documentimportnode17"><Fleur>(function(){
	var success;
	try {
		var doc;
		var docImp;
		var commentImport;
		var commentToImport;
		var nodeValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		var docImpReq = new XMLHttpRequest();
		docImpReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docImpReq.send();
		docImp = new Fleur.DOMParser().parseFromString(docImpReq.responseText, "text/xml");
		commentToImport = doc.createComment("Document.importNode test for a COMMENT_NODE");
		commentImport = doc.importNode(commentToImport, true);
		nodeValue = commentImport.nodeValue;
		if ("Document.importNode test for a COMMENT_NODE" !== nodeValue) {
			return "documentimportnode17: #documentimportnode17 'nodeValue' equals '" + nodeValue + "' not '" + "Document.importNode test for a COMMENT_NODE" + "'";
		}
		return "documentimportnode17: OK";
	} catch (e) {
		return "documentimportnode17: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var docImp;
		var commentImport;
		var commentToImport;
		var nodeValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		var docImpReq = new XMLHttpRequest();
		docImpReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docImpReq.send();
		docImp = new DOMParser().parseFromString(docImpReq.responseText, "text/xml");
		commentToImport = doc.createComment("Document.importNode test for a COMMENT_NODE");
		commentImport = doc.importNode(commentToImport, true);
		nodeValue = commentImport.nodeValue;
		if ("Document.importNode test for a COMMENT_NODE" !== nodeValue) {
			return "documentimportnode17: #documentimportnode17 'nodeValue' equals '" + nodeValue + "' not '" + "Document.importNode test for a COMMENT_NODE" + "'";
		}
		return "documentimportnode17: OK";
	} catch (e) {
		return "documentimportnode17: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="documentimportnode18.xml" fleur="documentimportnode18" native="documentimportnode18"><Fleur>(function(){
	var success;
	try {
		var doc;
		var docImp;
		var piImport;
		var piToImport;
		var piData;
		var piTarget;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		var docImpReq = new XMLHttpRequest();
		docImpReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docImpReq.send();
		docImp = new Fleur.DOMParser().parseFromString(docImpReq.responseText, "text/xml");
		piToImport = doc.createProcessingInstruction("Target", "Data");
		piImport = doc.importNode(piToImport, false);
		piTarget = piImport.target;
		piData = piImport.data;
		if ("Target" !== piTarget) {
			return "documentimportnode18: #documentimportnode18_Target 'piTarget' equals '" + piTarget + "' not '" + "Target" + "'";
		}
		if ("Data" !== piData) {
			return "documentimportnode18: #documentimportnode18_Data 'piData' equals '" + piData + "' not '" + "Data" + "'";
		}
		return "documentimportnode18: OK";
	} catch (e) {
		return "documentimportnode18: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var docImp;
		var piImport;
		var piToImport;
		var piData;
		var piTarget;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		var docImpReq = new XMLHttpRequest();
		docImpReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docImpReq.send();
		docImp = new DOMParser().parseFromString(docImpReq.responseText, "text/xml");
		piToImport = doc.createProcessingInstruction("Target", "Data");
		piImport = doc.importNode(piToImport, false);
		piTarget = piImport.target;
		piData = piImport.data;
		if ("Target" !== piTarget) {
			return "documentimportnode18: #documentimportnode18_Target 'piTarget' equals '" + piTarget + "' not '" + "Target" + "'";
		}
		if ("Data" !== piData) {
			return "documentimportnode18: #documentimportnode18_Data 'piData' equals '" + piData + "' not '" + "Data" + "'";
		}
		return "documentimportnode18: OK";
	} catch (e) {
		return "documentimportnode18: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="documentimportnode19.xml" fleur="documentimportnode19" native="documentimportnode19"><Fleur>(function(){
	var success;
	try {
		var doc;
		var docTypeNull = null;
		var docImp;
		var domImpl;
		var docType;
		var nodeMap;
		var entity2;
		var entity6;
		var entityImp2;
		var entityImp6;
		var nodeName;
		var systemId;
		var notationName;
		var nodeNameImp;
		var systemIdImp;
		var notationNameImp;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		domImpl = doc.implementation;
		docType = doc.doctype;
		docImp = domImpl.createDocument("http://www.w3.org/DOM/Test", "a:b", docTypeNull);
		nodeMap = docType.entities;
		if (nodeMap == null) {
			return "documentimportnode19: #entitiesNotNull 'nodeMap' is null";
		}
		entity2 = nodeMap.getNamedItem("ent2");
		entity6 = nodeMap.getNamedItem("ent6");
		entityImp2 = docImp.importNode(entity2, false);
		entityImp6 = docImp.importNode(entity6, true);
		nodeName = entity2.nodeName;
		nodeNameImp = entityImp2.nodeName;
		if (nodeName !== nodeNameImp) {
			return "documentimportnode19: #documentimportnode19_Ent2NodeName 'nodeNameImp' equals '" + nodeNameImp + "' not '" + nodeName + "'";
		}
		nodeName = entity6.nodeName;
		nodeNameImp = entityImp6.nodeName;
		if (nodeName !== nodeNameImp) {
			return "documentimportnode19: #documentimportnode19_Ent6NodeName 'nodeNameImp' equals '" + nodeNameImp + "' not '" + nodeName + "'";
		}
		systemId = entity2.systemId;
		systemIdImp = entityImp2.systemId;
		if (systemId !== systemIdImp) {
			return "documentimportnode19: #documentimportnode19_Ent2SystemId 'systemIdImp' equals '" + systemIdImp + "' not '" + systemId + "'";
		}
		systemId = entity6.systemId;
		systemIdImp = entityImp6.systemId;
		if (systemId !== systemIdImp) {
			return "documentimportnode19: #documentimportnode19_Ent6SystemId 'systemIdImp' equals '" + systemIdImp + "' not '" + systemId + "'";
		}
		notationName = entity2.notationName;
		notationNameImp = entityImp2.notationName;
		if (notationName !== notationNameImp) {
			return "documentimportnode19: #documentimportnode19_Ent2NotationName 'notationNameImp' equals '" + notationNameImp + "' not '" + notationName + "'";
		}
		notationName = entity6.notationName;
		notationNameImp = entityImp6.notationName;
		if (notationName !== notationNameImp) {
			return "documentimportnode19: #documentimportnode19_Ent6NotationName 'notationNameImp' equals '" + notationNameImp + "' not '" + notationName + "'";
		}
		return "documentimportnode19: OK";
	} catch (e) {
		return "documentimportnode19: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var docTypeNull = null;
		var docImp;
		var domImpl;
		var docType;
		var nodeMap;
		var entity2;
		var entity6;
		var entityImp2;
		var entityImp6;
		var nodeName;
		var systemId;
		var notationName;
		var nodeNameImp;
		var systemIdImp;
		var notationNameImp;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		domImpl = doc.implementation;
		docType = doc.doctype;
		docImp = domImpl.createDocument("http://www.w3.org/DOM/Test", "a:b", docTypeNull);
		nodeMap = docType.entities;
		if (nodeMap == null) {
			return "documentimportnode19: #entitiesNotNull 'nodeMap' is null";
		}
		entity2 = nodeMap.getNamedItem("ent2");
		entity6 = nodeMap.getNamedItem("ent6");
		entityImp2 = docImp.importNode(entity2, false);
		entityImp6 = docImp.importNode(entity6, true);
		nodeName = entity2.nodeName;
		nodeNameImp = entityImp2.nodeName;
		if (nodeName !== nodeNameImp) {
			return "documentimportnode19: #documentimportnode19_Ent2NodeName 'nodeNameImp' equals '" + nodeNameImp + "' not '" + nodeName + "'";
		}
		nodeName = entity6.nodeName;
		nodeNameImp = entityImp6.nodeName;
		if (nodeName !== nodeNameImp) {
			return "documentimportnode19: #documentimportnode19_Ent6NodeName 'nodeNameImp' equals '" + nodeNameImp + "' not '" + nodeName + "'";
		}
		systemId = entity2.systemId;
		systemIdImp = entityImp2.systemId;
		if (systemId !== systemIdImp) {
			return "documentimportnode19: #documentimportnode19_Ent2SystemId 'systemIdImp' equals '" + systemIdImp + "' not '" + systemId + "'";
		}
		systemId = entity6.systemId;
		systemIdImp = entityImp6.systemId;
		if (systemId !== systemIdImp) {
			return "documentimportnode19: #documentimportnode19_Ent6SystemId 'systemIdImp' equals '" + systemIdImp + "' not '" + systemId + "'";
		}
		notationName = entity2.notationName;
		notationNameImp = entityImp2.notationName;
		if (notationName !== notationNameImp) {
			return "documentimportnode19: #documentimportnode19_Ent2NotationName 'notationNameImp' equals '" + notationNameImp + "' not '" + notationName + "'";
		}
		notationName = entity6.notationName;
		notationNameImp = entityImp6.notationName;
		if (notationName !== notationNameImp) {
			return "documentimportnode19: #documentimportnode19_Ent6NotationName 'notationNameImp' equals '" + notationNameImp + "' not '" + notationName + "'";
		}
		return "documentimportnode19: OK";
	} catch (e) {
		return "documentimportnode19: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="documentimportnode20.xml" fleur="documentimportnode20" native="documentimportnode20"><Fleur>(function(){
	var success;
	try {
		var doc;
		var docImp;
		var domImpl;
		var docType;
		var docTypeNull = null;
		var nodeMap;
		var entity4;
		var entityImp4;
		var element;
		var cdata;
		var pi;
		var childList;
		var elemchildList;
		var ent4Name;
		var ent4ImpName;
		var cdataVal;
		var piTargetVal;
		var piDataVal;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		domImpl = doc.implementation;
		docType = doc.doctype;
		docImp = domImpl.createDocument("http://www.w3.org/DOM/Test", "a:b", docTypeNull);
		nodeMap = docType.entities;
		entity4 = nodeMap.getNamedItem("ent4");
		entityImp4 = docImp.importNode(entity4, true);
		childList = entityImp4.childNodes;
		element = childList.item(0);
		elemchildList = element.childNodes;
		cdata = elemchildList.item(0);
		pi = childList.item(1);
		ent4Name = entity4.nodeName;
		ent4ImpName = entityImp4.nodeName;
		cdataVal = cdata.data;
		piTargetVal = pi.target;
		piDataVal = pi.data;
		if (ent4Name !== ent4ImpName) {
			return "documentimportnode20: #documentimportnode20_Ent4NodeName 'ent4ImpName' equals '" + ent4ImpName + "' not '" + ent4Name + "'";
		}
		if ("Element data" !== cdataVal) {
			return "documentimportnode20: #documentimportnode20_Cdata 'cdataVal' equals '" + cdataVal + "' not '" + "Element data" + "'";
		}
		if ("PItarget" !== piTargetVal) {
			return "documentimportnode20: #documentimportnode20_PITarget 'piTargetVal' equals '" + piTargetVal + "' not '" + "PItarget" + "'";
		}
		if ("PIdata" !== piDataVal) {
			return "documentimportnode20: #documentimportnode20_PIData 'piDataVal' equals '" + piDataVal + "' not '" + "PIdata" + "'";
		}
		return "documentimportnode20: OK";
	} catch (e) {
		return "documentimportnode20: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var docImp;
		var domImpl;
		var docType;
		var docTypeNull = null;
		var nodeMap;
		var entity4;
		var entityImp4;
		var element;
		var cdata;
		var pi;
		var childList;
		var elemchildList;
		var ent4Name;
		var ent4ImpName;
		var cdataVal;
		var piTargetVal;
		var piDataVal;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		domImpl = doc.implementation;
		docType = doc.doctype;
		docImp = domImpl.createDocument("http://www.w3.org/DOM/Test", "a:b", docTypeNull);
		nodeMap = docType.entities;
		entity4 = nodeMap.getNamedItem("ent4");
		entityImp4 = docImp.importNode(entity4, true);
		childList = entityImp4.childNodes;
		element = childList.item(0);
		elemchildList = element.childNodes;
		cdata = elemchildList.item(0);
		pi = childList.item(1);
		ent4Name = entity4.nodeName;
		ent4ImpName = entityImp4.nodeName;
		cdataVal = cdata.data;
		piTargetVal = pi.target;
		piDataVal = pi.data;
		if (ent4Name !== ent4ImpName) {
			return "documentimportnode20: #documentimportnode20_Ent4NodeName 'ent4ImpName' equals '" + ent4ImpName + "' not '" + ent4Name + "'";
		}
		if ("Element data" !== cdataVal) {
			return "documentimportnode20: #documentimportnode20_Cdata 'cdataVal' equals '" + cdataVal + "' not '" + "Element data" + "'";
		}
		if ("PItarget" !== piTargetVal) {
			return "documentimportnode20: #documentimportnode20_PITarget 'piTargetVal' equals '" + piTargetVal + "' not '" + "PItarget" + "'";
		}
		if ("PIdata" !== piDataVal) {
			return "documentimportnode20: #documentimportnode20_PIData 'piDataVal' equals '" + piDataVal + "' not '" + "PIdata" + "'";
		}
		return "documentimportnode20: OK";
	} catch (e) {
		return "documentimportnode20: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="documentimportnode21.xml" fleur="documentimportnode21" native="documentimportnode21"><Fleur>(function(){
	var success;
	try {
		var doc;
		var docTypeNull = null;
		var docImp;
		var domImpl;
		var addressList;
		var addressChildList;
		var element;
		var entRef2;
		var entRefImp2;
		var entRef3;
		var entRefImp3;
		var nodeName2;
		var nodeName3;
		var nodeNameImp2;
		var nodeNameImp3;
		var nodes;
		var nodeImp3;
		var nodeImp2;
		var nodeValueImp2;
		var nodeValueImp3;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		domImpl = doc.implementation;
		docImp = domImpl.createDocument("http://www.w3.org/DOM/Test", "a:b", docTypeNull);
		addressList = doc.getElementsByTagName("address");
		element = addressList.item(1);
		addressChildList = element.childNodes;
		entRef2 = addressChildList.item(0);
		entRef3 = addressChildList.item(2);
		entRefImp2 = docImp.importNode(entRef2, true);
		entRefImp3 = docImp.importNode(entRef3, false);
		nodeName2 = entRef2.nodeName;
		nodeName3 = entRef3.nodeName;
		nodeNameImp2 = entRefImp2.nodeName;
		nodeNameImp3 = entRefImp3.nodeName;
		if (nodeName2 !== nodeNameImp2) {
			return "documentimportnode21: #documentimportnode21_Ent2NodeName 'nodeNameImp2' equals '" + nodeNameImp2 + "' not '" + nodeName2 + "'";
		}
		if (nodeName3 !== nodeNameImp3) {
			return "documentimportnode21: #documentimportnode21_Ent3NodeName 'nodeNameImp3' equals '" + nodeNameImp3 + "' not '" + nodeName3 + "'";
		}
		entRefImp2 = doc.importNode(entRef2, true);
		entRefImp3 = doc.importNode(entRef3, false);
		nodes = entRefImp2.childNodes;
		nodeImp2 = nodes.item(0);
		nodeValueImp2 = nodeImp2.nodeValue;
		nodes = entRefImp3.childNodes;
		nodeImp3 = nodes.item(0);
		nodeValueImp3 = nodeImp3.nodeValue;
		if ("1900 Dallas Road" !== nodeValueImp2) {
			return "documentimportnode21: #documentimportnode21_Ent2NodeValue 'nodeValueImp2' equals '" + nodeValueImp2 + "' not '" + "1900 Dallas Road" + "'";
		}
		if ("Texas" !== nodeValueImp3) {
			return "documentimportnode21: #documentimportnode21_Ent3Nodevalue 'nodeValueImp3' equals '" + nodeValueImp3 + "' not '" + "Texas" + "'";
		}
		return "documentimportnode21: OK";
	} catch (e) {
		return "documentimportnode21: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var docTypeNull = null;
		var docImp;
		var domImpl;
		var addressList;
		var addressChildList;
		var element;
		var entRef2;
		var entRefImp2;
		var entRef3;
		var entRefImp3;
		var nodeName2;
		var nodeName3;
		var nodeNameImp2;
		var nodeNameImp3;
		var nodes;
		var nodeImp3;
		var nodeImp2;
		var nodeValueImp2;
		var nodeValueImp3;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		domImpl = doc.implementation;
		docImp = domImpl.createDocument("http://www.w3.org/DOM/Test", "a:b", docTypeNull);
		addressList = doc.getElementsByTagName("address");
		element = addressList.item(1);
		addressChildList = element.childNodes;
		entRef2 = addressChildList.item(0);
		entRef3 = addressChildList.item(2);
		entRefImp2 = docImp.importNode(entRef2, true);
		entRefImp3 = docImp.importNode(entRef3, false);
		nodeName2 = entRef2.nodeName;
		nodeName3 = entRef3.nodeName;
		nodeNameImp2 = entRefImp2.nodeName;
		nodeNameImp3 = entRefImp3.nodeName;
		if (nodeName2 !== nodeNameImp2) {
			return "documentimportnode21: #documentimportnode21_Ent2NodeName 'nodeNameImp2' equals '" + nodeNameImp2 + "' not '" + nodeName2 + "'";
		}
		if (nodeName3 !== nodeNameImp3) {
			return "documentimportnode21: #documentimportnode21_Ent3NodeName 'nodeNameImp3' equals '" + nodeNameImp3 + "' not '" + nodeName3 + "'";
		}
		entRefImp2 = doc.importNode(entRef2, true);
		entRefImp3 = doc.importNode(entRef3, false);
		nodes = entRefImp2.childNodes;
		nodeImp2 = nodes.item(0);
		nodeValueImp2 = nodeImp2.nodeValue;
		nodes = entRefImp3.childNodes;
		nodeImp3 = nodes.item(0);
		nodeValueImp3 = nodeImp3.nodeValue;
		if ("1900 Dallas Road" !== nodeValueImp2) {
			return "documentimportnode21: #documentimportnode21_Ent2NodeValue 'nodeValueImp2' equals '" + nodeValueImp2 + "' not '" + "1900 Dallas Road" + "'";
		}
		if ("Texas" !== nodeValueImp3) {
			return "documentimportnode21: #documentimportnode21_Ent3Nodevalue 'nodeValueImp3' equals '" + nodeValueImp3 + "' not '" + "Texas" + "'";
		}
		return "documentimportnode21: OK";
	} catch (e) {
		return "documentimportnode21: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="documentimportnode22.xml" fleur="documentimportnode22" native="documentimportnode22"><Fleur>(function(){
	var success;
	try {
		var doc;
		var docTypeNull = null;
		var docImp;
		var domImpl;
		var docType;
		var nodeMap;
		var notation1;
		var notation2;
		var notationImp1;
		var notationImp2;
		var notationImpNew1;
		var notationImpNew2;
		var publicId1;
		var publicId1Imp;
		var publicId1NewImp;
		var publicId2Imp;
		var publicId2NewImp;
		var systemId1Imp;
		var systemId1NewImp;
		var systemId2;
		var systemId2Imp;
		var systemId2NewImp;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		domImpl = doc.implementation;
		docType = doc.doctype;
		docImp = domImpl.createDocument("http://www.w3.org/DOM/Test", "a:b", docTypeNull);
		nodeMap = docType.notations;
		if (nodeMap == null) {
			return "documentimportnode21: #notationsNotNull 'nodeMap' is null";
		}
		notation1 = nodeMap.getNamedItem("notation1");
		notation2 = nodeMap.getNamedItem("notation2");
		notationImp1 = doc.importNode(notation1, true);
		notationImp2 = doc.importNode(notation2, false);
		notationImpNew1 = docImp.importNode(notation1, false);
		notationImpNew2 = docImp.importNode(notation2, true);
		publicId1 = notation1.publicId;
		publicId1Imp = notation1.publicId;
		publicId1NewImp = notation1.publicId;
		systemId1Imp = notation1.systemId;
		systemId1NewImp = notation1.systemId;
		publicId2Imp = notation2.publicId;
		publicId2NewImp = notation2.publicId;
		systemId2 = notation2.systemId;
		systemId2Imp = notation2.systemId;
		systemId2NewImp = notation2.systemId;
		if (publicId1 !== publicId1Imp) {
			return "documentimportnode21: #documentimportnode22_N1PID 'publicId1Imp' equals '" + publicId1Imp + "' not '" + publicId1 + "'";
		}
		if (publicId1 !== publicId1NewImp) {
			return "documentimportnode21: #documentimportnode22_N1NPID 'publicId1NewImp' equals '" + publicId1NewImp + "' not '" + publicId1 + "'";
		}
		if (systemId1Imp != null) {
			return "documentimportnode21: #documentimportnode22_N1SID 'systemId1Imp' equals '" + systemId1Imp + "' not null";
		}
		if (systemId1NewImp != null) {
			return "documentimportnode21: #documentimportnode22_N1NSID 'systemId1NewImp' equals '" + systemId1NewImp + "' not null";
		}
		if (systemId2 !== systemId2Imp) {
			return "documentimportnode21: #documentimportnode22_N2SID 'systemId2Imp' equals '" + systemId2Imp + "' not '" + systemId2 + "'";
		}
		if (systemId2 !== systemId2NewImp) {
			return "documentimportnode21: #documentimportnode22_N2NSID 'systemId2NewImp' equals '" + systemId2NewImp + "' not '" + systemId2 + "'";
		}
		if (publicId2Imp != null) {
			return "documentimportnode21: #documentimportnode22_N2PID 'publicId2Imp' equals '" + publicId2Imp + "' not null";
		}
		if (publicId2Imp != null) {
			return "documentimportnode21: #documentimportnode22_N2NPID 'publicId2Imp' equals '" + publicId2Imp + "' not null";
		}
		return "documentimportnode21: OK";
	} catch (e) {
		return "documentimportnode21: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var docTypeNull = null;
		var docImp;
		var domImpl;
		var docType;
		var nodeMap;
		var notation1;
		var notation2;
		var notationImp1;
		var notationImp2;
		var notationImpNew1;
		var notationImpNew2;
		var publicId1;
		var publicId1Imp;
		var publicId1NewImp;
		var publicId2Imp;
		var publicId2NewImp;
		var systemId1Imp;
		var systemId1NewImp;
		var systemId2;
		var systemId2Imp;
		var systemId2NewImp;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		domImpl = doc.implementation;
		docType = doc.doctype;
		docImp = domImpl.createDocument("http://www.w3.org/DOM/Test", "a:b", docTypeNull);
		nodeMap = docType.notations;
		if (nodeMap == null) {
			return "documentimportnode21: #notationsNotNull 'nodeMap' is null";
		}
		notation1 = nodeMap.getNamedItem("notation1");
		notation2 = nodeMap.getNamedItem("notation2");
		notationImp1 = doc.importNode(notation1, true);
		notationImp2 = doc.importNode(notation2, false);
		notationImpNew1 = docImp.importNode(notation1, false);
		notationImpNew2 = docImp.importNode(notation2, true);
		publicId1 = notation1.publicId;
		publicId1Imp = notation1.publicId;
		publicId1NewImp = notation1.publicId;
		systemId1Imp = notation1.systemId;
		systemId1NewImp = notation1.systemId;
		publicId2Imp = notation2.publicId;
		publicId2NewImp = notation2.publicId;
		systemId2 = notation2.systemId;
		systemId2Imp = notation2.systemId;
		systemId2NewImp = notation2.systemId;
		if (publicId1 !== publicId1Imp) {
			return "documentimportnode21: #documentimportnode22_N1PID 'publicId1Imp' equals '" + publicId1Imp + "' not '" + publicId1 + "'";
		}
		if (publicId1 !== publicId1NewImp) {
			return "documentimportnode21: #documentimportnode22_N1NPID 'publicId1NewImp' equals '" + publicId1NewImp + "' not '" + publicId1 + "'";
		}
		if (systemId1Imp != null) {
			return "documentimportnode21: #documentimportnode22_N1SID 'systemId1Imp' equals '" + systemId1Imp + "' not null";
		}
		if (systemId1NewImp != null) {
			return "documentimportnode21: #documentimportnode22_N1NSID 'systemId1NewImp' equals '" + systemId1NewImp + "' not null";
		}
		if (systemId2 !== systemId2Imp) {
			return "documentimportnode21: #documentimportnode22_N2SID 'systemId2Imp' equals '" + systemId2Imp + "' not '" + systemId2 + "'";
		}
		if (systemId2 !== systemId2NewImp) {
			return "documentimportnode21: #documentimportnode22_N2NSID 'systemId2NewImp' equals '" + systemId2NewImp + "' not '" + systemId2 + "'";
		}
		if (publicId2Imp != null) {
			return "documentimportnode21: #documentimportnode22_N2PID 'publicId2Imp' equals '" + publicId2Imp + "' not null";
		}
		if (publicId2Imp != null) {
			return "documentimportnode21: #documentimportnode22_N2NPID 'publicId2Imp' equals '" + publicId2Imp + "' not null";
		}
		return "documentimportnode21: OK";
	} catch (e) {
		return "documentimportnode21: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="documenttypeinternalSubset01.xml" fleur="documenttypeinternalSubset01" native="documenttypeinternalSubset01"><Fleur>(function(){
	var success;
	try {
		var doc;
		var docType;
		var domImpl;
		var internal;
		var nullNS = null;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		domImpl = doc.implementation;
		docType = domImpl.createDocumentType("l2:root", nullNS, nullNS);
		internal = docType.internalSubset;
		if (internal != null) {
			return "documenttypeinternalSubset01: #internalSubsetNull 'internal' equals '" + internal + "' not null";
		}
		return "documenttypeinternalSubset01: OK";
	} catch (e) {
		return "documenttypeinternalSubset01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var docType;
		var domImpl;
		var internal;
		var nullNS = null;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		domImpl = doc.implementation;
		docType = domImpl.createDocumentType("l2:root", nullNS, nullNS);
		internal = docType.internalSubset;
		if (internal != null) {
			return "documenttypeinternalSubset01: #internalSubsetNull 'internal' equals '" + internal + "' not null";
		}
		return "documenttypeinternalSubset01: OK";
	} catch (e) {
		return "documenttypeinternalSubset01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="documenttypepublicid01.xml" fleur="documenttypepublicid01" native="documenttypepublicid01"><Fleur>(function(){
	var success;
	try {
		var doc;
		var docType;
		var domImpl;
		var publicId;
		var nullNS = null;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		domImpl = doc.implementation;
		docType = domImpl.createDocumentType("l2:root", "PUB", nullNS);
		publicId = docType.publicId;
		if ("PUB" !== publicId) {
			return "documenttypepublicid01: #documenttypepublicid01 'publicId' equals '" + publicId + "' not '" + "PUB" + "'";
		}
		return "documenttypepublicid01: OK";
	} catch (e) {
		return "documenttypepublicid01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var docType;
		var domImpl;
		var publicId;
		var nullNS = null;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		domImpl = doc.implementation;
		docType = domImpl.createDocumentType("l2:root", "PUB", nullNS);
		publicId = docType.publicId;
		if ("PUB" !== publicId) {
			return "documenttypepublicid01: #documenttypepublicid01 'publicId' equals '" + publicId + "' not '" + "PUB" + "'";
		}
		return "documenttypepublicid01: OK";
	} catch (e) {
		return "documenttypepublicid01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="documenttypesystemid01.xml" fleur="documenttypesystemid01" native="documenttypesystemid01"><Fleur>(function(){
	var success;
	try {
		var doc;
		var docType;
		var domImpl;
		var publicId;
		var systemId;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		domImpl = doc.implementation;
		docType = domImpl.createDocumentType("l2:root", "PUB", "SYS");
		publicId = docType.publicId;
		systemId = docType.systemId;
		if ("PUB" !== publicId) {
			return "documenttypesystemid01: #documenttypepublicid01 'publicId' equals '" + publicId + "' not '" + "PUB" + "'";
		}
		if ("SYS" !== systemId) {
			return "documenttypesystemid01: #documenttypesystemid01 'systemId' equals '" + systemId + "' not '" + "SYS" + "'";
		}
		return "documenttypesystemid01: OK";
	} catch (e) {
		return "documenttypesystemid01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var docType;
		var domImpl;
		var publicId;
		var systemId;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		domImpl = doc.implementation;
		docType = domImpl.createDocumentType("l2:root", "PUB", "SYS");
		publicId = docType.publicId;
		systemId = docType.systemId;
		if ("PUB" !== publicId) {
			return "documenttypesystemid01: #documenttypepublicid01 'publicId' equals '" + publicId + "' not '" + "PUB" + "'";
		}
		if ("SYS" !== systemId) {
			return "documenttypesystemid01: #documenttypesystemid01 'systemId' equals '" + systemId + "' not '" + "SYS" + "'";
		}
		return "documenttypesystemid01: OK";
	} catch (e) {
		return "documenttypesystemid01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="domimplementationcreatedocument03.xml" fleur="domimplementationcreatedocument03" native="domimplementationcreatedocument03"><Fleur>(function(){
	var success;
	try {
		var doc;
		var domImpl;
		var newDoc;
		var docType = null;
		var namespaceURI = "http://www.w3.org/DOMTest/L2";
		var qualifiedName;
		qualifiedNames = new Array();
		qualifiedNames[0] = "_:_";
		qualifiedNames[1] = "_:h0";
		qualifiedNames[2] = "_:test";
		qualifiedNames[3] = "l_:_";
		qualifiedNames[4] = "ns:_0";
		qualifiedNames[5] = "ns:a0";
		qualifiedNames[6] = "ns0:test";
		qualifiedNames[7] = "a.b:c";
		qualifiedNames[8] = "a-b:c";
		qualifiedNames[9] = "a-b:c";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		domImpl = doc.implementation;
		for (var index_id0x086abbf0 = 0; index_id0x086abbf0 &lt; qualifiedNames.length; index_id0x086abbf0++) {
			qualifiedName = qualifiedNames[index_id0x086abbf0];
			newDoc = domImpl.createDocument(namespaceURI, qualifiedName, docType);
			if (newDoc == null) {
				return "domimplementationcreatedocument03: #domimplementationcreatedocument03 'newDoc' is null";
			}
		}
		return "domimplementationcreatedocument03: OK";
	} catch (e) {
		return "domimplementationcreatedocument03: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var domImpl;
		var newDoc;
		var docType = null;
		var namespaceURI = "http://www.w3.org/DOMTest/L2";
		var qualifiedName;
		qualifiedNames = new Array();
		qualifiedNames[0] = "_:_";
		qualifiedNames[1] = "_:h0";
		qualifiedNames[2] = "_:test";
		qualifiedNames[3] = "l_:_";
		qualifiedNames[4] = "ns:_0";
		qualifiedNames[5] = "ns:a0";
		qualifiedNames[6] = "ns0:test";
		qualifiedNames[7] = "a.b:c";
		qualifiedNames[8] = "a-b:c";
		qualifiedNames[9] = "a-b:c";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		domImpl = doc.implementation;
		for (var index_id0x086abbf0 = 0; index_id0x086abbf0 &lt; qualifiedNames.length; index_id0x086abbf0++) {
			qualifiedName = qualifiedNames[index_id0x086abbf0];
			newDoc = domImpl.createDocument(namespaceURI, qualifiedName, docType);
			if (newDoc == null) {
				return "domimplementationcreatedocument03: #domimplementationcreatedocument03 'newDoc' is null";
			}
		}
		return "domimplementationcreatedocument03: OK";
	} catch (e) {
		return "domimplementationcreatedocument03: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="domimplementationcreatedocument04.xml" fleur="domimplementationcreatedocument04" native="domimplementationcreatedocument04"><Fleur>(function(){
	var success;
	try {
		var doc;
		var domImpl;
		var newDoc;
		var namespaceURI = null;
		var qualifiedName = "dom:root";
		var docType = null;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		domImpl = doc.implementation;
		success = false;
		try {
			newDoc = domImpl.createDocument(namespaceURI, qualifiedName, docType);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 14;
			}
		}
		if (!success) {
			return "domimplementationcreatedocument04: Exception NAMESPACE_ERR expected";
		}
		return "domimplementationcreatedocument04: OK";
	} catch (e) {
		return "domimplementationcreatedocument04: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var domImpl;
		var newDoc;
		var namespaceURI = null;
		var qualifiedName = "dom:root";
		var docType = null;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		domImpl = doc.implementation;
		success = false;
		try {
			newDoc = domImpl.createDocument(namespaceURI, qualifiedName, docType);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 14;
			}
		}
		if (!success) {
			return "domimplementationcreatedocument04: Exception NAMESPACE_ERR expected";
		}
		return "domimplementationcreatedocument04: OK";
	} catch (e) {
		return "domimplementationcreatedocument04: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="domimplementationcreatedocument05.xml" fleur="domimplementationcreatedocument05" native="domimplementationcreatedocument05"><Fleur>(function(){
	var success;
	try {
		var doc;
		var domImpl;
		var newDoc;
		var namespaceURI = "http://www.w3.org/xml/1998/namespace";
		var qualifiedName = "xml:root";
		var docType = null;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		domImpl = doc.implementation;
		success = false;
		try {
			newDoc = domImpl.createDocument(namespaceURI, qualifiedName, docType);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 14;
			}
		}
		if (!success) {
			return "domimplementationcreatedocument05: Exception NAMESPACE_ERR expected";
		}
		return "domimplementationcreatedocument05: OK";
	} catch (e) {
		return "domimplementationcreatedocument05: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var domImpl;
		var newDoc;
		var namespaceURI = "http://www.w3.org/xml/1998/namespace";
		var qualifiedName = "xml:root";
		var docType = null;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		domImpl = doc.implementation;
		success = false;
		try {
			newDoc = domImpl.createDocument(namespaceURI, qualifiedName, docType);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 14;
			}
		}
		if (!success) {
			return "domimplementationcreatedocument05: Exception NAMESPACE_ERR expected";
		}
		return "domimplementationcreatedocument05: OK";
	} catch (e) {
		return "domimplementationcreatedocument05: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="domimplementationcreatedocument07.xml" fleur="domimplementationcreatedocument07" native="domimplementationcreatedocument07"><Fleur>(function(){
	var success;
	try {
		var doc;
		var domImpl;
		var newDoc;
		var namespaceURI = "http://www.w3.org/DOMTest/level2";
		var docType = null;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		domImpl = doc.implementation;
		success = false;
		try {
			newDoc = domImpl.createDocument(namespaceURI, ":", docType);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 14;
			}
		}
		if (!success) {
			return "domimplementationcreatedocument07: Exception NAMESPACE_ERR expected";
		}
		return "domimplementationcreatedocument07: OK";
	} catch (e) {
		return "domimplementationcreatedocument07: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var domImpl;
		var newDoc;
		var namespaceURI = "http://www.w3.org/DOMTest/level2";
		var docType = null;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		domImpl = doc.implementation;
		success = false;
		try {
			newDoc = domImpl.createDocument(namespaceURI, ":", docType);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 14;
			}
		}
		if (!success) {
			return "domimplementationcreatedocument07: Exception NAMESPACE_ERR expected";
		}
		return "domimplementationcreatedocument07: OK";
	} catch (e) {
		return "domimplementationcreatedocument07: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="domimplementationcreatedocumenttype01.xml" fleur="domimplementationcreatedocumenttype01" native="domimplementationcreatedocumenttype01"><Fleur>(function(){
	var success;
	try {
		var doc;
		var domImpl;
		var newDocType;
		var ownerDocument;
		var qualifiedName = "test:root";
		var publicId;
		var systemId;
		publicIds = new Array();
		publicIds[0] = "1234";
		publicIds[1] = "test";
		systemIds = new Array();
		systemIds[0] = "";
		systemIds[1] = "test";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		domImpl = doc.implementation;
		for (var index_id0x08893100 = 0; index_id0x08893100 &lt; publicIds.length; index_id0x08893100++) {
			publicId = publicIds[index_id0x08893100];
			for (var index_id0x08893150 = 0; index_id0x08893150 &lt; systemIds.length; index_id0x08893150++) {
				systemId = systemIds[index_id0x08893150];
				newDocType = domImpl.createDocumentType(qualifiedName, publicId, systemId);
				if (newDocType == null) {
					return "domimplementationcreatedocumenttype01: #domimplementationcreatedocumenttype01_newDocType 'newDocType' is null";
				}
				ownerDocument = newDocType.ownerDocument;
				if (ownerDocument != null) {
					return "domimplementationcreatedocumenttype01: #domimplementationcreatedocumenttype01_ownerDocument 'ownerDocument' equals '" + ownerDocument + "' not null";
				}
			}
		}
		return "domimplementationcreatedocumenttype01: OK";
	} catch (e) {
		return "domimplementationcreatedocumenttype01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var domImpl;
		var newDocType;
		var ownerDocument;
		var qualifiedName = "test:root";
		var publicId;
		var systemId;
		publicIds = new Array();
		publicIds[0] = "1234";
		publicIds[1] = "test";
		systemIds = new Array();
		systemIds[0] = "";
		systemIds[1] = "test";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		domImpl = doc.implementation;
		for (var index_id0x08893100 = 0; index_id0x08893100 &lt; publicIds.length; index_id0x08893100++) {
			publicId = publicIds[index_id0x08893100];
			for (var index_id0x08893150 = 0; index_id0x08893150 &lt; systemIds.length; index_id0x08893150++) {
				systemId = systemIds[index_id0x08893150];
				newDocType = domImpl.createDocumentType(qualifiedName, publicId, systemId);
				if (newDocType == null) {
					return "domimplementationcreatedocumenttype01: #domimplementationcreatedocumenttype01_newDocType 'newDocType' is null";
				}
				ownerDocument = newDocType.ownerDocument;
				if (ownerDocument != null) {
					return "domimplementationcreatedocumenttype01: #domimplementationcreatedocumenttype01_ownerDocument 'ownerDocument' equals '" + ownerDocument + "' not null";
				}
			}
		}
		return "domimplementationcreatedocumenttype01: OK";
	} catch (e) {
		return "domimplementationcreatedocumenttype01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="domimplementationcreatedocumenttype02.xml" fleur="domimplementationcreatedocumenttype02" native="domimplementationcreatedocumenttype02"><Fleur>(function(){
	var success;
	try {
		var doc;
		var domImpl;
		var newDocType;
		var ownerDocument;
		var publicId = "http://www.w3.org/DOM/Test/dom2.dtd";
		var systemId = "dom2.dtd";
		var qualifiedName;
		qualifiedNames = new Array();
		qualifiedNames[0] = "_:_";
		qualifiedNames[1] = "_:h0";
		qualifiedNames[2] = "_:test";
		qualifiedNames[3] = "_:_.";
		qualifiedNames[4] = "_:a-";
		qualifiedNames[5] = "l_:_";
		qualifiedNames[6] = "ns:_0";
		qualifiedNames[7] = "ns:a0";
		qualifiedNames[8] = "ns0:test";
		qualifiedNames[9] = "ns:EEE.";
		qualifiedNames[10] = "ns:_-";
		qualifiedNames[11] = "a.b:c";
		qualifiedNames[12] = "a-b:c.j";
		qualifiedNames[13] = "a-b:c";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		domImpl = doc.implementation;
		for (var index_id0x0889f8d0 = 0; index_id0x0889f8d0 &lt; qualifiedNames.length; index_id0x0889f8d0++) {
			qualifiedName = qualifiedNames[index_id0x0889f8d0];
			newDocType = domImpl.createDocumentType(qualifiedName, publicId, systemId);
			if (newDocType == null) {
				return "domimplementationcreatedocumenttype02: #domimplementationcreatedocumenttype02_newDocType 'newDocType' is null";
			}
			ownerDocument = newDocType.ownerDocument;
			if (ownerDocument != null) {
				return "domimplementationcreatedocumenttype02: #domimplementationcreatedocumenttype02_ownerDocument 'ownerDocument' equals '" + ownerDocument + "' not null";
			}
		}
		return "domimplementationcreatedocumenttype02: OK";
	} catch (e) {
		return "domimplementationcreatedocumenttype02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var domImpl;
		var newDocType;
		var ownerDocument;
		var publicId = "http://www.w3.org/DOM/Test/dom2.dtd";
		var systemId = "dom2.dtd";
		var qualifiedName;
		qualifiedNames = new Array();
		qualifiedNames[0] = "_:_";
		qualifiedNames[1] = "_:h0";
		qualifiedNames[2] = "_:test";
		qualifiedNames[3] = "_:_.";
		qualifiedNames[4] = "_:a-";
		qualifiedNames[5] = "l_:_";
		qualifiedNames[6] = "ns:_0";
		qualifiedNames[7] = "ns:a0";
		qualifiedNames[8] = "ns0:test";
		qualifiedNames[9] = "ns:EEE.";
		qualifiedNames[10] = "ns:_-";
		qualifiedNames[11] = "a.b:c";
		qualifiedNames[12] = "a-b:c.j";
		qualifiedNames[13] = "a-b:c";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		domImpl = doc.implementation;
		for (var index_id0x0889f8d0 = 0; index_id0x0889f8d0 &lt; qualifiedNames.length; index_id0x0889f8d0++) {
			qualifiedName = qualifiedNames[index_id0x0889f8d0];
			newDocType = domImpl.createDocumentType(qualifiedName, publicId, systemId);
			if (newDocType == null) {
				return "domimplementationcreatedocumenttype02: #domimplementationcreatedocumenttype02_newDocType 'newDocType' is null";
			}
			ownerDocument = newDocType.ownerDocument;
			if (ownerDocument != null) {
				return "domimplementationcreatedocumenttype02: #domimplementationcreatedocumenttype02_ownerDocument 'ownerDocument' equals '" + ownerDocument + "' not null";
			}
		}
		return "domimplementationcreatedocumenttype02: OK";
	} catch (e) {
		return "domimplementationcreatedocumenttype02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="domimplementationcreatedocumenttype04.xml" fleur="domimplementationcreatedocumenttype04" native="domimplementationcreatedocumenttype04"><Fleur>(function(){
	var success;
	try {
		var doc;
		var domImpl;
		var newDocType;
		var publicId = "http://www.w3.org/DOM/Test/dom2.dtd";
		var systemId = "dom2.dtd";
		var qualifiedName;
		qualifiedNames = new Array();
		qualifiedNames[0] = "{";
		qualifiedNames[1] = "}";
		qualifiedNames[2] = "'";
		qualifiedNames[3] = "~";
		qualifiedNames[4] = "`";
		qualifiedNames[5] = "@";
		qualifiedNames[6] = "#";
		qualifiedNames[7] = "$";
		qualifiedNames[8] = "%";
		qualifiedNames[9] = "^";
		qualifiedNames[10] = "&amp;";
		qualifiedNames[11] = "*";
		qualifiedNames[12] = "(";
		qualifiedNames[13] = ")";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		domImpl = doc.implementation;
		for (var index_id0x08d23510 = 0; index_id0x08d23510 &lt; qualifiedNames.length; index_id0x08d23510++) {
			qualifiedName = qualifiedNames[index_id0x08d23510];
			success = false;
			try {
				newDocType = domImpl.createDocumentType(qualifiedName, publicId, systemId);
			} catch (ex) {
				if (typeof ex.code != 'undefined') {
					success = ex.code === 5;
				}
			}
			if (!success) {
				return "domimplementationcreatedocumenttype04: Exception INVALID_CHARACTER_ERR expected";
			}
		}
		return "domimplementationcreatedocumenttype04: OK";
	} catch (e) {
		return "domimplementationcreatedocumenttype04: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var domImpl;
		var newDocType;
		var publicId = "http://www.w3.org/DOM/Test/dom2.dtd";
		var systemId = "dom2.dtd";
		var qualifiedName;
		qualifiedNames = new Array();
		qualifiedNames[0] = "{";
		qualifiedNames[1] = "}";
		qualifiedNames[2] = "'";
		qualifiedNames[3] = "~";
		qualifiedNames[4] = "`";
		qualifiedNames[5] = "@";
		qualifiedNames[6] = "#";
		qualifiedNames[7] = "$";
		qualifiedNames[8] = "%";
		qualifiedNames[9] = "^";
		qualifiedNames[10] = "&amp;";
		qualifiedNames[11] = "*";
		qualifiedNames[12] = "(";
		qualifiedNames[13] = ")";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		domImpl = doc.implementation;
		for (var index_id0x08d23510 = 0; index_id0x08d23510 &lt; qualifiedNames.length; index_id0x08d23510++) {
			qualifiedName = qualifiedNames[index_id0x08d23510];
			success = false;
			try {
				newDocType = domImpl.createDocumentType(qualifiedName, publicId, systemId);
			} catch (ex) {
				if (typeof ex.code != 'undefined') {
					success = ex.code === 5;
				}
			}
			if (!success) {
				return "domimplementationcreatedocumenttype04: Exception INVALID_CHARACTER_ERR expected";
			}
		}
		return "domimplementationcreatedocumenttype04: OK";
	} catch (e) {
		return "domimplementationcreatedocumenttype04: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="domimplementationfeaturecore.xml" fleur="domimplementationfeaturecore" native="domimplementationfeaturecore"><Fleur>(function(){
	var success;
	try {
		var doc;
		var domImpl;
		var state;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		domImpl = doc.implementation;
		state = domImpl.hasFeature("core","2.0");
		if (state !== true) {
			return "domimplementationFeaturecoreAssert: 'state' equals '" + state + "' not true";
		}
		return "domimplementationFeaturecore: OK";
	} catch (e) {
		return "domimplementationFeaturecore: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var domImpl;
		var state;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		domImpl = doc.implementation;
		state = domImpl.hasFeature("core","2.0");
		if (state !== true) {
			return "domimplementationFeaturecoreAssert: 'state' equals '" + state + "' not true";
		}
		return "domimplementationFeaturecore: OK";
	} catch (e) {
		return "domimplementationFeaturecore: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="domimplementationfeaturexmlversion2.xml" fleur="domimplementationfeaturexmlversion2" native="domimplementationfeaturexmlversion2"><Fleur>(function(){
	var success;
	try {
		var doc;
		var domImpl;
		var state;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		domImpl = doc.implementation;
		state = domImpl.hasFeature("xml","2.0");
		if (state !== true) {
			return "domimplementationFeaturexmlVersion2Assert: 'state' equals '" + state + "' not true";
		}
		return "domimplementationFeaturexmlVersion2: OK";
	} catch (e) {
		return "domimplementationFeaturexmlVersion2: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var domImpl;
		var state;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		domImpl = doc.implementation;
		state = domImpl.hasFeature("xml","2.0");
		if (state !== true) {
			return "domimplementationFeaturexmlVersion2Assert: 'state' equals '" + state + "' not true";
		}
		return "domimplementationFeaturexmlVersion2: OK";
	} catch (e) {
		return "domimplementationFeaturexmlVersion2: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="domimplementationhasfeature01.xml" fleur="domimplementationhasfeature01" native="domimplementationhasfeature01"><Fleur>(function(){
	var success;
	try {
		var doc;
		var domImpl;
		var version = "";
		var version1 = "1.0";
		var version2 = "2.0";
		var featureCore;
		var featureXML;
		var success;
		featuresXML = new Array();
		featuresXML[0] = "XML";
		featuresXML[1] = "xmL";
		featuresCore = new Array();
		featuresCore[0] = "Core";
		featuresCore[1] = "CORE";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		domImpl = doc.implementation;
		for (var index_id0x09325ba0 = 0; index_id0x09325ba0 &lt; featuresXML.length; index_id0x09325ba0++) {
			featureXML = featuresXML[index_id0x09325ba0];
			success = domImpl.hasFeature(featureXML,version);
			if (success !== true) {
				return "domimplementationhasfeature01_XML_1: 'success' equals '" + success + "' not true";
			}
			success = domImpl.hasFeature(featureXML,version1);
			if (success !== true) {
				return "domimplementationhasfeature01_XML_2: 'success' equals '" + success + "' not true";
			}
		}
		for (var index_id0x09325e70 = 0; index_id0x09325e70 &lt; featuresCore.length; index_id0x09325e70++) {
			featureCore = featuresCore[index_id0x09325e70];
			success = domImpl.hasFeature(featureCore,version);
			if (success !== true) {
				return "domimplementationhasfeature01_Core_1: 'success' equals '" + success + "' not true";
			}
			success = domImpl.hasFeature(featureCore,version1);
			success = domImpl.hasFeature(featureCore,version2);
			if (success !== true) {
				return "domimplementationhasfeature01_Core_3: 'success' equals '" + success + "' not true";
			}
		}
		return "domimplementationhasfeature01: OK";
	} catch (e) {
		return "domimplementationhasfeature01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var domImpl;
		var version = "";
		var version1 = "1.0";
		var version2 = "2.0";
		var featureCore;
		var featureXML;
		var success;
		featuresXML = new Array();
		featuresXML[0] = "XML";
		featuresXML[1] = "xmL";
		featuresCore = new Array();
		featuresCore[0] = "Core";
		featuresCore[1] = "CORE";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		domImpl = doc.implementation;
		for (var index_id0x09325ba0 = 0; index_id0x09325ba0 &lt; featuresXML.length; index_id0x09325ba0++) {
			featureXML = featuresXML[index_id0x09325ba0];
			success = domImpl.hasFeature(featureXML,version);
			if (success !== true) {
				return "domimplementationhasfeature01_XML_1: 'success' equals '" + success + "' not true";
			}
			success = domImpl.hasFeature(featureXML,version1);
			if (success !== true) {
				return "domimplementationhasfeature01_XML_2: 'success' equals '" + success + "' not true";
			}
		}
		for (var index_id0x09325e70 = 0; index_id0x09325e70 &lt; featuresCore.length; index_id0x09325e70++) {
			featureCore = featuresCore[index_id0x09325e70];
			success = domImpl.hasFeature(featureCore,version);
			if (success !== true) {
				return "domimplementationhasfeature01_Core_1: 'success' equals '" + success + "' not true";
			}
			success = domImpl.hasFeature(featureCore,version1);
			success = domImpl.hasFeature(featureCore,version2);
			if (success !== true) {
				return "domimplementationhasfeature01_Core_3: 'success' equals '" + success + "' not true";
			}
		}
		return "domimplementationhasfeature01: OK";
	} catch (e) {
		return "domimplementationhasfeature01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="domimplementationhasfeature02.xml" fleur="domimplementationhasfeature02" native="domimplementationhasfeature02"><Fleur>(function(){
	var success;
	try {
		var doc;
		var domImpl;
		var success;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		domImpl = doc.implementation;
		success = domImpl.hasFeature("Blah Blah","");
		if (success !== false) {
			return "domimplementationhasfeature02: 'success' equals '" + success + "' not false";
		}
		return "domimplementationhasfeature02: OK";
	} catch (e) {
		return "domimplementationhasfeature02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var domImpl;
		var success;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		domImpl = doc.implementation;
		success = domImpl.hasFeature("Blah Blah","");
		if (success !== false) {
			return "domimplementationhasfeature02: 'success' equals '" + success + "' not false";
		}
		return "domimplementationhasfeature02: OK";
	} catch (e) {
		return "domimplementationhasfeature02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="elementgetattributenodens01.xml" fleur="elementgetattributenodens01" native="elementgetattributenodens01"><Fleur>(function(){
	var success;
	try {
		var doc;
		var element;
		var attribute1;
		var attribute2;
		var newAttribute1;
		var newAttribute2;
		var attribute;
		var attrValue;
		var attrName;
		var attNodeName;
		var attrLocalName;
		var attrNS;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		element = doc.createElementNS("namespaceURI", "root");
		attribute1 = doc.createAttributeNS("http://www.w3.org/DOM/Level2", "l2:att");
		newAttribute1 = element.setAttributeNodeNS(attribute1);
		attribute2 = doc.createAttributeNS("http://www.w3.org/DOM/Level1", "att");
		newAttribute2 = element.setAttributeNodeNS(attribute2);
		attribute = element.getAttributeNodeNS("http://www.w3.org/DOM/Level2", "att");
		attrValue = attribute.nodeValue;
		attrName = attribute.name;
		attNodeName = attribute.nodeName;
		attrLocalName = attribute.localName;
		attrNS = attribute.namespaceURI;
		if ("" !== attrValue) {
			return "elementgetattributenodens01: #elementgetattributenodens01_attrValue 'attrValue' equals '" + attrValue + "' not '" + "" + "'";
		}
		if ("l2:att" !== attrName) {
			return "elementgetattributenodens01: #elementgetattributenodens01_attrName 'attrName' equals '" + attrName + "' not '" + "l2:att" + "'";
		}
		if ("l2:att" !== attNodeName) {
			return "elementgetattributenodens01: #elementgetattributenodens01_attrNodeName 'attNodeName' equals '" + attNodeName + "' not '" + "l2:att" + "'";
		}
		if ("att" !== attrLocalName) {
			return "elementgetattributenodens01: #elementgetattributenodens01_attrLocalName 'attrLocalName' equals '" + attrLocalName + "' not '" + "att" + "'";
		}
		if ("http://www.w3.org/DOM/Level2" !== attrNS) {
			return "elementgetattributenodens01: #elementgetattributenodens01_attrNs 'attrNS' equals '" + attrNS + "' not '" + "http://www.w3.org/DOM/Level2" + "'";
		}
		return "elementgetattributenodens01: OK";
	} catch (e) {
		return "elementgetattributenodens01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var element;
		var attribute1;
		var attribute2;
		var newAttribute1;
		var newAttribute2;
		var attribute;
		var attrValue;
		var attrName;
		var attNodeName;
		var attrLocalName;
		var attrNS;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		element = doc.createElementNS("namespaceURI", "root");
		attribute1 = doc.createAttributeNS("http://www.w3.org/DOM/Level2", "l2:att");
		newAttribute1 = element.setAttributeNodeNS(attribute1);
		attribute2 = doc.createAttributeNS("http://www.w3.org/DOM/Level1", "att");
		newAttribute2 = element.setAttributeNodeNS(attribute2);
		attribute = element.getAttributeNodeNS("http://www.w3.org/DOM/Level2", "att");
		attrValue = attribute.nodeValue;
		attrName = attribute.name;
		attNodeName = attribute.nodeName;
		attrLocalName = attribute.localName;
		attrNS = attribute.namespaceURI;
		if ("" !== attrValue) {
			return "elementgetattributenodens01: #elementgetattributenodens01_attrValue 'attrValue' equals '" + attrValue + "' not '" + "" + "'";
		}
		if ("l2:att" !== attrName) {
			return "elementgetattributenodens01: #elementgetattributenodens01_attrName 'attrName' equals '" + attrName + "' not '" + "l2:att" + "'";
		}
		if ("l2:att" !== attNodeName) {
			return "elementgetattributenodens01: #elementgetattributenodens01_attrNodeName 'attNodeName' equals '" + attNodeName + "' not '" + "l2:att" + "'";
		}
		if ("att" !== attrLocalName) {
			return "elementgetattributenodens01: #elementgetattributenodens01_attrLocalName 'attrLocalName' equals '" + attrLocalName + "' not '" + "att" + "'";
		}
		if ("http://www.w3.org/DOM/Level2" !== attrNS) {
			return "elementgetattributenodens01: #elementgetattributenodens01_attrNs 'attrNS' equals '" + attrNS + "' not '" + "http://www.w3.org/DOM/Level2" + "'";
		}
		return "elementgetattributenodens01: OK";
	} catch (e) {
		return "elementgetattributenodens01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="elementgetattributenodens02.xml" fleur="elementgetattributenodens02" native="elementgetattributenodens02"><Fleur>(function(){
	var success;
	try {
		var doc;
		var element;
		var attribute;
		var newAttribute1;
		var attrValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		element = doc.createElementNS("namespaceURI", "root");
		attribute = doc.createAttributeNS("http://www.w3.org/DOM/Level2", "l2:att");
		newAttribute1 = element.setAttributeNodeNS(attribute);
		attribute = element.getAttributeNodeNS("http://www.w3.org/DOM/Level2", "att");
		attrValue = attribute.nodeValue;
		if ("" !== attrValue) {
			return "elementgetattributenodens02: #elementgetattributenodens02 'attrValue' equals '" + attrValue + "' not '" + "" + "'";
		}
		return "elementgetattributenodens02: OK";
	} catch (e) {
		return "elementgetattributenodens02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var element;
		var attribute;
		var newAttribute1;
		var attrValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		element = doc.createElementNS("namespaceURI", "root");
		attribute = doc.createAttributeNS("http://www.w3.org/DOM/Level2", "l2:att");
		newAttribute1 = element.setAttributeNodeNS(attribute);
		attribute = element.getAttributeNodeNS("http://www.w3.org/DOM/Level2", "att");
		attrValue = attribute.nodeValue;
		if ("" !== attrValue) {
			return "elementgetattributenodens02: #elementgetattributenodens02 'attrValue' equals '" + attrValue + "' not '" + "" + "'";
		}
		return "elementgetattributenodens02: OK";
	} catch (e) {
		return "elementgetattributenodens02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="elementgetattributenodens03.xml" fleur="elementgetattributenodens03" native="elementgetattributenodens03"><Fleur>(function(){
	var success;
	try {
		var doc;
		var element;
		var attribute;
		var attrValue;
		var childList;
		var nullNS = null;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		childList = doc.getElementsByTagNameNS("http://www.nist.gov", "employee");
		element = childList.item(1);
		attribute = element.getAttributeNodeNS(nullNS, "defaultAttr");
		attrValue = attribute.nodeValue;
		if ("defaultVal" !== attrValue) {
			return "elementgetattributenodens03: #elementgetattributenodens03 'attrValue' equals '" + attrValue + "' not '" + "defaultVal" + "'";
		}
		return "elementgetattributenodens03: OK";
	} catch (e) {
		return "elementgetattributenodens03: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var element;
		var attribute;
		var attrValue;
		var childList;
		var nullNS = null;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		childList = doc.getElementsByTagNameNS("http://www.nist.gov", "employee");
		element = childList.item(1);
		attribute = element.getAttributeNodeNS(nullNS, "defaultAttr");
		attrValue = attribute.nodeValue;
		if ("defaultVal" !== attrValue) {
			return "elementgetattributenodens03: #elementgetattributenodens03 'attrValue' equals '" + attrValue + "' not '" + "defaultVal" + "'";
		}
		return "elementgetattributenodens03: OK";
	} catch (e) {
		return "elementgetattributenodens03: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="elementgetattributens02.xml" fleur="elementgetattributens02" native="elementgetattributens02"><Fleur>(function(){
	var success;
	try {
		var doc;
		var element;
		var attrValue;
		var childList;
		var nullNS = null;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		childList = doc.getElementsByTagNameNS("http://www.nist.gov", "employee");
		element = childList.item(1);
		attrValue = element.getAttributeNS(nullNS, "defaultAttr");
		if ("defaultVal" !== attrValue) {
			return "elementgetattributens02: #elementgetattributens02 'attrValue' equals '" + attrValue + "' not '" + "defaultVal" + "'";
		}
		return "elementgetattributens02: OK";
	} catch (e) {
		return "elementgetattributens02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var element;
		var attrValue;
		var childList;
		var nullNS = null;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		childList = doc.getElementsByTagNameNS("http://www.nist.gov", "employee");
		element = childList.item(1);
		attrValue = element.getAttributeNS(nullNS, "defaultAttr");
		if ("defaultVal" !== attrValue) {
			return "elementgetattributens02: #elementgetattributens02 'attrValue' equals '" + attrValue + "' not '" + "defaultVal" + "'";
		}
		return "elementgetattributens02: OK";
	} catch (e) {
		return "elementgetattributens02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="elementgetelementsbytagnamens02.xml" fleur="elementgetelementsbytagnamens02" native="elementgetelementsbytagnamens02"><Fleur>(function(){
	var success;
	try {
		var doc;
		var element;
		var elementList;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		element = doc.documentElement;
		elementList = element.getElementsByTagNameNS("**", "*");
		if (elementList.length !== 0) {
			return "elementgetelementsbytagnamens02: #elementgetelementsbytagnamens02 'elementList.length' equals " + elementList.length + " not 0";
		}
		return "elementgetelementsbytagnamens02: OK";
	} catch (e) {
		return "elementgetelementsbytagnamens02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var element;
		var elementList;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		element = doc.documentElement;
		elementList = element.getElementsByTagNameNS("**", "*");
		if (elementList.length !== 0) {
			return "elementgetelementsbytagnamens02: #elementgetelementsbytagnamens02 'elementList.length' equals " + elementList.length + " not 0";
		}
		return "elementgetelementsbytagnamens02: OK";
	} catch (e) {
		return "elementgetelementsbytagnamens02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="elementgetelementsbytagnamens04.xml" fleur="elementgetelementsbytagnamens04" native="elementgetelementsbytagnamens04"><Fleur>(function(){
	var success;
	try {
		var doc;
		var element;
		var child1;
		var child2;
		var child3;
		var appendedChild;
		var elementList;
		var nullNS = null;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		element = doc.createElementNS("http://www.w3.org/DOM", "root");
		child1 = doc.createElementNS("http://www.w3.org/DOM/Level1", "dom:child");
		child2 = doc.createElementNS(nullNS, "child");
		child3 = doc.createElementNS("http://www.w3.org/DOM/Level2", "dom:child");
		appendedChild = element.appendChild(child1);
		appendedChild = element.appendChild(child2);
		appendedChild = element.appendChild(child3);
		elementList = element.getElementsByTagNameNS(nullNS, "child");
		if (elementList.length !== 1) {
			return "elementgetelementsbytagnamens04: #elementgetelementsbytagnamens04_1 'elementList.length' equals " + elementList.length + " not 1";
		}
		elementList = element.getElementsByTagNameNS("*", "child");
		if (elementList.length !== 3) {
			return "elementgetelementsbytagnamens04: #elementgetelementsbytagnamens04_2 'elementList.length' equals " + elementList.length + " not 3";
		}
		return "elementgetelementsbytagnamens04: OK";
	} catch (e) {
		return "elementgetelementsbytagnamens04: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var element;
		var child1;
		var child2;
		var child3;
		var appendedChild;
		var elementList;
		var nullNS = null;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		element = doc.createElementNS("http://www.w3.org/DOM", "root");
		child1 = doc.createElementNS("http://www.w3.org/DOM/Level1", "dom:child");
		child2 = doc.createElementNS(nullNS, "child");
		child3 = doc.createElementNS("http://www.w3.org/DOM/Level2", "dom:child");
		appendedChild = element.appendChild(child1);
		appendedChild = element.appendChild(child2);
		appendedChild = element.appendChild(child3);
		elementList = element.getElementsByTagNameNS(nullNS, "child");
		if (elementList.length !== 1) {
			return "elementgetelementsbytagnamens04: #elementgetelementsbytagnamens04_1 'elementList.length' equals " + elementList.length + " not 1";
		}
		elementList = element.getElementsByTagNameNS("*", "child");
		if (elementList.length !== 3) {
			return "elementgetelementsbytagnamens04: #elementgetelementsbytagnamens04_2 'elementList.length' equals " + elementList.length + " not 3";
		}
		return "elementgetelementsbytagnamens04: OK";
	} catch (e) {
		return "elementgetelementsbytagnamens04: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="elementgetelementsbytagnamens05.xml" fleur="elementgetelementsbytagnamens05" native="elementgetelementsbytagnamens05"><Fleur>(function(){
	var success;
	try {
		var doc;
		var element;
		var elementList;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		element = doc.documentElement;
		elementList = element.getElementsByTagNameNS("http://www.altavista.com", "*");
		if (elementList.length !== 1) {
			return "elementgetelementsbytagnamens05: #elementgetelementsbytagnamens05 'elementList.length' equals " + elementList.length + " not 1";
		}
		return "elementgetelementsbytagnamens05: OK";
	} catch (e) {
		return "elementgetelementsbytagnamens05: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var element;
		var elementList;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		element = doc.documentElement;
		elementList = element.getElementsByTagNameNS("http://www.altavista.com", "*");
		if (elementList.length !== 1) {
			return "elementgetelementsbytagnamens05: #elementgetelementsbytagnamens05 'elementList.length' equals " + elementList.length + " not 1";
		}
		return "elementgetelementsbytagnamens05: OK";
	} catch (e) {
		return "elementgetelementsbytagnamens05: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="elementhasattribute01.xml" fleur="elementhasattribute01" native="elementhasattribute01"><Fleur>(function(){
	var success;
	try {
		var doc;
		var element;
		var state;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		element = doc.documentElement;
		state = element.hasAttribute("");
		if (state !== false) {
			return "elementhasattribute01: 'state' equals '" + state + "' not false";
		}
		return "elementhasattribute01: OK";
	} catch (e) {
		return "elementhasattribute01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var element;
		var state;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		element = doc.documentElement;
		state = element.hasAttribute("");
		if (state !== false) {
			return "elementhasattribute01: 'state' equals '" + state + "' not false";
		}
		return "elementhasattribute01: OK";
	} catch (e) {
		return "elementhasattribute01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="elementhasattribute02.xml" fleur="elementhasattribute02" native="elementhasattribute02"><Fleur>(function(){
	var success;
	try {
		var doc;
		var element;
		var state;
		var elementList;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("emp:employee");
		element = elementList.item(0);
		if (element == null) {
			return "elementhasattribute02: #empEmployeeNotNull 'element' is null";
		}
		state = element.hasAttribute("defaultAttr");
		if (state !== true) {
			return "elementhasattribute02: 'state' equals '" + state + "' not true";
		}
		return "elementhasattribute02: OK";
	} catch (e) {
		return "elementhasattribute02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var element;
		var state;
		var elementList;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("emp:employee");
		element = elementList.item(0);
		if (element == null) {
			return "elementhasattribute02: #empEmployeeNotNull 'element' is null";
		}
		state = element.hasAttribute("defaultAttr");
		if (state !== true) {
			return "elementhasattribute02: 'state' equals '" + state + "' not true";
		}
		return "elementhasattribute02: OK";
	} catch (e) {
		return "elementhasattribute02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="elementhasattribute03.xml" fleur="elementhasattribute03" native="elementhasattribute03"><Fleur>(function(){
	var success;
	try {
		var doc;
		var element;
		var state;
		var attribute;
		var newAttribute;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		element = doc.createElement("address");
		attribute = doc.createAttribute("domestic");
		state = element.hasAttribute("domestic");
		if (state !== false) {
			return "elementhasattribute03_False: 'state' equals '" + state + "' not false";
		}
		newAttribute = element.setAttributeNode(attribute);
		state = element.hasAttribute("domestic");
		if (state !== true) {
			return "elementhasattribute03_True: 'state' equals '" + state + "' not true";
		}
		return "elementhasattribute03: OK";
	} catch (e) {
		return "elementhasattribute03: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var element;
		var state;
		var attribute;
		var newAttribute;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		element = doc.createElement("address");
		attribute = doc.createAttribute("domestic");
		state = element.hasAttribute("domestic");
		if (state !== false) {
			return "elementhasattribute03_False: 'state' equals '" + state + "' not false";
		}
		newAttribute = element.setAttributeNode(attribute);
		state = element.hasAttribute("domestic");
		if (state !== true) {
			return "elementhasattribute03_True: 'state' equals '" + state + "' not true";
		}
		return "elementhasattribute03: OK";
	} catch (e) {
		return "elementhasattribute03: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="elementhasattribute04.xml" fleur="elementhasattribute04" native="elementhasattribute04"><Fleur>(function(){
	var success;
	try {
		var doc;
		var element;
		var state;
		var attribute;
		var newAttribute;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		element = doc.createElement("address");
		attribute = doc.createAttribute("domestic");
		newAttribute = element.setAttributeNode(attribute);
		state = element.hasAttribute("domestic");
		if (state !== true) {
			return "elementhasattribute04: 'state' equals '" + state + "' not true";
		}
		return "elementhasattribute04: OK";
	} catch (e) {
		return "elementhasattribute04: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var element;
		var state;
		var attribute;
		var newAttribute;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		element = doc.createElement("address");
		attribute = doc.createAttribute("domestic");
		newAttribute = element.setAttributeNode(attribute);
		state = element.hasAttribute("domestic");
		if (state !== true) {
			return "elementhasattribute04: 'state' equals '" + state + "' not true";
		}
		return "elementhasattribute04: OK";
	} catch (e) {
		return "elementhasattribute04: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="elementhasattributens01.xml" fleur="elementhasattributens01" native="elementhasattributens01"><Fleur>(function(){
	var success;
	try {
		var doc;
		var element;
		var state;
		var elementList;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagNameNS("*", "employee");
		element = elementList.item(0);
		state = element.hasAttributeNS("http://www.w3.org/2000/xmlns/", "xmlns");
		if (state !== true) {
			return "elementhasattributens01: 'state' equals '" + state + "' not true";
		}
		return "elementhasattributens01: OK";
	} catch (e) {
		return "elementhasattributens01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var element;
		var state;
		var elementList;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagNameNS("*", "employee");
		element = elementList.item(0);
		state = element.hasAttributeNS("http://www.w3.org/2000/xmlns/", "xmlns");
		if (state !== true) {
			return "elementhasattributens01: 'state' equals '" + state + "' not true";
		}
		return "elementhasattributens01: OK";
	} catch (e) {
		return "elementhasattributens01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="elementhasattributens02.xml" fleur="elementhasattributens02" native="elementhasattributens02"><Fleur>(function(){
	var success;
	try {
		var doc;
		var element;
		var state;
		var attribute;
		var newAttribute;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		element = doc.createElementNS("http://www.w3.org/DOM", "address");
		attribute = doc.createAttributeNS("http://www.w3.org/DOM", "domestic");
		newAttribute = element.setAttributeNode(attribute);
		state = element.hasAttributeNS("http://www.w3.org/DOM", "domestic");
		if (state !== true) {
			return "hasDomesticAttr: 'state' equals '" + state + "' not true";
		}
		return "elementhasattributens02: OK";
	} catch (e) {
		return "elementhasattributens02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var element;
		var state;
		var attribute;
		var newAttribute;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		element = doc.createElementNS("http://www.w3.org/DOM", "address");
		attribute = doc.createAttributeNS("http://www.w3.org/DOM", "domestic");
		newAttribute = element.setAttributeNode(attribute);
		state = element.hasAttributeNS("http://www.w3.org/DOM", "domestic");
		if (state !== true) {
			return "hasDomesticAttr: 'state' equals '" + state + "' not true";
		}
		return "elementhasattributens02: OK";
	} catch (e) {
		return "elementhasattributens02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="elementhasattributens03.xml" fleur="elementhasattributens03" native="elementhasattributens03"><Fleur>(function(){
	var success;
	try {
		var doc;
		var element;
		var state;
		var attribute;
		var newAttribute;
		var nullNS = null;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		element = doc.createElementNS("http://www.w3.org/DOM", "address");
		if (element == null) {
			return "elementhasattributens03: #createElementNotNull 'element' is null";
		}
		attribute = doc.createAttributeNS(nullNS, "domestic");
		newAttribute = element.setAttributeNode(attribute);
		state = element.hasAttributeNS(nullNS, "domestic");
		if (state !== true) {
			return "elementhasattributens03: 'state' equals '" + state + "' not true";
		}
		return "elementhasattributens03: OK";
	} catch (e) {
		return "elementhasattributens03: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var element;
		var state;
		var attribute;
		var newAttribute;
		var nullNS = null;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		element = doc.createElementNS("http://www.w3.org/DOM", "address");
		if (element == null) {
			return "elementhasattributens03: #createElementNotNull 'element' is null";
		}
		attribute = doc.createAttributeNS(nullNS, "domestic");
		newAttribute = element.setAttributeNode(attribute);
		state = element.hasAttributeNS(nullNS, "domestic");
		if (state !== true) {
			return "elementhasattributens03: 'state' equals '" + state + "' not true";
		}
		return "elementhasattributens03: OK";
	} catch (e) {
		return "elementhasattributens03: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="elementremoveattributens01.xml" fleur="elementremoveattributens01" native="elementremoveattributens01"><Fleur>(function(){
	var success;
	try {
		var doc;
		var element;
		var state;
		var attribute;
		var newAttribute;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		element = doc.createElementNS("http://www.w3.org/DOM", "elem");
		attribute = doc.createAttributeNS("http://www.w3.org/DOM/Test/createAttributeNS", "attr");
		newAttribute = element.setAttributeNodeNS(attribute);
		element.removeAttributeNS("http://www.w3.org/DOM/Test/createAttributeNS", "attr");
		state = element.hasAttributeNS("http://www.w3.org/DOM/Test/createAttributeNS", "attr");
		if (state !== false) {
			return "elementremoveattributens01: 'state' equals '" + state + "' not false";
		}
		return "elementremoveattributens01: OK";
	} catch (e) {
		return "elementremoveattributens01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var element;
		var state;
		var attribute;
		var newAttribute;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		element = doc.createElementNS("http://www.w3.org/DOM", "elem");
		attribute = doc.createAttributeNS("http://www.w3.org/DOM/Test/createAttributeNS", "attr");
		newAttribute = element.setAttributeNodeNS(attribute);
		element.removeAttributeNS("http://www.w3.org/DOM/Test/createAttributeNS", "attr");
		state = element.hasAttributeNS("http://www.w3.org/DOM/Test/createAttributeNS", "attr");
		if (state !== false) {
			return "elementremoveattributens01: 'state' equals '" + state + "' not false";
		}
		return "elementremoveattributens01: OK";
	} catch (e) {
		return "elementremoveattributens01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="elementsetattributenodens01.xml" fleur="elementsetattributenodens01" native="elementsetattributenodens01"><Fleur>(function(){
	var success;
	try {
		var doc;
		var element;
		var attribute1;
		var attribute2;
		var attrNode;
		var attrName;
		var attrNS;
		var attrValue;
		var attributes;
		var newAttribute;
		var length;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		element = doc.createElementNS("http://www.w3.org/DOM/Test/Level2", "new:element");
		attribute1 = doc.createAttributeNS("http://www.w3.org/DOM/Test/att1", "p1:att");
		attribute2 = doc.createAttributeNS("http://www.w3.org/DOM/Test/att1", "p2:att");
		attribute2.value = "value2";
		newAttribute = element.setAttributeNodeNS(attribute1);
		newAttribute = element.setAttributeNodeNS(attribute2);
		attrNode = element.getAttributeNodeNS("http://www.w3.org/DOM/Test/att1", "att");
		attrName = attrNode.nodeName;
		attrNS = attrNode.namespaceURI;
		if ("p2:att" !== attrName) {
			return "elementsetattributenodens01: #elementsetattributenodens01_attrName 'attrName' equals '" + attrName + "' not '" + "p2:att" + "'";
		}
		if ("http://www.w3.org/DOM/Test/att1" !== attrNS) {
			return "elementsetattributenodens01: #elementsetattributenodens01_attrNS 'attrNS' equals '" + attrNS + "' not '" + "http://www.w3.org/DOM/Test/att1" + "'";
		}
		attributes = element.attributes;
		length = attributes.length;
		if (1 !== length) {
			return "elementsetattributenodens01: #length 'length' equals '" + length + "' not '" + 1 + "'";
		}
		return "elementsetattributenodens01: OK";
	} catch (e) {
		return "elementsetattributenodens01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var element;
		var attribute1;
		var attribute2;
		var attrNode;
		var attrName;
		var attrNS;
		var attrValue;
		var attributes;
		var newAttribute;
		var length;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		element = doc.createElementNS("http://www.w3.org/DOM/Test/Level2", "new:element");
		attribute1 = doc.createAttributeNS("http://www.w3.org/DOM/Test/att1", "p1:att");
		attribute2 = doc.createAttributeNS("http://www.w3.org/DOM/Test/att1", "p2:att");
		attribute2.value = "value2";
		newAttribute = element.setAttributeNodeNS(attribute1);
		newAttribute = element.setAttributeNodeNS(attribute2);
		attrNode = element.getAttributeNodeNS("http://www.w3.org/DOM/Test/att1", "att");
		attrName = attrNode.nodeName;
		attrNS = attrNode.namespaceURI;
		if ("p2:att" !== attrName) {
			return "elementsetattributenodens01: #elementsetattributenodens01_attrName 'attrName' equals '" + attrName + "' not '" + "p2:att" + "'";
		}
		if ("http://www.w3.org/DOM/Test/att1" !== attrNS) {
			return "elementsetattributenodens01: #elementsetattributenodens01_attrNS 'attrNS' equals '" + attrNS + "' not '" + "http://www.w3.org/DOM/Test/att1" + "'";
		}
		attributes = element.attributes;
		length = attributes.length;
		if (1 !== length) {
			return "elementsetattributenodens01: #length 'length' equals '" + length + "' not '" + 1 + "'";
		}
		return "elementsetattributenodens01: OK";
	} catch (e) {
		return "elementsetattributenodens01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="elementsetattributenodens02.xml" fleur="elementsetattributenodens02" native="elementsetattributenodens02"><Fleur>(function(){
	var success;
	try {
		var doc;
		var element;
		var element2;
		var attribute;
		var attributeCloned;
		var newAttr;
		var elementList;
		var attrName;
		var attrValue;
		var nullNS = null;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagNameNS("http://www.nist.gov", "address");
		element = elementList.item(1);
		attribute = element.getAttributeNodeNS(nullNS, "street");
		attributeCloned = attribute.cloneNode(true);
		element2 = elementList.item(2);
		newAttr = element2.setAttributeNodeNS(attributeCloned);
		attrName = newAttr.nodeName;
		attrValue = newAttr.nodeValue;
		if ("street" !== attrName) {
			return "elementsetattributenodens02: #elementsetattributenodens02_attrName 'attrName' equals '" + attrName + "' not '" + "street" + "'";
		}
		if ("Yes" !== attrValue) {
			return "elementsetattributenodens02: #elementsetattributenodens02_attrValue 'attrValue' equals '" + attrValue + "' not '" + "Yes" + "'";
		}
		return "elementsetattributenodens02: OK";
	} catch (e) {
		return "elementsetattributenodens02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var element;
		var element2;
		var attribute;
		var attributeCloned;
		var newAttr;
		var elementList;
		var attrName;
		var attrValue;
		var nullNS = null;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagNameNS("http://www.nist.gov", "address");
		element = elementList.item(1);
		attribute = element.getAttributeNodeNS(nullNS, "street");
		attributeCloned = attribute.cloneNode(true);
		element2 = elementList.item(2);
		newAttr = element2.setAttributeNodeNS(attributeCloned);
		attrName = newAttr.nodeName;
		attrValue = newAttr.nodeValue;
		if ("street" !== attrName) {
			return "elementsetattributenodens02: #elementsetattributenodens02_attrName 'attrName' equals '" + attrName + "' not '" + "street" + "'";
		}
		if ("Yes" !== attrValue) {
			return "elementsetattributenodens02: #elementsetattributenodens02_attrValue 'attrValue' equals '" + attrValue + "' not '" + "Yes" + "'";
		}
		return "elementsetattributenodens02: OK";
	} catch (e) {
		return "elementsetattributenodens02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="elementsetattributenodens03.xml" fleur="elementsetattributenodens03" native="elementsetattributenodens03"><Fleur>(function(){
	var success;
	try {
		var doc;
		var element1;
		var element2;
		var attribute;
		var newAttribute;
		var elementList;
		var nullNS = null;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagNameNS("http://www.nist.gov", "address");
		element1 = elementList.item(1);
		attribute = element1.getAttributeNodeNS(nullNS, "street");
		element2 = elementList.item(2);
		success = false;
		try {
			newAttribute = element2.setAttributeNodeNS(attribute);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 10;
			}
		}
		if (!success) {
			return "elementsetattributenodens03: Exception INUSE_ATTRIBUTE_ERR expected";
		}
		return "elementsetattributenodens03: OK";
	} catch (e) {
		return "elementsetattributenodens03: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var element1;
		var element2;
		var attribute;
		var newAttribute;
		var elementList;
		var nullNS = null;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagNameNS("http://www.nist.gov", "address");
		element1 = elementList.item(1);
		attribute = element1.getAttributeNodeNS(nullNS, "street");
		element2 = elementList.item(2);
		success = false;
		try {
			newAttribute = element2.setAttributeNodeNS(attribute);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 10;
			}
		}
		if (!success) {
			return "elementsetattributenodens03: Exception INUSE_ATTRIBUTE_ERR expected";
		}
		return "elementsetattributenodens03: OK";
	} catch (e) {
		return "elementsetattributenodens03: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="elementsetattributenodens04.xml" fleur="elementsetattributenodens04" native="elementsetattributenodens04"><Fleur>(function(){
	var success;
	try {
		var doc;
		var element1;
		var element2;
		var attribute;
		var newAttribute;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		element1 = doc.createElementNS("http://www.w3.org/DOM/Test", "elem1");
		element2 = doc.createElementNS("http://www.w3.org/DOM/Test", "elem2");
		attribute = doc.createAttributeNS("http://www.w3.org/DOM/Test", "attr");
		newAttribute = element1.setAttributeNodeNS(attribute);
		success = false;
		try {
			newAttribute = element2.setAttributeNodeNS(attribute);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 10;
			}
		}
		if (!success) {
			return "elementsetattributenodens04: Exception INUSE_ATTRIBUTE_ERR expected";
		}
		return "elementsetattributenodens04: OK";
	} catch (e) {
		return "elementsetattributenodens04: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var element1;
		var element2;
		var attribute;
		var newAttribute;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		element1 = doc.createElementNS("http://www.w3.org/DOM/Test", "elem1");
		element2 = doc.createElementNS("http://www.w3.org/DOM/Test", "elem2");
		attribute = doc.createAttributeNS("http://www.w3.org/DOM/Test", "attr");
		newAttribute = element1.setAttributeNodeNS(attribute);
		success = false;
		try {
			newAttribute = element2.setAttributeNodeNS(attribute);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 10;
			}
		}
		if (!success) {
			return "elementsetattributenodens04: Exception INUSE_ATTRIBUTE_ERR expected";
		}
		return "elementsetattributenodens04: OK";
	} catch (e) {
		return "elementsetattributenodens04: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="elementsetattributenodens05.xml" fleur="elementsetattributenodens05" native="elementsetattributenodens05"><Fleur>(function(){
	var success;
	try {
		var doc;
		var docAlt;
		var element;
		var attribute;
		var newAttribute;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		var docAltReq = new XMLHttpRequest();
		docAltReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docAltReq.send();
		docAlt = new Fleur.DOMParser().parseFromString(docAltReq.responseText, "text/xml");
		element = doc.createElementNS("http://www.w3.org/DOM/Test", "elem1");
		attribute = docAlt.createAttributeNS("http://www.w3.org/DOM/Test", "attr");
		success = false;
		try {
			newAttribute = element.setAttributeNodeNS(attribute);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 4;
			}
		}
		if (!success) {
			return "elementsetattributenodens05: Exception WRONG_DOCUMENT_ERR expected";
		}
		return "elementsetattributenodens05: OK";
	} catch (e) {
		return "elementsetattributenodens05: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var docAlt;
		var element;
		var attribute;
		var newAttribute;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		var docAltReq = new XMLHttpRequest();
		docAltReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docAltReq.send();
		docAlt = new DOMParser().parseFromString(docAltReq.responseText, "text/xml");
		element = doc.createElementNS("http://www.w3.org/DOM/Test", "elem1");
		attribute = docAlt.createAttributeNS("http://www.w3.org/DOM/Test", "attr");
		success = false;
		try {
			newAttribute = element.setAttributeNodeNS(attribute);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 4;
			}
		}
		if (!success) {
			return "elementsetattributenodens05: Exception WRONG_DOCUMENT_ERR expected";
		}
		return "elementsetattributenodens05: OK";
	} catch (e) {
		return "elementsetattributenodens05: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="elementsetattributenodens06.xml" fleur="elementsetattributenodens06" native="elementsetattributenodens06"><Fleur>(function(){
	var success;
	try {
		var doc;
		var element;
		var attribute;
		var attribute2;
		var entRef;
		var elementList;
		var newAttribute;
		var newChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		element = doc.createElementNS("http://www.w3.org/DOM/Test", "elem1");
		attribute = doc.createAttributeNS("http://www.w3.org/DOM/Test", "attr");
		entRef = doc.createEntityReference("ent4");
		newChild = attribute.appendChild(entRef);
		newAttribute = element.setAttributeNodeNS(attribute);
		elementList = entRef.childNodes;
		element = elementList.item(0);
		attribute2 = doc.createAttributeNS("http://www.w3.org/DOM/Test", "attr2");
		success = false;
		try {
			newAttribute = element.setAttributeNodeNS(attribute2);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "elementsetattributenodens06: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "elementsetattributenodens06: OK";
	} catch (e) {
		return "elementsetattributenodens06: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var element;
		var attribute;
		var attribute2;
		var entRef;
		var elementList;
		var newAttribute;
		var newChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		element = doc.createElementNS("http://www.w3.org/DOM/Test", "elem1");
		attribute = doc.createAttributeNS("http://www.w3.org/DOM/Test", "attr");
		entRef = doc.createEntityReference("ent4");
		newChild = attribute.appendChild(entRef);
		newAttribute = element.setAttributeNodeNS(attribute);
		elementList = entRef.childNodes;
		element = elementList.item(0);
		attribute2 = doc.createAttributeNS("http://www.w3.org/DOM/Test", "attr2");
		success = false;
		try {
			newAttribute = element.setAttributeNodeNS(attribute2);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "elementsetattributenodens06: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "elementsetattributenodens06: OK";
	} catch (e) {
		return "elementsetattributenodens06: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="elementsetattributens01.xml" fleur="elementsetattributens01" native="elementsetattributens01"><Fleur>(function(){
	var success;
	try {
		var doc;
		var element;
		var attribute;
		var attrName;
		var attrValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		element = doc.createElementNS("http://www.w3.org/DOM", "dom:elem");
		element.setAttributeNS("http://www.w3.org/DOM/Test/setAttributeNS", "attr", "value");
		attribute = element.getAttributeNodeNS("http://www.w3.org/DOM/Test/setAttributeNS", "attr");
		attrName = attribute.nodeName;
		attrValue = attribute.nodeValue;
		if ("attr" !== attrName) {
			return "elementsetattributens01: #elementsetattributens01_attrName 'attrName' equals '" + attrName + "' not '" + "attr" + "'";
		}
		if ("value" !== attrValue) {
			return "elementsetattributens01: #elementsetattributens01_attrValue 'attrValue' equals '" + attrValue + "' not '" + "value" + "'";
		}
		return "elementsetattributens01: OK";
	} catch (e) {
		return "elementsetattributens01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var element;
		var attribute;
		var attrName;
		var attrValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		element = doc.createElementNS("http://www.w3.org/DOM", "dom:elem");
		element.setAttributeNS("http://www.w3.org/DOM/Test/setAttributeNS", "attr", "value");
		attribute = element.getAttributeNodeNS("http://www.w3.org/DOM/Test/setAttributeNS", "attr");
		attrName = attribute.nodeName;
		attrValue = attribute.nodeValue;
		if ("attr" !== attrName) {
			return "elementsetattributens01: #elementsetattributens01_attrName 'attrName' equals '" + attrName + "' not '" + "attr" + "'";
		}
		if ("value" !== attrValue) {
			return "elementsetattributens01: #elementsetattributens01_attrValue 'attrValue' equals '" + attrValue + "' not '" + "value" + "'";
		}
		return "elementsetattributens01: OK";
	} catch (e) {
		return "elementsetattributens01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="elementsetattributens02.xml" fleur="elementsetattributens02" native="elementsetattributens02"><Fleur>(function(){
	var success;
	try {
		var doc;
		var element;
		var attribute;
		var elementList;
		var attrName;
		var attrValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagNameNS("*", "address");
		element = elementList.item(0);
		element.setAttributeNS("http://www.w3.org/DOM/Test/setAttributeNS", "this:street", "Silver Street");
		attribute = element.getAttributeNodeNS("http://www.w3.org/DOM/Test/setAttributeNS", "street");
		attrName = attribute.nodeName;
		attrValue = attribute.nodeValue;
		if ("this:street" !== attrName) {
			return "elementsetattributens02: #elementsetattributens02_attrName 'attrName' equals '" + attrName + "' not '" + "this:street" + "'";
		}
		if ("Silver Street" !== attrValue) {
			return "elementsetattributens02: #elementsetattributens02_attrValue 'attrValue' equals '" + attrValue + "' not '" + "Silver Street" + "'";
		}
		return "elementsetattributens02: OK";
	} catch (e) {
		return "elementsetattributens02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var element;
		var attribute;
		var elementList;
		var attrName;
		var attrValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagNameNS("*", "address");
		element = elementList.item(0);
		element.setAttributeNS("http://www.w3.org/DOM/Test/setAttributeNS", "this:street", "Silver Street");
		attribute = element.getAttributeNodeNS("http://www.w3.org/DOM/Test/setAttributeNS", "street");
		attrName = attribute.nodeName;
		attrValue = attribute.nodeValue;
		if ("this:street" !== attrName) {
			return "elementsetattributens02: #elementsetattributens02_attrName 'attrName' equals '" + attrName + "' not '" + "this:street" + "'";
		}
		if ("Silver Street" !== attrValue) {
			return "elementsetattributens02: #elementsetattributens02_attrValue 'attrValue' equals '" + attrValue + "' not '" + "Silver Street" + "'";
		}
		return "elementsetattributens02: OK";
	} catch (e) {
		return "elementsetattributens02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="elementsetattributens03.xml" fleur="elementsetattributens03" native="elementsetattributens03"><Fleur>(function(){
	var success;
	try {
		var doc;
		var element;
		var attribute;
		var elementList;
		var attrName;
		var attrValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("emp:employee");
		element = elementList.item(0);
		if (element == null) {
			return "elementsetattributens03: #empEmployeeNotNull 'element' is null";
		}
		element.setAttributeNS("http://www.w3.org/DOM/Test/1", "defaultAttr", "default1");
		element.setAttributeNS("http://www.w3.org/DOM/Test/2", "defaultAttr", "default2");
		attribute = element.getAttributeNodeNS("http://www.w3.org/DOM/Test/1", "defaultAttr");
		attrName = attribute.nodeName;
		attrValue = attribute.nodeValue;
		if ("defaultAttr" !== attrName) {
			return "elementsetattributens03: #elementsetattributens03_attrName 'attrName' equals '" + attrName + "' not '" + "defaultAttr" + "'";
		}
		if ("default1" !== attrValue) {
			return "elementsetattributens03: #elementsetattributens03_attrValue 'attrValue' equals '" + attrValue + "' not '" + "default1" + "'";
		}
		return "elementsetattributens03: OK";
	} catch (e) {
		return "elementsetattributens03: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var element;
		var attribute;
		var elementList;
		var attrName;
		var attrValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("emp:employee");
		element = elementList.item(0);
		if (element == null) {
			return "elementsetattributens03: #empEmployeeNotNull 'element' is null";
		}
		element.setAttributeNS("http://www.w3.org/DOM/Test/1", "defaultAttr", "default1");
		element.setAttributeNS("http://www.w3.org/DOM/Test/2", "defaultAttr", "default2");
		attribute = element.getAttributeNodeNS("http://www.w3.org/DOM/Test/1", "defaultAttr");
		attrName = attribute.nodeName;
		attrValue = attribute.nodeValue;
		if ("defaultAttr" !== attrName) {
			return "elementsetattributens03: #elementsetattributens03_attrName 'attrName' equals '" + attrName + "' not '" + "defaultAttr" + "'";
		}
		if ("default1" !== attrValue) {
			return "elementsetattributens03: #elementsetattributens03_attrValue 'attrValue' equals '" + attrValue + "' not '" + "default1" + "'";
		}
		return "elementsetattributens03: OK";
	} catch (e) {
		return "elementsetattributens03: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="elementsetattributens04.xml" fleur="elementsetattributens04" native="elementsetattributens04"><Fleur>(function(){
	var success;
	try {
		var doc;
		var element;
		var qualifiedName;
		qualifiedNames = new Array();
		qualifiedNames[0] = "/";
		qualifiedNames[1] = "//";
		qualifiedNames[2] = "\\";
		qualifiedNames[3] = ";";
		qualifiedNames[4] = "&amp;";
		qualifiedNames[5] = "*";
		qualifiedNames[6] = "]]";
		qualifiedNames[7] = "&gt;";
		qualifiedNames[8] = "&lt;";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		element = doc.createElementNS("http://www.w3.org/DOM/Test/L2", "dom:elem");
		for (var index_id0x0a24b600 = 0; index_id0x0a24b600 &lt; qualifiedNames.length; index_id0x0a24b600++) {
			qualifiedName = qualifiedNames[index_id0x0a24b600];
			success = false;
			try {
				element.setAttributeNS("http://www.w3.org/DOM/Test/L2", qualifiedName, "test");
			} catch (ex) {
				if (typeof ex.code != 'undefined') {
					success = ex.code === 5;
				}
			}
			if (!success) {
				return "elementsetattributens04: Exception INVALID_CHARACTER_ERR expected";
			}
		}
		return "elementsetattributens04: OK";
	} catch (e) {
		return "elementsetattributens04: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var element;
		var qualifiedName;
		qualifiedNames = new Array();
		qualifiedNames[0] = "/";
		qualifiedNames[1] = "//";
		qualifiedNames[2] = "\\";
		qualifiedNames[3] = ";";
		qualifiedNames[4] = "&amp;";
		qualifiedNames[5] = "*";
		qualifiedNames[6] = "]]";
		qualifiedNames[7] = "&gt;";
		qualifiedNames[8] = "&lt;";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		element = doc.createElementNS("http://www.w3.org/DOM/Test/L2", "dom:elem");
		for (var index_id0x0a24b600 = 0; index_id0x0a24b600 &lt; qualifiedNames.length; index_id0x0a24b600++) {
			qualifiedName = qualifiedNames[index_id0x0a24b600];
			success = false;
			try {
				element.setAttributeNS("http://www.w3.org/DOM/Test/L2", qualifiedName, "test");
			} catch (ex) {
				if (typeof ex.code != 'undefined') {
					success = ex.code === 5;
				}
			}
			if (!success) {
				return "elementsetattributens04: Exception INVALID_CHARACTER_ERR expected";
			}
		}
		return "elementsetattributens04: OK";
	} catch (e) {
		return "elementsetattributens04: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="elementsetattributens05.xml" fleur="elementsetattributens05" native="elementsetattributens05"><Fleur>(function(){
	var success;
	try {
		var doc;
		var element;
		var nullNS = null;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		element = doc.createElementNS("http://www.w3.org/DOM/Test/L2", "dom:elem");
		success = false;
		try {
			element.setAttributeNS(nullNS, "dom:root", "test");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 14;
			}
		}
		if (!success) {
			return "elementsetattributens05: Exception NAMESPACE_ERR expected";
		}
		return "elementsetattributens05: OK";
	} catch (e) {
		return "elementsetattributens05: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var element;
		var nullNS = null;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		element = doc.createElementNS("http://www.w3.org/DOM/Test/L2", "dom:elem");
		success = false;
		try {
			element.setAttributeNS(nullNS, "dom:root", "test");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 14;
			}
		}
		if (!success) {
			return "elementsetattributens05: Exception NAMESPACE_ERR expected";
		}
		return "elementsetattributens05: OK";
	} catch (e) {
		return "elementsetattributens05: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="elementsetattributens08.xml" fleur="elementsetattributens08" native="elementsetattributens08"><Fleur>(function(){
	var success;
	try {
		var doc;
		var element;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		element = doc.createElementNS("http://www.w3.org/DOMTest/level2", "dom:elem");
		success = false;
		try {
			element.setAttributeNS("http://www.w3.org/DOMTest/level2", "xmlns", "test");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 14;
			}
		}
		if (!success) {
			return "elementsetattributens08: Exception NAMESPACE_ERR expected";
		}
		success = false;
		try {
			element.setAttributeNS("http://www.w3.org/DOMTest/level2", "xmlns:root", "test");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 14;
			}
		}
		if (!success) {
			return "elementsetattributens08: Exception NAMESPACE_ERR expected";
		}
		return "elementsetattributens08: OK";
	} catch (e) {
		return "elementsetattributens08: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var element;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		element = doc.createElementNS("http://www.w3.org/DOMTest/level2", "dom:elem");
		success = false;
		try {
			element.setAttributeNS("http://www.w3.org/DOMTest/level2", "xmlns", "test");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 14;
			}
		}
		if (!success) {
			return "elementsetattributens08: Exception NAMESPACE_ERR expected";
		}
		success = false;
		try {
			element.setAttributeNS("http://www.w3.org/DOMTest/level2", "xmlns:root", "test");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 14;
			}
		}
		if (!success) {
			return "elementsetattributens08: Exception NAMESPACE_ERR expected";
		}
		return "elementsetattributens08: OK";
	} catch (e) {
		return "elementsetattributens08: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="elementsetattributensurinull.xml" fleur="elementsetattributensurinull" native="elementsetattributensurinull"><Fleur>(function(){
	var success;
	try {
		var namespaceURI = null;
		var qualifiedName = "emp:qualifiedName";
		var doc;
		var elementList;
		var testAddr;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		testAddr = elementList.item(0);
		success = false;
		try {
			testAddr.setAttributeNS(namespaceURI, qualifiedName, "newValue");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 14;
			}
		}
		if (!success) {
			return "elementSetAttributeNSURINull: Exception NAMESPACE_ERR expected";
		}
		return "elementSetAttributeNSURINull: OK";
	} catch (e) {
		return "elementSetAttributeNSURINull: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var namespaceURI = null;
		var qualifiedName = "emp:qualifiedName";
		var doc;
		var elementList;
		var testAddr;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		testAddr = elementList.item(0);
		success = false;
		try {
			testAddr.setAttributeNS(namespaceURI, qualifiedName, "newValue");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 14;
			}
		}
		if (!success) {
			return "elementSetAttributeNSURINull: Exception NAMESPACE_ERR expected";
		}
		return "elementSetAttributeNSURINull: OK";
	} catch (e) {
		return "elementSetAttributeNSURINull: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="getAttributeNS01.xml" fleur="getAttributeNS01" native="getAttributeNS01"><Fleur>(function(){
	var success;
	try {
		var namespaceURI = "http://www.nist.gov";
		var localName = "district";
		var qualifiedName = "emp:district";
		var doc;
		var elementList;
		var testAddr;
		var attrValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("emp:address");
		testAddr = elementList.item(0);
		attrValue = testAddr.getAttributeNS(namespaceURI, localName);
		if ("DISTRICT" !== attrValue) {
			return "getAttributeNS01: #attrValue 'attrValue' equals '" + attrValue + "' not '" + "DISTRICT" + "'";
		}
		return "getAttributeNS01: OK";
	} catch (e) {
		return "getAttributeNS01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var namespaceURI = "http://www.nist.gov";
		var localName = "district";
		var qualifiedName = "emp:district";
		var doc;
		var elementList;
		var testAddr;
		var attrValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("emp:address");
		testAddr = elementList.item(0);
		attrValue = testAddr.getAttributeNS(namespaceURI, localName);
		if ("DISTRICT" !== attrValue) {
			return "getAttributeNS01: #attrValue 'attrValue' equals '" + attrValue + "' not '" + "DISTRICT" + "'";
		}
		return "getAttributeNS01: OK";
	} catch (e) {
		return "getAttributeNS01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="getAttributeNS02.xml" fleur="getAttributeNS02" native="getAttributeNS02"><Fleur>(function(){
	var success;
	try {
		var namespaceURI = "http://www.nist.gov";
		var localName = "district";
		var qualifiedName = "emp:district";
		var doc;
		var newAttribute;
		var elementList;
		var testAddr;
		var districtAttr;
		var attrValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		newAttribute = doc.createAttributeNS(namespaceURI, qualifiedName);
		elementList = doc.getElementsByTagName("emp:address");
		testAddr = elementList.item(0);
		if (testAddr == null) {
			return "getAttributeNS02: #empAddrNotNull 'testAddr' is null";
		}
		districtAttr = testAddr.setAttributeNodeNS(newAttribute);
		elementList = doc.getElementsByTagName("emp:address");
		testAddr = elementList.item(0);
		attrValue = testAddr.getAttributeNS(namespaceURI, localName);
		if ("" !== attrValue) {
			return "getAttributeNS02: #throw_Equals 'attrValue' equals '" + attrValue + "' not '" + "" + "'";
		}
		return "getAttributeNS02: OK";
	} catch (e) {
		return "getAttributeNS02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var namespaceURI = "http://www.nist.gov";
		var localName = "district";
		var qualifiedName = "emp:district";
		var doc;
		var newAttribute;
		var elementList;
		var testAddr;
		var districtAttr;
		var attrValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		newAttribute = doc.createAttributeNS(namespaceURI, qualifiedName);
		elementList = doc.getElementsByTagName("emp:address");
		testAddr = elementList.item(0);
		if (testAddr == null) {
			return "getAttributeNS02: #empAddrNotNull 'testAddr' is null";
		}
		districtAttr = testAddr.setAttributeNodeNS(newAttribute);
		elementList = doc.getElementsByTagName("emp:address");
		testAddr = elementList.item(0);
		attrValue = testAddr.getAttributeNS(namespaceURI, localName);
		if ("" !== attrValue) {
			return "getAttributeNS02: #throw_Equals 'attrValue' equals '" + attrValue + "' not '" + "" + "'";
		}
		return "getAttributeNS02: OK";
	} catch (e) {
		return "getAttributeNS02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="getAttributeNS03.xml" fleur="getAttributeNS03" native="getAttributeNS03"><Fleur>(function(){
	var success;
	try {
		var namespaceURI = "http://www.nist.gov";
		var localName = "domestic";
		var doc;
		var elementList;
		var testAddr;
		var attrValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("emp:address");
		testAddr = elementList.item(0);
		if (testAddr == null) {
			return "getAttributeNS03: #empAddrNotNull 'testAddr' is null";
		}
		testAddr.removeAttributeNS(namespaceURI, localName);
		attrValue = testAddr.getAttributeNS(namespaceURI, localName);
		if ("" !== attrValue) {
			return "getAttributeNS03: #throw_Equals 'attrValue' equals '" + attrValue + "' not '" + "" + "'";
		}
		return "getAttributeNS03: OK";
	} catch (e) {
		return "getAttributeNS03: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var namespaceURI = "http://www.nist.gov";
		var localName = "domestic";
		var doc;
		var elementList;
		var testAddr;
		var attrValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("emp:address");
		testAddr = elementList.item(0);
		if (testAddr == null) {
			return "getAttributeNS03: #empAddrNotNull 'testAddr' is null";
		}
		testAddr.removeAttributeNS(namespaceURI, localName);
		attrValue = testAddr.getAttributeNS(namespaceURI, localName);
		if ("" !== attrValue) {
			return "getAttributeNS03: #throw_Equals 'attrValue' equals '" + attrValue + "' not '" + "" + "'";
		}
		return "getAttributeNS03: OK";
	} catch (e) {
		return "getAttributeNS03: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="getAttributeNS04.xml" fleur="getAttributeNS04" native="getAttributeNS04"><Fleur>(function(){
	var success;
	try {
		var namespaceURI = "http://www.nist.gov";
		var localName = "blank";
		var qualifiedName = "emp:blank";
		var doc;
		var newAttribute;
		var elementList;
		var testAddr;
		var districtAttr;
		var attrValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		newAttribute = doc.createAttributeNS(namespaceURI, qualifiedName);
		elementList = doc.getElementsByTagName("emp:address");
		testAddr = elementList.item(0);
		if (testAddr == null) {
			return "getAttributeNS04: #empAddrNotNull 'testAddr' is null";
		}
		testAddr.setAttributeNS(namespaceURI, qualifiedName, "NewValue");
		attrValue = testAddr.getAttributeNS(namespaceURI, localName);
		if ("NewValue" !== attrValue) {
			return "getAttributeNS04: #throw_Equals 'attrValue' equals '" + attrValue + "' not '" + "NewValue" + "'";
		}
		return "getAttributeNS04: OK";
	} catch (e) {
		return "getAttributeNS04: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var namespaceURI = "http://www.nist.gov";
		var localName = "blank";
		var qualifiedName = "emp:blank";
		var doc;
		var newAttribute;
		var elementList;
		var testAddr;
		var districtAttr;
		var attrValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		newAttribute = doc.createAttributeNS(namespaceURI, qualifiedName);
		elementList = doc.getElementsByTagName("emp:address");
		testAddr = elementList.item(0);
		if (testAddr == null) {
			return "getAttributeNS04: #empAddrNotNull 'testAddr' is null";
		}
		testAddr.setAttributeNS(namespaceURI, qualifiedName, "NewValue");
		attrValue = testAddr.getAttributeNS(namespaceURI, localName);
		if ("NewValue" !== attrValue) {
			return "getAttributeNS04: #throw_Equals 'attrValue' equals '" + attrValue + "' not '" + "NewValue" + "'";
		}
		return "getAttributeNS04: OK";
	} catch (e) {
		return "getAttributeNS04: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="getAttributeNS05.xml" fleur="getAttributeNS05" native="getAttributeNS05"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testAddr;
		var attrValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("emp:address");
		testAddr = elementList.item(0);
		if (testAddr == null) {
			return "getAttributeNS05: #empAddrNotNull 'testAddr' is null";
		}
		attrValue = testAddr.getAttributeNS("http://www.nist.gov", "domestic");
		if ("Yes" !== attrValue) {
			return "getAttributeNS05: #attrValue 'attrValue' equals '" + attrValue + "' not '" + "Yes" + "'";
		}
		return "getAttributeNS05: OK";
	} catch (e) {
		return "getAttributeNS05: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testAddr;
		var attrValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("emp:address");
		testAddr = elementList.item(0);
		if (testAddr == null) {
			return "getAttributeNS05: #empAddrNotNull 'testAddr' is null";
		}
		attrValue = testAddr.getAttributeNS("http://www.nist.gov", "domestic");
		if ("Yes" !== attrValue) {
			return "getAttributeNS05: #attrValue 'attrValue' equals '" + attrValue + "' not '" + "Yes" + "'";
		}
		return "getAttributeNS05: OK";
	} catch (e) {
		return "getAttributeNS05: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="getAttributeNodeNS01.xml" fleur="getAttributeNodeNS01" native="getAttributeNodeNS01"><Fleur>(function(){
	var success;
	try {
		var namespaceURI = "http://www.nist.gov";
		var localName = "invalidlocalname";
		var doc;
		var elementList;
		var testAddr;
		var attribute;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("emp:address");
		testAddr = elementList.item(0);
		if (testAddr == null) {
			return "getAttributeNodeNS01: #empAddrNotNull 'testAddr' is null";
		}
		attribute = testAddr.getAttributeNodeNS(namespaceURI, localName);
		if (attribute != null) {
			return "getAttributeNodeNS01: #throw_Null 'attribute' equals '" + attribute + "' not null";
		}
		return "getAttributeNodeNS01: OK";
	} catch (e) {
		return "getAttributeNodeNS01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var namespaceURI = "http://www.nist.gov";
		var localName = "invalidlocalname";
		var doc;
		var elementList;
		var testAddr;
		var attribute;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("emp:address");
		testAddr = elementList.item(0);
		if (testAddr == null) {
			return "getAttributeNodeNS01: #empAddrNotNull 'testAddr' is null";
		}
		attribute = testAddr.getAttributeNodeNS(namespaceURI, localName);
		if (attribute != null) {
			return "getAttributeNodeNS01: #throw_Null 'attribute' equals '" + attribute + "' not null";
		}
		return "getAttributeNodeNS01: OK";
	} catch (e) {
		return "getAttributeNodeNS01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="getAttributeNodeNS02.xml" fleur="getAttributeNodeNS02" native="getAttributeNodeNS02"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testAddr;
		var attribute;
		var attrName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("emp:address");
		testAddr = elementList.item(0);
		if (testAddr == null) {
			return "getAttributeNodeNS02: #empAddrNotNull 'testAddr' is null";
		}
		attribute = testAddr.getAttributeNodeNS("http://www.nist.gov", "domestic");
		attrName = attribute.nodeName;
		if ("emp:domestic" !== attrName) {
			return "getAttributeNodeNS02: #attrName 'attrName' equals '" + attrName + "' not '" + "emp:domestic" + "'";
		}
		return "getAttributeNodeNS02: OK";
	} catch (e) {
		return "getAttributeNodeNS02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testAddr;
		var attribute;
		var attrName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("emp:address");
		testAddr = elementList.item(0);
		if (testAddr == null) {
			return "getAttributeNodeNS02: #empAddrNotNull 'testAddr' is null";
		}
		attribute = testAddr.getAttributeNodeNS("http://www.nist.gov", "domestic");
		attrName = attribute.nodeName;
		if ("emp:domestic" !== attrName) {
			return "getAttributeNodeNS02: #attrName 'attrName' equals '" + attrName + "' not '" + "emp:domestic" + "'";
		}
		return "getAttributeNodeNS02: OK";
	} catch (e) {
		return "getAttributeNodeNS02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="getElementById01.xml" fleur="getElementById01" native="getElementById01"><Fleur>(function(){
	var success;
	try {
		var doc;
		var element;
		var tagname;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		element = doc.getElementById("CANADA");
		tagname = element.tagName;
		if ("emp:address" !== tagname) {
			return "getElementById01: #throw_Equals 'tagname' equals '" + tagname + "' not '" + "emp:address" + "'";
		}
		return "getElementById01: OK";
	} catch (e) {
		return "getElementById01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var element;
		var tagname;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		element = doc.getElementById("CANADA");
		tagname = element.tagName;
		if ("emp:address" !== tagname) {
			return "getElementById01: #throw_Equals 'tagname' equals '" + tagname + "' not '" + "emp:address" + "'";
		}
		return "getElementById01: OK";
	} catch (e) {
		return "getElementById01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="getElementById02.xml" fleur="getElementById02" native="getElementById02"><Fleur>(function(){
	var success;
	try {
		var doc;
		var element;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		element = doc.getElementById("Cancun");
		if (element != null) {
			return "getElementById02: #throw_Null 'element' equals '" + element + "' not null";
		}
		return "getElementById02: OK";
	} catch (e) {
		return "getElementById02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var element;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		element = doc.getElementById("Cancun");
		if (element != null) {
			return "getElementById02: #throw_Null 'element' equals '" + element + "' not null";
		}
		return "getElementById02: OK";
	} catch (e) {
		return "getElementById02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="getElementsByTagNameNS01.xml" fleur="getElementsByTagNameNS01" native="getElementsByTagNameNS01"><Fleur>(function(){
	var success;
	try {
		var namespaceURI = "*";
		var localName = "*";
		var doc;
		var newList;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		newList = doc.getElementsByTagNameNS(namespaceURI, localName);
		if (("text/xml" === "image/svg+xml")) {
			if (newList.length !== 39) {
				return "getElementsByTagNameNS01: #listLength_svg 'newList.length' equals " + newList.length + " not 39";
			}
		} else {
			if (newList.length !== 37) {
				return "getElementsByTagNameNS01: #listLength 'newList.length' equals " + newList.length + " not 37";
			}
		}
		return "getElementsByTagNameNS01: OK";
	} catch (e) {
		return "getElementsByTagNameNS01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var namespaceURI = "*";
		var localName = "*";
		var doc;
		var newList;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		newList = doc.getElementsByTagNameNS(namespaceURI, localName);
		if (("text/xml" === "image/svg+xml")) {
			if (newList.length !== 39) {
				return "getElementsByTagNameNS01: #listLength_svg 'newList.length' equals " + newList.length + " not 39";
			}
		} else {
			if (newList.length !== 37) {
				return "getElementsByTagNameNS01: #listLength 'newList.length' equals " + newList.length + " not 37";
			}
		}
		return "getElementsByTagNameNS01: OK";
	} catch (e) {
		return "getElementsByTagNameNS01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="getElementsByTagNameNS02.xml" fleur="getElementsByTagNameNS02" native="getElementsByTagNameNS02"><Fleur>(function(){
	var success;
	try {
		var doc;
		var newList;
		var newElement;
		var prefix;
		var lname;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		newList = doc.getElementsByTagNameNS("*", "employee");
		if (newList.length !== 5) {
			return "getElementsByTagNameNS02: #employeeCount 'newList.length' equals " + newList.length + " not 5";
		}
		newElement = newList.item(3);
		prefix = newElement.prefix;
		if ("emp" !== prefix) {
			return "getElementsByTagNameNS02: #prefix 'prefix' equals '" + prefix + "' not '" + "emp" + "'";
		}
		lname = newElement.localName;
		if ("employee" !== lname) {
			return "getElementsByTagNameNS02: #lname 'lname' equals '" + lname + "' not '" + "employee" + "'";
		}
		return "getElementsByTagNameNS02: OK";
	} catch (e) {
		return "getElementsByTagNameNS02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var newList;
		var newElement;
		var prefix;
		var lname;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		newList = doc.getElementsByTagNameNS("*", "employee");
		if (newList.length !== 5) {
			return "getElementsByTagNameNS02: #employeeCount 'newList.length' equals " + newList.length + " not 5";
		}
		newElement = newList.item(3);
		prefix = newElement.prefix;
		if ("emp" !== prefix) {
			return "getElementsByTagNameNS02: #prefix 'prefix' equals '" + prefix + "' not '" + "emp" + "'";
		}
		lname = newElement.localName;
		if ("employee" !== lname) {
			return "getElementsByTagNameNS02: #lname 'lname' equals '" + lname + "' not '" + "employee" + "'";
		}
		return "getElementsByTagNameNS02: OK";
	} catch (e) {
		return "getElementsByTagNameNS02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="getElementsByTagNameNS03.xml" fleur="getElementsByTagNameNS03" native="getElementsByTagNameNS03"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var child;
		var childName;
		var result = new Array();

		expectedResult = new Array();
		expectedResult[0] = "employee";
		expectedResult[1] = "employeeId";
		expectedResult[2] = "name";
		expectedResult[3] = "position";
		expectedResult[4] = "salary";
		expectedResult[5] = "gender";
		expectedResult[6] = "address";
		expectedResult[7] = "emp:employee";
		expectedResult[8] = "emp:employeeId";
		expectedResult[9] = "emp:position";
		expectedResult[10] = "emp:salary";
		expectedResult[11] = "emp:gender";
		expectedResult[12] = "emp:address";
		expectedResult[13] = "address";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagNameNS("http://www.nist.gov", "*");
		for (var index_id0x0a6271f0 = 0; index_id0x0a6271f0 &lt; elementList.length; index_id0x0a6271f0++) {
			child = elementList.item(index_id0x0a6271f0);
			childName = child.nodeName;
			result[result.length] = childName;
		}
		if (expectedResult.join("|") !== result.join("|")) {
			return "getElementsByTagNameNS03: #nodeNames 'result' equals '" + result.join("|") + "' not '" + expectedResult.join("|") + "'";
		}
		return "getElementsByTagNameNS03: OK";
	} catch (e) {
		return "getElementsByTagNameNS03: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var child;
		var childName;
		var result = new Array();

		expectedResult = new Array();
		expectedResult[0] = "employee";
		expectedResult[1] = "employeeId";
		expectedResult[2] = "name";
		expectedResult[3] = "position";
		expectedResult[4] = "salary";
		expectedResult[5] = "gender";
		expectedResult[6] = "address";
		expectedResult[7] = "emp:employee";
		expectedResult[8] = "emp:employeeId";
		expectedResult[9] = "emp:position";
		expectedResult[10] = "emp:salary";
		expectedResult[11] = "emp:gender";
		expectedResult[12] = "emp:address";
		expectedResult[13] = "address";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagNameNS("http://www.nist.gov", "*");
		for (var index_id0x0a6271f0 = 0; index_id0x0a6271f0 &lt; elementList.length; index_id0x0a6271f0++) {
			child = elementList.item(index_id0x0a6271f0);
			childName = child.nodeName;
			result[result.length] = childName;
		}
		if (expectedResult.join("|") !== result.join("|")) {
			return "getElementsByTagNameNS03: #nodeNames 'result' equals '" + result.join("|") + "' not '" + expectedResult.join("|") + "'";
		}
		return "getElementsByTagNameNS03: OK";
	} catch (e) {
		return "getElementsByTagNameNS03: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="getElementsByTagNameNS04.xml" fleur="getElementsByTagNameNS04" native="getElementsByTagNameNS04"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var child;
		var childName;
		var result = new Array();

		expectedResult = new Array();
		expectedResult[0] = "address";
		expectedResult[1] = "address";
		expectedResult[2] = "address";
		expectedResult[3] = "emp:address";
		expectedResult[4] = "address";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagNameNS("*", "address");
		for (var index_id0x0a6356a0 = 0; index_id0x0a6356a0 &lt; elementList.length; index_id0x0a6356a0++) {
			child = elementList.item(index_id0x0a6356a0);
			childName = child.nodeName;
			result[result.length] = childName;
		}
		if (expectedResult.join("|") !== result.join("|")) {
			return "getElementsByTagNameNS04: #nodeNames 'result' equals '" + result.join("|") + "' not '" + expectedResult.join("|") + "'";
		}
		return "getElementsByTagNameNS04: OK";
	} catch (e) {
		return "getElementsByTagNameNS04: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var child;
		var childName;
		var result = new Array();

		expectedResult = new Array();
		expectedResult[0] = "address";
		expectedResult[1] = "address";
		expectedResult[2] = "address";
		expectedResult[3] = "emp:address";
		expectedResult[4] = "address";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagNameNS("*", "address");
		for (var index_id0x0a6356a0 = 0; index_id0x0a6356a0 &lt; elementList.length; index_id0x0a6356a0++) {
			child = elementList.item(index_id0x0a6356a0);
			childName = child.nodeName;
			result[result.length] = childName;
		}
		if (expectedResult.join("|") !== result.join("|")) {
			return "getElementsByTagNameNS04: #nodeNames 'result' equals '" + result.join("|") + "' not '" + expectedResult.join("|") + "'";
		}
		return "getElementsByTagNameNS04: OK";
	} catch (e) {
		return "getElementsByTagNameNS04: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="getElementsByTagNameNS05.xml" fleur="getElementsByTagNameNS05" native="getElementsByTagNameNS05"><Fleur>(function(){
	var success;
	try {
		var namespaceURI = "http://www.nist.gov";
		var localName = "nomatch";
		var doc;
		var elementList;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagNameNS(namespaceURI, localName);
		if (elementList.length !== 0) {
			return "getElementsByTagNameNS05: #throw_Size 'elementList.length' equals " + elementList.length + " not 0";
		}
		return "getElementsByTagNameNS05: OK";
	} catch (e) {
		return "getElementsByTagNameNS05: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var namespaceURI = "http://www.nist.gov";
		var localName = "nomatch";
		var doc;
		var elementList;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagNameNS(namespaceURI, localName);
		if (elementList.length !== 0) {
			return "getElementsByTagNameNS05: #throw_Size 'elementList.length' equals " + elementList.length + " not 0";
		}
		return "getElementsByTagNameNS05: OK";
	} catch (e) {
		return "getElementsByTagNameNS05: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="getElementsByTagNameNS06.xml" fleur="getElementsByTagNameNS06" native="getElementsByTagNameNS06"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagNameNS("http://www.nomatch.com", "address");
		if (elementList.length !== 0) {
			return "getElementsByTagNameNS06: #matchSize 'elementList.length' equals " + elementList.length + " not 0";
		}
		return "getElementsByTagNameNS06: OK";
	} catch (e) {
		return "getElementsByTagNameNS06: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagNameNS("http://www.nomatch.com", "address");
		if (elementList.length !== 0) {
			return "getElementsByTagNameNS06: #matchSize 'elementList.length' equals " + elementList.length + " not 0";
		}
		return "getElementsByTagNameNS06: OK";
	} catch (e) {
		return "getElementsByTagNameNS06: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="getElementsByTagNameNS07.xml" fleur="getElementsByTagNameNS07" native="getElementsByTagNameNS07"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagNameNS("http://www.nist.gov", "address");
		if (elementList.length !== 3) {
			return "getElementsByTagNameNS07: #addresses 'elementList.length' equals " + elementList.length + " not 3";
		}
		return "getElementsByTagNameNS07: OK";
	} catch (e) {
		return "getElementsByTagNameNS07: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagNameNS("http://www.nist.gov", "address");
		if (elementList.length !== 3) {
			return "getElementsByTagNameNS07: #addresses 'elementList.length' equals " + elementList.length + " not 3";
		}
		return "getElementsByTagNameNS07: OK";
	} catch (e) {
		return "getElementsByTagNameNS07: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="getElementsByTagNameNS08.xml" fleur="getElementsByTagNameNS08" native="getElementsByTagNameNS08"><Fleur>(function(){
	var success;
	try {
		var doc;
		var docElem;
		var newList;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		docElem = doc.documentElement;
		newList = docElem.getElementsByTagNameNS("*", "*");
		if (("text/xml" === "image/svg+xml")) {
			if (newList.length !== 38) {
				return "getElementsByTagNameNS08: #listSize_svg 'newList.length' equals " + newList.length + " not 38";
			}
		} else {
			if (newList.length !== 36) {
				return "getElementsByTagNameNS08: #listSize 'newList.length' equals " + newList.length + " not 36";
			}
		}
		return "getElementsByTagNameNS08: OK";
	} catch (e) {
		return "getElementsByTagNameNS08: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var docElem;
		var newList;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		docElem = doc.documentElement;
		newList = docElem.getElementsByTagNameNS("*", "*");
		if (("text/xml" === "image/svg+xml")) {
			if (newList.length !== 38) {
				return "getElementsByTagNameNS08: #listSize_svg 'newList.length' equals " + newList.length + " not 38";
			}
		} else {
			if (newList.length !== 36) {
				return "getElementsByTagNameNS08: #listSize 'newList.length' equals " + newList.length + " not 36";
			}
		}
		return "getElementsByTagNameNS08: OK";
	} catch (e) {
		return "getElementsByTagNameNS08: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="getElementsByTagNameNS09.xml" fleur="getElementsByTagNameNS09" native="getElementsByTagNameNS09"><Fleur>(function(){
	var success;
	try {
		var doc;
		var newList;
		var newElement;
		var prefix;
		var lname;
		var docElem;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		docElem = doc.documentElement;
		newList = docElem.getElementsByTagNameNS("*", "employee");
		if (newList.length !== 5) {
			return "getElementsByTagNameNS09: #employeeCount 'newList.length' equals " + newList.length + " not 5";
		}
		newElement = newList.item(3);
		prefix = newElement.prefix;
		if ("emp" !== prefix) {
			return "getElementsByTagNameNS09: #prefix 'prefix' equals '" + prefix + "' not '" + "emp" + "'";
		}
		lname = newElement.localName;
		if ("employee" !== lname) {
			return "getElementsByTagNameNS09: #lname 'lname' equals '" + lname + "' not '" + "employee" + "'";
		}
		return "getElementsByTagNameNS09: OK";
	} catch (e) {
		return "getElementsByTagNameNS09: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var newList;
		var newElement;
		var prefix;
		var lname;
		var docElem;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		docElem = doc.documentElement;
		newList = docElem.getElementsByTagNameNS("*", "employee");
		if (newList.length !== 5) {
			return "getElementsByTagNameNS09: #employeeCount 'newList.length' equals " + newList.length + " not 5";
		}
		newElement = newList.item(3);
		prefix = newElement.prefix;
		if ("emp" !== prefix) {
			return "getElementsByTagNameNS09: #prefix 'prefix' equals '" + prefix + "' not '" + "emp" + "'";
		}
		lname = newElement.localName;
		if ("employee" !== lname) {
			return "getElementsByTagNameNS09: #lname 'lname' equals '" + lname + "' not '" + "employee" + "'";
		}
		return "getElementsByTagNameNS09: OK";
	} catch (e) {
		return "getElementsByTagNameNS09: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="getElementsByTagNameNS10.xml" fleur="getElementsByTagNameNS10" native="getElementsByTagNameNS10"><Fleur>(function(){
	var success;
	try {
		var doc;
		var docElem;
		var elementList;
		var child;
		var childName;
		var result = new Array();

		expectedResult = new Array();
		expectedResult[0] = "employee";
		expectedResult[1] = "employeeId";
		expectedResult[2] = "name";
		expectedResult[3] = "position";
		expectedResult[4] = "salary";
		expectedResult[5] = "gender";
		expectedResult[6] = "address";
		expectedResult[7] = "emp:employee";
		expectedResult[8] = "emp:employeeId";
		expectedResult[9] = "emp:position";
		expectedResult[10] = "emp:salary";
		expectedResult[11] = "emp:gender";
		expectedResult[12] = "emp:address";
		expectedResult[13] = "address";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		docElem = doc.documentElement;
		elementList = docElem.getElementsByTagNameNS("http://www.nist.gov", "*");
		for (var index_id0x0a6f0600 = 0; index_id0x0a6f0600 &lt; elementList.length; index_id0x0a6f0600++) {
			child = elementList.item(index_id0x0a6f0600);
			childName = child.nodeName;
			result[result.length] = childName;
		}
		if (expectedResult.join("|") !== result.join("|")) {
			return "getElementsByTagNameNS10: #nodeNames 'result' equals '" + result.join("|") + "' not '" + expectedResult.join("|") + "'";
		}
		return "getElementsByTagNameNS10: OK";
	} catch (e) {
		return "getElementsByTagNameNS10: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var docElem;
		var elementList;
		var child;
		var childName;
		var result = new Array();

		expectedResult = new Array();
		expectedResult[0] = "employee";
		expectedResult[1] = "employeeId";
		expectedResult[2] = "name";
		expectedResult[3] = "position";
		expectedResult[4] = "salary";
		expectedResult[5] = "gender";
		expectedResult[6] = "address";
		expectedResult[7] = "emp:employee";
		expectedResult[8] = "emp:employeeId";
		expectedResult[9] = "emp:position";
		expectedResult[10] = "emp:salary";
		expectedResult[11] = "emp:gender";
		expectedResult[12] = "emp:address";
		expectedResult[13] = "address";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		docElem = doc.documentElement;
		elementList = docElem.getElementsByTagNameNS("http://www.nist.gov", "*");
		for (var index_id0x0a6f0600 = 0; index_id0x0a6f0600 &lt; elementList.length; index_id0x0a6f0600++) {
			child = elementList.item(index_id0x0a6f0600);
			childName = child.nodeName;
			result[result.length] = childName;
		}
		if (expectedResult.join("|") !== result.join("|")) {
			return "getElementsByTagNameNS10: #nodeNames 'result' equals '" + result.join("|") + "' not '" + expectedResult.join("|") + "'";
		}
		return "getElementsByTagNameNS10: OK";
	} catch (e) {
		return "getElementsByTagNameNS10: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="getElementsByTagNameNS11.xml" fleur="getElementsByTagNameNS11" native="getElementsByTagNameNS11"><Fleur>(function(){
	var success;
	try {
		var doc;
		var docElem;
		var elementList;
		var child;
		var childName;
		var result = new Array();

		expectedResult = new Array();
		expectedResult[0] = "address";
		expectedResult[1] = "address";
		expectedResult[2] = "address";
		expectedResult[3] = "emp:address";
		expectedResult[4] = "address";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		docElem = doc.documentElement;
		elementList = docElem.getElementsByTagNameNS("*", "address");
		for (var index_id0x0a724ce0 = 0; index_id0x0a724ce0 &lt; elementList.length; index_id0x0a724ce0++) {
			child = elementList.item(index_id0x0a724ce0);
			childName = child.nodeName;
			result[result.length] = childName;
		}
		if (expectedResult.join("|") !== result.join("|")) {
			return "getElementsByTagNameNS11: #nodeNames 'result' equals '" + result.join("|") + "' not '" + expectedResult.join("|") + "'";
		}
		return "getElementsByTagNameNS11: OK";
	} catch (e) {
		return "getElementsByTagNameNS11: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var docElem;
		var elementList;
		var child;
		var childName;
		var result = new Array();

		expectedResult = new Array();
		expectedResult[0] = "address";
		expectedResult[1] = "address";
		expectedResult[2] = "address";
		expectedResult[3] = "emp:address";
		expectedResult[4] = "address";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		docElem = doc.documentElement;
		elementList = docElem.getElementsByTagNameNS("*", "address");
		for (var index_id0x0a724ce0 = 0; index_id0x0a724ce0 &lt; elementList.length; index_id0x0a724ce0++) {
			child = elementList.item(index_id0x0a724ce0);
			childName = child.nodeName;
			result[result.length] = childName;
		}
		if (expectedResult.join("|") !== result.join("|")) {
			return "getElementsByTagNameNS11: #nodeNames 'result' equals '" + result.join("|") + "' not '" + expectedResult.join("|") + "'";
		}
		return "getElementsByTagNameNS11: OK";
	} catch (e) {
		return "getElementsByTagNameNS11: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="getElementsByTagNameNS12.xml" fleur="getElementsByTagNameNS12" native="getElementsByTagNameNS12"><Fleur>(function(){
	var success;
	try {
		var doc;
		var docElem;
		var elementList;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		docElem = doc.documentElement;
		elementList = docElem.getElementsByTagNameNS("http://www.nist.gov", "nomatch");
		if (elementList.length !== 0) {
			return "getElementsByTagNameNS12: #size 'elementList.length' equals " + elementList.length + " not 0";
		}
		return "getElementsByTagNameNS12: OK";
	} catch (e) {
		return "getElementsByTagNameNS12: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var docElem;
		var elementList;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		docElem = doc.documentElement;
		elementList = docElem.getElementsByTagNameNS("http://www.nist.gov", "nomatch");
		if (elementList.length !== 0) {
			return "getElementsByTagNameNS12: #size 'elementList.length' equals " + elementList.length + " not 0";
		}
		return "getElementsByTagNameNS12: OK";
	} catch (e) {
		return "getElementsByTagNameNS12: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="getElementsByTagNameNS13.xml" fleur="getElementsByTagNameNS13" native="getElementsByTagNameNS13"><Fleur>(function(){
	var success;
	try {
		var doc;
		var docElem;
		var elementList;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		docElem = doc.documentElement;
		elementList = docElem.getElementsByTagNameNS("http://www.nomatch.com", "address");
		if (elementList.length !== 0) {
			return "getElementsByTagNameNS13: #matchSize 'elementList.length' equals " + elementList.length + " not 0";
		}
		return "getElementsByTagNameNS13: OK";
	} catch (e) {
		return "getElementsByTagNameNS13: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var docElem;
		var elementList;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		docElem = doc.documentElement;
		elementList = docElem.getElementsByTagNameNS("http://www.nomatch.com", "address");
		if (elementList.length !== 0) {
			return "getElementsByTagNameNS13: #matchSize 'elementList.length' equals " + elementList.length + " not 0";
		}
		return "getElementsByTagNameNS13: OK";
	} catch (e) {
		return "getElementsByTagNameNS13: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="getElementsByTagNameNS14.xml" fleur="getElementsByTagNameNS14" native="getElementsByTagNameNS14"><Fleur>(function(){
	var success;
	try {
		var doc;
		var docElem;
		var elementList;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		docElem = doc.documentElement;
		elementList = docElem.getElementsByTagNameNS("http://www.nist.gov", "address");
		if (elementList.length !== 3) {
			return "getElementsByTagNameNS14: #addresses 'elementList.length' equals " + elementList.length + " not 3";
		}
		return "getElementsByTagNameNS14: OK";
	} catch (e) {
		return "getElementsByTagNameNS14: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var docElem;
		var elementList;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		docElem = doc.documentElement;
		elementList = docElem.getElementsByTagNameNS("http://www.nist.gov", "address");
		if (elementList.length !== 3) {
			return "getElementsByTagNameNS14: #addresses 'elementList.length' equals " + elementList.length + " not 3";
		}
		return "getElementsByTagNameNS14: OK";
	} catch (e) {
		return "getElementsByTagNameNS14: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="getNamedItemNS01.xml" fleur="getNamedItemNS01" native="getNamedItemNS01"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var attributes;
		var domesticAttr;
		var attrName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testEmployee = elementList.item(1);
		attributes = testEmployee.attributes;
		domesticAttr = attributes.getNamedItemNS("http://www.usa.com", "domestic");
		attrName = domesticAttr.nodeName;
		if ("dmstc:domestic" !== attrName) {
			return "getNamedItemNS01: #attrName 'attrName' equals '" + attrName + "' not '" + "dmstc:domestic" + "'";
		}
		return "getNamedItemNS01: OK";
	} catch (e) {
		return "getNamedItemNS01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var attributes;
		var domesticAttr;
		var attrName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testEmployee = elementList.item(1);
		attributes = testEmployee.attributes;
		domesticAttr = attributes.getNamedItemNS("http://www.usa.com", "domestic");
		attrName = domesticAttr.nodeName;
		if ("dmstc:domestic" !== attrName) {
			return "getNamedItemNS01: #attrName 'attrName' equals '" + attrName + "' not '" + "dmstc:domestic" + "'";
		}
		return "getNamedItemNS01: OK";
	} catch (e) {
		return "getNamedItemNS01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="getNamedItemNS02.xml" fleur="getNamedItemNS02" native="getNamedItemNS02"><Fleur>(function(){
	var success;
	try {
		var namespaceURI = "http://www.usa.com";
		var localName = "domest";
		var doc;
		var elementList;
		var testEmployee;
		var attributes;
		var newAttr;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testEmployee = elementList.item(1);
		attributes = testEmployee.attributes;
		newAttr = attributes.getNamedItemNS(namespaceURI, localName);
		if (newAttr != null) {
			return "getNamedItemNS02: #throw_Null 'newAttr' equals '" + newAttr + "' not null";
		}
		return "getNamedItemNS02: OK";
	} catch (e) {
		return "getNamedItemNS02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var namespaceURI = "http://www.usa.com";
		var localName = "domest";
		var doc;
		var elementList;
		var testEmployee;
		var attributes;
		var newAttr;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testEmployee = elementList.item(1);
		attributes = testEmployee.attributes;
		newAttr = attributes.getNamedItemNS(namespaceURI, localName);
		if (newAttr != null) {
			return "getNamedItemNS02: #throw_Null 'newAttr' equals '" + newAttr + "' not null";
		}
		return "getNamedItemNS02: OK";
	} catch (e) {
		return "getNamedItemNS02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="getNamedItemNS03.xml" fleur="getNamedItemNS03" native="getNamedItemNS03"><Fleur>(function(){
	var success;
	try {
		var doc;
		var docType;
		var entities;
		var entity;
		var nullNS = null;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		entities = docType.entities;
		if (entities == null) {
			return "getNamedItemNS03: #entitiesNotNull 'entities' is null";
		}
		entity = entities.getNamedItemNS(nullNS, "ent1");
		if (entity != null) {
			return "getNamedItemNS03: #entityNull 'entity' equals '" + entity + "' not null";
		}
		return "getNamedItemNS03: OK";
	} catch (e) {
		return "getNamedItemNS03: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var docType;
		var entities;
		var entity;
		var nullNS = null;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		entities = docType.entities;
		if (entities == null) {
			return "getNamedItemNS03: #entitiesNotNull 'entities' is null";
		}
		entity = entities.getNamedItemNS(nullNS, "ent1");
		if (entity != null) {
			return "getNamedItemNS03: #entityNull 'entity' equals '" + entity + "' not null";
		}
		return "getNamedItemNS03: OK";
	} catch (e) {
		return "getNamedItemNS03: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="getNamedItemNS04.xml" fleur="getNamedItemNS04" native="getNamedItemNS04"><Fleur>(function(){
	var success;
	try {
		var doc;
		var docType;
		var notations;
		var notation;
		var nullNS = null;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		notations = docType.notations;
		if (notations == null) {
			return "getNamedItemNS04: #notationsNotNull 'notations' is null";
		}
		notation = notations.getNamedItemNS(nullNS, "notation1");
		if (notation != null) {
			return "getNamedItemNS04: #notationNull 'notation' equals '" + notation + "' not null";
		}
		return "getNamedItemNS04: OK";
	} catch (e) {
		return "getNamedItemNS04: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var docType;
		var notations;
		var notation;
		var nullNS = null;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		notations = docType.notations;
		if (notations == null) {
			return "getNamedItemNS04: #notationsNotNull 'notations' is null";
		}
		notation = notations.getNamedItemNS(nullNS, "notation1");
		if (notation != null) {
			return "getNamedItemNS04: #notationNull 'notation' equals '" + notation + "' not null";
		}
		return "getNamedItemNS04: OK";
	} catch (e) {
		return "getNamedItemNS04: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="hasAttribute01.xml" fleur="hasAttribute01" native="hasAttribute01"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testNode;
		var state;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testNode = elementList.item(4);
		state = testNode.hasAttribute("domestic");
		if (state !== false) {
			return "throw_False: 'state' equals '" + state + "' not false";
		}
		return "hasAttribute01: OK";
	} catch (e) {
		return "hasAttribute01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testNode;
		var state;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testNode = elementList.item(4);
		state = testNode.hasAttribute("domestic");
		if (state !== false) {
			return "throw_False: 'state' equals '" + state + "' not false";
		}
		return "hasAttribute01: OK";
	} catch (e) {
		return "hasAttribute01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="hasAttribute02.xml" fleur="hasAttribute02" native="hasAttribute02"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testNode;
		var state;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testNode = elementList.item(0);
		state = testNode.hasAttribute("street");
		if (state !== true) {
			return "throw_True: 'state' equals '" + state + "' not true";
		}
		return "hasAttribute02: OK";
	} catch (e) {
		return "hasAttribute02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testNode;
		var state;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testNode = elementList.item(0);
		state = testNode.hasAttribute("street");
		if (state !== true) {
			return "throw_True: 'state' equals '" + state + "' not true";
		}
		return "hasAttribute02: OK";
	} catch (e) {
		return "hasAttribute02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="hasAttribute03.xml" fleur="hasAttribute03" native="hasAttribute03"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testNode;
		var state;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testNode = elementList.item(0);
		state = testNode.hasAttribute("nomatch");
		if (state !== false) {
			return "throw_False: 'state' equals '" + state + "' not false";
		}
		return "hasAttribute03: OK";
	} catch (e) {
		return "hasAttribute03: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testNode;
		var state;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testNode = elementList.item(0);
		state = testNode.hasAttribute("nomatch");
		if (state !== false) {
			return "throw_False: 'state' equals '" + state + "' not false";
		}
		return "hasAttribute03: OK";
	} catch (e) {
		return "hasAttribute03: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="hasAttribute04.xml" fleur="hasAttribute04" native="hasAttribute04"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testNode;
		var state;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testNode = elementList.item(0);
		state = testNode.hasAttribute("dmstc:domestic");
		if (state !== true) {
			return "hasDomesticAttr: 'state' equals '" + state + "' not true";
		}
		return "hasAttribute04: OK";
	} catch (e) {
		return "hasAttribute04: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testNode;
		var state;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testNode = elementList.item(0);
		state = testNode.hasAttribute("dmstc:domestic");
		if (state !== true) {
			return "hasDomesticAttr: 'state' equals '" + state + "' not true";
		}
		return "hasAttribute04: OK";
	} catch (e) {
		return "hasAttribute04: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="hasAttributeNS01.xml" fleur="hasAttributeNS01" native="hasAttributeNS01"><Fleur>(function(){
	var success;
	try {
		var localName = "nomatch";
		var namespaceURI = "http://www.usa.com";
		var doc;
		var elementList;
		var testNode;
		var state;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testNode = elementList.item(0);
		state = testNode.hasAttributeNS(namespaceURI, localName);
		if (state !== false) {
			return "throw_False: 'state' equals '" + state + "' not false";
		}
		return "hasAttributeNS01: OK";
	} catch (e) {
		return "hasAttributeNS01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var localName = "nomatch";
		var namespaceURI = "http://www.usa.com";
		var doc;
		var elementList;
		var testNode;
		var state;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testNode = elementList.item(0);
		state = testNode.hasAttributeNS(namespaceURI, localName);
		if (state !== false) {
			return "throw_False: 'state' equals '" + state + "' not false";
		}
		return "hasAttributeNS01: OK";
	} catch (e) {
		return "hasAttributeNS01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="hasAttributeNS02.xml" fleur="hasAttributeNS02" native="hasAttributeNS02"><Fleur>(function(){
	var success;
	try {
		var localName = "domestic";
		var namespaceURI = "http://www.nomatch.com";
		var doc;
		var elementList;
		var testNode;
		var state;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testNode = elementList.item(0);
		state = testNode.hasAttributeNS(namespaceURI, localName);
		if (state !== false) {
			return "throw_False: 'state' equals '" + state + "' not false";
		}
		return "hasAttributeNS02: OK";
	} catch (e) {
		return "hasAttributeNS02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var localName = "domestic";
		var namespaceURI = "http://www.nomatch.com";
		var doc;
		var elementList;
		var testNode;
		var state;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testNode = elementList.item(0);
		state = testNode.hasAttributeNS(namespaceURI, localName);
		if (state !== false) {
			return "throw_False: 'state' equals '" + state + "' not false";
		}
		return "hasAttributeNS02: OK";
	} catch (e) {
		return "hasAttributeNS02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="hasAttributeNS03.xml" fleur="hasAttributeNS03" native="hasAttributeNS03"><Fleur>(function(){
	var success;
	try {
		var localName = "blank";
		var namespaceURI = "http://www.nist.gov";
		var doc;
		var elementList;
		var testNode;
		var state;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("emp:address");
		testNode = elementList.item(0);
		if (testNode == null) {
			return "hasAttributeNS03: #empAddrNotNull 'testNode' is null";
		}
		state = testNode.hasAttributeNS(namespaceURI, localName);
		if (state !== false) {
			return "throw_False: 'state' equals '" + state + "' not false";
		}
		return "hasAttributeNS03: OK";
	} catch (e) {
		return "hasAttributeNS03: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var localName = "blank";
		var namespaceURI = "http://www.nist.gov";
		var doc;
		var elementList;
		var testNode;
		var state;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("emp:address");
		testNode = elementList.item(0);
		if (testNode == null) {
			return "hasAttributeNS03: #empAddrNotNull 'testNode' is null";
		}
		state = testNode.hasAttributeNS(namespaceURI, localName);
		if (state !== false) {
			return "throw_False: 'state' equals '" + state + "' not false";
		}
		return "hasAttributeNS03: OK";
	} catch (e) {
		return "hasAttributeNS03: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="hasAttributeNS04.xml" fleur="hasAttributeNS04" native="hasAttributeNS04"><Fleur>(function(){
	var success;
	try {
		var localName = "district";
		var namespaceURI = "http://www.nist.gov";
		var doc;
		var elementList;
		var testNode;
		var state;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("emp:address");
		testNode = elementList.item(0);
		if (testNode == null) {
			return "hasAttributeNS04: #empAddressNotNull 'testNode' is null";
		}
		state = testNode.hasAttributeNS(namespaceURI, localName);
		if (state !== true) {
			return "hasAttribute: 'state' equals '" + state + "' not true";
		}
		return "hasAttributeNS04: OK";
	} catch (e) {
		return "hasAttributeNS04: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var localName = "district";
		var namespaceURI = "http://www.nist.gov";
		var doc;
		var elementList;
		var testNode;
		var state;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("emp:address");
		testNode = elementList.item(0);
		if (testNode == null) {
			return "hasAttributeNS04: #empAddressNotNull 'testNode' is null";
		}
		state = testNode.hasAttributeNS(namespaceURI, localName);
		if (state !== true) {
			return "hasAttribute: 'state' equals '" + state + "' not true";
		}
		return "hasAttributeNS04: OK";
	} catch (e) {
		return "hasAttributeNS04: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="hasAttributeNS05.xml" fleur="hasAttributeNS05" native="hasAttributeNS05"><Fleur>(function(){
	var success;
	try {
		var localName = "domestic";
		var namespaceURI = "http://www.usa.com";
		var doc;
		var elementList;
		var testNode;
		var state;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testNode = elementList.item(0);
		state = testNode.hasAttributeNS(namespaceURI, localName);
		if (state !== true) {
			return "hasAttribute: 'state' equals '" + state + "' not true";
		}
		return "hasAttributeNS05: OK";
	} catch (e) {
		return "hasAttributeNS05: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var localName = "domestic";
		var namespaceURI = "http://www.usa.com";
		var doc;
		var elementList;
		var testNode;
		var state;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testNode = elementList.item(0);
		state = testNode.hasAttributeNS(namespaceURI, localName);
		if (state !== true) {
			return "hasAttribute: 'state' equals '" + state + "' not true";
		}
		return "hasAttributeNS05: OK";
	} catch (e) {
		return "hasAttributeNS05: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="hasAttributes01.xml" fleur="hasAttributes01" native="hasAttributes01"><Fleur>(function(){
	var success;
	try {
		var doc;
		var addrList;
		var addrNode;
		var state;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		addrList = doc.getElementsByTagName("name");
		addrNode = addrList.item(0);
		state = addrNode.hasAttributes();
		if (state !== false) {
			return "throw_False: 'state' equals '" + state + "' not false";
		}
		return "hasAttributes01: OK";
	} catch (e) {
		return "hasAttributes01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var addrList;
		var addrNode;
		var state;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		addrList = doc.getElementsByTagName("name");
		addrNode = addrList.item(0);
		state = addrNode.hasAttributes();
		if (state !== false) {
			return "throw_False: 'state' equals '" + state + "' not false";
		}
		return "hasAttributes01: OK";
	} catch (e) {
		return "hasAttributes01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="hasAttributes02.xml" fleur="hasAttributes02" native="hasAttributes02"><Fleur>(function(){
	var success;
	try {
		var doc;
		var addrList;
		var addrNode;
		var state;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		addrList = doc.getElementsByTagName("address");
		addrNode = addrList.item(0);
		state = addrNode.hasAttributes();
		if (state !== true) {
			return "throw_True: 'state' equals '" + state + "' not true";
		}
		return "hasAttributes02: OK";
	} catch (e) {
		return "hasAttributes02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var addrList;
		var addrNode;
		var state;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		addrList = doc.getElementsByTagName("address");
		addrNode = addrList.item(0);
		state = addrNode.hasAttributes();
		if (state !== true) {
			return "throw_True: 'state' equals '" + state + "' not true";
		}
		return "hasAttributes02: OK";
	} catch (e) {
		return "hasAttributes02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="hc_entitiesremovenameditemns1.xml" fleur="hc_entitiesremovenameditemns1" native="hc_entitiesremovenameditemns1"><Fleur>(function(){
	var success;
	try {
		var doc;
		var entities;
		var docType;
		var retval;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		if (!(("text/xml" === "text/html"))) {
			if (docType == null) {
				return "hc_entitiesremovenameditemns1: #docTypeNotNull 'docType' is null";
			}
			entities = docType.entities;
			if (entities == null) {
				return "hc_entitiesremovenameditemns1: #entitiesNotNull 'entities' is null";
			}
			try {
				retval = entities.removeNamedItemNS("http://www.w3.org/1999/xhtml", "alpha");
				fail("throw_NO_MOD_OR_NOT_FOUND_ERR");
			} catch (ex) {
				if (typeof(ex.code) != 'undefined') {      
					switch (ex.code) {
						case 	/* NO_MODIFICATION_ALLOWED_ERR */ 7 :
							break;
						case 	/* NOT_FOUND_ERR */ 8 :
							break;
						default:
							throw ex;
					}
				} else { 
					throw ex;
				}
			}
		}
		return "hc_entitiesremovenameditemns1: OK";
	} catch (e) {
		return "hc_entitiesremovenameditemns1: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var entities;
		var docType;
		var retval;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		if (!(("text/xml" === "text/html"))) {
			if (docType == null) {
				return "hc_entitiesremovenameditemns1: #docTypeNotNull 'docType' is null";
			}
			entities = docType.entities;
			if (entities == null) {
				return "hc_entitiesremovenameditemns1: #entitiesNotNull 'entities' is null";
			}
			try {
				retval = entities.removeNamedItemNS("http://www.w3.org/1999/xhtml", "alpha");
				fail("throw_NO_MOD_OR_NOT_FOUND_ERR");
			} catch (ex) {
				if (typeof(ex.code) != 'undefined') {      
					switch (ex.code) {
						case 	/* NO_MODIFICATION_ALLOWED_ERR */ 7 :
							break;
						case 	/* NOT_FOUND_ERR */ 8 :
							break;
						default:
							throw ex;
					}
				} else { 
					throw ex;
				}
			}
		}
		return "hc_entitiesremovenameditemns1: OK";
	} catch (e) {
		return "hc_entitiesremovenameditemns1: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="hc_entitiessetnameditemns1.xml" fleur="hc_entitiessetnameditemns1" native="hc_entitiessetnameditemns1"><Fleur>(function(){
	var success;
	try {
		var doc;
		var entities;
		var docType;
		var retval;
		var elem;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		if (!(("text/xml" === "text/html"))) {
			if (docType == null) {
				return "hc_entitiessetnameditemns1: #docTypeNotNull 'docType' is null";
			}
			entities = docType.entities;
			if (entities == null) {
				return "hc_entitiessetnameditemns1: #entitiesNotNull 'entities' is null";
			}
			elem = doc.createElementNS("http://www.w3.org/1999/xhtml", "br");
			try {
				retval = entities.setNamedItemNS(elem);
				fail("throw_HIER_OR_NO_MOD_ERR");
			} catch (ex) {
				if (typeof(ex.code) != 'undefined') {      
					switch (ex.code) {
						case 	/* HIERARCHY_REQUEST_ERR */ 3 :
							break;
						case 	/* NO_MODIFICATION_ALLOWED_ERR */ 7 :
							break;
						default:
							throw ex;
					}
				} else { 
					throw ex;
				}
			}
		}
		return "hc_entitiessetnameditemns1: OK";
	} catch (e) {
		return "hc_entitiessetnameditemns1: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var entities;
		var docType;
		var retval;
		var elem;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		if (!(("text/xml" === "text/html"))) {
			if (docType == null) {
				return "hc_entitiessetnameditemns1: #docTypeNotNull 'docType' is null";
			}
			entities = docType.entities;
			if (entities == null) {
				return "hc_entitiessetnameditemns1: #entitiesNotNull 'entities' is null";
			}
			elem = doc.createElementNS("http://www.w3.org/1999/xhtml", "br");
			try {
				retval = entities.setNamedItemNS(elem);
				fail("throw_HIER_OR_NO_MOD_ERR");
			} catch (ex) {
				if (typeof(ex.code) != 'undefined') {      
					switch (ex.code) {
						case 	/* HIERARCHY_REQUEST_ERR */ 3 :
							break;
						case 	/* NO_MODIFICATION_ALLOWED_ERR */ 7 :
							break;
						default:
							throw ex;
					}
				} else { 
					throw ex;
				}
			}
		}
		return "hc_entitiessetnameditemns1: OK";
	} catch (e) {
		return "hc_entitiessetnameditemns1: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
	 <suite.member href="hc_namednodemapinvalidtype1.xml" fleur="hc_namednodemapinvalidtype1" native="hc_namednodemapinvalidtype1"><Fleur>(function(){
	var success;
	try {
		var doc;
		var attributes;
		var docElem;
		var newElem;
		var retval;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		docElem = doc.documentElement;
		attributes = docElem.attributes;
		newElem = doc.createElement("html");
		success = false;
		try {
			retval = attributes.setNamedItem(newElem);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 3;
			}
		}
		if (!success) {
			return "hc_namednodemapinvalidtype1: Exception HIERARCHY_REQUEST_ERR expected";
		}
		return "hc_namednodemapinvalidtype1: OK";
	} catch (e) {
		return "hc_namednodemapinvalidtype1: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var attributes;
		var docElem;
		var newElem;
		var retval;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		docElem = doc.documentElement;
		attributes = docElem.attributes;
		newElem = doc.createElement("html");
		success = false;
		try {
			retval = attributes.setNamedItem(newElem);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 3;
			}
		}
		if (!success) {
			return "hc_namednodemapinvalidtype1: Exception HIERARCHY_REQUEST_ERR expected";
		}
		return "hc_namednodemapinvalidtype1: OK";
	} catch (e) {
		return "hc_namednodemapinvalidtype1: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>     
     <suite.member href="hc_nodedocumentfragmentnormalize1.xml" fleur="hc_nodedocumentfragmentnormalize1" native="hc_nodedocumentfragmentnormalize1"><Fleur>(function(){
	var success;
	try {
		var doc;
		var docFragment;
		var nodeValue;
		var txtNode;
		var retval;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		docFragment = doc.createDocumentFragment();
		txtNode = doc.createTextNode("foo");
		retval = docFragment.appendChild(txtNode);
		txtNode = doc.createTextNode("bar");
		retval = docFragment.appendChild(txtNode);
		docFragment.normalize();
		txtNode = docFragment.firstChild;
		nodeValue = txtNode.nodeValue;
		if ("foobar" !== nodeValue) {
			return "hc_nodedocumentfragmentnormalize1: #normalizedNodeValue 'nodeValue' equals '" + nodeValue + "' not '" + "foobar" + "'";
		}
		retval = txtNode.nextSibling;
		if (retval != null) {
			return "hc_nodedocumentfragmentnormalize1: #singleChild 'retval' equals '" + retval + "' not null";
		}
		return "hc_nodedocumentfragmentnormalize1: OK";
	} catch (e) {
		return "hc_nodedocumentfragmentnormalize1: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var docFragment;
		var nodeValue;
		var txtNode;
		var retval;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		docFragment = doc.createDocumentFragment();
		txtNode = doc.createTextNode("foo");
		retval = docFragment.appendChild(txtNode);
		txtNode = doc.createTextNode("bar");
		retval = docFragment.appendChild(txtNode);
		docFragment.normalize();
		txtNode = docFragment.firstChild;
		nodeValue = txtNode.nodeValue;
		if ("foobar" !== nodeValue) {
			return "hc_nodedocumentfragmentnormalize1: #normalizedNodeValue 'nodeValue' equals '" + nodeValue + "' not '" + "foobar" + "'";
		}
		retval = txtNode.nextSibling;
		if (retval != null) {
			return "hc_nodedocumentfragmentnormalize1: #singleChild 'retval' equals '" + retval + "' not null";
		}
		return "hc_nodedocumentfragmentnormalize1: OK";
	} catch (e) {
		return "hc_nodedocumentfragmentnormalize1: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="hc_nodedocumentfragmentnormalize2.xml" fleur="hc_nodedocumentfragmentnormalize2" native="hc_nodedocumentfragmentnormalize2"><Fleur>(function(){
	var success;
	try {
		var doc;
		var docFragment;
		var nodeValue;
		var txtNode;
		var retval;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		docFragment = doc.createDocumentFragment();
		txtNode = doc.createTextNode("");
		retval = docFragment.appendChild(txtNode);
		docFragment.normalize();
		txtNode = docFragment.firstChild;
		if (txtNode != null) {
			return "hc_nodedocumentfragmentnormalize1: #noChild 'txtNode' equals '" + txtNode + "' not null";
		}
		return "hc_nodedocumentfragmentnormalize1: OK";
	} catch (e) {
		return "hc_nodedocumentfragmentnormalize1: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var docFragment;
		var nodeValue;
		var txtNode;
		var retval;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		docFragment = doc.createDocumentFragment();
		txtNode = doc.createTextNode("");
		retval = docFragment.appendChild(txtNode);
		docFragment.normalize();
		txtNode = docFragment.firstChild;
		if (txtNode != null) {
			return "hc_nodedocumentfragmentnormalize1: #noChild 'txtNode' equals '" + txtNode + "' not null";
		}
		return "hc_nodedocumentfragmentnormalize1: OK";
	} catch (e) {
		return "hc_nodedocumentfragmentnormalize1: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="hc_notationsremovenameditemns1.xml" fleur="hc_notationsremovenameditemns1" native="hc_notationsremovenameditemns1"><Fleur>(function(){
	var success;
	try {
		var doc;
		var notations;
		var docType;
		var retval;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		if (!(("text/xml" === "text/html"))) {
			if (docType == null) {
				return "hc_notationsremovenameditemns1: #docTypeNotNull 'docType' is null";
			}
			notations = docType.notations;
			if (notations == null) {
				return "hc_notationsremovenameditemns1: #notationsNotNull 'notations' is null";
			}
			try {
				retval = notations.removeNamedItemNS("http://www.w3.org/1999/xhtml", "alpha");
				fail("throw_NO_MOD_OR_NOT_FOUND_ERR");
			} catch (ex) {
				if (typeof(ex.code) != 'undefined') {      
					switch (ex.code) {
						case 	/* NO_MODIFICATION_ALLOWED_ERR */ 7 :
							break;
						case 	/* NOT_FOUND_ERR */ 8 :
							break;
						default:
							throw ex;
					}
				} else { 
					throw ex;
				}
			}
		}
		return "hc_notationsremovenameditemns1: OK";
	} catch (e) {
		return "hc_notationsremovenameditemns1: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var notations;
		var docType;
		var retval;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		if (!(("text/xml" === "text/html"))) {
			if (docType == null) {
				return "hc_notationsremovenameditemns1: #docTypeNotNull 'docType' is null";
			}
			notations = docType.notations;
			if (notations == null) {
				return "hc_notationsremovenameditemns1: #notationsNotNull 'notations' is null";
			}
			try {
				retval = notations.removeNamedItemNS("http://www.w3.org/1999/xhtml", "alpha");
				fail("throw_NO_MOD_OR_NOT_FOUND_ERR");
			} catch (ex) {
				if (typeof(ex.code) != 'undefined') {      
					switch (ex.code) {
						case 	/* NO_MODIFICATION_ALLOWED_ERR */ 7 :
							break;
						case 	/* NOT_FOUND_ERR */ 8 :
							break;
						default:
							throw ex;
					}
				} else { 
					throw ex;
				}
			}
		}
		return "hc_notationsremovenameditemns1: OK";
	} catch (e) {
		return "hc_notationsremovenameditemns1: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="hc_notationssetnameditemns1.xml" fleur="hc_notationssetnameditemns1" native="hc_notationssetnameditemns1"><Fleur>(function(){
	var success;
	try {
		var doc;
		var notations;
		var docType;
		var retval;
		var elem;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		if (!(("text/xml" === "text/html"))) {
			if (docType == null) {
				return "hc_notationssetnameditemns1: #docTypeNotNull 'docType' is null";
			}
			notations = docType.notations;
			if (notations == null) {
				return "hc_notationssetnameditemns1: #notationsNotNull 'notations' is null";
			}
			elem = doc.createElementNS("http://www.w3.org/1999/xhtml", "br");
			try {
				retval = notations.setNamedItemNS(elem);
				fail("throw_HIER_OR_NO_MOD_ERR");
			} catch (ex) {
				if (typeof(ex.code) != 'undefined') {      
					switch (ex.code) {
						case 	/* HIERARCHY_REQUEST_ERR */ 3 :
							break;
						case 	/* NO_MODIFICATION_ALLOWED_ERR */ 7 :
							break;
						default:
							throw ex;
					}
				} else { 
					throw ex;
				}
			}
		}
		return "hc_notationssetnameditemns1: OK";
	} catch (e) {
		return "hc_notationssetnameditemns1: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var notations;
		var docType;
		var retval;
		var elem;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		if (!(("text/xml" === "text/html"))) {
			if (docType == null) {
				return "hc_notationssetnameditemns1: #docTypeNotNull 'docType' is null";
			}
			notations = docType.notations;
			if (notations == null) {
				return "hc_notationssetnameditemns1: #notationsNotNull 'notations' is null";
			}
			elem = doc.createElementNS("http://www.w3.org/1999/xhtml", "br");
			try {
				retval = notations.setNamedItemNS(elem);
				fail("throw_HIER_OR_NO_MOD_ERR");
			} catch (ex) {
				if (typeof(ex.code) != 'undefined') {      
					switch (ex.code) {
						case 	/* HIERARCHY_REQUEST_ERR */ 3 :
							break;
						case 	/* NO_MODIFICATION_ALLOWED_ERR */ 7 :
							break;
						default:
							throw ex;
					}
				} else { 
					throw ex;
				}
			}
		}
		return "hc_notationssetnameditemns1: OK";
	} catch (e) {
		return "hc_notationssetnameditemns1: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="importNode01.xml" fleur="importNode01" native="importNode01"><Fleur>(function(){
	var success;
	try {
		var doc;
		var aNewDoc;
		var newAttr;
		var importedChild;
		var aNode;
		var ownerDocument;
		var attrOwnerElement;
		var docType;
		var system;
		var specified;
		var childList;
		var nodeName;
		var child;
		var childValue;
		var result = new Array();

		expectedResult = new Array();
		expectedResult[0] = "elem:attr1";
		expectedResult[1] = "importedText";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		var aNewDocReq = new XMLHttpRequest();
		aNewDocReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		aNewDocReq.send();
		aNewDoc = new Fleur.DOMParser().parseFromString(aNewDocReq.responseText, "text/xml");
		newAttr = aNewDoc.createAttribute("elem:attr1");
		importedChild = aNewDoc.createTextNode("importedText");
		aNode = newAttr.appendChild(importedChild);
		aNode = doc.importNode(newAttr, false);
		ownerDocument = aNode.ownerDocument;
		docType = ownerDocument.doctype;
		system = docType.systemId;
		if (aNode == null) {
			return "importNode01: #aNode 'aNode' is null";
		}
		assertURIEquals("systemId",null,null,null,"staffNS.dtd",null,null,null,null,system);
		attrOwnerElement = aNode.ownerElement;
		if (attrOwnerElement != null) {
			return "importNode01: #ownerElement 'attrOwnerElement' equals '" + attrOwnerElement + "' not null";
		}
		specified = aNode.specified;
		if (specified !== true) {
			return "specified: 'specified' equals '" + specified + "' not true";
		}
		childList = aNode.childNodes;
		if (childList.length !== 1) {
			return "importNode01: #childList 'childList.length' equals " + childList.length + " not 1";
		}
		nodeName = aNode.nodeName;
		if ("elem:attr1" !== nodeName) {
			return "importNode01: #nodeName 'nodeName' equals '" + nodeName + "' not '" + "elem:attr1" + "'";
		}
		child = aNode.firstChild;
		childValue = child.nodeValue;
		if ("importedText" !== childValue) {
			return "importNode01: #childValue 'childValue' equals '" + childValue + "' not '" + "importedText" + "'";
		}
		return "importNode01: OK";
	} catch (e) {
		return "importNode01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var aNewDoc;
		var newAttr;
		var importedChild;
		var aNode;
		var ownerDocument;
		var attrOwnerElement;
		var docType;
		var system;
		var specified;
		var childList;
		var nodeName;
		var child;
		var childValue;
		var result = new Array();

		expectedResult = new Array();
		expectedResult[0] = "elem:attr1";
		expectedResult[1] = "importedText";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		var aNewDocReq = new XMLHttpRequest();
		aNewDocReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		aNewDocReq.send();
		aNewDoc = new DOMParser().parseFromString(aNewDocReq.responseText, "text/xml");
		newAttr = aNewDoc.createAttribute("elem:attr1");
		importedChild = aNewDoc.createTextNode("importedText");
		aNode = newAttr.appendChild(importedChild);
		aNode = doc.importNode(newAttr, false);
		ownerDocument = aNode.ownerDocument;
		docType = ownerDocument.doctype;
		system = docType.systemId;
		if (aNode == null) {
			return "importNode01: #aNode 'aNode' is null";
		}
		assertURIEquals("systemId",null,null,null,"staffNS.dtd",null,null,null,null,system);
		attrOwnerElement = aNode.ownerElement;
		if (attrOwnerElement != null) {
			return "importNode01: #ownerElement 'attrOwnerElement' equals '" + attrOwnerElement + "' not null";
		}
		specified = aNode.specified;
		if (specified !== true) {
			return "specified: 'specified' equals '" + specified + "' not true";
		}
		childList = aNode.childNodes;
		if (childList.length !== 1) {
			return "importNode01: #childList 'childList.length' equals " + childList.length + " not 1";
		}
		nodeName = aNode.nodeName;
		if ("elem:attr1" !== nodeName) {
			return "importNode01: #nodeName 'nodeName' equals '" + nodeName + "' not '" + "elem:attr1" + "'";
		}
		child = aNode.firstChild;
		childValue = child.nodeValue;
		if ("importedText" !== childValue) {
			return "importNode01: #childValue 'childValue' equals '" + childValue + "' not '" + "importedText" + "'";
		}
		return "importNode01: OK";
	} catch (e) {
		return "importNode01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="importNode02.xml" fleur="importNode02" native="importNode02"><Fleur>(function(){
	var success;
	try {
		var doc;
		var aNewDoc;
		var cDataSec;
		var aNode;
		var ownerDocument;
		var docType;
		var system;
		var value;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		var aNewDocReq = new XMLHttpRequest();
		aNewDocReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		aNewDocReq.send();
		aNewDoc = new Fleur.DOMParser().parseFromString(aNewDocReq.responseText, "text/xml");
		cDataSec = aNewDoc.createCDATASection("this is CDATASection data");
		aNode = doc.importNode(cDataSec, false);
		ownerDocument = aNode.ownerDocument;
		if (ownerDocument == null) {
			return "importNode02: #ownerDocumentNotNull 'ownerDocument' is null";
		}
		docType = ownerDocument.doctype;
		system = docType.systemId;
		assertURIEquals("dtdSystemId",null,null,null,"staffNS.dtd",null,null,null,null,system);
		value = aNode.nodeValue;
		if ("this is CDATASection data" !== value) {
			return "importNode02: #nodeValue 'value' equals '" + value + "' not '" + "this is CDATASection data" + "'";
		}
		return "importNode02: OK";
	} catch (e) {
		return "importNode02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var aNewDoc;
		var cDataSec;
		var aNode;
		var ownerDocument;
		var docType;
		var system;
		var value;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		var aNewDocReq = new XMLHttpRequest();
		aNewDocReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		aNewDocReq.send();
		aNewDoc = new DOMParser().parseFromString(aNewDocReq.responseText, "text/xml");
		cDataSec = aNewDoc.createCDATASection("this is CDATASection data");
		aNode = doc.importNode(cDataSec, false);
		ownerDocument = aNode.ownerDocument;
		if (ownerDocument == null) {
			return "importNode02: #ownerDocumentNotNull 'ownerDocument' is null";
		}
		docType = ownerDocument.doctype;
		system = docType.systemId;
		assertURIEquals("dtdSystemId",null,null,null,"staffNS.dtd",null,null,null,null,system);
		value = aNode.nodeValue;
		if ("this is CDATASection data" !== value) {
			return "importNode02: #nodeValue 'value' equals '" + value + "' not '" + "this is CDATASection data" + "'";
		}
		return "importNode02: OK";
	} catch (e) {
		return "importNode02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="importNode03.xml" fleur="importNode03" native="importNode03"><Fleur>(function(){
	var success;
	try {
		var doc;
		var aNewDoc;
		var comment;
		var aNode;
		var ownerDocument;
		var docType;
		var system;
		var value;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		var aNewDocReq = new XMLHttpRequest();
		aNewDocReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		aNewDocReq.send();
		aNewDoc = new Fleur.DOMParser().parseFromString(aNewDocReq.responseText, "text/xml");
		comment = aNewDoc.createComment("this is a comment");
		aNode = doc.importNode(comment, false);
		ownerDocument = aNode.ownerDocument;
		if (ownerDocument == null) {
			return "importNode03: #ownerDocumentNotNull 'ownerDocument' is null";
		}
		docType = ownerDocument.doctype;
		system = docType.systemId;
		assertURIEquals("systemId",null,null,null,"staffNS.dtd",null,null,null,null,system);
		value = aNode.nodeValue;
		if ("this is a comment" !== value) {
			return "importNode03: #nodeValue 'value' equals '" + value + "' not '" + "this is a comment" + "'";
		}
		return "importNode03: OK";
	} catch (e) {
		return "importNode03: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var aNewDoc;
		var comment;
		var aNode;
		var ownerDocument;
		var docType;
		var system;
		var value;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		var aNewDocReq = new XMLHttpRequest();
		aNewDocReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		aNewDocReq.send();
		aNewDoc = new DOMParser().parseFromString(aNewDocReq.responseText, "text/xml");
		comment = aNewDoc.createComment("this is a comment");
		aNode = doc.importNode(comment, false);
		ownerDocument = aNode.ownerDocument;
		if (ownerDocument == null) {
			return "importNode03: #ownerDocumentNotNull 'ownerDocument' is null";
		}
		docType = ownerDocument.doctype;
		system = docType.systemId;
		assertURIEquals("systemId",null,null,null,"staffNS.dtd",null,null,null,null,system);
		value = aNode.nodeValue;
		if ("this is a comment" !== value) {
			return "importNode03: #nodeValue 'value' equals '" + value + "' not '" + "this is a comment" + "'";
		}
		return "importNode03: OK";
	} catch (e) {
		return "importNode03: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="importNode04.xml" fleur="importNode04" native="importNode04"><Fleur>(function(){
	var success;
	try {
		var doc;
		var aNewDoc;
		var docFrag;
		var comment;
		var aNode;
		var children;
		var child;
		var childValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		var aNewDocReq = new XMLHttpRequest();
		aNewDocReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		aNewDocReq.send();
		aNewDoc = new Fleur.DOMParser().parseFromString(aNewDocReq.responseText, "text/xml");
		docFrag = aNewDoc.createDocumentFragment();
		comment = aNewDoc.createComment("descendant1");
		aNode = docFrag.appendChild(comment);
		aNode = doc.importNode(docFrag, true);
		children = aNode.childNodes;
		if (children.length !== 1) {
			return "importNode04: #throw_Size 'children.length' equals " + children.length + " not 1";
		}
		child = aNode.firstChild;
		childValue = child.nodeValue;
		if ("descendant1" !== childValue) {
			return "importNode04: #descendant1 'childValue' equals '" + childValue + "' not '" + "descendant1" + "'";
		}
		return "importNode04: OK";
	} catch (e) {
		return "importNode04: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var aNewDoc;
		var docFrag;
		var comment;
		var aNode;
		var children;
		var child;
		var childValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		var aNewDocReq = new XMLHttpRequest();
		aNewDocReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		aNewDocReq.send();
		aNewDoc = new DOMParser().parseFromString(aNewDocReq.responseText, "text/xml");
		docFrag = aNewDoc.createDocumentFragment();
		comment = aNewDoc.createComment("descendant1");
		aNode = docFrag.appendChild(comment);
		aNode = doc.importNode(docFrag, true);
		children = aNode.childNodes;
		if (children.length !== 1) {
			return "importNode04: #throw_Size 'children.length' equals " + children.length + " not 1";
		}
		child = aNode.firstChild;
		childValue = child.nodeValue;
		if ("descendant1" !== childValue) {
			return "importNode04: #descendant1 'childValue' equals '" + childValue + "' not '" + "descendant1" + "'";
		}
		return "importNode04: OK";
	} catch (e) {
		return "importNode04: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="importNode05.xml" fleur="importNode05" native="importNode05"><Fleur>(function(){
	var success;
	try {
		var doc;
		var aNewDoc;
		var element;
		var aNode;
		var hasChild;
		var ownerDocument;
		var docType;
		var system;
		var name;
		var addresses;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		var aNewDocReq = new XMLHttpRequest();
		aNewDocReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		aNewDocReq.send();
		aNewDoc = new Fleur.DOMParser().parseFromString(aNewDocReq.responseText, "text/xml");
		addresses = aNewDoc.getElementsByTagName("emp:address");
		element = addresses.item(0);
		if (element == null) {
			return "importNode05: #empAddressNotNull 'element' is null";
		}
		aNode = doc.importNode(element, false);
		hasChild = aNode.hasChildNodes();
		if (hasChild !== false) {
			return "hasChild: 'hasChild' equals '" + hasChild + "' not false";
		}
		ownerDocument = aNode.ownerDocument;
		docType = ownerDocument.doctype;
		system = docType.systemId;
		assertURIEquals("dtdSystemId",null,null,null,"staffNS.dtd",null,null,null,null,system);
		name = aNode.nodeName;
		if ("emp:address" !== name) {
			return "importNode05: #nodeName 'name' equals '" + name + "' not '" + "emp:address" + "'";
		}
		return "importNode05: OK";
	} catch (e) {
		return "importNode05: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var aNewDoc;
		var element;
		var aNode;
		var hasChild;
		var ownerDocument;
		var docType;
		var system;
		var name;
		var addresses;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		var aNewDocReq = new XMLHttpRequest();
		aNewDocReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		aNewDocReq.send();
		aNewDoc = new DOMParser().parseFromString(aNewDocReq.responseText, "text/xml");
		addresses = aNewDoc.getElementsByTagName("emp:address");
		element = addresses.item(0);
		if (element == null) {
			return "importNode05: #empAddressNotNull 'element' is null";
		}
		aNode = doc.importNode(element, false);
		hasChild = aNode.hasChildNodes();
		if (hasChild !== false) {
			return "hasChild: 'hasChild' equals '" + hasChild + "' not false";
		}
		ownerDocument = aNode.ownerDocument;
		docType = ownerDocument.doctype;
		system = docType.systemId;
		assertURIEquals("dtdSystemId",null,null,null,"staffNS.dtd",null,null,null,null,system);
		name = aNode.nodeName;
		if ("emp:address" !== name) {
			return "importNode05: #nodeName 'name' equals '" + name + "' not '" + "emp:address" + "'";
		}
		return "importNode05: OK";
	} catch (e) {
		return "importNode05: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="importNode06.xml" fleur="importNode06" native="importNode06"><Fleur>(function(){
	var success;
	try {
		var doc;
		var aNewDoc;
		var element;
		var aNode;
		var hasChild;
		var name;
		var child;
		var value;
		var addresses;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		var aNewDocReq = new XMLHttpRequest();
		aNewDocReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		aNewDocReq.send();
		aNewDoc = new Fleur.DOMParser().parseFromString(aNewDocReq.responseText, "text/xml");
		addresses = aNewDoc.getElementsByTagName("emp:address");
		element = addresses.item(0);
		if (element == null) {
			return "importNode06: #empAddressNotNull 'element' is null";
		}
		aNode = doc.importNode(element, true);
		hasChild = aNode.hasChildNodes();
		if (hasChild !== true) {
			return "throw_True: 'hasChild' equals '" + hasChild + "' not true";
		}
		name = aNode.nodeName;
		if ("emp:address" !== name) {
			return "importNode06: #nodeName 'name' equals '" + name + "' not '" + "emp:address" + "'";
		}
		child = aNode.firstChild;
		value = child.nodeValue;
		if ("27 South Road. Dallas, texas 98556" !== value) {
			return "importNode06: #nodeValue 'value' equals '" + value + "' not '" + "27 South Road. Dallas, texas 98556" + "'";
		}
		return "importNode06: OK";
	} catch (e) {
		return "importNode06: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var aNewDoc;
		var element;
		var aNode;
		var hasChild;
		var name;
		var child;
		var value;
		var addresses;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		var aNewDocReq = new XMLHttpRequest();
		aNewDocReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		aNewDocReq.send();
		aNewDoc = new DOMParser().parseFromString(aNewDocReq.responseText, "text/xml");
		addresses = aNewDoc.getElementsByTagName("emp:address");
		element = addresses.item(0);
		if (element == null) {
			return "importNode06: #empAddressNotNull 'element' is null";
		}
		aNode = doc.importNode(element, true);
		hasChild = aNode.hasChildNodes();
		if (hasChild !== true) {
			return "throw_True: 'hasChild' equals '" + hasChild + "' not true";
		}
		name = aNode.nodeName;
		if ("emp:address" !== name) {
			return "importNode06: #nodeName 'name' equals '" + name + "' not '" + "emp:address" + "'";
		}
		child = aNode.firstChild;
		value = child.nodeValue;
		if ("27 South Road. Dallas, texas 98556" !== value) {
			return "importNode06: #nodeValue 'value' equals '" + value + "' not '" + "27 South Road. Dallas, texas 98556" + "'";
		}
		return "importNode06: OK";
	} catch (e) {
		return "importNode06: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="importNode07.xml" fleur="importNode07" native="importNode07"><Fleur>(function(){
	var success;
	try {
		var doc;
		var aNewDoc;
		var element;
		var aNode;
		var attributes;
		var name;
		var attr;
		var lname;
		var namespaceURI = "http://www.nist.gov";
		var qualifiedName = "emp:employee";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		var aNewDocReq = new XMLHttpRequest();
		aNewDocReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		aNewDocReq.send();
		aNewDoc = new Fleur.DOMParser().parseFromString(aNewDocReq.responseText, "text/xml");
		element = aNewDoc.createElementNS(namespaceURI, qualifiedName);
		aNode = doc.importNode(element, false);
		attributes = aNode.attributes;
		if (attributes.length !== 1) {
			return "importNode07: #throw_Size 'attributes.length' equals " + attributes.length + " not 1";
		}
		name = aNode.nodeName;
		if ("emp:employee" !== name) {
			return "importNode07: #nodeName 'name' equals '" + name + "' not '" + "emp:employee" + "'";
		}
		attr = attributes.item(0);
		lname = attr.localName;
		if ("defaultAttr" !== lname) {
			return "importNode07: #lname 'lname' equals '" + lname + "' not '" + "defaultAttr" + "'";
		}
		return "importNode07: OK";
	} catch (e) {
		return "importNode07: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var aNewDoc;
		var element;
		var aNode;
		var attributes;
		var name;
		var attr;
		var lname;
		var namespaceURI = "http://www.nist.gov";
		var qualifiedName = "emp:employee";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		var aNewDocReq = new XMLHttpRequest();
		aNewDocReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		aNewDocReq.send();
		aNewDoc = new DOMParser().parseFromString(aNewDocReq.responseText, "text/xml");
		element = aNewDoc.createElementNS(namespaceURI, qualifiedName);
		aNode = doc.importNode(element, false);
		attributes = aNode.attributes;
		if (attributes.length !== 1) {
			return "importNode07: #throw_Size 'attributes.length' equals " + attributes.length + " not 1";
		}
		name = aNode.nodeName;
		if ("emp:employee" !== name) {
			return "importNode07: #nodeName 'name' equals '" + name + "' not '" + "emp:employee" + "'";
		}
		attr = attributes.item(0);
		lname = attr.localName;
		if ("defaultAttr" !== lname) {
			return "importNode07: #lname 'lname' equals '" + lname + "' not '" + "defaultAttr" + "'";
		}
		return "importNode07: OK";
	} catch (e) {
		return "importNode07: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="importNode08.xml" fleur="importNode08" native="importNode08"><Fleur>(function(){
	var success;
	try {
		var doc;
		var aNewDoc;
		var docFrag;
		var aNode;
		var hasChild;
		var ownerDocument;
		var docType;
		var system;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		var aNewDocReq = new XMLHttpRequest();
		aNewDocReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		aNewDocReq.send();
		aNewDoc = new Fleur.DOMParser().parseFromString(aNewDocReq.responseText, "text/xml");
		docFrag = aNewDoc.createDocumentFragment();
		aNode = doc.importNode(docFrag, false);
		hasChild = aNode.hasChildNodes();
		if (hasChild !== false) {
			return "hasChild: 'hasChild' equals '" + hasChild + "' not false";
		}
		ownerDocument = aNode.ownerDocument;
		docType = ownerDocument.doctype;
		system = docType.systemId;
		assertURIEquals("system",null,null,null,"staffNS.dtd",null,null,null,null,system);
		return "importNode08: OK";
	} catch (e) {
		return "importNode08: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var aNewDoc;
		var docFrag;
		var aNode;
		var hasChild;
		var ownerDocument;
		var docType;
		var system;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		var aNewDocReq = new XMLHttpRequest();
		aNewDocReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		aNewDocReq.send();
		aNewDoc = new DOMParser().parseFromString(aNewDocReq.responseText, "text/xml");
		docFrag = aNewDoc.createDocumentFragment();
		aNode = doc.importNode(docFrag, false);
		hasChild = aNode.hasChildNodes();
		if (hasChild !== false) {
			return "hasChild: 'hasChild' equals '" + hasChild + "' not false";
		}
		ownerDocument = aNode.ownerDocument;
		docType = ownerDocument.doctype;
		system = docType.systemId;
		assertURIEquals("system",null,null,null,"staffNS.dtd",null,null,null,null,system);
		return "importNode08: OK";
	} catch (e) {
		return "importNode08: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="importNode09.xml" fleur="importNode09" native="importNode09"><Fleur>(function(){
	var success;
	try {
		var doc;
		var aNewDoc;
		var doc1Type;
		var entityList;
		var entity2;
		var entity1;
		var ownerDocument;
		var docType;
		var system;
		var entityName;
		var publicVal;
		var notationName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		var aNewDocReq = new XMLHttpRequest();
		aNewDocReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		aNewDocReq.send();
		aNewDoc = new Fleur.DOMParser().parseFromString(aNewDocReq.responseText, "text/xml");
		docType = aNewDoc.doctype;
		entityList = docType.entities;
		if (entityList == null) {
			return "importNode09: #entitiesNotNull 'entityList' is null";
		}
		entity2 = entityList.getNamedItem("ent6");
		entity1 = doc.importNode(entity2, false);
		ownerDocument = entity1.ownerDocument;
		docType = ownerDocument.doctype;
		system = docType.systemId;
		assertURIEquals("dtdSystemId",null,null,null,"staffNS.dtd",null,null,null,null,system);
		entityName = entity1.nodeName;
		if ("ent6" !== entityName) {
			return "importNode09: #entityName 'entityName' equals '" + entityName + "' not '" + "ent6" + "'";
		}
		publicVal = entity1.publicId;
		if ("uri" !== publicVal) {
			return "importNode09: #entityPublicId 'publicVal' equals '" + publicVal + "' not '" + "uri" + "'";
		}
		system = entity1.systemId;
		assertURIEquals("entitySystemId",null,null,null,"file",null,null,null,null,system);
		notationName = entity1.notationName;
		if ("notation2" !== notationName) {
			return "importNode09: #notationName 'notationName' equals '" + notationName + "' not '" + "notation2" + "'";
		}
		return "importNode09: OK";
	} catch (e) {
		return "importNode09: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var aNewDoc;
		var doc1Type;
		var entityList;
		var entity2;
		var entity1;
		var ownerDocument;
		var docType;
		var system;
		var entityName;
		var publicVal;
		var notationName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		var aNewDocReq = new XMLHttpRequest();
		aNewDocReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		aNewDocReq.send();
		aNewDoc = new DOMParser().parseFromString(aNewDocReq.responseText, "text/xml");
		docType = aNewDoc.doctype;
		entityList = docType.entities;
		if (entityList == null) {
			return "importNode09: #entitiesNotNull 'entityList' is null";
		}
		entity2 = entityList.getNamedItem("ent6");
		entity1 = doc.importNode(entity2, false);
		ownerDocument = entity1.ownerDocument;
		docType = ownerDocument.doctype;
		system = docType.systemId;
		assertURIEquals("dtdSystemId",null,null,null,"staffNS.dtd",null,null,null,null,system);
		entityName = entity1.nodeName;
		if ("ent6" !== entityName) {
			return "importNode09: #entityName 'entityName' equals '" + entityName + "' not '" + "ent6" + "'";
		}
		publicVal = entity1.publicId;
		if ("uri" !== publicVal) {
			return "importNode09: #entityPublicId 'publicVal' equals '" + publicVal + "' not '" + "uri" + "'";
		}
		system = entity1.systemId;
		assertURIEquals("entitySystemId",null,null,null,"file",null,null,null,null,system);
		notationName = entity1.notationName;
		if ("notation2" !== notationName) {
			return "importNode09: #notationName 'notationName' equals '" + notationName + "' not '" + "notation2" + "'";
		}
		return "importNode09: OK";
	} catch (e) {
		return "importNode09: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="importNode10.xml" fleur="importNode10" native="importNode10"><Fleur>(function(){
	var success;
	try {
		var doc;
		var aNewDoc;
		var entRef;
		var aNode;
		var ownerDocument;
		var docType;
		var system;
		var name;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		var aNewDocReq = new XMLHttpRequest();
		aNewDocReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		aNewDocReq.send();
		aNewDoc = new Fleur.DOMParser().parseFromString(aNewDocReq.responseText, "text/xml");
		entRef = aNewDoc.createEntityReference("entRef1");
		if (entRef == null) {
			return "importNode10: #createdEntRefNotNull 'entRef' is null";
		}
		entRef.nodeValue = "entRef1Value";
		aNode = doc.importNode(entRef, false);
		ownerDocument = aNode.ownerDocument;
		docType = ownerDocument.doctype;
		system = docType.systemId;
		assertURIEquals("systemId",null,null,null,"staffNS.dtd",null,null,null,null,system);
		name = aNode.nodeName;
		if ("entRef1" !== name) {
			return "importNode10: #nodeName 'name' equals '" + name + "' not '" + "entRef1" + "'";
		}
		return "importNode10: OK";
	} catch (e) {
		return "importNode10: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var aNewDoc;
		var entRef;
		var aNode;
		var ownerDocument;
		var docType;
		var system;
		var name;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		var aNewDocReq = new XMLHttpRequest();
		aNewDocReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		aNewDocReq.send();
		aNewDoc = new DOMParser().parseFromString(aNewDocReq.responseText, "text/xml");
		entRef = aNewDoc.createEntityReference("entRef1");
		if (entRef == null) {
			return "importNode10: #createdEntRefNotNull 'entRef' is null";
		}
		entRef.nodeValue = "entRef1Value";
		aNode = doc.importNode(entRef, false);
		ownerDocument = aNode.ownerDocument;
		docType = ownerDocument.doctype;
		system = docType.systemId;
		assertURIEquals("systemId",null,null,null,"staffNS.dtd",null,null,null,null,system);
		name = aNode.nodeName;
		if ("entRef1" !== name) {
			return "importNode10: #nodeName 'name' equals '" + name + "' not '" + "entRef1" + "'";
		}
		return "importNode10: OK";
	} catch (e) {
		return "importNode10: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="importNode11.xml" fleur="importNode11" native="importNode11"><Fleur>(function(){
	var success;
	try {
		var doc;
		var aNewDoc;
		var entRef;
		var aNode;
		var name;
		var child;
		var childValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		var aNewDocReq = new XMLHttpRequest();
		aNewDocReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		aNewDocReq.send();
		aNewDoc = new Fleur.DOMParser().parseFromString(aNewDocReq.responseText, "text/xml");
		entRef = aNewDoc.createEntityReference("ent3");
		if (entRef == null) {
			return "importNode11: #createdEntRefNotNull 'entRef' is null";
		}
		aNode = doc.importNode(entRef, true);
		name = aNode.nodeName;
		if ("ent3" !== name) {
			return "importNode11: #entityName 'name' equals '" + name + "' not '" + "ent3" + "'";
		}
		child = aNode.firstChild;
		if (child == null) {
			return "importNode11: #child 'child' is null";
		}
		childValue = child.nodeValue;
		if ("Texas" !== childValue) {
			return "importNode11: #childValue 'childValue' equals '" + childValue + "' not '" + "Texas" + "'";
		}
		return "importNode11: OK";
	} catch (e) {
		return "importNode11: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var aNewDoc;
		var entRef;
		var aNode;
		var name;
		var child;
		var childValue;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		var aNewDocReq = new XMLHttpRequest();
		aNewDocReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		aNewDocReq.send();
		aNewDoc = new DOMParser().parseFromString(aNewDocReq.responseText, "text/xml");
		entRef = aNewDoc.createEntityReference("ent3");
		if (entRef == null) {
			return "importNode11: #createdEntRefNotNull 'entRef' is null";
		}
		aNode = doc.importNode(entRef, true);
		name = aNode.nodeName;
		if ("ent3" !== name) {
			return "importNode11: #entityName 'name' equals '" + name + "' not '" + "ent3" + "'";
		}
		child = aNode.firstChild;
		if (child == null) {
			return "importNode11: #child 'child' is null";
		}
		childValue = child.nodeValue;
		if ("Texas" !== childValue) {
			return "importNode11: #childValue 'childValue' equals '" + childValue + "' not '" + "Texas" + "'";
		}
		return "importNode11: OK";
	} catch (e) {
		return "importNode11: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="importNode12.xml" fleur="importNode12" native="importNode12"><Fleur>(function(){
	var success;
	try {
		var doc;
		var aNewDoc;
		var doc1Type;
		var entityList;
		var entity2;
		var entity1;
		var ownerDocument;
		var docType;
		var system;
		var entityName;
		var child;
		var childName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		var aNewDocReq = new XMLHttpRequest();
		aNewDocReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		aNewDocReq.send();
		aNewDoc = new Fleur.DOMParser().parseFromString(aNewDocReq.responseText, "text/xml");
		doc1Type = aNewDoc.doctype;
		entityList = doc1Type.entities;
		if (entityList == null) {
			return "importNode12: #entitiesNotNull 'entityList' is null";
		}
		entity2 = entityList.getNamedItem("ent4");
		entity1 = doc.importNode(entity2, true);
		ownerDocument = entity1.ownerDocument;
		docType = ownerDocument.doctype;
		system = docType.systemId;
		assertURIEquals("systemId",null,null,null,"staffNS.dtd",null,null,null,null,system);
		entityName = entity1.nodeName;
		if ("ent4" !== entityName) {
			return "importNode12: #entityName 'entityName' equals '" + entityName + "' not '" + "ent4" + "'";
		}
		child = entity1.firstChild;
		if (child == null) {
			return "importNode12: #notnull 'child' is null";
		}
		childName = child.nodeName;
		if ("entElement1" !== childName) {
			return "importNode12: #childName 'childName' equals '" + childName + "' not '" + "entElement1" + "'";
		}
		return "importNode12: OK";
	} catch (e) {
		return "importNode12: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var aNewDoc;
		var doc1Type;
		var entityList;
		var entity2;
		var entity1;
		var ownerDocument;
		var docType;
		var system;
		var entityName;
		var child;
		var childName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		var aNewDocReq = new XMLHttpRequest();
		aNewDocReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		aNewDocReq.send();
		aNewDoc = new DOMParser().parseFromString(aNewDocReq.responseText, "text/xml");
		doc1Type = aNewDoc.doctype;
		entityList = doc1Type.entities;
		if (entityList == null) {
			return "importNode12: #entitiesNotNull 'entityList' is null";
		}
		entity2 = entityList.getNamedItem("ent4");
		entity1 = doc.importNode(entity2, true);
		ownerDocument = entity1.ownerDocument;
		docType = ownerDocument.doctype;
		system = docType.systemId;
		assertURIEquals("systemId",null,null,null,"staffNS.dtd",null,null,null,null,system);
		entityName = entity1.nodeName;
		if ("ent4" !== entityName) {
			return "importNode12: #entityName 'entityName' equals '" + entityName + "' not '" + "ent4" + "'";
		}
		child = entity1.firstChild;
		if (child == null) {
			return "importNode12: #notnull 'child' is null";
		}
		childName = child.nodeName;
		if ("entElement1" !== childName) {
			return "importNode12: #childName 'childName' equals '" + childName + "' not '" + "entElement1" + "'";
		}
		return "importNode12: OK";
	} catch (e) {
		return "importNode12: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="importNode13.xml" fleur="importNode13" native="importNode13"><Fleur>(function(){
	var success;
	try {
		var doc;
		var aNewDoc;
		var doc1Type;
		var notationList;
		var notation;
		var aNode;
		var ownerDocument;
		var docType;
		var system;
		var publicVal;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		var aNewDocReq = new XMLHttpRequest();
		aNewDocReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		aNewDocReq.send();
		aNewDoc = new Fleur.DOMParser().parseFromString(aNewDocReq.responseText, "text/xml");
		doc1Type = aNewDoc.doctype;
		notationList = doc1Type.notations;
		if (notationList == null) {
			return "importNode13: #notationsNotNull 'notationList' is null";
		}
		notation = notationList.getNamedItem("notation1");
		aNode = doc.importNode(notation, false);
		ownerDocument = aNode.ownerDocument;
		docType = ownerDocument.doctype;
		system = docType.systemId;
		assertURIEquals("systemId",null,null,null,"staffNS.dtd",null,null,null,null,system);
		publicVal = aNode.publicId;
		if ("notation1File" !== publicVal) {
			return "importNode13: #publicId 'publicVal' equals '" + publicVal + "' not '" + "notation1File" + "'";
		}
		system = aNode.systemId;
		if (system != null) {
			return "importNode13: #notationSystemId 'system' equals '" + system + "' not null";
		}
		return "importNode13: OK";
	} catch (e) {
		return "importNode13: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var aNewDoc;
		var doc1Type;
		var notationList;
		var notation;
		var aNode;
		var ownerDocument;
		var docType;
		var system;
		var publicVal;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		var aNewDocReq = new XMLHttpRequest();
		aNewDocReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		aNewDocReq.send();
		aNewDoc = new DOMParser().parseFromString(aNewDocReq.responseText, "text/xml");
		doc1Type = aNewDoc.doctype;
		notationList = doc1Type.notations;
		if (notationList == null) {
			return "importNode13: #notationsNotNull 'notationList' is null";
		}
		notation = notationList.getNamedItem("notation1");
		aNode = doc.importNode(notation, false);
		ownerDocument = aNode.ownerDocument;
		docType = ownerDocument.doctype;
		system = docType.systemId;
		assertURIEquals("systemId",null,null,null,"staffNS.dtd",null,null,null,null,system);
		publicVal = aNode.publicId;
		if ("notation1File" !== publicVal) {
			return "importNode13: #publicId 'publicVal' equals '" + publicVal + "' not '" + "notation1File" + "'";
		}
		system = aNode.systemId;
		if (system != null) {
			return "importNode13: #notationSystemId 'system' equals '" + system + "' not null";
		}
		return "importNode13: OK";
	} catch (e) {
		return "importNode13: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="importNode14.xml" fleur="importNode14" native="importNode14"><Fleur>(function(){
	var success;
	try {
		var doc;
		var aNewDoc;
		var pi;
		var aNode;
		var ownerDocument;
		var docType;
		var system;
		var target;
		var data;
		var result = new Array();

		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		var aNewDocReq = new XMLHttpRequest();
		aNewDocReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		aNewDocReq.send();
		aNewDoc = new Fleur.DOMParser().parseFromString(aNewDocReq.responseText, "text/xml");
		pi = aNewDoc.createProcessingInstruction("target1", "data1");
		aNode = doc.importNode(pi, false);
		ownerDocument = aNode.ownerDocument;
		if (ownerDocument == null) {
			return "importNode14: #ownerDocumentNotNull 'ownerDocument' is null";
		}
		docType = ownerDocument.doctype;
		system = docType.systemId;
		assertURIEquals("systemId",null,null,null,"staffNS.dtd",null,null,null,null,system);
		target = aNode.target;
		if ("target1" !== target) {
			return "importNode14: #piTarget 'target' equals '" + target + "' not '" + "target1" + "'";
		}
		data = aNode.data;
		if ("data1" !== data) {
			return "importNode14: #piData 'data' equals '" + data + "' not '" + "data1" + "'";
		}
		return "importNode14: OK";
	} catch (e) {
		return "importNode14: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var aNewDoc;
		var pi;
		var aNode;
		var ownerDocument;
		var docType;
		var system;
		var target;
		var data;
		var result = new Array();

		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		var aNewDocReq = new XMLHttpRequest();
		aNewDocReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		aNewDocReq.send();
		aNewDoc = new DOMParser().parseFromString(aNewDocReq.responseText, "text/xml");
		pi = aNewDoc.createProcessingInstruction("target1", "data1");
		aNode = doc.importNode(pi, false);
		ownerDocument = aNode.ownerDocument;
		if (ownerDocument == null) {
			return "importNode14: #ownerDocumentNotNull 'ownerDocument' is null";
		}
		docType = ownerDocument.doctype;
		system = docType.systemId;
		assertURIEquals("systemId",null,null,null,"staffNS.dtd",null,null,null,null,system);
		target = aNode.target;
		if ("target1" !== target) {
			return "importNode14: #piTarget 'target' equals '" + target + "' not '" + "target1" + "'";
		}
		data = aNode.data;
		if ("data1" !== data) {
			return "importNode14: #piData 'data' equals '" + data + "' not '" + "data1" + "'";
		}
		return "importNode14: OK";
	} catch (e) {
		return "importNode14: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="importNode15.xml" fleur="importNode15" native="importNode15"><Fleur>(function(){
	var success;
	try {
		var doc;
		var aNewDoc;
		var text;
		var aNode;
		var ownerDocument;
		var docType;
		var system;
		var value;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		var aNewDocReq = new XMLHttpRequest();
		aNewDocReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		aNewDocReq.send();
		aNewDoc = new Fleur.DOMParser().parseFromString(aNewDocReq.responseText, "text/xml");
		text = aNewDoc.createTextNode("this is text data");
		aNode = doc.importNode(text, false);
		ownerDocument = aNode.ownerDocument;
		if (ownerDocument == null) {
			return "importNode15: #ownerDocumentNotNull 'ownerDocument' is null";
		}
		docType = ownerDocument.doctype;
		system = docType.systemId;
		assertURIEquals("systemId",null,null,null,"staffNS.dtd",null,null,null,null,system);
		value = aNode.nodeValue;
		if ("this is text data" !== value) {
			return "importNode15: #nodeValue 'value' equals '" + value + "' not '" + "this is text data" + "'";
		}
		return "importNode15: OK";
	} catch (e) {
		return "importNode15: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var aNewDoc;
		var text;
		var aNode;
		var ownerDocument;
		var docType;
		var system;
		var value;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		var aNewDocReq = new XMLHttpRequest();
		aNewDocReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		aNewDocReq.send();
		aNewDoc = new DOMParser().parseFromString(aNewDocReq.responseText, "text/xml");
		text = aNewDoc.createTextNode("this is text data");
		aNode = doc.importNode(text, false);
		ownerDocument = aNode.ownerDocument;
		if (ownerDocument == null) {
			return "importNode15: #ownerDocumentNotNull 'ownerDocument' is null";
		}
		docType = ownerDocument.doctype;
		system = docType.systemId;
		assertURIEquals("systemId",null,null,null,"staffNS.dtd",null,null,null,null,system);
		value = aNode.nodeValue;
		if ("this is text data" !== value) {
			return "importNode15: #nodeValue 'value' equals '" + value + "' not '" + "this is text data" + "'";
		}
		return "importNode15: OK";
	} catch (e) {
		return "importNode15: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="importNode16.xml" fleur="importNode16" native="importNode16"><Fleur>(function(){
	var success;
	try {
		var doc;
		var anotherDoc;
		var docType;
		var node;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		var anotherDocReq = new XMLHttpRequest();
		anotherDocReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		anotherDocReq.send();
		anotherDoc = new Fleur.DOMParser().parseFromString(anotherDocReq.responseText, "text/xml");
		docType = anotherDoc.doctype;
		success = false;
		try {
			node = doc.importNode(docType, false);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 9;
			}
		}
		if (!success) {
			return "importNode16: Exception NOT_SUPPORTED_ERR expected";
		}
		return "importNode16: OK";
	} catch (e) {
		return "importNode16: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var anotherDoc;
		var docType;
		var node;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		var anotherDocReq = new XMLHttpRequest();
		anotherDocReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		anotherDocReq.send();
		anotherDoc = new DOMParser().parseFromString(anotherDocReq.responseText, "text/xml");
		docType = anotherDoc.doctype;
		success = false;
		try {
			node = doc.importNode(docType, false);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 9;
			}
		}
		if (!success) {
			return "importNode16: Exception NOT_SUPPORTED_ERR expected";
		}
		return "importNode16: OK";
	} catch (e) {
		return "importNode16: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="importNode17.xml" fleur="importNode17" native="importNode17"><Fleur>(function(){
	var success;
	try {
		var doc;
		var anotherDoc;
		var node;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		var anotherDocReq = new XMLHttpRequest();
		anotherDocReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		anotherDocReq.send();
		anotherDoc = new Fleur.DOMParser().parseFromString(anotherDocReq.responseText, "text/xml");
		success = false;
		try {
			node = doc.importNode(anotherDoc, false);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 9;
			}
		}
		if (!success) {
			return "importNode17: Exception NOT_SUPPORTED_ERR expected";
		}
		return "importNode17: OK";
	} catch (e) {
		return "importNode17: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var anotherDoc;
		var node;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		var anotherDocReq = new XMLHttpRequest();
		anotherDocReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		anotherDocReq.send();
		anotherDoc = new DOMParser().parseFromString(anotherDocReq.responseText, "text/xml");
		success = false;
		try {
			node = doc.importNode(anotherDoc, false);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 9;
			}
		}
		if (!success) {
			return "importNode17: Exception NOT_SUPPORTED_ERR expected";
		}
		return "importNode17: OK";
	} catch (e) {
		return "importNode17: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="internalSubset01.xml" fleur="internalSubset01" native="internalSubset01"><Fleur>(function(){
	var success;
	try {
		var doc;
		var docType;
		var internal;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff2.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		internal = docType.internalSubset;
		if (internal != null) {
			return "internalSubset01: #internalSubsetNull 'internal' equals '" + internal + "' not null";
		}
		return "internalSubset01: OK";
	} catch (e) {
		return "internalSubset01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var docType;
		var internal;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff2.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		internal = docType.internalSubset;
		if (internal != null) {
			return "internalSubset01: #internalSubsetNull 'internal' equals '" + internal + "' not null";
		}
		return "internalSubset01: OK";
	} catch (e) {
		return "internalSubset01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="isSupported01.xml" fleur="isSupported01" native="isSupported01"><Fleur>(function(){
	var success;
	try {
		var doc;
		var rootNode;
		var state;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		rootNode = doc.documentElement;
		state = rootNode.isSupported("XXX", "1.0");
		if (state !== false) {
			return "throw_False: 'state' equals '" + state + "' not false";
		}
		return "isSupported01: OK";
	} catch (e) {
		return "isSupported01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var rootNode;
		var state;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		rootNode = doc.documentElement;
		state = rootNode.isSupported("XXX", "1.0");
		if (state !== false) {
			return "throw_False: 'state' equals '" + state + "' not false";
		}
		return "isSupported01: OK";
	} catch (e) {
		return "isSupported01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="isSupported02.xml" fleur="isSupported02" native="isSupported02"><Fleur>(function(){
	var success;
	try {
		var doc;
		var rootNode;
		var state;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		rootNode = doc.documentElement;
		state = rootNode.isSupported("XML", "9.0");
		if (state !== false) {
			return "throw_False: 'state' equals '" + state + "' not false";
		}
		return "isSupported02: OK";
	} catch (e) {
		return "isSupported02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var rootNode;
		var state;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		rootNode = doc.documentElement;
		state = rootNode.isSupported("XML", "9.0");
		if (state !== false) {
			return "throw_False: 'state' equals '" + state + "' not false";
		}
		return "isSupported02: OK";
	} catch (e) {
		return "isSupported02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="isSupported04.xml" fleur="isSupported04" native="isSupported04"><Fleur>(function(){
	var success;
	try {
		var doc;
		var rootNode;
		var state;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		rootNode = doc.documentElement;
		state = rootNode.isSupported("xml", "1.0");
		if (state !== true) {
			return "throw_True: 'state' equals '" + state + "' not true";
		}
		return "isSupported04: OK";
	} catch (e) {
		return "isSupported04: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var rootNode;
		var state;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		rootNode = doc.documentElement;
		state = rootNode.isSupported("xml", "1.0");
		if (state !== true) {
			return "throw_True: 'state' equals '" + state + "' not true";
		}
		return "isSupported04: OK";
	} catch (e) {
		return "isSupported04: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="isSupported05.xml" fleur="isSupported05" native="isSupported05"><Fleur>(function(){
	var success;
	try {
		var doc;
		var rootNode;
		var state;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		rootNode = doc.documentElement;
		state = rootNode.isSupported("core", "2.0");
		if (state !== true) {
			return "throw_True: 'state' equals '" + state + "' not true";
		}
		return "isSupported05: OK";
	} catch (e) {
		return "isSupported05: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var rootNode;
		var state;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		rootNode = doc.documentElement;
		state = rootNode.isSupported("core", "2.0");
		if (state !== true) {
			return "throw_True: 'state' equals '" + state + "' not true";
		}
		return "isSupported05: OK";
	} catch (e) {
		return "isSupported05: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="isSupported06.xml" fleur="isSupported06" native="isSupported06"><Fleur>(function(){
	var success;
	try {
		var doc;
		var rootNode;
		var state;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		rootNode = doc.documentElement;
		state = rootNode.isSupported("xml", "2.0");
		if (state !== true) {
			return "throw_True: 'state' equals '" + state + "' not true";
		}
		return "isSupported06: OK";
	} catch (e) {
		return "isSupported06: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var rootNode;
		var state;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		rootNode = doc.documentElement;
		state = rootNode.isSupported("xml", "2.0");
		if (state !== true) {
			return "throw_True: 'state' equals '" + state + "' not true";
		}
		return "isSupported06: OK";
	} catch (e) {
		return "isSupported06: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="isSupported07.xml" fleur="isSupported07" native="isSupported07"><Fleur>(function(){
	var success;
	try {
		var doc;
		var rootNode;
		var state;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		rootNode = doc.documentElement;
		state = rootNode.isSupported("XML", "");
		if (state !== true) {
			return "throw_True: 'state' equals '" + state + "' not true";
		}
		return "isSupported07: OK";
	} catch (e) {
		return "isSupported07: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var rootNode;
		var state;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		rootNode = doc.documentElement;
		state = rootNode.isSupported("XML", "");
		if (state !== true) {
			return "throw_True: 'state' equals '" + state + "' not true";
		}
		return "isSupported07: OK";
	} catch (e) {
		return "isSupported07: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="isSupported09.xml" fleur="isSupported09" native="isSupported09"><Fleur>(function(){
	var success;
	try {
		var doc;
		var rootNode;
		var state;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		rootNode = doc.documentElement;
		state = rootNode.isSupported("XML", "1.0");
		if (state !== true) {
			return "throw_True: 'state' equals '" + state + "' not true";
		}
		return "isSupported09: OK";
	} catch (e) {
		return "isSupported09: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var rootNode;
		var state;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		rootNode = doc.documentElement;
		state = rootNode.isSupported("XML", "1.0");
		if (state !== true) {
			return "throw_True: 'state' equals '" + state + "' not true";
		}
		return "isSupported09: OK";
	} catch (e) {
		return "isSupported09: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="isSupported10.xml" fleur="isSupported10" native="isSupported10"><Fleur>(function(){
	var success;
	try {
		var doc;
		var rootNode;
		var state;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		rootNode = doc.documentElement;
		state = rootNode.isSupported("CORE", "2.0");
		if (state !== true) {
			return "throw_True: 'state' equals '" + state + "' not true";
		}
		return "isSupported10: OK";
	} catch (e) {
		return "isSupported10: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var rootNode;
		var state;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		rootNode = doc.documentElement;
		state = rootNode.isSupported("CORE", "2.0");
		if (state !== true) {
			return "throw_True: 'state' equals '" + state + "' not true";
		}
		return "isSupported10: OK";
	} catch (e) {
		return "isSupported10: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="isSupported11.xml" fleur="isSupported11" native="isSupported11"><Fleur>(function(){
	var success;
	try {
		var doc;
		var rootNode;
		var state;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		rootNode = doc.documentElement;
		state = rootNode.isSupported("XML", "2.0");
		if (state !== true) {
			return "throw_True: 'state' equals '" + state + "' not true";
		}
		return "isSupported11: OK";
	} catch (e) {
		return "isSupported11: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var rootNode;
		var state;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		rootNode = doc.documentElement;
		state = rootNode.isSupported("XML", "2.0");
		if (state !== true) {
			return "throw_True: 'state' equals '" + state + "' not true";
		}
		return "isSupported11: OK";
	} catch (e) {
		return "isSupported11: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="isSupported12.xml" fleur="isSupported12" native="isSupported12"><Fleur>(function(){
	var success;
	try {
		features = new Array();
		features[0] = "Core";
		features[1] = "XML";
		features[2] = "HTML";
		features[3] = "Views";
		features[4] = "StyleSheets";
		features[5] = "CSS";
		features[6] = "CSS2";
		features[7] = "Events";
		features[8] = "UIEvents";
		features[9] = "MouseEvents";
		features[10] = "MutationEvents";
		features[11] = "HTMLEvents";
		features[12] = "Range";
		features[13] = "Traversal";
		features[14] = "bogus.bogus.bogus";
		var doc;
		var rootNode;
		var featureElement;
		var state;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		rootNode = doc.documentElement;
		state = rootNode.isSupported("Core", "2.0");
		if (state !== true) {
			return "Core2: 'state' equals '" + state + "' not true";
		}
		for (var index_id0x0b264600 = 0; index_id0x0b264600 &lt; features.length; index_id0x0b264600++) {
			featureElement = features[index_id0x0b264600];
			state = rootNode.isSupported(featureElement, "1.0");
		}
		for (var index_id0x0b264790 = 0; index_id0x0b264790 &lt; features.length; index_id0x0b264790++) {
			featureElement = features[index_id0x0b264790];
			state = rootNode.isSupported(featureElement, "2.0");
		}
		return "isSupported12: OK";
	} catch (e) {
		return "isSupported12: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		features = new Array();
		features[0] = "Core";
		features[1] = "XML";
		features[2] = "HTML";
		features[3] = "Views";
		features[4] = "StyleSheets";
		features[5] = "CSS";
		features[6] = "CSS2";
		features[7] = "Events";
		features[8] = "UIEvents";
		features[9] = "MouseEvents";
		features[10] = "MutationEvents";
		features[11] = "HTMLEvents";
		features[12] = "Range";
		features[13] = "Traversal";
		features[14] = "bogus.bogus.bogus";
		var doc;
		var rootNode;
		var featureElement;
		var state;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		rootNode = doc.documentElement;
		state = rootNode.isSupported("Core", "2.0");
		if (state !== true) {
			return "Core2: 'state' equals '" + state + "' not true";
		}
		for (var index_id0x0b264600 = 0; index_id0x0b264600 &lt; features.length; index_id0x0b264600++) {
			featureElement = features[index_id0x0b264600];
			state = rootNode.isSupported(featureElement, "1.0");
		}
		for (var index_id0x0b264790 = 0; index_id0x0b264790 &lt; features.length; index_id0x0b264790++) {
			featureElement = features[index_id0x0b264790];
			state = rootNode.isSupported(featureElement, "2.0");
		}
		return "isSupported12: OK";
	} catch (e) {
		return "isSupported12: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="isSupported13.xml" fleur="isSupported13" native="isSupported13"><Fleur>(function(){
	var success;
	try {
		var doc;
		var rootNode;
		var state;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		rootNode = doc.documentElement;
		state = rootNode.isSupported("Core", "");
		if (state !== true) {
			return "Core: 'state' equals '" + state + "' not true";
		}
		return "isSupported13: OK";
	} catch (e) {
		return "isSupported13: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var rootNode;
		var state;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		rootNode = doc.documentElement;
		state = rootNode.isSupported("Core", "");
		if (state !== true) {
			return "Core: 'state' equals '" + state + "' not true";
		}
		return "isSupported13: OK";
	} catch (e) {
		return "isSupported13: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="isSupported14.xml" fleur="isSupported14" native="isSupported14"><Fleur>(function(){
	var success;
	try {
		var doc;
		var rootNode;
		var state;
		var nullString = null;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		rootNode = doc.documentElement;
		state = rootNode.isSupported("Core", nullString);
		if (state !== true) {
			return "Core: 'state' equals '" + state + "' not true";
		}
		return "isSupported14: OK";
	} catch (e) {
		return "isSupported14: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var rootNode;
		var state;
		var nullString = null;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		rootNode = doc.documentElement;
		state = rootNode.isSupported("Core", nullString);
		if (state !== true) {
			return "Core: 'state' equals '" + state + "' not true";
		}
		return "isSupported14: OK";
	} catch (e) {
		return "isSupported14: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="localName01.xml" fleur="localName01" native="localName01"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testAddr;
		var addrAttr;
		var localName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("emp:address");
		testAddr = elementList.item(0);
		if (testAddr == null) {
			return "localName01: #empAddrNotNull 'testAddr' is null";
		}
		addrAttr = testAddr.getAttributeNode("emp:domestic");
		localName = addrAttr.localName;
		if ("domestic" !== localName) {
			return "localName01: #localName 'localName' equals '" + localName + "' not '" + "domestic" + "'";
		}
		return "localName01: OK";
	} catch (e) {
		return "localName01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testAddr;
		var addrAttr;
		var localName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("emp:address");
		testAddr = elementList.item(0);
		if (testAddr == null) {
			return "localName01: #empAddrNotNull 'testAddr' is null";
		}
		addrAttr = testAddr.getAttributeNode("emp:domestic");
		localName = addrAttr.localName;
		if ("domestic" !== localName) {
			return "localName01: #localName 'localName' equals '" + localName + "' not '" + "domestic" + "'";
		}
		return "localName01: OK";
	} catch (e) {
		return "localName01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="localName02.xml" fleur="localName02" native="localName02"><Fleur>(function(){
	var success;
	try {
		var doc;
		var createdNode;
		var localName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		createdNode = doc.createElement("test:employee");
		localName = createdNode.localName;
		if (localName != null) {
			return "localName02: #localNameNull 'localName' equals '" + localName + "' not null";
		}
		return "localName02: OK";
	} catch (e) {
		return "localName02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var createdNode;
		var localName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		createdNode = doc.createElement("test:employee");
		localName = createdNode.localName;
		if (localName != null) {
			return "localName02: #localNameNull 'localName' equals '" + localName + "' not null";
		}
		return "localName02: OK";
	} catch (e) {
		return "localName02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="localName03.xml" fleur="localName03" native="localName03"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var textNode;
		var localName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employeeId");
		testEmployee = elementList.item(0);
		textNode = testEmployee.firstChild;
		localName = textNode.localName;
		if (localName != null) {
			return "localName03: #textNodeLocalName 'localName' equals '" + localName + "' not null";
		}
		return "localName03: OK";
	} catch (e) {
		return "localName03: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var textNode;
		var localName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employeeId");
		testEmployee = elementList.item(0);
		textNode = testEmployee.firstChild;
		localName = textNode.localName;
		if (localName != null) {
			return "localName03: #textNodeLocalName 'localName' equals '" + localName + "' not null";
		}
		return "localName03: OK";
	} catch (e) {
		return "localName03: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="localName04.xml" fleur="localName04" native="localName04"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var employeeLocalName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		testEmployee = elementList.item(0);
		employeeLocalName = testEmployee.localName;
		if ("employee" !== employeeLocalName) {
			return "localName04: #lname 'employeeLocalName' equals '" + employeeLocalName + "' not '" + "employee" + "'";
		}
		return "localName04: OK";
	} catch (e) {
		return "localName04: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var employeeLocalName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		testEmployee = elementList.item(0);
		employeeLocalName = testEmployee.localName;
		if ("employee" !== employeeLocalName) {
			return "localName04: #lname 'employeeLocalName' equals '" + employeeLocalName + "' not '" + "employee" + "'";
		}
		return "localName04: OK";
	} catch (e) {
		return "localName04: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="namednodemapgetnameditemns01.xml" fleur="namednodemapgetnameditemns01" native="namednodemapgetnameditemns01"><Fleur>(function(){
	var success;
	try {
		var doc;
		var docType;
		var entities;
		var notations;
		var entity;
		var notation;
		var entityName;
		var notationName;
		var nullNS = null;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		entities = docType.entities;
		if (entities == null) {
			return "namednodemapgetnameditemns01: #entitiesNotNull 'entities' is null";
		}
		notations = docType.notations;
		if (notations == null) {
			return "namednodemapgetnameditemns01: #notationsNotNull 'notations' is null";
		}
		entity = entities.getNamedItemNS(nullNS, "ent1");
		if (entity != null) {
			return "namednodemapgetnameditemns01: #entityNull 'entity' equals '" + entity + "' not null";
		}
		notation = notations.getNamedItemNS(nullNS, "notation1");
		if (notation != null) {
			return "namednodemapgetnameditemns01: #notationNull 'notation' equals '" + notation + "' not null";
		}
		return "namednodemapgetnameditemns01: OK";
	} catch (e) {
		return "namednodemapgetnameditemns01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var docType;
		var entities;
		var notations;
		var entity;
		var notation;
		var entityName;
		var notationName;
		var nullNS = null;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		entities = docType.entities;
		if (entities == null) {
			return "namednodemapgetnameditemns01: #entitiesNotNull 'entities' is null";
		}
		notations = docType.notations;
		if (notations == null) {
			return "namednodemapgetnameditemns01: #notationsNotNull 'notations' is null";
		}
		entity = entities.getNamedItemNS(nullNS, "ent1");
		if (entity != null) {
			return "namednodemapgetnameditemns01: #entityNull 'entity' equals '" + entity + "' not null";
		}
		notation = notations.getNamedItemNS(nullNS, "notation1");
		if (notation != null) {
			return "namednodemapgetnameditemns01: #notationNull 'notation' equals '" + notation + "' not null";
		}
		return "namednodemapgetnameditemns01: OK";
	} catch (e) {
		return "namednodemapgetnameditemns01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="namednodemapgetnameditemns02.xml" fleur="namednodemapgetnameditemns02" native="namednodemapgetnameditemns02"><Fleur>(function(){
	var success;
	try {
		var doc;
		var attributes;
		var element;
		var attribute;
		var elementList;
		var attrName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagNameNS("http://www.nist.gov", "address");
		element = elementList.item(1);
		attributes = element.attributes;
		attribute = attributes.getNamedItemNS("http://www.nist.gov", "domestic");
		attrName = attribute.nodeName;
		if ("emp:domestic" !== attrName) {
			return "namednodemapgetnameditemns02: #namednodemapgetnameditemns02 'attrName' equals '" + attrName + "' not '" + "emp:domestic" + "'";
		}
		return "namednodemapgetnameditemns02: OK";
	} catch (e) {
		return "namednodemapgetnameditemns02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var attributes;
		var element;
		var attribute;
		var elementList;
		var attrName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagNameNS("http://www.nist.gov", "address");
		element = elementList.item(1);
		attributes = element.attributes;
		attribute = attributes.getNamedItemNS("http://www.nist.gov", "domestic");
		attrName = attribute.nodeName;
		if ("emp:domestic" !== attrName) {
			return "namednodemapgetnameditemns02: #namednodemapgetnameditemns02 'attrName' equals '" + attrName + "' not '" + "emp:domestic" + "'";
		}
		return "namednodemapgetnameditemns02: OK";
	} catch (e) {
		return "namednodemapgetnameditemns02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="namednodemapgetnameditemns03.xml" fleur="namednodemapgetnameditemns03" native="namednodemapgetnameditemns03"><Fleur>(function(){
	var success;
	try {
		var doc;
		var attributes;
		var element;
		var attribute;
		var newAttr1;
		var newAttr2;
		var newAttribute;
		var attrName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		element = doc.createElementNS("http://www.w3.org/DOM/Test", "root");
		newAttr1 = doc.createAttributeNS("http://www.w3.org/DOM/L1", "L1:att");
		newAttribute = element.setAttributeNodeNS(newAttr1);
		newAttr2 = doc.createAttributeNS("http://www.w3.org/DOM/L2", "L2:att");
		newAttribute = element.setAttributeNodeNS(newAttr2);
		attributes = element.attributes;
		attribute = attributes.getNamedItemNS("http://www.w3.org/DOM/L2", "att");
		attrName = attribute.nodeName;
		if ("L2:att" !== attrName) {
			return "namednodemapgetnameditemns03: #namednodemapgetnameditemns03 'attrName' equals '" + attrName + "' not '" + "L2:att" + "'";
		}
		return "namednodemapgetnameditemns03: OK";
	} catch (e) {
		return "namednodemapgetnameditemns03: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var attributes;
		var element;
		var attribute;
		var newAttr1;
		var newAttr2;
		var newAttribute;
		var attrName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		element = doc.createElementNS("http://www.w3.org/DOM/Test", "root");
		newAttr1 = doc.createAttributeNS("http://www.w3.org/DOM/L1", "L1:att");
		newAttribute = element.setAttributeNodeNS(newAttr1);
		newAttr2 = doc.createAttributeNS("http://www.w3.org/DOM/L2", "L2:att");
		newAttribute = element.setAttributeNodeNS(newAttr2);
		attributes = element.attributes;
		attribute = attributes.getNamedItemNS("http://www.w3.org/DOM/L2", "att");
		attrName = attribute.nodeName;
		if ("L2:att" !== attrName) {
			return "namednodemapgetnameditemns03: #namednodemapgetnameditemns03 'attrName' equals '" + attrName + "' not '" + "L2:att" + "'";
		}
		return "namednodemapgetnameditemns03: OK";
	} catch (e) {
		return "namednodemapgetnameditemns03: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="namednodemapgetnameditemns04.xml" fleur="namednodemapgetnameditemns04" native="namednodemapgetnameditemns04"><Fleur>(function(){
	var success;
	try {
		var doc;
		var attributes;
		var element;
		var attribute;
		var newAttr1;
		var newAttribute;
		var elementList;
		var attrName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagNameNS("*", "address");
		element = elementList.item(1);
		newAttr1 = doc.createAttributeNS("http://www.w3.org/DOM/L1", "street");
		newAttribute = element.setAttributeNodeNS(newAttr1);
		attributes = element.attributes;
		attribute = attributes.getNamedItemNS("http://www.w3.org/DOM/L1", "street");
		attrName = attribute.nodeName;
		if ("street" !== attrName) {
			return "namednodemapgetnameditemns04: #namednodemapgetnameditemns04 'attrName' equals '" + attrName + "' not '" + "street" + "'";
		}
		return "namednodemapgetnameditemns04: OK";
	} catch (e) {
		return "namednodemapgetnameditemns04: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var attributes;
		var element;
		var attribute;
		var newAttr1;
		var newAttribute;
		var elementList;
		var attrName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagNameNS("*", "address");
		element = elementList.item(1);
		newAttr1 = doc.createAttributeNS("http://www.w3.org/DOM/L1", "street");
		newAttribute = element.setAttributeNodeNS(newAttr1);
		attributes = element.attributes;
		attribute = attributes.getNamedItemNS("http://www.w3.org/DOM/L1", "street");
		attrName = attribute.nodeName;
		if ("street" !== attrName) {
			return "namednodemapgetnameditemns04: #namednodemapgetnameditemns04 'attrName' equals '" + attrName + "' not '" + "street" + "'";
		}
		return "namednodemapgetnameditemns04: OK";
	} catch (e) {
		return "namednodemapgetnameditemns04: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="namednodemapgetnameditemns05.xml" fleur="namednodemapgetnameditemns05" native="namednodemapgetnameditemns05"><Fleur>(function(){
	var success;
	try {
		var doc;
		var attributes;
		var element;
		var attribute;
		var elementList;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagNameNS("*", "address");
		element = elementList.item(1);
		attributes = element.attributes;
		attribute = attributes.getNamedItemNS("*", "street");
		if (attribute != null) {
			return "namednodemapgetnameditemns05: #namednodemapgetnameditemns05 'attribute' equals '" + attribute + "' not null";
		}
		return "namednodemapgetnameditemns05: OK";
	} catch (e) {
		return "namednodemapgetnameditemns05: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var attributes;
		var element;
		var attribute;
		var elementList;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagNameNS("*", "address");
		element = elementList.item(1);
		attributes = element.attributes;
		attribute = attributes.getNamedItemNS("*", "street");
		if (attribute != null) {
			return "namednodemapgetnameditemns05: #namednodemapgetnameditemns05 'attribute' equals '" + attribute + "' not null";
		}
		return "namednodemapgetnameditemns05: OK";
	} catch (e) {
		return "namednodemapgetnameditemns05: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="namednodemapgetnameditemns06.xml" fleur="namednodemapgetnameditemns06" native="namednodemapgetnameditemns06"><Fleur>(function(){
	var success;
	try {
		var doc;
		var attributesMap1;
		var attributesMap2;
		var element;
		var attribute;
		var newAttr1;
		var newAttribute;
		var elementList;
		var attrName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagNameNS("*", "address");
		element = elementList.item(1);
		attributesMap1 = element.attributes;
		attributesMap2 = element.attributes;
		newAttr1 = doc.createAttributeNS("http://www.w3.org/DOM/L1", "street");
		newAttribute = element.setAttributeNodeNS(newAttr1);
		attribute = attributesMap1.getNamedItemNS("http://www.w3.org/DOM/L1", "street");
		attrName = attribute.nodeName;
		if ("street" !== attrName) {
			return "namednodemapgetnameditemns06: #namednodemapgetnameditemnsMap106 'attrName' equals '" + attrName + "' not '" + "street" + "'";
		}
		attribute = attributesMap2.getNamedItemNS("http://www.w3.org/DOM/L1", "street");
		attrName = attribute.nodeName;
		if ("street" !== attrName) {
			return "namednodemapgetnameditemns06: #namednodemapgetnameditemnsMap206 'attrName' equals '" + attrName + "' not '" + "street" + "'";
		}
		return "namednodemapgetnameditemns06: OK";
	} catch (e) {
		return "namednodemapgetnameditemns06: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var attributesMap1;
		var attributesMap2;
		var element;
		var attribute;
		var newAttr1;
		var newAttribute;
		var elementList;
		var attrName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagNameNS("*", "address");
		element = elementList.item(1);
		attributesMap1 = element.attributes;
		attributesMap2 = element.attributes;
		newAttr1 = doc.createAttributeNS("http://www.w3.org/DOM/L1", "street");
		newAttribute = element.setAttributeNodeNS(newAttr1);
		attribute = attributesMap1.getNamedItemNS("http://www.w3.org/DOM/L1", "street");
		attrName = attribute.nodeName;
		if ("street" !== attrName) {
			return "namednodemapgetnameditemns06: #namednodemapgetnameditemnsMap106 'attrName' equals '" + attrName + "' not '" + "street" + "'";
		}
		attribute = attributesMap2.getNamedItemNS("http://www.w3.org/DOM/L1", "street");
		attrName = attribute.nodeName;
		if ("street" !== attrName) {
			return "namednodemapgetnameditemns06: #namednodemapgetnameditemnsMap206 'attrName' equals '" + attrName + "' not '" + "street" + "'";
		}
		return "namednodemapgetnameditemns06: OK";
	} catch (e) {
		return "namednodemapgetnameditemns06: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="namednodemapremovenameditemns01.xml" fleur="namednodemapremovenameditemns01" native="namednodemapremovenameditemns01"><Fleur>(function(){
	var success;
	try {
		var doc;
		var attributes;
		var element;
		var attribute;
		var elementList;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagNameNS("http://www.nist.gov", "address");
		element = elementList.item(1);
		attributes = element.attributes;
		attribute = attributes.removeNamedItemNS("http://www.nist.gov", "domestic");
		attribute = attributes.getNamedItemNS("http://www.nist.gov", "domestic");
		if (attribute != null) {
			return "namednodemapremovenameditemns01: #namednodemapremovenameditemns01 'attribute' equals '" + attribute + "' not null";
		}
		return "namednodemapremovenameditemns01: OK";
	} catch (e) {
		return "namednodemapremovenameditemns01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var attributes;
		var element;
		var attribute;
		var elementList;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagNameNS("http://www.nist.gov", "address");
		element = elementList.item(1);
		attributes = element.attributes;
		attribute = attributes.removeNamedItemNS("http://www.nist.gov", "domestic");
		attribute = attributes.getNamedItemNS("http://www.nist.gov", "domestic");
		if (attribute != null) {
			return "namednodemapremovenameditemns01: #namednodemapremovenameditemns01 'attribute' equals '" + attribute + "' not null";
		}
		return "namednodemapremovenameditemns01: OK";
	} catch (e) {
		return "namednodemapremovenameditemns01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="namednodemapremovenameditemns02.xml" fleur="namednodemapremovenameditemns02" native="namednodemapremovenameditemns02"><Fleur>(function(){
	var success;
	try {
		var doc;
		var attributes;
		var element;
		var attribute;
		var elementList;
		var attrValue;
		var nullNS = null;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagNameNS("http://www.nist.gov", "employee");
		element = elementList.item(1);
		attributes = element.attributes;
		attribute = attributes.removeNamedItemNS(nullNS, "defaultAttr");
		attribute = attributes.getNamedItemNS(nullNS, "defaultAttr");
		attrValue = attribute.nodeValue;
		if (attribute == null) {
			return "namednodemapremovenameditemns02: #namednodemapremovenameditemns02 'attribute' is null";
		}
		if ("defaultVal" !== attrValue) {
			return "namednodemapremovenameditemns02: #namednodemapremovenameditemns02_attrValue 'attrValue' equals '" + attrValue + "' not '" + "defaultVal" + "'";
		}
		return "namednodemapremovenameditemns02: OK";
	} catch (e) {
		return "namednodemapremovenameditemns02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var attributes;
		var element;
		var attribute;
		var elementList;
		var attrValue;
		var nullNS = null;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagNameNS("http://www.nist.gov", "employee");
		element = elementList.item(1);
		attributes = element.attributes;
		attribute = attributes.removeNamedItemNS(nullNS, "defaultAttr");
		attribute = attributes.getNamedItemNS(nullNS, "defaultAttr");
		attrValue = attribute.nodeValue;
		if (attribute == null) {
			return "namednodemapremovenameditemns02: #namednodemapremovenameditemns02 'attribute' is null";
		}
		if ("defaultVal" !== attrValue) {
			return "namednodemapremovenameditemns02: #namednodemapremovenameditemns02_attrValue 'attrValue' equals '" + attrValue + "' not '" + "defaultVal" + "'";
		}
		return "namednodemapremovenameditemns02: OK";
	} catch (e) {
		return "namednodemapremovenameditemns02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="namednodemapremovenameditemns03.xml" fleur="namednodemapremovenameditemns03" native="namednodemapremovenameditemns03"><Fleur>(function(){
	var success;
	try {
		var doc;
		var attributes;
		var element;
		var attribute;
		var newAttribute;
		var attribute1;
		var attribute2;
		var nodeName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		element = doc.createElementNS("http://www.w3.org/DOM/Test", "root");
		attribute1 = doc.createAttributeNS("http://www.w3.org/DOM/L1", "L1:att");
		newAttribute = element.setAttributeNodeNS(attribute1);
		attribute2 = doc.createAttributeNS("http://www.w3.org/DOM/L2", "L2:att");
		newAttribute = element.setAttributeNodeNS(attribute2);
		attributes = element.attributes;
		attribute = attributes.removeNamedItemNS("http://www.w3.org/DOM/L1", "att");
		attribute = attributes.getNamedItemNS("http://www.w3.org/DOM/L2", "att");
		nodeName = attribute.nodeName;
		if ("L2:att" !== nodeName) {
			return "namednodemapremovenameditemns03: #namednodemapremovenameditemns02 'nodeName' equals '" + nodeName + "' not '" + "L2:att" + "'";
		}
		return "namednodemapremovenameditemns03: OK";
	} catch (e) {
		return "namednodemapremovenameditemns03: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var attributes;
		var element;
		var attribute;
		var newAttribute;
		var attribute1;
		var attribute2;
		var nodeName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		element = doc.createElementNS("http://www.w3.org/DOM/Test", "root");
		attribute1 = doc.createAttributeNS("http://www.w3.org/DOM/L1", "L1:att");
		newAttribute = element.setAttributeNodeNS(attribute1);
		attribute2 = doc.createAttributeNS("http://www.w3.org/DOM/L2", "L2:att");
		newAttribute = element.setAttributeNodeNS(attribute2);
		attributes = element.attributes;
		attribute = attributes.removeNamedItemNS("http://www.w3.org/DOM/L1", "att");
		attribute = attributes.getNamedItemNS("http://www.w3.org/DOM/L2", "att");
		nodeName = attribute.nodeName;
		if ("L2:att" !== nodeName) {
			return "namednodemapremovenameditemns03: #namednodemapremovenameditemns02 'nodeName' equals '" + nodeName + "' not '" + "L2:att" + "'";
		}
		return "namednodemapremovenameditemns03: OK";
	} catch (e) {
		return "namednodemapremovenameditemns03: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="namednodemapremovenameditemns04.xml" fleur="namednodemapremovenameditemns04" native="namednodemapremovenameditemns04"><Fleur>(function(){
	var success;
	try {
		var doc;
		var attributes;
		var element;
		var attribute;
		var attributeRemoved;
		var elementList;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagNameNS("*", "employee");
		element = elementList.item(0);
		attributes = element.attributes;
		attributeRemoved = attributes.removeNamedItemNS("http://www.w3.org/2000/xmlns/", "xmlns");
		attribute = attributes.getNamedItemNS("http://www.w3.org/2000/xmlns/", "xmlns");
		if (attribute != null) {
			return "namednodemapremovenameditemns04: #namednodemapremovenameditemns04_1 'attribute' equals '" + attribute + "' not null";
		}
		attributeRemoved = attributes.removeNamedItemNS("http://www.w3.org/2000/xmlns/", "dmstc");
		attribute = attributes.getNamedItemNS("http://www.w3.org/2000/xmlns/", "dmstc");
		if (attribute != null) {
			return "namednodemapremovenameditemns04: #namednodemapremovenameditemns04_2 'attribute' equals '" + attribute + "' not null";
		}
		return "namednodemapremovenameditemns04: OK";
	} catch (e) {
		return "namednodemapremovenameditemns04: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var attributes;
		var element;
		var attribute;
		var attributeRemoved;
		var elementList;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagNameNS("*", "employee");
		element = elementList.item(0);
		attributes = element.attributes;
		attributeRemoved = attributes.removeNamedItemNS("http://www.w3.org/2000/xmlns/", "xmlns");
		attribute = attributes.getNamedItemNS("http://www.w3.org/2000/xmlns/", "xmlns");
		if (attribute != null) {
			return "namednodemapremovenameditemns04: #namednodemapremovenameditemns04_1 'attribute' equals '" + attribute + "' not null";
		}
		attributeRemoved = attributes.removeNamedItemNS("http://www.w3.org/2000/xmlns/", "dmstc");
		attribute = attributes.getNamedItemNS("http://www.w3.org/2000/xmlns/", "dmstc");
		if (attribute != null) {
			return "namednodemapremovenameditemns04: #namednodemapremovenameditemns04_2 'attribute' equals '" + attribute + "' not null";
		}
		return "namednodemapremovenameditemns04: OK";
	} catch (e) {
		return "namednodemapremovenameditemns04: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="namednodemapremovenameditemns05.xml" fleur="namednodemapremovenameditemns05" native="namednodemapremovenameditemns05"><Fleur>(function(){
	var success;
	try {
		var doc;
		var docType;
		var entities;
		var notations;
		var removedNode;
		var nullNS = null;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		entities = docType.entities;
		if (entities == null) {
			return "namednodemapremovenameditemns05: #entitiesNotNull 'entities' is null";
		}
		notations = docType.notations;
		if (notations == null) {
			return "namednodemapremovenameditemns05: #notationsNotNull 'notations' is null";
		}
		try {
			removedNode = entities.removeNamedItemNS(nullNS, "ent1");
			fail("entity_throw_DOMException");
		} catch (ex) {
			if (typeof(ex.code) != 'undefined') {      
				switch (ex.code) {
					case 	/* NOT_FOUND_ERR */ 8 :
						break;
					case 	/* NO_MODIFICATION_ALLOWED_ERR */ 7 :
						break;
					default:
						throw ex;
				}
			} else { 
				throw ex;
			}
		}
		try {
			removedNode = notations.removeNamedItemNS(nullNS, "notation1");
			fail("notation_throw_DOMException");
		} catch (ex) {
			if (typeof(ex.code) != 'undefined') {      
				switch (ex.code) {
					case 	/* NOT_FOUND_ERR */ 8 :
						break;
					case 	/* NO_MODIFICATION_ALLOWED_ERR */ 7 :
						break;
					default:
						throw ex;
				}
			} else { 
				throw ex;
			}
		}
		return "namednodemapremovenameditemns05: OK";
	} catch (e) {
		return "namednodemapremovenameditemns05: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var docType;
		var entities;
		var notations;
		var removedNode;
		var nullNS = null;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		entities = docType.entities;
		if (entities == null) {
			return "namednodemapremovenameditemns05: #entitiesNotNull 'entities' is null";
		}
		notations = docType.notations;
		if (notations == null) {
			return "namednodemapremovenameditemns05: #notationsNotNull 'notations' is null";
		}
		try {
			removedNode = entities.removeNamedItemNS(nullNS, "ent1");
			fail("entity_throw_DOMException");
		} catch (ex) {
			if (typeof(ex.code) != 'undefined') {      
				switch (ex.code) {
					case 	/* NOT_FOUND_ERR */ 8 :
						break;
					case 	/* NO_MODIFICATION_ALLOWED_ERR */ 7 :
						break;
					default:
						throw ex;
				}
			} else { 
				throw ex;
			}
		}
		try {
			removedNode = notations.removeNamedItemNS(nullNS, "notation1");
			fail("notation_throw_DOMException");
		} catch (ex) {
			if (typeof(ex.code) != 'undefined') {      
				switch (ex.code) {
					case 	/* NOT_FOUND_ERR */ 8 :
						break;
					case 	/* NO_MODIFICATION_ALLOWED_ERR */ 7 :
						break;
					default:
						throw ex;
				}
			} else { 
				throw ex;
			}
		}
		return "namednodemapremovenameditemns05: OK";
	} catch (e) {
		return "namednodemapremovenameditemns05: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="namednodemapremovenameditemns06.xml" fleur="namednodemapremovenameditemns06" native="namednodemapremovenameditemns06"><Fleur>(function(){
	var success;
	try {
		var doc;
		var attributes;
		var element;
		var attribute;
		var elementList;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagNameNS("http://www.nist.gov", "employee");
		element = elementList.item(1);
		attributes = element.attributes;
		success = false;
		try {
			attribute = attributes.removeNamedItemNS("http://www.Nist.gov", "domestic");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 8;
			}
		}
		if (!success) {
			return "namednodemapremovenameditemns06: Exception NOT_FOUND_ERR expected";
		}
		return "namednodemapremovenameditemns06: OK";
	} catch (e) {
		return "namednodemapremovenameditemns06: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var attributes;
		var element;
		var attribute;
		var elementList;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagNameNS("http://www.nist.gov", "employee");
		element = elementList.item(1);
		attributes = element.attributes;
		success = false;
		try {
			attribute = attributes.removeNamedItemNS("http://www.Nist.gov", "domestic");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 8;
			}
		}
		if (!success) {
			return "namednodemapremovenameditemns06: Exception NOT_FOUND_ERR expected";
		}
		return "namednodemapremovenameditemns06: OK";
	} catch (e) {
		return "namednodemapremovenameditemns06: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="namednodemapremovenameditemns07.xml" fleur="namednodemapremovenameditemns07" native="namednodemapremovenameditemns07"><Fleur>(function(){
	var success;
	try {
		var doc;
		var attributes;
		var element;
		var attribute;
		var elementList;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagNameNS("http://www.nist.gov", "employee");
		element = elementList.item(1);
		attributes = element.attributes;
		success = false;
		try {
			attribute = attributes.removeNamedItemNS("http://www.nist.gov", "domestic");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 8;
			}
		}
		if (!success) {
			return "namednodemapremovenameditemns07: Exception NOT_FOUND_ERR expected";
		}
		return "namednodemapremovenameditemns07: OK";
	} catch (e) {
		return "namednodemapremovenameditemns07: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var attributes;
		var element;
		var attribute;
		var elementList;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagNameNS("http://www.nist.gov", "employee");
		element = elementList.item(1);
		attributes = element.attributes;
		success = false;
		try {
			attribute = attributes.removeNamedItemNS("http://www.nist.gov", "domestic");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 8;
			}
		}
		if (!success) {
			return "namednodemapremovenameditemns07: Exception NOT_FOUND_ERR expected";
		}
		return "namednodemapremovenameditemns07: OK";
	} catch (e) {
		return "namednodemapremovenameditemns07: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="namednodemapremovenameditemns08.xml" fleur="namednodemapremovenameditemns08" native="namednodemapremovenameditemns08"><Fleur>(function(){
	var success;
	try {
		var doc;
		var attributes;
		var element;
		var attribute;
		var elementList;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagNameNS("http://www.nist.gov", "address");
		element = elementList.item(1);
		attributes = element.attributes;
		element.removeAttributeNS("http://www.nist.gov", "domestic");
		success = false;
		try {
			attribute = attributes.removeNamedItemNS("http://www.nist.gov", "domestic");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 8;
			}
		}
		if (!success) {
			return "namednodemapremovenameditemns08: Exception NOT_FOUND_ERR expected";
		}
		return "namednodemapremovenameditemns08: OK";
	} catch (e) {
		return "namednodemapremovenameditemns08: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var attributes;
		var element;
		var attribute;
		var elementList;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagNameNS("http://www.nist.gov", "address");
		element = elementList.item(1);
		attributes = element.attributes;
		element.removeAttributeNS("http://www.nist.gov", "domestic");
		success = false;
		try {
			attribute = attributes.removeNamedItemNS("http://www.nist.gov", "domestic");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 8;
			}
		}
		if (!success) {
			return "namednodemapremovenameditemns08: Exception NOT_FOUND_ERR expected";
		}
		return "namednodemapremovenameditemns08: OK";
	} catch (e) {
		return "namednodemapremovenameditemns08: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="namednodemapremovenameditemns09.xml" fleur="namednodemapremovenameditemns09" native="namednodemapremovenameditemns09"><Fleur>(function(){
	var success;
	try {
		var doc;
		var attributes;
		var newAttributes;
		var element;
		var attribute;
		var elementList;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagNameNS("http://www.nist.gov", "address");
		element = elementList.item(1);
		attributes = element.attributes;
		attribute = attributes.removeNamedItemNS("http://www.nist.gov", "domestic");
		newAttributes = element.attributes;
		attribute = newAttributes.getNamedItemNS("http://www.nist.gov", "domestic");
		if (attribute != null) {
			return "namednodemapremovenameditemns09: #namednodemapremovenameditemns09 'attribute' equals '" + attribute + "' not null";
		}
		return "namednodemapremovenameditemns09: OK";
	} catch (e) {
		return "namednodemapremovenameditemns09: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var attributes;
		var newAttributes;
		var element;
		var attribute;
		var elementList;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagNameNS("http://www.nist.gov", "address");
		element = elementList.item(1);
		attributes = element.attributes;
		attribute = attributes.removeNamedItemNS("http://www.nist.gov", "domestic");
		newAttributes = element.attributes;
		attribute = newAttributes.getNamedItemNS("http://www.nist.gov", "domestic");
		if (attribute != null) {
			return "namednodemapremovenameditemns09: #namednodemapremovenameditemns09 'attribute' equals '" + attribute + "' not null";
		}
		return "namednodemapremovenameditemns09: OK";
	} catch (e) {
		return "namednodemapremovenameditemns09: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="namednodemapsetnameditemns01.xml" fleur="namednodemapsetnameditemns01" native="namednodemapsetnameditemns01"><Fleur>(function(){
	var success;
	try {
		var doc;
		var attributes;
		var element;
		var attribute;
		var newAttribute;
		var newAttr1;
		var elementList;
		var attrName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagNameNS("http://www.nist.gov", "address");
		element = elementList.item(0);
		attributes = element.attributes;
		newAttr1 = doc.createAttributeNS("http://www.w3.org/DOM/L1", "streets");
		newAttribute = element.setAttributeNodeNS(newAttr1);
		attribute = attributes.getNamedItemNS("http://www.w3.org/DOM/L1", "streets");
		attrName = attribute.nodeName;
		if ("streets" !== attrName) {
			return "namednodemapsetnameditemns01: #namednodemapsetnameditemns01 'attrName' equals '" + attrName + "' not '" + "streets" + "'";
		}
		return "namednodemapsetnameditemns01: OK";
	} catch (e) {
		return "namednodemapsetnameditemns01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var attributes;
		var element;
		var attribute;
		var newAttribute;
		var newAttr1;
		var elementList;
		var attrName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagNameNS("http://www.nist.gov", "address");
		element = elementList.item(0);
		attributes = element.attributes;
		newAttr1 = doc.createAttributeNS("http://www.w3.org/DOM/L1", "streets");
		newAttribute = element.setAttributeNodeNS(newAttr1);
		attribute = attributes.getNamedItemNS("http://www.w3.org/DOM/L1", "streets");
		attrName = attribute.nodeName;
		if ("streets" !== attrName) {
			return "namednodemapsetnameditemns01: #namednodemapsetnameditemns01 'attrName' equals '" + attrName + "' not '" + "streets" + "'";
		}
		return "namednodemapsetnameditemns01: OK";
	} catch (e) {
		return "namednodemapsetnameditemns01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="namednodemapsetnameditemns02.xml" fleur="namednodemapsetnameditemns02" native="namednodemapsetnameditemns02"><Fleur>(function(){
	var success;
	try {
		var doc;
		var attributes;
		var element;
		var attribute;
		var attribute1;
		var newNode;
		var attrName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		element = doc.createElementNS("http://www.w3.org/DOM/Test", "root");
		attribute1 = doc.createAttributeNS("http://www.w3.org/DOM/L1", "L1:att");
		attributes = element.attributes;
		newNode = attributes.setNamedItemNS(attribute1);
		attribute = attributes.getNamedItemNS("http://www.w3.org/DOM/L1", "att");
		attrName = attribute.nodeName;
		if ("L1:att" !== attrName) {
			return "namednodemapsetnameditemns02: #namednodemapsetnameditemns02 'attrName' equals '" + attrName + "' not '" + "L1:att" + "'";
		}
		return "namednodemapsetnameditemns02: OK";
	} catch (e) {
		return "namednodemapsetnameditemns02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var attributes;
		var element;
		var attribute;
		var attribute1;
		var newNode;
		var attrName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		element = doc.createElementNS("http://www.w3.org/DOM/Test", "root");
		attribute1 = doc.createAttributeNS("http://www.w3.org/DOM/L1", "L1:att");
		attributes = element.attributes;
		newNode = attributes.setNamedItemNS(attribute1);
		attribute = attributes.getNamedItemNS("http://www.w3.org/DOM/L1", "att");
		attrName = attribute.nodeName;
		if ("L1:att" !== attrName) {
			return "namednodemapsetnameditemns02: #namednodemapsetnameditemns02 'attrName' equals '" + attrName + "' not '" + "L1:att" + "'";
		}
		return "namednodemapsetnameditemns02: OK";
	} catch (e) {
		return "namednodemapsetnameditemns02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="namednodemapsetnameditemns03.xml" fleur="namednodemapsetnameditemns03" native="namednodemapsetnameditemns03"><Fleur>(function(){
	var success;
	try {
		var doc;
		var docAlt;
		var attributes;
		var attributesAlt;
		var elementList;
		var elementListAlt;
		var element;
		var elementAlt;
		var attr;
		var newNode;
		var nullNS = null;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagNameNS("*", "address");
		element = elementList.item(1);
		attributes = element.attributes;
		var docAltReq = new XMLHttpRequest();
		docAltReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docAltReq.send();
		docAlt = new Fleur.DOMParser().parseFromString(docAltReq.responseText, "text/xml");
		elementListAlt = docAlt.getElementsByTagNameNS("*", "address");
		elementAlt = elementListAlt.item(1);
		attributesAlt = elementAlt.attributes;
		attr = attributesAlt.getNamedItemNS(nullNS, "street");
		newNode = attributesAlt.removeNamedItemNS(nullNS, "street");
		success = false;
		try {
			newNode = attributes.setNamedItemNS(attr);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 4;
			}
		}
		if (!success) {
			return "namednodemapsetnameditemns03: Exception WRONG_DOCUMENT_ERR expected";
		}
		return "namednodemapsetnameditemns03: OK";
	} catch (e) {
		return "namednodemapsetnameditemns03: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var docAlt;
		var attributes;
		var attributesAlt;
		var elementList;
		var elementListAlt;
		var element;
		var elementAlt;
		var attr;
		var newNode;
		var nullNS = null;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagNameNS("*", "address");
		element = elementList.item(1);
		attributes = element.attributes;
		var docAltReq = new XMLHttpRequest();
		docAltReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docAltReq.send();
		docAlt = new DOMParser().parseFromString(docAltReq.responseText, "text/xml");
		elementListAlt = docAlt.getElementsByTagNameNS("*", "address");
		elementAlt = elementListAlt.item(1);
		attributesAlt = elementAlt.attributes;
		attr = attributesAlt.getNamedItemNS(nullNS, "street");
		newNode = attributesAlt.removeNamedItemNS(nullNS, "street");
		success = false;
		try {
			newNode = attributes.setNamedItemNS(attr);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 4;
			}
		}
		if (!success) {
			return "namednodemapsetnameditemns03: Exception WRONG_DOCUMENT_ERR expected";
		}
		return "namednodemapsetnameditemns03: OK";
	} catch (e) {
		return "namednodemapsetnameditemns03: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="namednodemapsetnameditemns04.xml" fleur="namednodemapsetnameditemns04" native="namednodemapsetnameditemns04"><Fleur>(function(){
	var success;
	try {
		var doc;
		var domImpl;
		var docAlt;
		var docType = null;
		var attributes;
		var elementList;
		var element;
		var attrAlt;
		var newNode;
		var nullNS = null;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagNameNS("*", "address");
		element = elementList.item(1);
		attributes = element.attributes;
		domImpl = doc.implementation;
		docAlt = domImpl.createDocument(nullNS, "newDoc", docType);
		attrAlt = docAlt.createAttributeNS(nullNS, "street");
		success = false;
		try {
			newNode = attributes.setNamedItemNS(attrAlt);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 4;
			}
		}
		if (!success) {
			return "namednodemapsetnameditemns04: Exception WRONG_DOCUMENT_ERR expected";
		}
		return "namednodemapsetnameditemns04: OK";
	} catch (e) {
		return "namednodemapsetnameditemns04: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var domImpl;
		var docAlt;
		var docType = null;
		var attributes;
		var elementList;
		var element;
		var attrAlt;
		var newNode;
		var nullNS = null;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagNameNS("*", "address");
		element = elementList.item(1);
		attributes = element.attributes;
		domImpl = doc.implementation;
		docAlt = domImpl.createDocument(nullNS, "newDoc", docType);
		attrAlt = docAlt.createAttributeNS(nullNS, "street");
		success = false;
		try {
			newNode = attributes.setNamedItemNS(attrAlt);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 4;
			}
		}
		if (!success) {
			return "namednodemapsetnameditemns04: Exception WRONG_DOCUMENT_ERR expected";
		}
		return "namednodemapsetnameditemns04: OK";
	} catch (e) {
		return "namednodemapsetnameditemns04: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="namednodemapsetnameditemns05.xml" fleur="namednodemapsetnameditemns05" native="namednodemapsetnameditemns05"><Fleur>(function(){
	var success;
	try {
		var doc;
		var docType;
		var entities;
		var notations;
		var entity;
		var notation;
		var newNode;
		var nullNS = null;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		entities = docType.entities;
		if (entities == null) {
			return "namednodemapsetnameditemns05: #entitiesNotNull 'entities' is null";
		}
		notations = docType.notations;
		if (notations == null) {
			return "namednodemapsetnameditemns05: #notationsNotNull 'notations' is null";
		}
		entity = entities.getNamedItem("ent1");
		notation = notations.getNamedItem("notation1");
		success = false;
		try {
			newNode = entities.setNamedItemNS(entity);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "namednodemapsetnameditemns05: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		success = false;
		try {
			newNode = notations.setNamedItemNS(notation);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "namednodemapsetnameditemns05: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "namednodemapsetnameditemns05: OK";
	} catch (e) {
		return "namednodemapsetnameditemns05: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var docType;
		var entities;
		var notations;
		var entity;
		var notation;
		var newNode;
		var nullNS = null;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		entities = docType.entities;
		if (entities == null) {
			return "namednodemapsetnameditemns05: #entitiesNotNull 'entities' is null";
		}
		notations = docType.notations;
		if (notations == null) {
			return "namednodemapsetnameditemns05: #notationsNotNull 'notations' is null";
		}
		entity = entities.getNamedItem("ent1");
		notation = notations.getNamedItem("notation1");
		success = false;
		try {
			newNode = entities.setNamedItemNS(entity);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "namednodemapsetnameditemns05: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		success = false;
		try {
			newNode = notations.setNamedItemNS(notation);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "namednodemapsetnameditemns05: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "namednodemapsetnameditemns05: OK";
	} catch (e) {
		return "namednodemapsetnameditemns05: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="namednodemapsetnameditemns06.xml" fleur="namednodemapsetnameditemns06" native="namednodemapsetnameditemns06"><Fleur>(function(){
	var success;
	try {
		var doc;
		var attributes;
		var elementList;
		var element;
		var attr;
		var newNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagNameNS("*", "address");
		element = elementList.item(0);
		attributes = element.attributes;
		attr = attributes.getNamedItemNS("http://www.usa.com", "domestic");
		element = elementList.item(1);
		attributes = element.attributes;
		success = false;
		try {
			newNode = attributes.setNamedItemNS(attr);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 10;
			}
		}
		if (!success) {
			return "namednodemapsetnameditemns06: Exception INUSE_ATTRIBUTE_ERR expected";
		}
		return "namednodemapsetnameditemns06: OK";
	} catch (e) {
		return "namednodemapsetnameditemns06: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var attributes;
		var elementList;
		var element;
		var attr;
		var newNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagNameNS("*", "address");
		element = elementList.item(0);
		attributes = element.attributes;
		attr = attributes.getNamedItemNS("http://www.usa.com", "domestic");
		element = elementList.item(1);
		attributes = element.attributes;
		success = false;
		try {
			newNode = attributes.setNamedItemNS(attr);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 10;
			}
		}
		if (!success) {
			return "namednodemapsetnameditemns06: Exception INUSE_ATTRIBUTE_ERR expected";
		}
		return "namednodemapsetnameditemns06: OK";
	} catch (e) {
		return "namednodemapsetnameditemns06: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="namednodemapsetnameditemns07.xml" fleur="namednodemapsetnameditemns07" native="namednodemapsetnameditemns07"><Fleur>(function(){
	var success;
	try {
		var doc;
		var attributes;
		var elementList;
		var element;
		var attr;
		var newNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagNameNS("*", "address");
		element = elementList.item(0);
		attributes = element.attributes;
		attr = attributes.getNamedItemNS("http://www.usa.com", "domestic");
		element = elementList.item(1);
		attributes = element.attributes;
		success = false;
		try {
			newNode = attributes.setNamedItemNS(attr);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 10;
			}
		}
		if (!success) {
			return "namednodemapsetnameditemns07: Exception INUSE_ATTRIBUTE_ERR expected";
		}
		return "namednodemapsetnameditemns07: OK";
	} catch (e) {
		return "namednodemapsetnameditemns07: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var attributes;
		var elementList;
		var element;
		var attr;
		var newNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagNameNS("*", "address");
		element = elementList.item(0);
		attributes = element.attributes;
		attr = attributes.getNamedItemNS("http://www.usa.com", "domestic");
		element = elementList.item(1);
		attributes = element.attributes;
		success = false;
		try {
			newNode = attributes.setNamedItemNS(attr);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 10;
			}
		}
		if (!success) {
			return "namednodemapsetnameditemns07: Exception INUSE_ATTRIBUTE_ERR expected";
		}
		return "namednodemapsetnameditemns07: OK";
	} catch (e) {
		return "namednodemapsetnameditemns07: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="namednodemapsetnameditemns08.xml" fleur="namednodemapsetnameditemns08" native="namednodemapsetnameditemns08"><Fleur>(function(){
	var success;
	try {
		var doc;
		var attributes;
		var elementList;
		var element;
		var attr;
		var newNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagNameNS("*", "address");
		element = elementList.item(0);
		attributes = element.attributes;
		attr = attributes.getNamedItemNS("http://www.usa.com", "domestic");
		element = elementList.item(1);
		attributes = element.attributes;
		success = false;
		try {
			newNode = attributes.setNamedItemNS(attr);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 10;
			}
		}
		if (!success) {
			return "namednodemapsetnameditemns08: Exception INUSE_ATTRIBUTE_ERR expected";
		}
		return "namednodemapsetnameditemns08: OK";
	} catch (e) {
		return "namednodemapsetnameditemns08: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var attributes;
		var elementList;
		var element;
		var attr;
		var newNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagNameNS("*", "address");
		element = elementList.item(0);
		attributes = element.attributes;
		attr = attributes.getNamedItemNS("http://www.usa.com", "domestic");
		element = elementList.item(1);
		attributes = element.attributes;
		success = false;
		try {
			newNode = attributes.setNamedItemNS(attr);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 10;
			}
		}
		if (!success) {
			return "namednodemapsetnameditemns08: Exception INUSE_ATTRIBUTE_ERR expected";
		}
		return "namednodemapsetnameditemns08: OK";
	} catch (e) {
		return "namednodemapsetnameditemns08: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="namednodemapsetnameditemns09.xml" fleur="namednodemapsetnameditemns09" native="namednodemapsetnameditemns09"><Fleur>(function(){
	var success;
	try {
		var doc;
		var docType;
		var entities;
		var notations;
		var attr;
		var newNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		entities = docType.entities;
		notations = docType.notations;
		attr = doc.createAttributeNS("http://www.w3.org/DOM/Test", "test");
		success = false;
		try {
			newNode = entities.setNamedItemNS(attr);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "namednodemapsetnameditemns09: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		success = false;
		try {
			newNode = notations.setNamedItemNS(attr);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "namednodemapsetnameditemns09: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "namednodemapsetnameditemns09: OK";
	} catch (e) {
		return "namednodemapsetnameditemns09: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var docType;
		var entities;
		var notations;
		var attr;
		var newNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		entities = docType.entities;
		notations = docType.notations;
		attr = doc.createAttributeNS("http://www.w3.org/DOM/Test", "test");
		success = false;
		try {
			newNode = entities.setNamedItemNS(attr);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "namednodemapsetnameditemns09: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		success = false;
		try {
			newNode = notations.setNamedItemNS(attr);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "namednodemapsetnameditemns09: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "namednodemapsetnameditemns09: OK";
	} catch (e) {
		return "namednodemapsetnameditemns09: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="namednodemapsetnameditemns10.xml" fleur="namednodemapsetnameditemns10" native="namednodemapsetnameditemns10"><Fleur>(function(){
	var success;
	try {
		var doc;
		var docType;
		var entities;
		var attributes;
		var entity;
		var notation;
		var element;
		var elementList;
		var newNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		entities = docType.entities;
		if (entities == null) {
			return "namednodemapsetnameditemns10: #entitiesNotNull 'entities' is null";
		}
		entity = entities.getNamedItem("ent1");
		elementList = doc.getElementsByTagNameNS("http://www.nist.gov", "address");
		element = elementList.item(0);
		attributes = element.attributes;
		success = false;
		try {
			newNode = attributes.setNamedItemNS(entity);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 3;
			}
		}
		if (!success) {
			return "namednodemapsetnameditemns10: Exception HIERARCHY_REQUEST_ERR expected";
		}
		return "namednodemapsetnameditemns10: OK";
	} catch (e) {
		return "namednodemapsetnameditemns10: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var docType;
		var entities;
		var attributes;
		var entity;
		var notation;
		var element;
		var elementList;
		var newNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		entities = docType.entities;
		if (entities == null) {
			return "namednodemapsetnameditemns10: #entitiesNotNull 'entities' is null";
		}
		entity = entities.getNamedItem("ent1");
		elementList = doc.getElementsByTagNameNS("http://www.nist.gov", "address");
		element = elementList.item(0);
		attributes = element.attributes;
		success = false;
		try {
			newNode = attributes.setNamedItemNS(entity);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 3;
			}
		}
		if (!success) {
			return "namednodemapsetnameditemns10: Exception HIERARCHY_REQUEST_ERR expected";
		}
		return "namednodemapsetnameditemns10: OK";
	} catch (e) {
		return "namednodemapsetnameditemns10: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="namednodemapsetnameditemns11.xml" fleur="namednodemapsetnameditemns11" native="namednodemapsetnameditemns11"><Fleur>(function(){
	var success;
	try {
		var doc;
		var docType;
		var notations;
		var attributes;
		var notation;
		var element;
		var elementList;
		var newNode;
		var nullNS = null;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		notations = docType.notations;
		if (notations == null) {
			return "namednodemapsetnameditemns11: #notationsNotNull 'notations' is null";
		}
		notation = notations.getNamedItem("notation1");
		elementList = doc.getElementsByTagNameNS("http://www.nist.gov", "address");
		element = elementList.item(0);
		attributes = element.attributes;
		success = false;
		try {
			newNode = attributes.setNamedItemNS(notation);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 3;
			}
		}
		if (!success) {
			return "namednodemapsetnameditemns11: Exception HIERARCHY_REQUEST_ERR expected";
		}
		return "namednodemapsetnameditemns11: OK";
	} catch (e) {
		return "namednodemapsetnameditemns11: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var docType;
		var notations;
		var attributes;
		var notation;
		var element;
		var elementList;
		var newNode;
		var nullNS = null;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		notations = docType.notations;
		if (notations == null) {
			return "namednodemapsetnameditemns11: #notationsNotNull 'notations' is null";
		}
		notation = notations.getNamedItem("notation1");
		elementList = doc.getElementsByTagNameNS("http://www.nist.gov", "address");
		element = elementList.item(0);
		attributes = element.attributes;
		success = false;
		try {
			newNode = attributes.setNamedItemNS(notation);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 3;
			}
		}
		if (!success) {
			return "namednodemapsetnameditemns11: Exception HIERARCHY_REQUEST_ERR expected";
		}
		return "namednodemapsetnameditemns11: OK";
	} catch (e) {
		return "namednodemapsetnameditemns11: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="namespaceURI01.xml" fleur="namespaceURI01" native="namespaceURI01"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testAddr;
		var addrAttr;
		var attrNamespaceURI;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("emp:address");
		testAddr = elementList.item(0);
		addrAttr = testAddr.getAttributeNodeNS("http://www.nist.gov", "district");
		attrNamespaceURI = addrAttr.namespaceURI;
		if ("http://www.nist.gov" !== attrNamespaceURI) {
			return "namespaceURI01: #namespaceURI 'attrNamespaceURI' equals '" + attrNamespaceURI + "' not '" + "http://www.nist.gov" + "'";
		}
		return "namespaceURI01: OK";
	} catch (e) {
		return "namespaceURI01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testAddr;
		var addrAttr;
		var attrNamespaceURI;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("emp:address");
		testAddr = elementList.item(0);
		addrAttr = testAddr.getAttributeNodeNS("http://www.nist.gov", "district");
		attrNamespaceURI = addrAttr.namespaceURI;
		if ("http://www.nist.gov" !== attrNamespaceURI) {
			return "namespaceURI01: #namespaceURI 'attrNamespaceURI' equals '" + attrNamespaceURI + "' not '" + "http://www.nist.gov" + "'";
		}
		return "namespaceURI01: OK";
	} catch (e) {
		return "namespaceURI01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="namespaceURI02.xml" fleur="namespaceURI02" native="namespaceURI02"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testAddr;
		var addrAttr;
		var attrNamespaceURI;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("emp:address");
		testAddr = elementList.item(0);
		if (testAddr == null) {
			return "namespaceURI02: #empAddressNotNull 'testAddr' is null";
		}
		addrAttr = testAddr.getAttributeNodeNS("http://www.nist.gov", "domestic");
		attrNamespaceURI = addrAttr.namespaceURI;
		if ("http://www.nist.gov" !== attrNamespaceURI) {
			return "namespaceURI02: #namespaceURI 'attrNamespaceURI' equals '" + attrNamespaceURI + "' not '" + "http://www.nist.gov" + "'";
		}
		return "namespaceURI02: OK";
	} catch (e) {
		return "namespaceURI02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testAddr;
		var addrAttr;
		var attrNamespaceURI;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("emp:address");
		testAddr = elementList.item(0);
		if (testAddr == null) {
			return "namespaceURI02: #empAddressNotNull 'testAddr' is null";
		}
		addrAttr = testAddr.getAttributeNodeNS("http://www.nist.gov", "domestic");
		attrNamespaceURI = addrAttr.namespaceURI;
		if ("http://www.nist.gov" !== attrNamespaceURI) {
			return "namespaceURI02: #namespaceURI 'attrNamespaceURI' equals '" + attrNamespaceURI + "' not '" + "http://www.nist.gov" + "'";
		}
		return "namespaceURI02: OK";
	} catch (e) {
		return "namespaceURI02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="namespaceURI03.xml" fleur="namespaceURI03" native="namespaceURI03"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var employeeNamespace;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		testEmployee = elementList.item(0);
		if (testEmployee == null) {
			return "namespaceURI03: #employeeNotNull 'testEmployee' is null";
		}
		employeeNamespace = testEmployee.namespaceURI;
		if ("http://www.nist.gov" !== employeeNamespace) {
			return "namespaceURI03: #namespaceURI 'employeeNamespace' equals '" + employeeNamespace + "' not '" + "http://www.nist.gov" + "'";
		}
		return "namespaceURI03: OK";
	} catch (e) {
		return "namespaceURI03: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var employeeNamespace;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		testEmployee = elementList.item(0);
		if (testEmployee == null) {
			return "namespaceURI03: #employeeNotNull 'testEmployee' is null";
		}
		employeeNamespace = testEmployee.namespaceURI;
		if ("http://www.nist.gov" !== employeeNamespace) {
			return "namespaceURI03: #namespaceURI 'employeeNamespace' equals '" + employeeNamespace + "' not '" + "http://www.nist.gov" + "'";
		}
		return "namespaceURI03: OK";
	} catch (e) {
		return "namespaceURI03: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="namespaceURI04.xml" fleur="namespaceURI04" native="namespaceURI04"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var employeeNamespace;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		testEmployee = elementList.item(1);
		employeeNamespace = testEmployee.namespaceURI;
		if (("text/xml" === "image/svg+xml")) {
			if (((employeeNamespace == null) || ("http://www.w3.org/2001/DOM-Test-Suite/Level-2/Files" == employeeNamespace)) !== true) {
				return "employeeNS_svg: '((employeeNamespace == null) || (~http://www.w3.org/2001/DOM-Test-Suite/Level-2/Files~ == employeeNamespace))' equals '" + ((employeeNamespace == null) || ("http://www.w3.org/2001/DOM-Test-Suite/Level-2/Files" == employeeNamespace)) + "' not true";
			}
		} else {
			if (employeeNamespace != null) {
				return "namespaceURI04: #employeeNS_null 'employeeNamespace' equals '" + employeeNamespace + "' not null";
			}
		}
		return "namespaceURI04: OK";
	} catch (e) {
		return "namespaceURI04: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var employeeNamespace;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		testEmployee = elementList.item(1);
		employeeNamespace = testEmployee.namespaceURI;
		if (("text/xml" === "image/svg+xml")) {
			if (((employeeNamespace == null) || ("http://www.w3.org/2001/DOM-Test-Suite/Level-2/Files" == employeeNamespace)) !== true) {
				return "employeeNS_svg: '((employeeNamespace == null) || (~http://www.w3.org/2001/DOM-Test-Suite/Level-2/Files~ == employeeNamespace))' equals '" + ((employeeNamespace == null) || ("http://www.w3.org/2001/DOM-Test-Suite/Level-2/Files" == employeeNamespace)) + "' not true";
			}
		} else {
			if (employeeNamespace != null) {
				return "namespaceURI04: #employeeNS_null 'employeeNamespace' equals '" + employeeNamespace + "' not null";
			}
		}
		return "namespaceURI04: OK";
	} catch (e) {
		return "namespaceURI04: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="nodegetlocalname03.xml" fleur="nodegetlocalname03" native="nodegetlocalname03"><Fleur>(function(){
	var success;
	try {
		var doc;
		var element;
		var qelement;
		var attr;
		var qattr;
		var localElemName;
		var localQElemName;
		var localAttrName;
		var localQAttrName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		element = doc.createElementNS("http://www.w3.org/DOM/Test/elem", "elem");
		qelement = doc.createElementNS("http://www.w3.org/DOM/Test/elem", "qual:qelem");
		attr = doc.createAttributeNS("http://www.w3.org/DOM/Test/attr", "attr");
		qattr = doc.createAttributeNS("http://www.w3.org/DOM/Test/attr", "qual:qattr");
		localElemName = element.localName;
		localQElemName = qelement.localName;
		localAttrName = attr.localName;
		localQAttrName = qattr.localName;
		if ("elem" !== localElemName) {
			return "nodegetlocalname03: #nodegetlocalname03_localElemName 'localElemName' equals '" + localElemName + "' not '" + "elem" + "'";
		}
		if ("qelem" !== localQElemName) {
			return "nodegetlocalname03: #nodegetlocalname03_localQElemName 'localQElemName' equals '" + localQElemName + "' not '" + "qelem" + "'";
		}
		if ("attr" !== localAttrName) {
			return "nodegetlocalname03: #nodegetlocalname03_localAttrName 'localAttrName' equals '" + localAttrName + "' not '" + "attr" + "'";
		}
		if ("qattr" !== localQAttrName) {
			return "nodegetlocalname03: #nodegetlocalname03_localQAttrName 'localQAttrName' equals '" + localQAttrName + "' not '" + "qattr" + "'";
		}
		return "nodegetlocalname03: OK";
	} catch (e) {
		return "nodegetlocalname03: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var element;
		var qelement;
		var attr;
		var qattr;
		var localElemName;
		var localQElemName;
		var localAttrName;
		var localQAttrName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		element = doc.createElementNS("http://www.w3.org/DOM/Test/elem", "elem");
		qelement = doc.createElementNS("http://www.w3.org/DOM/Test/elem", "qual:qelem");
		attr = doc.createAttributeNS("http://www.w3.org/DOM/Test/attr", "attr");
		qattr = doc.createAttributeNS("http://www.w3.org/DOM/Test/attr", "qual:qattr");
		localElemName = element.localName;
		localQElemName = qelement.localName;
		localAttrName = attr.localName;
		localQAttrName = qattr.localName;
		if ("elem" !== localElemName) {
			return "nodegetlocalname03: #nodegetlocalname03_localElemName 'localElemName' equals '" + localElemName + "' not '" + "elem" + "'";
		}
		if ("qelem" !== localQElemName) {
			return "nodegetlocalname03: #nodegetlocalname03_localQElemName 'localQElemName' equals '" + localQElemName + "' not '" + "qelem" + "'";
		}
		if ("attr" !== localAttrName) {
			return "nodegetlocalname03: #nodegetlocalname03_localAttrName 'localAttrName' equals '" + localAttrName + "' not '" + "attr" + "'";
		}
		if ("qattr" !== localQAttrName) {
			return "nodegetlocalname03: #nodegetlocalname03_localQAttrName 'localQAttrName' equals '" + localQAttrName + "' not '" + "qattr" + "'";
		}
		return "nodegetlocalname03: OK";
	} catch (e) {
		return "nodegetlocalname03: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="nodegetnamespaceuri03.xml" fleur="nodegetnamespaceuri03" native="nodegetnamespaceuri03"><Fleur>(function(){
	var success;
	try {
		var doc;
		var element;
		var elementNS;
		var attr;
		var attrNS;
		var elemNSURI;
		var elemNSURINull;
		var attrNSURI;
		var attrNSURINull;
		var nullNS = null;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		element = doc.createElementNS(nullNS, "elem");
		elementNS = doc.createElementNS("http://www.w3.org/DOM/Test/elem", "qual:qelem");
		attr = doc.createAttributeNS(nullNS, "attr");
		attrNS = doc.createAttributeNS("http://www.w3.org/DOM/Test/attr", "qual:qattr");
		elemNSURI = elementNS.namespaceURI;
		elemNSURINull = element.namespaceURI;
		attrNSURI = attrNS.namespaceURI;
		attrNSURINull = attr.namespaceURI;
		if ("http://www.w3.org/DOM/Test/elem" !== elemNSURI) {
			return "nodegetnamespaceuri03: #nodegetnamespaceuri03_elemNSURI 'elemNSURI' equals '" + elemNSURI + "' not '" + "http://www.w3.org/DOM/Test/elem" + "'";
		}
		if (elemNSURINull != null) {
			return "nodegetnamespaceuri03: #nodegetnamespaceuri03_1 'elemNSURINull' equals '" + elemNSURINull + "' not null";
		}
		if ("http://www.w3.org/DOM/Test/attr" !== attrNSURI) {
			return "nodegetnamespaceuri03: #nodegetnamespaceuri03_attrNSURI 'attrNSURI' equals '" + attrNSURI + "' not '" + "http://www.w3.org/DOM/Test/attr" + "'";
		}
		if (attrNSURINull != null) {
			return "nodegetnamespaceuri03: #nodegetnamespaceuri03_2 'attrNSURINull' equals '" + attrNSURINull + "' not null";
		}
		return "nodegetnamespaceuri03: OK";
	} catch (e) {
		return "nodegetnamespaceuri03: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var element;
		var elementNS;
		var attr;
		var attrNS;
		var elemNSURI;
		var elemNSURINull;
		var attrNSURI;
		var attrNSURINull;
		var nullNS = null;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		element = doc.createElementNS(nullNS, "elem");
		elementNS = doc.createElementNS("http://www.w3.org/DOM/Test/elem", "qual:qelem");
		attr = doc.createAttributeNS(nullNS, "attr");
		attrNS = doc.createAttributeNS("http://www.w3.org/DOM/Test/attr", "qual:qattr");
		elemNSURI = elementNS.namespaceURI;
		elemNSURINull = element.namespaceURI;
		attrNSURI = attrNS.namespaceURI;
		attrNSURINull = attr.namespaceURI;
		if ("http://www.w3.org/DOM/Test/elem" !== elemNSURI) {
			return "nodegetnamespaceuri03: #nodegetnamespaceuri03_elemNSURI 'elemNSURI' equals '" + elemNSURI + "' not '" + "http://www.w3.org/DOM/Test/elem" + "'";
		}
		if (elemNSURINull != null) {
			return "nodegetnamespaceuri03: #nodegetnamespaceuri03_1 'elemNSURINull' equals '" + elemNSURINull + "' not null";
		}
		if ("http://www.w3.org/DOM/Test/attr" !== attrNSURI) {
			return "nodegetnamespaceuri03: #nodegetnamespaceuri03_attrNSURI 'attrNSURI' equals '" + attrNSURI + "' not '" + "http://www.w3.org/DOM/Test/attr" + "'";
		}
		if (attrNSURINull != null) {
			return "nodegetnamespaceuri03: #nodegetnamespaceuri03_2 'attrNSURINull' equals '" + attrNSURINull + "' not null";
		}
		return "nodegetnamespaceuri03: OK";
	} catch (e) {
		return "nodegetnamespaceuri03: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="nodegetownerdocument01.xml" fleur="nodegetownerdocument01" native="nodegetownerdocument01"><Fleur>(function(){
	var success;
	try {
		var doc;
		var ownerDoc;
		var domImpl;
		var docType;
		var nullID = null;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		domImpl = doc.implementation;
		docType = domImpl.createDocumentType("mydoc", nullID, nullID);
		ownerDoc = docType.ownerDocument;
		if (ownerDoc != null) {
			return "nodegetownerdocument01: #nodegetownerdocument01 'ownerDoc' equals '" + ownerDoc + "' not null";
		}
		return "nodegetownerdocument01: OK";
	} catch (e) {
		return "nodegetownerdocument01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var ownerDoc;
		var domImpl;
		var docType;
		var nullID = null;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		domImpl = doc.implementation;
		docType = domImpl.createDocumentType("mydoc", nullID, nullID);
		ownerDoc = docType.ownerDocument;
		if (ownerDoc != null) {
			return "nodegetownerdocument01: #nodegetownerdocument01 'ownerDoc' equals '" + ownerDoc + "' not null";
		}
		return "nodegetownerdocument01: OK";
	} catch (e) {
		return "nodegetownerdocument01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="nodegetownerdocument02.xml" fleur="nodegetownerdocument02" native="nodegetownerdocument02"><Fleur>(function(){
	var success;
	try {
		var doc;
		var newDoc;
		var newElem;
		var ownerDocDoc;
		var ownerDocElem;
		var domImpl;
		var docType;
		var nullNS = null;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		domImpl = doc.implementation;
		docType = domImpl.createDocumentType("mydoc", nullNS, nullNS);
		newDoc = domImpl.createDocument("http://www.w3.org/DOM/Test", "mydoc", docType);
		ownerDocDoc = newDoc.ownerDocument;
		if (ownerDocDoc != null) {
			return "nodegetownerdocument02: #nodegetownerdocument02_1 'ownerDocDoc' equals '" + ownerDocDoc + "' not null";
		}
		newElem = newDoc.createElementNS("http://www.w3.org/DOM/Test", "myelem");
		ownerDocElem = newElem.ownerDocument;
		if (ownerDocElem == null) {
			return "nodegetownerdocument02: #nodegetownerdocument02_2 'ownerDocElem' is null";
		}
		return "nodegetownerdocument02: OK";
	} catch (e) {
		return "nodegetownerdocument02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var newDoc;
		var newElem;
		var ownerDocDoc;
		var ownerDocElem;
		var domImpl;
		var docType;
		var nullNS = null;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		domImpl = doc.implementation;
		docType = domImpl.createDocumentType("mydoc", nullNS, nullNS);
		newDoc = domImpl.createDocument("http://www.w3.org/DOM/Test", "mydoc", docType);
		ownerDocDoc = newDoc.ownerDocument;
		if (ownerDocDoc != null) {
			return "nodegetownerdocument02: #nodegetownerdocument02_1 'ownerDocDoc' equals '" + ownerDocDoc + "' not null";
		}
		newElem = newDoc.createElementNS("http://www.w3.org/DOM/Test", "myelem");
		ownerDocElem = newElem.ownerDocument;
		if (ownerDocElem == null) {
			return "nodegetownerdocument02: #nodegetownerdocument02_2 'ownerDocElem' is null";
		}
		return "nodegetownerdocument02: OK";
	} catch (e) {
		return "nodegetownerdocument02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="nodegetprefix03.xml" fleur="nodegetprefix03" native="nodegetprefix03"><Fleur>(function(){
	var success;
	try {
		var doc;
		var element;
		var qelement;
		var attr;
		var qattr;
		var elemNoPrefix;
		var elemPrefix;
		var attrNoPrefix;
		var attrPrefix;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		element = doc.createElementNS("http://www.w3.org/DOM/Test/elem", "elem");
		qelement = doc.createElementNS("http://www.w3.org/DOM/Test/elem", "qual:qelem");
		attr = doc.createAttributeNS("http://www.w3.org/DOM/Test/attr", "attr");
		qattr = doc.createAttributeNS("http://www.w3.org/DOM/Test/attr", "qual:qattr");
		elemNoPrefix = element.prefix;
		elemPrefix = qelement.prefix;
		attrNoPrefix = attr.prefix;
		attrPrefix = qattr.prefix;
		if (elemNoPrefix != null) {
			return "nodegetprefix03: #nodegetprefix03_1 'elemNoPrefix' equals '" + elemNoPrefix + "' not null";
		}
		if ("qual" !== elemPrefix) {
			return "nodegetprefix03: #nodegetprefix03_2 'elemPrefix' equals '" + elemPrefix + "' not '" + "qual" + "'";
		}
		if (attrNoPrefix != null) {
			return "nodegetprefix03: #nodegetprefix03_3 'attrNoPrefix' equals '" + attrNoPrefix + "' not null";
		}
		if ("qual" !== attrPrefix) {
			return "nodegetprefix03: #nodegetprefix03_4 'attrPrefix' equals '" + attrPrefix + "' not '" + "qual" + "'";
		}
		return "nodegetprefix03: OK";
	} catch (e) {
		return "nodegetprefix03: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var element;
		var qelement;
		var attr;
		var qattr;
		var elemNoPrefix;
		var elemPrefix;
		var attrNoPrefix;
		var attrPrefix;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		element = doc.createElementNS("http://www.w3.org/DOM/Test/elem", "elem");
		qelement = doc.createElementNS("http://www.w3.org/DOM/Test/elem", "qual:qelem");
		attr = doc.createAttributeNS("http://www.w3.org/DOM/Test/attr", "attr");
		qattr = doc.createAttributeNS("http://www.w3.org/DOM/Test/attr", "qual:qattr");
		elemNoPrefix = element.prefix;
		elemPrefix = qelement.prefix;
		attrNoPrefix = attr.prefix;
		attrPrefix = qattr.prefix;
		if (elemNoPrefix != null) {
			return "nodegetprefix03: #nodegetprefix03_1 'elemNoPrefix' equals '" + elemNoPrefix + "' not null";
		}
		if ("qual" !== elemPrefix) {
			return "nodegetprefix03: #nodegetprefix03_2 'elemPrefix' equals '" + elemPrefix + "' not '" + "qual" + "'";
		}
		if (attrNoPrefix != null) {
			return "nodegetprefix03: #nodegetprefix03_3 'attrNoPrefix' equals '" + attrNoPrefix + "' not null";
		}
		if ("qual" !== attrPrefix) {
			return "nodegetprefix03: #nodegetprefix03_4 'attrPrefix' equals '" + attrPrefix + "' not '" + "qual" + "'";
		}
		return "nodegetprefix03: OK";
	} catch (e) {
		return "nodegetprefix03: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="nodehasattributes01.xml" fleur="nodehasattributes01" native="nodehasattributes01"><Fleur>(function(){
	var success;
	try {
		var doc;
		var element;
		var elementList;
		var hasAttributes;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employeeId");
		element = elementList.item(0);
		hasAttributes = element.hasAttributes();
		if (hasAttributes !== false) {
			return "employeeIdHasAttributesFalse: 'hasAttributes' equals '" + hasAttributes + "' not false";
		}
		elementList = doc.getElementsByTagName("address");
		element = elementList.item(0);
		hasAttributes = element.hasAttributes();
		if (hasAttributes !== true) {
			return "addressHasAttributesTrue: 'hasAttributes' equals '" + hasAttributes + "' not true";
		}
		return "nodehasattributes01: OK";
	} catch (e) {
		return "nodehasattributes01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var element;
		var elementList;
		var hasAttributes;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employeeId");
		element = elementList.item(0);
		hasAttributes = element.hasAttributes();
		if (hasAttributes !== false) {
			return "employeeIdHasAttributesFalse: 'hasAttributes' equals '" + hasAttributes + "' not false";
		}
		elementList = doc.getElementsByTagName("address");
		element = elementList.item(0);
		hasAttributes = element.hasAttributes();
		if (hasAttributes !== true) {
			return "addressHasAttributesTrue: 'hasAttributes' equals '" + hasAttributes + "' not true";
		}
		return "nodehasattributes01: OK";
	} catch (e) {
		return "nodehasattributes01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="nodehasattributes02.xml" fleur="nodehasattributes02" native="nodehasattributes02"><Fleur>(function(){
	var success;
	try {
		var doc;
		var docType;
		var hasAttributes;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		hasAttributes = docType.hasAttributes();
		if (hasAttributes !== false) {
			return "nodehasattributes02: 'hasAttributes' equals '" + hasAttributes + "' not false";
		}
		return "nodehasattributes02: OK";
	} catch (e) {
		return "nodehasattributes02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var docType;
		var hasAttributes;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		hasAttributes = docType.hasAttributes();
		if (hasAttributes !== false) {
			return "nodehasattributes02: 'hasAttributes' equals '" + hasAttributes + "' not false";
		}
		return "nodehasattributes02: OK";
	} catch (e) {
		return "nodehasattributes02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="nodehasattributes03.xml" fleur="nodehasattributes03" native="nodehasattributes03"><Fleur>(function(){
	var success;
	try {
		var doc;
		var element;
		var elementList;
		var hasAttributes;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("emp:employee");
		element = elementList.item(0);
		if (element == null) {
			return "nodehasattributes03: #empEmployeeNotNull 'element' is null";
		}
		hasAttributes = element.hasAttributes();
		if (hasAttributes !== true) {
			return "hasAttributes: 'hasAttributes' equals '" + hasAttributes + "' not true";
		}
		return "nodehasattributes03: OK";
	} catch (e) {
		return "nodehasattributes03: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var element;
		var elementList;
		var hasAttributes;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("emp:employee");
		element = elementList.item(0);
		if (element == null) {
			return "nodehasattributes03: #empEmployeeNotNull 'element' is null";
		}
		hasAttributes = element.hasAttributes();
		if (hasAttributes !== true) {
			return "hasAttributes: 'hasAttributes' equals '" + hasAttributes + "' not true";
		}
		return "nodehasattributes03: OK";
	} catch (e) {
		return "nodehasattributes03: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="nodehasattributes04.xml" fleur="nodehasattributes04" native="nodehasattributes04"><Fleur>(function(){
	var success;
	try {
		var doc;
		var newDoc;
		var docType = null;
		var domImpl;
		var element;
		var elementTest;
		var elementDoc;
		var attribute;
		var setNode;
		var appendedChild;
		var elementList;
		var hasAttributes;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		domImpl = doc.implementation;
		newDoc = domImpl.createDocument("http://www.w3.org/DOM/Test", "test", docType);
		element = newDoc.createElementNS("http://www.w3.org/DOM/Test", "dom:elem");
		attribute = newDoc.createAttribute("attr");
		setNode = element.setAttributeNode(attribute);
		elementDoc = newDoc.documentElement;
		appendedChild = elementDoc.appendChild(element);
		elementList = newDoc.getElementsByTagNameNS("http://www.w3.org/DOM/Test", "elem");
		elementTest = elementList.item(0);
		hasAttributes = elementTest.hasAttributes();
		if (hasAttributes !== true) {
			return "nodehasattributes04: 'hasAttributes' equals '" + hasAttributes + "' not true";
		}
		return "nodehasattributes04: OK";
	} catch (e) {
		return "nodehasattributes04: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var newDoc;
		var docType = null;
		var domImpl;
		var element;
		var elementTest;
		var elementDoc;
		var attribute;
		var setNode;
		var appendedChild;
		var elementList;
		var hasAttributes;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		domImpl = doc.implementation;
		newDoc = domImpl.createDocument("http://www.w3.org/DOM/Test", "test", docType);
		element = newDoc.createElementNS("http://www.w3.org/DOM/Test", "dom:elem");
		attribute = newDoc.createAttribute("attr");
		setNode = element.setAttributeNode(attribute);
		elementDoc = newDoc.documentElement;
		appendedChild = elementDoc.appendChild(element);
		elementList = newDoc.getElementsByTagNameNS("http://www.w3.org/DOM/Test", "elem");
		elementTest = elementList.item(0);
		hasAttributes = elementTest.hasAttributes();
		if (hasAttributes !== true) {
			return "nodehasattributes04: 'hasAttributes' equals '" + hasAttributes + "' not true";
		}
		return "nodehasattributes04: OK";
	} catch (e) {
		return "nodehasattributes04: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="nodeissupported01.xml" fleur="nodeissupported01" native="nodeissupported01"><Fleur>(function(){
	var success;
	try {
		var doc;
		var element;
		var version = "";
		var version1 = "1.0";
		var version2 = "2.0";
		var featureCore;
		var featureXML;
		var success;
		featuresXML = new Array();
		featuresXML[0] = "XML";
		featuresXML[1] = "xmL";
		featuresCore = new Array();
		featuresCore[0] = "Core";
		featuresCore[1] = "CORE";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		element = doc.documentElement;
		for (var index_id0x0a512a60 = 0; index_id0x0a512a60 &lt; featuresXML.length; index_id0x0a512a60++) {
			featureXML = featuresXML[index_id0x0a512a60];
			success = element.isSupported(featureXML, version);
			if (success !== true) {
				return "nodeissupported01_XML1: 'success' equals '" + success + "' not true";
			}
			success = element.isSupported(featureXML, version1);
			if (success !== true) {
				return "nodeissupported01_XML2: 'success' equals '" + success + "' not true";
			}
		}
		for (var index_id0x0a5c5ba0 = 0; index_id0x0a5c5ba0 &lt; featuresCore.length; index_id0x0a5c5ba0++) {
			featureCore = featuresCore[index_id0x0a5c5ba0];
			success = element.isSupported(featureCore, version);
			if (success !== true) {
				return "nodeissupported01_Core1: 'success' equals '" + success + "' not true";
			}
			success = element.isSupported(featureCore, version1);
			success = element.isSupported(featureCore, version2);
			if (success !== true) {
				return "nodeissupported01_Core3: 'success' equals '" + success + "' not true";
			}
		}
		return "nodeissupported01: OK";
	} catch (e) {
		return "nodeissupported01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var element;
		var version = "";
		var version1 = "1.0";
		var version2 = "2.0";
		var featureCore;
		var featureXML;
		var success;
		featuresXML = new Array();
		featuresXML[0] = "XML";
		featuresXML[1] = "xmL";
		featuresCore = new Array();
		featuresCore[0] = "Core";
		featuresCore[1] = "CORE";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		element = doc.documentElement;
		for (var index_id0x0a512a60 = 0; index_id0x0a512a60 &lt; featuresXML.length; index_id0x0a512a60++) {
			featureXML = featuresXML[index_id0x0a512a60];
			success = element.isSupported(featureXML, version);
			if (success !== true) {
				return "nodeissupported01_XML1: 'success' equals '" + success + "' not true";
			}
			success = element.isSupported(featureXML, version1);
			if (success !== true) {
				return "nodeissupported01_XML2: 'success' equals '" + success + "' not true";
			}
		}
		for (var index_id0x0a5c5ba0 = 0; index_id0x0a5c5ba0 &lt; featuresCore.length; index_id0x0a5c5ba0++) {
			featureCore = featuresCore[index_id0x0a5c5ba0];
			success = element.isSupported(featureCore, version);
			if (success !== true) {
				return "nodeissupported01_Core1: 'success' equals '" + success + "' not true";
			}
			success = element.isSupported(featureCore, version1);
			success = element.isSupported(featureCore, version2);
			if (success !== true) {
				return "nodeissupported01_Core3: 'success' equals '" + success + "' not true";
			}
		}
		return "nodeissupported01: OK";
	} catch (e) {
		return "nodeissupported01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="nodeissupported02.xml" fleur="nodeissupported02" native="nodeissupported02"><Fleur>(function(){
	var success;
	try {
		var doc;
		var attribute;
		var version = "";
		var version1 = "1.0";
		var version2 = "2.0";
		var featureCore;
		var featureXML;
		var success;
		featuresXML = new Array();
		featuresXML[0] = "XML";
		featuresXML[1] = "xmL";
		featuresCore = new Array();
		featuresCore[0] = "Core";
		featuresCore[1] = "CORE";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		attribute = doc.createAttribute("TestAttr");
		for (var index_id0x0a6bfc40 = 0; index_id0x0a6bfc40 &lt; featuresXML.length; index_id0x0a6bfc40++) {
			featureXML = featuresXML[index_id0x0a6bfc40];
			success = attribute.isSupported(featureXML, version);
			if (success !== true) {
				return "nodeissupported02_XML1: 'success' equals '" + success + "' not true";
			}
			success = attribute.isSupported(featureXML, version1);
			if (success !== true) {
				return "nodeissupported02_XML2: 'success' equals '" + success + "' not true";
			}
		}
		for (var index_id0x0a6f0b50 = 0; index_id0x0a6f0b50 &lt; featuresCore.length; index_id0x0a6f0b50++) {
			featureCore = featuresCore[index_id0x0a6f0b50];
			success = attribute.isSupported(featureCore, version);
			if (success !== true) {
				return "nodeissupported02_Core1: 'success' equals '" + success + "' not true";
			}
			success = attribute.isSupported(featureCore, version1);
			success = attribute.isSupported(featureCore, version2);
			if (success !== true) {
				return "nodeissupported02_Core3: 'success' equals '" + success + "' not true";
			}
		}
		return "nodeissupported02: OK";
	} catch (e) {
		return "nodeissupported02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var attribute;
		var version = "";
		var version1 = "1.0";
		var version2 = "2.0";
		var featureCore;
		var featureXML;
		var success;
		featuresXML = new Array();
		featuresXML[0] = "XML";
		featuresXML[1] = "xmL";
		featuresCore = new Array();
		featuresCore[0] = "Core";
		featuresCore[1] = "CORE";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		attribute = doc.createAttribute("TestAttr");
		for (var index_id0x0a6bfc40 = 0; index_id0x0a6bfc40 &lt; featuresXML.length; index_id0x0a6bfc40++) {
			featureXML = featuresXML[index_id0x0a6bfc40];
			success = attribute.isSupported(featureXML, version);
			if (success !== true) {
				return "nodeissupported02_XML1: 'success' equals '" + success + "' not true";
			}
			success = attribute.isSupported(featureXML, version1);
			if (success !== true) {
				return "nodeissupported02_XML2: 'success' equals '" + success + "' not true";
			}
		}
		for (var index_id0x0a6f0b50 = 0; index_id0x0a6f0b50 &lt; featuresCore.length; index_id0x0a6f0b50++) {
			featureCore = featuresCore[index_id0x0a6f0b50];
			success = attribute.isSupported(featureCore, version);
			if (success !== true) {
				return "nodeissupported02_Core1: 'success' equals '" + success + "' not true";
			}
			success = attribute.isSupported(featureCore, version1);
			success = attribute.isSupported(featureCore, version2);
			if (success !== true) {
				return "nodeissupported02_Core3: 'success' equals '" + success + "' not true";
			}
		}
		return "nodeissupported02: OK";
	} catch (e) {
		return "nodeissupported02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="nodeissupported03.xml" fleur="nodeissupported03" native="nodeissupported03"><Fleur>(function(){
	var success;
	try {
		var doc;
		var docType;
		var success;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		success = docType.isSupported("", "");
		if (success !== false) {
			return "nodeissupported03: 'success' equals '" + success + "' not false";
		}
		return "nodeissupported03: OK";
	} catch (e) {
		return "nodeissupported03: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var docType;
		var success;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		success = docType.isSupported("", "");
		if (success !== false) {
			return "nodeissupported03: 'success' equals '" + success + "' not false";
		}
		return "nodeissupported03: OK";
	} catch (e) {
		return "nodeissupported03: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="nodeissupported04.xml" fleur="nodeissupported04" native="nodeissupported04"><Fleur>(function(){
	var success;
	try {
		var doc;
		var entRef;
		var success;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		entRef = doc.createEntityReference("ent1");
		if (entRef == null) {
			return "nodeissupported04: #createdEntRefNotNull 'entRef' is null";
		}
		success = entRef.isSupported("XML CORE", "");
		if (success !== false) {
			return "nodeissupported04: 'success' equals '" + success + "' not false";
		}
		return "nodeissupported04: OK";
	} catch (e) {
		return "nodeissupported04: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var entRef;
		var success;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		entRef = doc.createEntityReference("ent1");
		if (entRef == null) {
			return "nodeissupported04: #createdEntRefNotNull 'entRef' is null";
		}
		success = entRef.isSupported("XML CORE", "");
		if (success !== false) {
			return "nodeissupported04: 'success' equals '" + success + "' not false";
		}
		return "nodeissupported04: OK";
	} catch (e) {
		return "nodeissupported04: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="nodeissupported05.xml" fleur="nodeissupported05" native="nodeissupported05"><Fleur>(function(){
	var success;
	try {
		var doc;
		var pi;
		var success;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		pi = doc.createProcessingInstruction("PITarget", "PIData");
		success = pi.isSupported("-", "+");
		if (success !== false) {
			return "nodeissupported05: 'success' equals '" + success + "' not false";
		}
		return "nodeissupported05: OK";
	} catch (e) {
		return "nodeissupported05: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var pi;
		var success;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		pi = doc.createProcessingInstruction("PITarget", "PIData");
		success = pi.isSupported("-", "+");
		if (success !== false) {
			return "nodeissupported05: 'success' equals '" + success + "' not false";
		}
		return "nodeissupported05: OK";
	} catch (e) {
		return "nodeissupported05: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="nodenormalize01.xml" fleur="nodenormalize01" native="nodenormalize01"><Fleur>(function(){
	var success;
	try {
		var doc;
		var newDoc;
		var domImpl;
		var docType;
		var docTypeNull = null;
		var documentElement;
		var element1;
		var element2;
		var element3;
		var element4;
		var element5;
		var element6;
		var element7;
		var text1;
		var text2;
		var text3;
		var pi;
		var cData;
		var comment;
		var entRef;
		var elementList;
		var appendedChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		domImpl = doc.implementation;
		newDoc = domImpl.createDocument("http://www.w3.org/DOM/Test", "dom:root", docTypeNull);
		element1 = newDoc.createElement("element1");
		element2 = newDoc.createElement("element2");
		element3 = newDoc.createElement("element3");
		element4 = newDoc.createElement("element4");
		element5 = newDoc.createElement("element5");
		element6 = newDoc.createElement("element6");
		element7 = newDoc.createElement("element7");
		text1 = newDoc.createTextNode("text1");
		text2 = newDoc.createTextNode("text2");
		text3 = newDoc.createTextNode("text3");
		cData = newDoc.createCDATASection("Cdata");
		comment = newDoc.createComment("comment");
		pi = newDoc.createProcessingInstruction("PITarget", "PIData");
		entRef = newDoc.createEntityReference("EntRef");
		if (entRef == null) {
			return "nodenormalize01: #createdEntRefNotNull 'entRef' is null";
		}
		documentElement = newDoc.documentElement;
		appendedChild = documentElement.appendChild(element1);
		appendedChild = element2.appendChild(text1);
		appendedChild = element2.appendChild(text2);
		appendedChild = element2.appendChild(text3);
		appendedChild = element1.appendChild(element2);
		text1 = text1.cloneNode(false);
		text2 = text2.cloneNode(false);
		appendedChild = element3.appendChild(entRef);
		appendedChild = element3.appendChild(text1);
		appendedChild = element3.appendChild(text2);
		appendedChild = element1.appendChild(element3);
		text1 = text1.cloneNode(false);
		text2 = text2.cloneNode(false);
		appendedChild = element4.appendChild(cData);
		appendedChild = element4.appendChild(text1);
		appendedChild = element4.appendChild(text2);
		appendedChild = element1.appendChild(element4);
		text2 = text2.cloneNode(false);
		text3 = text3.cloneNode(false);
		appendedChild = element5.appendChild(comment);
		appendedChild = element5.appendChild(text2);
		appendedChild = element5.appendChild(text3);
		appendedChild = element1.appendChild(element5);
		text2 = text2.cloneNode(false);
		text3 = text3.cloneNode(false);
		appendedChild = element6.appendChild(pi);
		appendedChild = element6.appendChild(text2);
		appendedChild = element6.appendChild(text3);
		appendedChild = element1.appendChild(element6);
		entRef = entRef.cloneNode(false);
		text1 = text1.cloneNode(false);
		text2 = text2.cloneNode(false);
		text3 = text3.cloneNode(false);
		appendedChild = element7.appendChild(entRef);
		appendedChild = element7.appendChild(text1);
		appendedChild = element7.appendChild(text2);
		appendedChild = element7.appendChild(text3);
		appendedChild = element1.appendChild(element7);
		elementList = element1.childNodes;
		if (elementList.length !== 6) {
			return "nodenormalize01: #nodeNormalize01_1Bef 'elementList.length' equals " + elementList.length + " not 6";
		}
		elementList = element2.childNodes;
		if (elementList.length !== 3) {
			return "nodenormalize01: #nodeNormalize01_2Bef 'elementList.length' equals " + elementList.length + " not 3";
		}
		elementList = element3.childNodes;
		if (elementList.length !== 3) {
			return "nodenormalize01: #nodeNormalize01_3Bef 'elementList.length' equals " + elementList.length + " not 3";
		}
		elementList = element4.childNodes;
		if (elementList.length !== 3) {
			return "nodenormalize01: #nodeNormalize01_4Bef 'elementList.length' equals " + elementList.length + " not 3";
		}
		elementList = element5.childNodes;
		if (elementList.length !== 3) {
			return "nodenormalize01: #nodeNormalize01_5Bef 'elementList.length' equals " + elementList.length + " not 3";
		}
		elementList = element6.childNodes;
		if (elementList.length !== 3) {
			return "nodenormalize01: #nodeNormalize01_6Bef 'elementList.length' equals " + elementList.length + " not 3";
		}
		elementList = element7.childNodes;
		if (elementList.length !== 4) {
			return "nodenormalize01: #nodeNormalize01_7Bef 'elementList.length' equals " + elementList.length + " not 4";
		}
		newDoc.normalize();
		elementList = element1.childNodes;
		if (elementList.length !== 6) {
			return "nodenormalize01: #nodeNormalize01_1Aft 'elementList.length' equals " + elementList.length + " not 6";
		}
		elementList = element2.childNodes;
		if (elementList.length !== 1) {
			return "nodenormalize01: #nodeNormalize01_2Aft 'elementList.length' equals " + elementList.length + " not 1";
		}
		elementList = element3.childNodes;
		if (elementList.length !== 2) {
			return "nodenormalize01: #nodeNormalize01_3Aft 'elementList.length' equals " + elementList.length + " not 2";
		}
		elementList = element4.childNodes;
		if (elementList.length !== 2) {
			return "nodenormalize01: #nodeNormalize01_4Aft 'elementList.length' equals " + elementList.length + " not 2";
		}
		elementList = element5.childNodes;
		if (elementList.length !== 2) {
			return "nodenormalize01: #nodeNormalize01_5Aft 'elementList.length' equals " + elementList.length + " not 2";
		}
		elementList = element6.childNodes;
		if (elementList.length !== 2) {
			return "nodenormalize01: #nodeNormalize01_6Aft 'elementList.length' equals " + elementList.length + " not 2";
		}
		elementList = element7.childNodes;
		if (elementList.length !== 2) {
			return "nodenormalize01: #nodeNormalize01_7Aft 'elementList.length' equals " + elementList.length + " not 2";
		}
		return "nodenormalize01: OK";
	} catch (e) {
		return "nodenormalize01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var newDoc;
		var domImpl;
		var docType;
		var docTypeNull = null;
		var documentElement;
		var element1;
		var element2;
		var element3;
		var element4;
		var element5;
		var element6;
		var element7;
		var text1;
		var text2;
		var text3;
		var pi;
		var cData;
		var comment;
		var entRef;
		var elementList;
		var appendedChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		domImpl = doc.implementation;
		newDoc = domImpl.createDocument("http://www.w3.org/DOM/Test", "dom:root", docTypeNull);
		element1 = newDoc.createElement("element1");
		element2 = newDoc.createElement("element2");
		element3 = newDoc.createElement("element3");
		element4 = newDoc.createElement("element4");
		element5 = newDoc.createElement("element5");
		element6 = newDoc.createElement("element6");
		element7 = newDoc.createElement("element7");
		text1 = newDoc.createTextNode("text1");
		text2 = newDoc.createTextNode("text2");
		text3 = newDoc.createTextNode("text3");
		cData = newDoc.createCDATASection("Cdata");
		comment = newDoc.createComment("comment");
		pi = newDoc.createProcessingInstruction("PITarget", "PIData");
		entRef = newDoc.createEntityReference("EntRef");
		if (entRef == null) {
			return "nodenormalize01: #createdEntRefNotNull 'entRef' is null";
		}
		documentElement = newDoc.documentElement;
		appendedChild = documentElement.appendChild(element1);
		appendedChild = element2.appendChild(text1);
		appendedChild = element2.appendChild(text2);
		appendedChild = element2.appendChild(text3);
		appendedChild = element1.appendChild(element2);
		text1 = text1.cloneNode(false);
		text2 = text2.cloneNode(false);
		appendedChild = element3.appendChild(entRef);
		appendedChild = element3.appendChild(text1);
		appendedChild = element3.appendChild(text2);
		appendedChild = element1.appendChild(element3);
		text1 = text1.cloneNode(false);
		text2 = text2.cloneNode(false);
		appendedChild = element4.appendChild(cData);
		appendedChild = element4.appendChild(text1);
		appendedChild = element4.appendChild(text2);
		appendedChild = element1.appendChild(element4);
		text2 = text2.cloneNode(false);
		text3 = text3.cloneNode(false);
		appendedChild = element5.appendChild(comment);
		appendedChild = element5.appendChild(text2);
		appendedChild = element5.appendChild(text3);
		appendedChild = element1.appendChild(element5);
		text2 = text2.cloneNode(false);
		text3 = text3.cloneNode(false);
		appendedChild = element6.appendChild(pi);
		appendedChild = element6.appendChild(text2);
		appendedChild = element6.appendChild(text3);
		appendedChild = element1.appendChild(element6);
		entRef = entRef.cloneNode(false);
		text1 = text1.cloneNode(false);
		text2 = text2.cloneNode(false);
		text3 = text3.cloneNode(false);
		appendedChild = element7.appendChild(entRef);
		appendedChild = element7.appendChild(text1);
		appendedChild = element7.appendChild(text2);
		appendedChild = element7.appendChild(text3);
		appendedChild = element1.appendChild(element7);
		elementList = element1.childNodes;
		if (elementList.length !== 6) {
			return "nodenormalize01: #nodeNormalize01_1Bef 'elementList.length' equals " + elementList.length + " not 6";
		}
		elementList = element2.childNodes;
		if (elementList.length !== 3) {
			return "nodenormalize01: #nodeNormalize01_2Bef 'elementList.length' equals " + elementList.length + " not 3";
		}
		elementList = element3.childNodes;
		if (elementList.length !== 3) {
			return "nodenormalize01: #nodeNormalize01_3Bef 'elementList.length' equals " + elementList.length + " not 3";
		}
		elementList = element4.childNodes;
		if (elementList.length !== 3) {
			return "nodenormalize01: #nodeNormalize01_4Bef 'elementList.length' equals " + elementList.length + " not 3";
		}
		elementList = element5.childNodes;
		if (elementList.length !== 3) {
			return "nodenormalize01: #nodeNormalize01_5Bef 'elementList.length' equals " + elementList.length + " not 3";
		}
		elementList = element6.childNodes;
		if (elementList.length !== 3) {
			return "nodenormalize01: #nodeNormalize01_6Bef 'elementList.length' equals " + elementList.length + " not 3";
		}
		elementList = element7.childNodes;
		if (elementList.length !== 4) {
			return "nodenormalize01: #nodeNormalize01_7Bef 'elementList.length' equals " + elementList.length + " not 4";
		}
		newDoc.normalize();
		elementList = element1.childNodes;
		if (elementList.length !== 6) {
			return "nodenormalize01: #nodeNormalize01_1Aft 'elementList.length' equals " + elementList.length + " not 6";
		}
		elementList = element2.childNodes;
		if (elementList.length !== 1) {
			return "nodenormalize01: #nodeNormalize01_2Aft 'elementList.length' equals " + elementList.length + " not 1";
		}
		elementList = element3.childNodes;
		if (elementList.length !== 2) {
			return "nodenormalize01: #nodeNormalize01_3Aft 'elementList.length' equals " + elementList.length + " not 2";
		}
		elementList = element4.childNodes;
		if (elementList.length !== 2) {
			return "nodenormalize01: #nodeNormalize01_4Aft 'elementList.length' equals " + elementList.length + " not 2";
		}
		elementList = element5.childNodes;
		if (elementList.length !== 2) {
			return "nodenormalize01: #nodeNormalize01_5Aft 'elementList.length' equals " + elementList.length + " not 2";
		}
		elementList = element6.childNodes;
		if (elementList.length !== 2) {
			return "nodenormalize01: #nodeNormalize01_6Aft 'elementList.length' equals " + elementList.length + " not 2";
		}
		elementList = element7.childNodes;
		if (elementList.length !== 2) {
			return "nodenormalize01: #nodeNormalize01_7Aft 'elementList.length' equals " + elementList.length + " not 2";
		}
		return "nodenormalize01: OK";
	} catch (e) {
		return "nodenormalize01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="nodesetprefix01.xml" fleur="nodesetprefix01" native="nodesetprefix01"><Fleur>(function(){
	var success;
	try {
		var doc;
		var docFragment;
		var element;
		var elementTagName;
		var elementNodeName;
		var appendedChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		docFragment = doc.createDocumentFragment();
		element = doc.createElementNS("http://www.w3.org/DOM/Test", "emp:address");
		appendedChild = docFragment.appendChild(element);
		element.prefix = "dmstc";
		elementTagName = element.tagName;
		elementNodeName = element.nodeName;
		if ("dmstc:address" !== elementTagName) {
			return "nodesetprefix01: #nodesetprefix01_tagname 'elementTagName' equals '" + elementTagName + "' not '" + "dmstc:address" + "'";
		}
		if ("dmstc:address" !== elementNodeName) {
			return "nodesetprefix01: #nodesetprefix01_nodeName 'elementNodeName' equals '" + elementNodeName + "' not '" + "dmstc:address" + "'";
		}
		return "nodesetprefix01: OK";
	} catch (e) {
		return "nodesetprefix01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var docFragment;
		var element;
		var elementTagName;
		var elementNodeName;
		var appendedChild;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		docFragment = doc.createDocumentFragment();
		element = doc.createElementNS("http://www.w3.org/DOM/Test", "emp:address");
		appendedChild = docFragment.appendChild(element);
		element.prefix = "dmstc";
		elementTagName = element.tagName;
		elementNodeName = element.nodeName;
		if ("dmstc:address" !== elementTagName) {
			return "nodesetprefix01: #nodesetprefix01_tagname 'elementTagName' equals '" + elementTagName + "' not '" + "dmstc:address" + "'";
		}
		if ("dmstc:address" !== elementNodeName) {
			return "nodesetprefix01: #nodesetprefix01_nodeName 'elementNodeName' equals '" + elementNodeName + "' not '" + "dmstc:address" + "'";
		}
		return "nodesetprefix01: OK";
	} catch (e) {
		return "nodesetprefix01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="nodesetprefix02.xml" fleur="nodesetprefix02" native="nodesetprefix02"><Fleur>(function(){
	var success;
	try {
		var doc;
		var element;
		var attribute;
		var newAttribute;
		var setNode;
		var elementList;
		var attrName;
		var newAttrName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		element = elementList.item(1);
		newAttribute = doc.createAttributeNS("http://www.w3.org/DOM/Test", "test:address");
		setNode = element.setAttributeNodeNS(newAttribute);
		newAttribute.prefix = "dom";
		attribute = element.getAttributeNodeNS("http://www.usa.com", "domestic");
		attrName = attribute.nodeName;
		newAttrName = newAttribute.nodeName;
		if ("dmstc:domestic" !== attrName) {
			return "nodesetprefix02: #nodesetprefix02_attrName 'attrName' equals '" + attrName + "' not '" + "dmstc:domestic" + "'";
		}
		if ("dom:address" !== newAttrName) {
			return "nodesetprefix02: #nodesetprefix02_newAttrName 'newAttrName' equals '" + newAttrName + "' not '" + "dom:address" + "'";
		}
		return "nodesetprefix02: OK";
	} catch (e) {
		return "nodesetprefix02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var element;
		var attribute;
		var newAttribute;
		var setNode;
		var elementList;
		var attrName;
		var newAttrName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		element = elementList.item(1);
		newAttribute = doc.createAttributeNS("http://www.w3.org/DOM/Test", "test:address");
		setNode = element.setAttributeNodeNS(newAttribute);
		newAttribute.prefix = "dom";
		attribute = element.getAttributeNodeNS("http://www.usa.com", "domestic");
		attrName = attribute.nodeName;
		newAttrName = newAttribute.nodeName;
		if ("dmstc:domestic" !== attrName) {
			return "nodesetprefix02: #nodesetprefix02_attrName 'attrName' equals '" + attrName + "' not '" + "dmstc:domestic" + "'";
		}
		if ("dom:address" !== newAttrName) {
			return "nodesetprefix02: #nodesetprefix02_newAttrName 'newAttrName' equals '" + newAttrName + "' not '" + "dom:address" + "'";
		}
		return "nodesetprefix02: OK";
	} catch (e) {
		return "nodesetprefix02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="nodesetprefix03.xml" fleur="nodesetprefix03" native="nodesetprefix03"><Fleur>(function(){
	var success;
	try {
		var doc;
		var element;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		element = doc.createElement("address");
		success = false;
		try {
			element.prefix = "test";
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 14;
			}
		}
		if (!success) {
			return "nodesetprefix03: Exception NAMESPACE_ERR expected";
		}
		return "nodesetprefix03: OK";
	} catch (e) {
		return "nodesetprefix03: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var element;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		element = doc.createElement("address");
		success = false;
		try {
			element.prefix = "test";
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 14;
			}
		}
		if (!success) {
			return "nodesetprefix03: Exception NAMESPACE_ERR expected";
		}
		return "nodesetprefix03: OK";
	} catch (e) {
		return "nodesetprefix03: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="nodesetprefix04.xml" fleur="nodesetprefix04" native="nodesetprefix04"><Fleur>(function(){
	var success;
	try {
		var doc;
		var element;
		var attribute;
		var elementList;
		var nullNS = null;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("emp:employee");
		element = elementList.item(0);
		if (element == null) {
			return "nodesetprefix04: #empEmployeeNotNull 'element' is null";
		}
		attribute = element.getAttributeNodeNS(nullNS, "defaultAttr");
		success = false;
		try {
			attribute.prefix = "test";
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 14;
			}
		}
		if (!success) {
			return "nodesetprefix04: Exception NAMESPACE_ERR expected";
		}
		return "nodesetprefix04: OK";
	} catch (e) {
		return "nodesetprefix04: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var element;
		var attribute;
		var elementList;
		var nullNS = null;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("emp:employee");
		element = elementList.item(0);
		if (element == null) {
			return "nodesetprefix04: #empEmployeeNotNull 'element' is null";
		}
		attribute = element.getAttributeNodeNS(nullNS, "defaultAttr");
		success = false;
		try {
			attribute.prefix = "test";
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 14;
			}
		}
		if (!success) {
			return "nodesetprefix04: Exception NAMESPACE_ERR expected";
		}
		return "nodesetprefix04: OK";
	} catch (e) {
		return "nodesetprefix04: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="nodesetprefix05.xml" fleur="nodesetprefix05" native="nodesetprefix05"><Fleur>(function(){
	var success;
	try {
		var doc;
		var element;
		var prefixValue;
		prefixValues = new Array();
		prefixValues[0] = "_:";
		prefixValues[1] = ":0";
		prefixValues[2] = ":";
		prefixValues[3] = "_::";
		prefixValues[4] = "a:0:c";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		element = doc.createElementNS("http://www.w3.org/DOM/Test/L2", "dom:elem");
		for (var index_id0x0b5b2d80 = 0; index_id0x0b5b2d80 &lt; prefixValues.length; index_id0x0b5b2d80++) {
			prefixValue = prefixValues[index_id0x0b5b2d80];
			success = false;
			try {
				element.prefix = prefixValue;
			} catch (ex) {
				if (typeof ex.code != 'undefined') {
					success = ex.code === 14;
				}
			}
			if (!success) {
				return "nodesetprefix05: Exception NAMESPACE_ERR expected";
			}
		}
		return "nodesetprefix05: OK";
	} catch (e) {
		return "nodesetprefix05: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var element;
		var prefixValue;
		prefixValues = new Array();
		prefixValues[0] = "_:";
		prefixValues[1] = ":0";
		prefixValues[2] = ":";
		prefixValues[3] = "_::";
		prefixValues[4] = "a:0:c";
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		element = doc.createElementNS("http://www.w3.org/DOM/Test/L2", "dom:elem");
		for (var index_id0x0b5b2d80 = 0; index_id0x0b5b2d80 &lt; prefixValues.length; index_id0x0b5b2d80++) {
			prefixValue = prefixValues[index_id0x0b5b2d80];
			success = false;
			try {
				element.prefix = prefixValue;
			} catch (ex) {
				if (typeof ex.code != 'undefined') {
					success = ex.code === 14;
				}
			}
			if (!success) {
				return "nodesetprefix05: Exception NAMESPACE_ERR expected";
			}
		}
		return "nodesetprefix05: OK";
	} catch (e) {
		return "nodesetprefix05: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="nodesetprefix06.xml" fleur="nodesetprefix06" native="nodesetprefix06"><Fleur>(function(){
	var success;
	try {
		var doc;
		var element;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		element = doc.createElementNS("http://www.w3.org/DOM/Test/L2", "dom:elem");
		success = false;
		try {
			element.prefix = "xml";
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 14;
			}
		}
		if (!success) {
			return "nodesetprefix06: Exception NAMESPACE_ERR expected";
		}
		return "nodesetprefix06: OK";
	} catch (e) {
		return "nodesetprefix06: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var element;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		element = doc.createElementNS("http://www.w3.org/DOM/Test/L2", "dom:elem");
		success = false;
		try {
			element.prefix = "xml";
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 14;
			}
		}
		if (!success) {
			return "nodesetprefix06: Exception NAMESPACE_ERR expected";
		}
		return "nodesetprefix06: OK";
	} catch (e) {
		return "nodesetprefix06: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="nodesetprefix07.xml" fleur="nodesetprefix07" native="nodesetprefix07"><Fleur>(function(){
	var success;
	try {
		var doc;
		var attribute;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		attribute = doc.createAttributeNS("http://www.w3.org/DOM/Test/L2", "abc:elem");
		success = false;
		try {
			attribute.prefix = "xmlns";
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 14;
			}
		}
		if (!success) {
			return "nodesetprefix07: Exception NAMESPACE_ERR expected";
		}
		return "nodesetprefix07: OK";
	} catch (e) {
		return "nodesetprefix07: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var attribute;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		attribute = doc.createAttributeNS("http://www.w3.org/DOM/Test/L2", "abc:elem");
		success = false;
		try {
			attribute.prefix = "xmlns";
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 14;
			}
		}
		if (!success) {
			return "nodesetprefix07: Exception NAMESPACE_ERR expected";
		}
		return "nodesetprefix07: OK";
	} catch (e) {
		return "nodesetprefix07: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="nodesetprefix08.xml" fleur="nodesetprefix08" native="nodesetprefix08"><Fleur>(function(){
	var success;
	try {
		var doc;
		var element;
		var elementList;
		var attribute;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		element = elementList.item(0);
		attribute = element.getAttributeNode("xmlns");
		success = false;
		try {
			attribute.prefix = "xml";
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 14;
			}
		}
		if (!success) {
			return "nodesetprefix08: Exception NAMESPACE_ERR expected";
		}
		return "nodesetprefix08: OK";
	} catch (e) {
		return "nodesetprefix08: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var element;
		var elementList;
		var attribute;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		element = elementList.item(0);
		attribute = element.getAttributeNode("xmlns");
		success = false;
		try {
			attribute.prefix = "xml";
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 14;
			}
		}
		if (!success) {
			return "nodesetprefix08: Exception NAMESPACE_ERR expected";
		}
		return "nodesetprefix08: OK";
	} catch (e) {
		return "nodesetprefix08: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="nodesetprefix09.xml" fleur="nodesetprefix09" native="nodesetprefix09"><Fleur>(function(){
	var success;
	try {
		var doc;
		var value = "#$%&amp;'()@";
		var element;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		element = doc.createElementNS("http://www.w3.org/DOM/Test/L2", "dom:elem");
		success = false;
		try {
			element.prefix = value;
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 5;
			}
		}
		if (!success) {
			return "nodesetprefix09: Exception INVALID_CHARACTER_ERR expected";
		}
		return "nodesetprefix09: OK";
	} catch (e) {
		return "nodesetprefix09: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var value = "#$%&amp;'()@";
		var element;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		element = doc.createElementNS("http://www.w3.org/DOM/Test/L2", "dom:elem");
		success = false;
		try {
			element.prefix = value;
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 5;
			}
		}
		if (!success) {
			return "nodesetprefix09: Exception INVALID_CHARACTER_ERR expected";
		}
		return "nodesetprefix09: OK";
	} catch (e) {
		return "nodesetprefix09: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="normalize01.xml" fleur="normalize01" native="normalize01"><Fleur>(function(){
	var success;
	try {
		var doc;
		var root;
		var elementList;
		var firstChild;
		var textList;
		var textNode;
		var data;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		root = doc.documentElement;
		root.normalize();
		elementList = root.getElementsByTagName("name");
		firstChild = elementList.item(2);
		textList = firstChild.childNodes;
		textNode = textList.item(0);
		data = textNode.data;
		if ("Roger\n Jones" !== data) {
			return "normalize01: #data 'data' equals '" + data + "' not '" + "Roger\n Jones" + "'";
		}
		return "normalize01: OK";
	} catch (e) {
		return "normalize01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var root;
		var elementList;
		var firstChild;
		var textList;
		var textNode;
		var data;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		root = doc.documentElement;
		root.normalize();
		elementList = root.getElementsByTagName("name");
		firstChild = elementList.item(2);
		textList = firstChild.childNodes;
		textNode = textList.item(0);
		data = textNode.data;
		if ("Roger\n Jones" !== data) {
			return "normalize01: #data 'data' equals '" + data + "' not '" + "Roger\n Jones" + "'";
		}
		return "normalize01: OK";
	} catch (e) {
		return "normalize01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="ownerDocument01.xml" fleur="ownerDocument01" native="ownerDocument01"><Fleur>(function(){
	var success;
	try {
		var doc;
		var ownerDocument;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		ownerDocument = doc.ownerDocument;
		if (ownerDocument != null) {
			return "ownerDocument01: #throw_Null 'ownerDocument' equals '" + ownerDocument + "' not null";
		}
		return "ownerDocument01: OK";
	} catch (e) {
		return "ownerDocument01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var ownerDocument;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		ownerDocument = doc.ownerDocument;
		if (ownerDocument != null) {
			return "ownerDocument01: #throw_Null 'ownerDocument' equals '" + ownerDocument + "' not null";
		}
		return "ownerDocument01: OK";
	} catch (e) {
		return "ownerDocument01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="ownerElement01.xml" fleur="ownerElement01" native="ownerElement01"><Fleur>(function(){
	var success;
	try {
		var doc;
		var addressList;
		var testNode;
		var attributes;
		var domesticAttr;
		var elementNode;
		var name;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		addressList = doc.getElementsByTagName("address");
		testNode = addressList.item(0);
		attributes = testNode.attributes;
		domesticAttr = attributes.getNamedItem("domestic");
		elementNode = domesticAttr.ownerElement;
		name = elementNode.nodeName;
		if ("address" !== name) {
			return "ownerElement01: #throw_Equals 'name' equals '" + name + "' not '" + "address" + "'";
		}
		return "ownerElement01: OK";
	} catch (e) {
		return "ownerElement01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var addressList;
		var testNode;
		var attributes;
		var domesticAttr;
		var elementNode;
		var name;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		addressList = doc.getElementsByTagName("address");
		testNode = addressList.item(0);
		attributes = testNode.attributes;
		domesticAttr = attributes.getNamedItem("domestic");
		elementNode = domesticAttr.ownerElement;
		name = elementNode.nodeName;
		if ("address" !== name) {
			return "ownerElement01: #throw_Equals 'name' equals '" + name + "' not '" + "address" + "'";
		}
		return "ownerElement01: OK";
	} catch (e) {
		return "ownerElement01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="ownerElement02.xml" fleur="ownerElement02" native="ownerElement02"><Fleur>(function(){
	var success;
	try {
		var doc;
		var newAttr;
		var elementNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		newAttr = doc.createAttribute("newAttribute");
		elementNode = newAttr.ownerElement;
		if (elementNode != null) {
			return "ownerElement02: #throw_Null 'elementNode' equals '" + elementNode + "' not null";
		}
		return "ownerElement02: OK";
	} catch (e) {
		return "ownerElement02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var newAttr;
		var elementNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		newAttr = doc.createAttribute("newAttribute");
		elementNode = newAttr.ownerElement;
		if (elementNode != null) {
			return "ownerElement02: #throw_Null 'elementNode' equals '" + elementNode + "' not null";
		}
		return "ownerElement02: OK";
	} catch (e) {
		return "ownerElement02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="prefix01.xml" fleur="prefix01" native="prefix01"><Fleur>(function(){
	var success;
	try {
		var doc;
		var createdNode;
		var prefix;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		createdNode = doc.createElement("test:employee");
		prefix = createdNode.prefix;
		if (prefix != null) {
			return "prefix01: #throw_Null 'prefix' equals '" + prefix + "' not null";
		}
		return "prefix01: OK";
	} catch (e) {
		return "prefix01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var createdNode;
		var prefix;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		createdNode = doc.createElement("test:employee");
		prefix = createdNode.prefix;
		if (prefix != null) {
			return "prefix01: #throw_Null 'prefix' equals '" + prefix + "' not null";
		}
		return "prefix01: OK";
	} catch (e) {
		return "prefix01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="prefix02.xml" fleur="prefix02" native="prefix02"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var textNode;
		var prefix;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("emp:employeeId");
		testEmployee = elementList.item(0);
		if (testEmployee == null) {
			return "prefix02: #empEmployeeNotNull 'testEmployee' is null";
		}
		textNode = testEmployee.firstChild;
		prefix = textNode.prefix;
		if (prefix != null) {
			return "prefix02: #textNodePrefix 'prefix' equals '" + prefix + "' not null";
		}
		return "prefix02: OK";
	} catch (e) {
		return "prefix02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var textNode;
		var prefix;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("emp:employeeId");
		testEmployee = elementList.item(0);
		if (testEmployee == null) {
			return "prefix02: #empEmployeeNotNull 'testEmployee' is null";
		}
		textNode = testEmployee.firstChild;
		prefix = textNode.prefix;
		if (prefix != null) {
			return "prefix02: #textNodePrefix 'prefix' equals '" + prefix + "' not null";
		}
		return "prefix02: OK";
	} catch (e) {
		return "prefix02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="prefix03.xml" fleur="prefix03" native="prefix03"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var prefix;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("emp:employee");
		testEmployee = elementList.item(0);
		if (testEmployee == null) {
			return "prefix03: #empEmployeeNotNull 'testEmployee' is null";
		}
		prefix = testEmployee.prefix;
		if ("emp" !== prefix) {
			return "prefix03: #prefix 'prefix' equals '" + prefix + "' not '" + "emp" + "'";
		}
		return "prefix03: OK";
	} catch (e) {
		return "prefix03: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var prefix;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("emp:employee");
		testEmployee = elementList.item(0);
		if (testEmployee == null) {
			return "prefix03: #empEmployeeNotNull 'testEmployee' is null";
		}
		prefix = testEmployee.prefix;
		if ("emp" !== prefix) {
			return "prefix03: #prefix 'prefix' equals '" + prefix + "' not '" + "emp" + "'";
		}
		return "prefix03: OK";
	} catch (e) {
		return "prefix03: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="prefix04.xml" fleur="prefix04" native="prefix04"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var prefix;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		testEmployee = elementList.item(0);
		prefix = testEmployee.prefix;
		if (prefix != null) {
			return "prefix04: #throw_Null 'prefix' equals '" + prefix + "' not null";
		}
		return "prefix04: OK";
	} catch (e) {
		return "prefix04: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testEmployee;
		var prefix;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		testEmployee = elementList.item(0);
		prefix = testEmployee.prefix;
		if (prefix != null) {
			return "prefix04: #throw_Null 'prefix' equals '" + prefix + "' not null";
		}
		return "prefix04: OK";
	} catch (e) {
		return "prefix04: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="prefix05.xml" fleur="prefix05" native="prefix05"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var addrNode;
		var addrAttr;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("emp:address");
		addrNode = elementList.item(0);
		if (addrNode == null) {
			return "prefix05: #empAddrNotNull 'addrNode' is null";
		}
		addrAttr = addrNode.getAttributeNode("emp:domestic");
		success = false;
		try {
			addrAttr.prefix = "xmlns";
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 14;
			}
		}
		if (!success) {
			return "prefix05: Exception NAMESPACE_ERR expected";
		}
		return "prefix05: OK";
	} catch (e) {
		return "prefix05: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var addrNode;
		var addrAttr;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("emp:address");
		addrNode = elementList.item(0);
		if (addrNode == null) {
			return "prefix05: #empAddrNotNull 'addrNode' is null";
		}
		addrAttr = addrNode.getAttributeNode("emp:domestic");
		success = false;
		try {
			addrAttr.prefix = "xmlns";
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 14;
			}
		}
		if (!success) {
			return "prefix05: Exception NAMESPACE_ERR expected";
		}
		return "prefix05: OK";
	} catch (e) {
		return "prefix05: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="prefix06.xml" fleur="prefix06" native="prefix06"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		employeeNode = elementList.item(0);
		success = false;
		try {
			employeeNode.prefix = "pre^fix xmlns='http//www.nist.gov'";
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 5;
			}
		}
		if (!success) {
			return "prefix06: Exception INVALID_CHARACTER_ERR expected";
		}
		return "prefix06: OK";
	} catch (e) {
		return "prefix06: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		employeeNode = elementList.item(0);
		success = false;
		try {
			employeeNode.prefix = "pre^fix xmlns='http//www.nist.gov'";
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 5;
			}
		}
		if (!success) {
			return "prefix06: Exception INVALID_CHARACTER_ERR expected";
		}
		return "prefix06: OK";
	} catch (e) {
		return "prefix06: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="prefix07.xml" fleur="prefix07" native="prefix07"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		employeeNode = elementList.item(0);
		success = false;
		try {
			employeeNode.prefix = "emp::";
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 14;
			}
		}
		if (!success) {
			return "prefix07: Exception NAMESPACE_ERR expected";
		}
		return "prefix07: OK";
	} catch (e) {
		return "prefix07: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		employeeNode = elementList.item(0);
		success = false;
		try {
			employeeNode.prefix = "emp::";
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 14;
			}
		}
		if (!success) {
			return "prefix07: Exception NAMESPACE_ERR expected";
		}
		return "prefix07: OK";
	} catch (e) {
		return "prefix07: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="prefix08.xml" fleur="prefix08" native="prefix08"><Fleur>(function(){
	var success;
	try {
		var doc;
		var genderList;
		var genderNode;
		var entRef;
		var entElement;
		var createdNode;
		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		genderList = doc.getElementsByTagName("gender");
		genderNode = genderList.item(2);
		entRef = genderNode.firstChild;
		nodeType = entRef.nodeType;
		if ((1 == nodeType)) {
			entRef = doc.createEntityReference("ent4");
			if (entRef == null) {
				return "prefix08: #createdEntRefNotNull 'entRef' is null";
			}
		}
		entElement = entRef.firstChild;
		if (entElement == null) {
			return "prefix08: #entElement 'entElement' is null";
		}
		createdNode = doc.createElement("text3");
		success = false;
		try {
			entElement.prefix = "newPrefix";
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "prefix08: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "prefix08: OK";
	} catch (e) {
		return "prefix08: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var genderList;
		var genderNode;
		var entRef;
		var entElement;
		var createdNode;
		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		genderList = doc.getElementsByTagName("gender");
		genderNode = genderList.item(2);
		entRef = genderNode.firstChild;
		nodeType = entRef.nodeType;
		if ((1 == nodeType)) {
			entRef = doc.createEntityReference("ent4");
			if (entRef == null) {
				return "prefix08: #createdEntRefNotNull 'entRef' is null";
			}
		}
		entElement = entRef.firstChild;
		if (entElement == null) {
			return "prefix08: #entElement 'entElement' is null";
		}
		createdNode = doc.createElement("text3");
		success = false;
		try {
			entElement.prefix = "newPrefix";
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "prefix08: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "prefix08: OK";
	} catch (e) {
		return "prefix08: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="prefix09.xml" fleur="prefix09" native="prefix09"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var addrNode;
		var addrAttr;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		addrNode = elementList.item(3);
		addrAttr = addrNode.getAttributeNode("xmlns");
		success = false;
		try {
			addrAttr.prefix = "xxx";
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 14;
			}
		}
		if (!success) {
			return "prefix09: Exception NAMESPACE_ERR expected";
		}
		return "prefix09: OK";
	} catch (e) {
		return "prefix09: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var addrNode;
		var addrAttr;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		addrNode = elementList.item(3);
		addrAttr = addrNode.getAttributeNode("xmlns");
		success = false;
		try {
			addrAttr.prefix = "xxx";
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 14;
			}
		}
		if (!success) {
			return "prefix09: Exception NAMESPACE_ERR expected";
		}
		return "prefix09: OK";
	} catch (e) {
		return "prefix09: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="prefix10.xml" fleur="prefix10" native="prefix10"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		employeeNode = elementList.item(1);
		success = false;
		try {
			employeeNode.prefix = "xml";
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 14;
			}
		}
		if (!success) {
			return "prefix10: Exception NAMESPACE_ERR expected";
		}
		return "prefix10: OK";
	} catch (e) {
		return "prefix10: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		employeeNode = elementList.item(1);
		success = false;
		try {
			employeeNode.prefix = "xml";
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 14;
			}
		}
		if (!success) {
			return "prefix10: Exception NAMESPACE_ERR expected";
		}
		return "prefix10: OK";
	} catch (e) {
		return "prefix10: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="prefix11.xml" fleur="prefix11" native="prefix11"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var namespaceURI;
		var nullNS = null;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		employeeNode = elementList.item(1);
		if (("text/xml" === "image/svg+xml")) {
			employeeNode = doc.createElementNS(nullNS, "employee");
		}
		namespaceURI = employeeNode.namespaceURI;
		success = false;
		try {
			employeeNode.prefix = "employee1";
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 14;
			}
		}
		if (!success) {
			return "prefix11: Exception NAMESPACE_ERR expected";
		}
		if (namespaceURI != null) {
			return "prefix11: #employeeNS 'namespaceURI' equals '" + namespaceURI + "' not null";
		}
		return "prefix11: OK";
	} catch (e) {
		return "prefix11: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var employeeNode;
		var namespaceURI;
		var nullNS = null;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		employeeNode = elementList.item(1);
		if (("text/xml" === "image/svg+xml")) {
			employeeNode = doc.createElementNS(nullNS, "employee");
		}
		namespaceURI = employeeNode.namespaceURI;
		success = false;
		try {
			employeeNode.prefix = "employee1";
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 14;
			}
		}
		if (!success) {
			return "prefix11: Exception NAMESPACE_ERR expected";
		}
		if (namespaceURI != null) {
			return "prefix11: #employeeNS 'namespaceURI' equals '" + namespaceURI + "' not null";
		}
		return "prefix11: OK";
	} catch (e) {
		return "prefix11: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="publicId01.xml" fleur="publicId01" native="publicId01"><Fleur>(function(){
	var success;
	try {
		var doc;
		var docType;
		var publicId;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		publicId = docType.publicId;
		if ("STAFF" !== publicId) {
			return "publicId01: #throw_Equals 'publicId' equals '" + publicId + "' not '" + "STAFF" + "'";
		}
		return "publicId01: OK";
	} catch (e) {
		return "publicId01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var docType;
		var publicId;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		publicId = docType.publicId;
		if ("STAFF" !== publicId) {
			return "publicId01: #throw_Equals 'publicId' equals '" + publicId + "' not '" + "STAFF" + "'";
		}
		return "publicId01: OK";
	} catch (e) {
		return "publicId01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="removeAttributeNS01.xml" fleur="removeAttributeNS01" native="removeAttributeNS01"><Fleur>(function(){
	var success;
	try {
		var doc;
		var genderList;
		var gender;
		var gen;
		var gList;
		var genElement;
		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		genderList = doc.getElementsByTagName("gender");
		gender = genderList.item(2);
		gen = gender.firstChild;
		nodeType = gen.nodeType;
		if ((1 == nodeType)) {
			gen = doc.createEntityReference("ent4");
			if (gen == null) {
				return "removeAttributeNS01: #createdEntRefNotNull 'gen' is null";
			}
		}
		gList = gen.childNodes;
		genElement = gList.item(0);
		if (genElement == null) {
			return "removeAttributeNS01: #notnull 'genElement' is null";
		}
		success = false;
		try {
			genElement.removeAttributeNS("www.xyz.com", "local1");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "removeAttributeNS01: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "removeAttributeNS01: OK";
	} catch (e) {
		return "removeAttributeNS01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var genderList;
		var gender;
		var gen;
		var gList;
		var genElement;
		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		genderList = doc.getElementsByTagName("gender");
		gender = genderList.item(2);
		gen = gender.firstChild;
		nodeType = gen.nodeType;
		if ((1 == nodeType)) {
			gen = doc.createEntityReference("ent4");
			if (gen == null) {
				return "removeAttributeNS01: #createdEntRefNotNull 'gen' is null";
			}
		}
		gList = gen.childNodes;
		genElement = gList.item(0);
		if (genElement == null) {
			return "removeAttributeNS01: #notnull 'genElement' is null";
		}
		success = false;
		try {
			genElement.removeAttributeNS("www.xyz.com", "local1");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "removeAttributeNS01: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "removeAttributeNS01: OK";
	} catch (e) {
		return "removeAttributeNS01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="removeAttributeNS02.xml" fleur="removeAttributeNS02" native="removeAttributeNS02"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testAddr;
		var addrAttr;
		var attr;
		var namespaceURI;
		var localName;
		var prefix;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("emp:address");
		testAddr = elementList.item(0);
		testAddr.removeAttributeNS("http://www.nist.gov", "local1");
		elementList = doc.getElementsByTagName("emp:address");
		testAddr = elementList.item(0);
		addrAttr = testAddr.getAttributeNodeNS("http://www.nist.gov", "local1");
		attr = testAddr.getAttributeNS("http://www.nist.gov", "local1");
		namespaceURI = addrAttr.namespaceURI;
		localName = addrAttr.localName;
		prefix = testAddr.prefix;
		if ("FALSE" !== attr) {
			return "removeAttributeNS02: #attr 'attr' equals '" + attr + "' not '" + "FALSE" + "'";
		}
		if ("http://www.nist.gov" !== namespaceURI) {
			return "removeAttributeNS02: #uri 'namespaceURI' equals '" + namespaceURI + "' not '" + "http://www.nist.gov" + "'";
		}
		if ("local1" !== localName) {
			return "removeAttributeNS02: #lname 'localName' equals '" + localName + "' not '" + "local1" + "'";
		}
		if ("emp" !== prefix) {
			return "removeAttributeNS02: #prefix 'prefix' equals '" + prefix + "' not '" + "emp" + "'";
		}
		return "removeAttributeNS02: OK";
	} catch (e) {
		return "removeAttributeNS02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testAddr;
		var addrAttr;
		var attr;
		var namespaceURI;
		var localName;
		var prefix;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("emp:address");
		testAddr = elementList.item(0);
		testAddr.removeAttributeNS("http://www.nist.gov", "local1");
		elementList = doc.getElementsByTagName("emp:address");
		testAddr = elementList.item(0);
		addrAttr = testAddr.getAttributeNodeNS("http://www.nist.gov", "local1");
		attr = testAddr.getAttributeNS("http://www.nist.gov", "local1");
		namespaceURI = addrAttr.namespaceURI;
		localName = addrAttr.localName;
		prefix = testAddr.prefix;
		if ("FALSE" !== attr) {
			return "removeAttributeNS02: #attr 'attr' equals '" + attr + "' not '" + "FALSE" + "'";
		}
		if ("http://www.nist.gov" !== namespaceURI) {
			return "removeAttributeNS02: #uri 'namespaceURI' equals '" + namespaceURI + "' not '" + "http://www.nist.gov" + "'";
		}
		if ("local1" !== localName) {
			return "removeAttributeNS02: #lname 'localName' equals '" + localName + "' not '" + "local1" + "'";
		}
		if ("emp" !== prefix) {
			return "removeAttributeNS02: #prefix 'prefix' equals '" + prefix + "' not '" + "emp" + "'";
		}
		return "removeAttributeNS02: OK";
	} catch (e) {
		return "removeAttributeNS02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="removeNamedItemNS01.xml" fleur="removeNamedItemNS01" native="removeNamedItemNS01"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testAddress;
		var attributes;
		var newAttr;
		var removedNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testAddress = elementList.item(1);
		attributes = testAddress.attributes;
		removedNode = attributes.removeNamedItemNS("http://www.usa.com", "domestic");
		if (removedNode == null) {
			return "removeNamedItemNS01: #retval 'removedNode' is null";
		}
		newAttr = attributes.getNamedItem("dmstc:domestic");
		if (newAttr != null) {
			return "removeNamedItemNS01: #nodeRemoved 'newAttr' equals '" + newAttr + "' not null";
		}
		return "removeNamedItemNS01: OK";
	} catch (e) {
		return "removeNamedItemNS01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testAddress;
		var attributes;
		var newAttr;
		var removedNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testAddress = elementList.item(1);
		attributes = testAddress.attributes;
		removedNode = attributes.removeNamedItemNS("http://www.usa.com", "domestic");
		if (removedNode == null) {
			return "removeNamedItemNS01: #retval 'removedNode' is null";
		}
		newAttr = attributes.getNamedItem("dmstc:domestic");
		if (newAttr != null) {
			return "removeNamedItemNS01: #nodeRemoved 'newAttr' equals '" + newAttr + "' not null";
		}
		return "removeNamedItemNS01: OK";
	} catch (e) {
		return "removeNamedItemNS01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="removeNamedItemNS02.xml" fleur="removeNamedItemNS02" native="removeNamedItemNS02"><Fleur>(function(){
	var success;
	try {
		var namespaceURI = "http://www.usa.com";
		var localName = "domest";
		var doc;
		var elementList;
		var testAddress;
		var attributes;
		var removedNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testAddress = elementList.item(1);
		attributes = testAddress.attributes;
		success = false;
		try {
			removedNode = attributes.removeNamedItemNS(namespaceURI, localName);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 8;
			}
		}
		if (!success) {
			return "removeNamedItemNS02: Exception NOT_FOUND_ERR expected";
		}
		return "removeNamedItemNS02: OK";
	} catch (e) {
		return "removeNamedItemNS02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var namespaceURI = "http://www.usa.com";
		var localName = "domest";
		var doc;
		var elementList;
		var testAddress;
		var attributes;
		var removedNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		testAddress = elementList.item(1);
		attributes = testAddress.attributes;
		success = false;
		try {
			removedNode = attributes.removeNamedItemNS(namespaceURI, localName);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 8;
			}
		}
		if (!success) {
			return "removeNamedItemNS02: Exception NOT_FOUND_ERR expected";
		}
		return "removeNamedItemNS02: OK";
	} catch (e) {
		return "removeNamedItemNS02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="removeNamedItemNS03.xml" fleur="removeNamedItemNS03" native="removeNamedItemNS03"><Fleur>(function(){
	var success;
	try {
		var namespaceURI = "http://www.w3.org/2000/xmlns/";
		var localName = "local1";
		var doc;
		var elementList;
		var testAddress;
		var nList;
		var child;
		var n2List;
		var child2;
		var attributes;
		var removedNode;
		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("gender");
		testAddress = elementList.item(2);
		nList = testAddress.childNodes;
		child = nList.item(0);
		nodeType = child.nodeType;
		if ((1 == nodeType)) {
			child = doc.createEntityReference("ent4");
			if (child == null) {
				return "removeNamedItemNS03: #createdEntRefNotNull 'child' is null";
			}
		}
		n2List = child.childNodes;
		child2 = n2List.item(0);
		if (child2 == null) {
			return "removeNamedItemNS03: #notnull 'child2' is null";
		}
		attributes = child2.attributes;
		success = false;
		try {
			removedNode = attributes.removeNamedItemNS(namespaceURI, localName);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "removeNamedItemNS03: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "removeNamedItemNS03: OK";
	} catch (e) {
		return "removeNamedItemNS03: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var namespaceURI = "http://www.w3.org/2000/xmlns/";
		var localName = "local1";
		var doc;
		var elementList;
		var testAddress;
		var nList;
		var child;
		var n2List;
		var child2;
		var attributes;
		var removedNode;
		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("gender");
		testAddress = elementList.item(2);
		nList = testAddress.childNodes;
		child = nList.item(0);
		nodeType = child.nodeType;
		if ((1 == nodeType)) {
			child = doc.createEntityReference("ent4");
			if (child == null) {
				return "removeNamedItemNS03: #createdEntRefNotNull 'child' is null";
			}
		}
		n2List = child.childNodes;
		child2 = n2List.item(0);
		if (child2 == null) {
			return "removeNamedItemNS03: #notnull 'child2' is null";
		}
		attributes = child2.attributes;
		success = false;
		try {
			removedNode = attributes.removeNamedItemNS(namespaceURI, localName);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "removeNamedItemNS03: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "removeNamedItemNS03: OK";
	} catch (e) {
		return "removeNamedItemNS03: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="setAttributeNS01.xml" fleur="setAttributeNS01" native="setAttributeNS01"><Fleur>(function(){
	var success;
	try {
		var namespaceURI = "http://www.nist.gov";
		var qualifiedName = "emp:qual?name";
		var doc;
		var elementList;
		var testAddr;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		testAddr = elementList.item(0);
		success = false;
		try {
			testAddr.setAttributeNS(namespaceURI, qualifiedName, "newValue");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 5;
			}
		}
		if (!success) {
			return "setAttributeNS01: Exception INVALID_CHARACTER_ERR expected";
		}
		return "setAttributeNS01: OK";
	} catch (e) {
		return "setAttributeNS01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var namespaceURI = "http://www.nist.gov";
		var qualifiedName = "emp:qual?name";
		var doc;
		var elementList;
		var testAddr;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		testAddr = elementList.item(0);
		success = false;
		try {
			testAddr.setAttributeNS(namespaceURI, qualifiedName, "newValue");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 5;
			}
		}
		if (!success) {
			return "setAttributeNS01: Exception INVALID_CHARACTER_ERR expected";
		}
		return "setAttributeNS01: OK";
	} catch (e) {
		return "setAttributeNS01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="setAttributeNS02.xml" fleur="setAttributeNS02" native="setAttributeNS02"><Fleur>(function(){
	var success;
	try {
		var namespaceURI = "http://www.nist.gov";
		var qualifiedName = "emp:";
		var doc;
		var elementList;
		var testAddr;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("emp:employee");
		testAddr = elementList.item(0);
		success = false;
		try {
			testAddr.setAttributeNS(namespaceURI, qualifiedName, "newValue");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 14;
			}
		}
		if (!success) {
			return "setAttributeNS02: Exception NAMESPACE_ERR expected";
		}
		return "setAttributeNS02: OK";
	} catch (e) {
		return "setAttributeNS02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var namespaceURI = "http://www.nist.gov";
		var qualifiedName = "emp:";
		var doc;
		var elementList;
		var testAddr;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("emp:employee");
		testAddr = elementList.item(0);
		success = false;
		try {
			testAddr.setAttributeNS(namespaceURI, qualifiedName, "newValue");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 14;
			}
		}
		if (!success) {
			return "setAttributeNS02: Exception NAMESPACE_ERR expected";
		}
		return "setAttributeNS02: OK";
	} catch (e) {
		return "setAttributeNS02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="setAttributeNS03.xml" fleur="setAttributeNS03" native="setAttributeNS03"><Fleur>(function(){
	var success;
	try {
		var namespaceURI = "www.xyz.com";
		var qualifiedName = "emp:local1";
		var doc;
		var genderList;
		var gender;
		var genList;
		var gen;
		var gList;
		var genElement;
		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		genderList = doc.getElementsByTagName("gender");
		gender = genderList.item(2);
		genList = gender.childNodes;
		gen = genList.item(0);
		nodeType = gen.nodeType;
		if ((1 == nodeType)) {
			gen = doc.createEntityReference("ent4");
			if (gen == null) {
				return "setAttributeNS03: #createdEntRefNotNull 'gen' is null";
			}
		}
		gList = gen.childNodes;
		genElement = gList.item(0);
		if (genElement == null) {
			return "setAttributeNS03: #notnull 'genElement' is null";
		}
		success = false;
		try {
			genElement.setAttributeNS(namespaceURI, qualifiedName, "newValue");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "setAttributeNS03: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "setAttributeNS03: OK";
	} catch (e) {
		return "setAttributeNS03: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var namespaceURI = "www.xyz.com";
		var qualifiedName = "emp:local1";
		var doc;
		var genderList;
		var gender;
		var genList;
		var gen;
		var gList;
		var genElement;
		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		genderList = doc.getElementsByTagName("gender");
		gender = genderList.item(2);
		genList = gender.childNodes;
		gen = genList.item(0);
		nodeType = gen.nodeType;
		if ((1 == nodeType)) {
			gen = doc.createEntityReference("ent4");
			if (gen == null) {
				return "setAttributeNS03: #createdEntRefNotNull 'gen' is null";
			}
		}
		gList = gen.childNodes;
		genElement = gList.item(0);
		if (genElement == null) {
			return "setAttributeNS03: #notnull 'genElement' is null";
		}
		success = false;
		try {
			genElement.setAttributeNS(namespaceURI, qualifiedName, "newValue");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "setAttributeNS03: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "setAttributeNS03: OK";
	} catch (e) {
		return "setAttributeNS03: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="setAttributeNS04.xml" fleur="setAttributeNS04" native="setAttributeNS04"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testAddr;
		var addrAttr;
		var resultAttr;
		var resultNamespaceURI;
		var resultLocalName;
		var resultPrefix;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("emp:address");
		testAddr = elementList.item(0);
		if (testAddr == null) {
			return "setAttributeNS04: #empAddrNotNull 'testAddr' is null";
		}
		testAddr.setAttributeNS("http://www.nist.gov", "newprefix:zone", "newValue");
		addrAttr = testAddr.getAttributeNodeNS("http://www.nist.gov", "zone");
		resultAttr = testAddr.getAttributeNS("http://www.nist.gov", "zone");
		if ("newValue" !== resultAttr) {
			return "setAttributeNS04: #attrValue 'resultAttr' equals '" + resultAttr + "' not '" + "newValue" + "'";
		}
		resultNamespaceURI = addrAttr.namespaceURI;
		if ("http://www.nist.gov" !== resultNamespaceURI) {
			return "setAttributeNS04: #nsuri 'resultNamespaceURI' equals '" + resultNamespaceURI + "' not '" + "http://www.nist.gov" + "'";
		}
		resultLocalName = addrAttr.localName;
		if ("zone" !== resultLocalName) {
			return "setAttributeNS04: #lname 'resultLocalName' equals '" + resultLocalName + "' not '" + "zone" + "'";
		}
		resultPrefix = addrAttr.prefix;
		if ("newprefix" !== resultPrefix) {
			return "setAttributeNS04: #prefix 'resultPrefix' equals '" + resultPrefix + "' not '" + "newprefix" + "'";
		}
		return "setAttributeNS04: OK";
	} catch (e) {
		return "setAttributeNS04: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testAddr;
		var addrAttr;
		var resultAttr;
		var resultNamespaceURI;
		var resultLocalName;
		var resultPrefix;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("emp:address");
		testAddr = elementList.item(0);
		if (testAddr == null) {
			return "setAttributeNS04: #empAddrNotNull 'testAddr' is null";
		}
		testAddr.setAttributeNS("http://www.nist.gov", "newprefix:zone", "newValue");
		addrAttr = testAddr.getAttributeNodeNS("http://www.nist.gov", "zone");
		resultAttr = testAddr.getAttributeNS("http://www.nist.gov", "zone");
		if ("newValue" !== resultAttr) {
			return "setAttributeNS04: #attrValue 'resultAttr' equals '" + resultAttr + "' not '" + "newValue" + "'";
		}
		resultNamespaceURI = addrAttr.namespaceURI;
		if ("http://www.nist.gov" !== resultNamespaceURI) {
			return "setAttributeNS04: #nsuri 'resultNamespaceURI' equals '" + resultNamespaceURI + "' not '" + "http://www.nist.gov" + "'";
		}
		resultLocalName = addrAttr.localName;
		if ("zone" !== resultLocalName) {
			return "setAttributeNS04: #lname 'resultLocalName' equals '" + resultLocalName + "' not '" + "zone" + "'";
		}
		resultPrefix = addrAttr.prefix;
		if ("newprefix" !== resultPrefix) {
			return "setAttributeNS04: #prefix 'resultPrefix' equals '" + resultPrefix + "' not '" + "newprefix" + "'";
		}
		return "setAttributeNS04: OK";
	} catch (e) {
		return "setAttributeNS04: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="setAttributeNS05.xml" fleur="setAttributeNS05" native="setAttributeNS05"><Fleur>(function(){
	var success;
	try {
		var localName = "newAttr";
		var namespaceURI = "http://www.newattr.com";
		var qualifiedName = "emp:newAttr";
		var doc;
		var elementList;
		var testAddr;
		var addrAttr;
		var resultAttr;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("emp:address");
		testAddr = elementList.item(0);
		if (testAddr == null) {
			return "setAttributeNS05: #empAddrNotNull 'testAddr' is null";
		}
		testAddr.setAttributeNS(namespaceURI, qualifiedName, "&lt;newValue&gt;");
		resultAttr = testAddr.getAttributeNS(namespaceURI, localName);
		if ("&lt;newValue&gt;" !== resultAttr) {
			return "setAttributeNS05: #throw_Equals 'resultAttr' equals '" + resultAttr + "' not '" + "&lt;newValue&gt;" + "'";
		}
		return "setAttributeNS05: OK";
	} catch (e) {
		return "setAttributeNS05: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var localName = "newAttr";
		var namespaceURI = "http://www.newattr.com";
		var qualifiedName = "emp:newAttr";
		var doc;
		var elementList;
		var testAddr;
		var addrAttr;
		var resultAttr;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("emp:address");
		testAddr = elementList.item(0);
		if (testAddr == null) {
			return "setAttributeNS05: #empAddrNotNull 'testAddr' is null";
		}
		testAddr.setAttributeNS(namespaceURI, qualifiedName, "&lt;newValue&gt;");
		resultAttr = testAddr.getAttributeNS(namespaceURI, localName);
		if ("&lt;newValue&gt;" !== resultAttr) {
			return "setAttributeNS05: #throw_Equals 'resultAttr' equals '" + resultAttr + "' not '" + "&lt;newValue&gt;" + "'";
		}
		return "setAttributeNS05: OK";
	} catch (e) {
		return "setAttributeNS05: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="setAttributeNS06.xml" fleur="setAttributeNS06" native="setAttributeNS06"><Fleur>(function(){
	var success;
	try {
		var namespaceURI = "http://www.nist.gov";
		var qualifiedName = "xml:qualifiedName";
		var doc;
		var elementList;
		var testAddr;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		testAddr = elementList.item(0);
		success = false;
		try {
			testAddr.setAttributeNS(namespaceURI, qualifiedName, "newValue");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 14;
			}
		}
		if (!success) {
			return "setAttributeNS06: Exception NAMESPACE_ERR expected";
		}
		return "setAttributeNS06: OK";
	} catch (e) {
		return "setAttributeNS06: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var namespaceURI = "http://www.nist.gov";
		var qualifiedName = "xml:qualifiedName";
		var doc;
		var elementList;
		var testAddr;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		testAddr = elementList.item(0);
		success = false;
		try {
			testAddr.setAttributeNS(namespaceURI, qualifiedName, "newValue");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 14;
			}
		}
		if (!success) {
			return "setAttributeNS06: Exception NAMESPACE_ERR expected";
		}
		return "setAttributeNS06: OK";
	} catch (e) {
		return "setAttributeNS06: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="setAttributeNS07.xml" fleur="setAttributeNS07" native="setAttributeNS07"><Fleur>(function(){
	var success;
	try {
		var namespaceURI = "http://www.nist.gov";
		var qualifiedName = "xmlns";
		var doc;
		var elementList;
		var testAddr;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		testAddr = elementList.item(0);
		success = false;
		try {
			testAddr.setAttributeNS(namespaceURI, qualifiedName, "newValue");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 14;
			}
		}
		if (!success) {
			return "setAttributeNS07: Exception NAMESPACE_ERR expected";
		}
		return "setAttributeNS07: OK";
	} catch (e) {
		return "setAttributeNS07: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var namespaceURI = "http://www.nist.gov";
		var qualifiedName = "xmlns";
		var doc;
		var elementList;
		var testAddr;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("employee");
		testAddr = elementList.item(0);
		success = false;
		try {
			testAddr.setAttributeNS(namespaceURI, qualifiedName, "newValue");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 14;
			}
		}
		if (!success) {
			return "setAttributeNS07: Exception NAMESPACE_ERR expected";
		}
		return "setAttributeNS07: OK";
	} catch (e) {
		return "setAttributeNS07: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="setAttributeNS09.xml" fleur="setAttributeNS09" native="setAttributeNS09"><Fleur>(function(){
	var success;
	try {
		var localName = "newAttr";
		var namespaceURI = "http://www.newattr.com";
		var qualifiedName = "emp:newAttr";
		var doc;
		var elementList;
		var testAddr;
		var addrAttr;
		var resultAttr;
		var resultNamespaceURI;
		var resultLocalName;
		var resultPrefix;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("emp:address");
		testAddr = elementList.item(0);
		if (testAddr == null) {
			return "setAttributeNS09: #empAddrNotNull 'testAddr' is null";
		}
		testAddr.setAttributeNS(namespaceURI, qualifiedName, "newValue");
		addrAttr = testAddr.getAttributeNodeNS(namespaceURI, localName);
		resultAttr = testAddr.getAttributeNS(namespaceURI, localName);
		if ("newValue" !== resultAttr) {
			return "setAttributeNS09: #attrValue 'resultAttr' equals '" + resultAttr + "' not '" + "newValue" + "'";
		}
		resultNamespaceURI = addrAttr.namespaceURI;
		if ("http://www.newattr.com" !== resultNamespaceURI) {
			return "setAttributeNS09: #nsuri 'resultNamespaceURI' equals '" + resultNamespaceURI + "' not '" + "http://www.newattr.com" + "'";
		}
		resultLocalName = addrAttr.localName;
		if ("newAttr" !== resultLocalName) {
			return "setAttributeNS09: #lname 'resultLocalName' equals '" + resultLocalName + "' not '" + "newAttr" + "'";
		}
		resultPrefix = addrAttr.prefix;
		if ("emp" !== resultPrefix) {
			return "setAttributeNS09: #prefix 'resultPrefix' equals '" + resultPrefix + "' not '" + "emp" + "'";
		}
		return "setAttributeNS09: OK";
	} catch (e) {
		return "setAttributeNS09: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var localName = "newAttr";
		var namespaceURI = "http://www.newattr.com";
		var qualifiedName = "emp:newAttr";
		var doc;
		var elementList;
		var testAddr;
		var addrAttr;
		var resultAttr;
		var resultNamespaceURI;
		var resultLocalName;
		var resultPrefix;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("emp:address");
		testAddr = elementList.item(0);
		if (testAddr == null) {
			return "setAttributeNS09: #empAddrNotNull 'testAddr' is null";
		}
		testAddr.setAttributeNS(namespaceURI, qualifiedName, "newValue");
		addrAttr = testAddr.getAttributeNodeNS(namespaceURI, localName);
		resultAttr = testAddr.getAttributeNS(namespaceURI, localName);
		if ("newValue" !== resultAttr) {
			return "setAttributeNS09: #attrValue 'resultAttr' equals '" + resultAttr + "' not '" + "newValue" + "'";
		}
		resultNamespaceURI = addrAttr.namespaceURI;
		if ("http://www.newattr.com" !== resultNamespaceURI) {
			return "setAttributeNS09: #nsuri 'resultNamespaceURI' equals '" + resultNamespaceURI + "' not '" + "http://www.newattr.com" + "'";
		}
		resultLocalName = addrAttr.localName;
		if ("newAttr" !== resultLocalName) {
			return "setAttributeNS09: #lname 'resultLocalName' equals '" + resultLocalName + "' not '" + "newAttr" + "'";
		}
		resultPrefix = addrAttr.prefix;
		if ("emp" !== resultPrefix) {
			return "setAttributeNS09: #prefix 'resultPrefix' equals '" + resultPrefix + "' not '" + "emp" + "'";
		}
		return "setAttributeNS09: OK";
	} catch (e) {
		return "setAttributeNS09: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="setAttributeNS10.xml" fleur="setAttributeNS10" native="setAttributeNS10"><Fleur>(function(){
	var success;
	try {
		var namespaceURI = "http://www.example.gov";
		var doc;
		var elementList;
		var testAddr;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("em");
		testAddr = elementList.item(0);
		success = false;
		try {
			testAddr.setAttributeNS(namespaceURI, "", "newValue");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 5;
			}
		}
		if (!success) {
			return "setAttributeNS10: Exception INVALID_CHARACTER_ERR expected";
		}
		return "setAttributeNS10: OK";
	} catch (e) {
		return "setAttributeNS10: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var namespaceURI = "http://www.example.gov";
		var doc;
		var elementList;
		var testAddr;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/hc_staff.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("em");
		testAddr = elementList.item(0);
		success = false;
		try {
			testAddr.setAttributeNS(namespaceURI, "", "newValue");
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 5;
			}
		}
		if (!success) {
			return "setAttributeNS10: Exception INVALID_CHARACTER_ERR expected";
		}
		return "setAttributeNS10: OK";
	} catch (e) {
		return "setAttributeNS10: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="setAttributeNodeNS01.xml" fleur="setAttributeNodeNS01" native="setAttributeNodeNS01"><Fleur>(function(){
	var success;
	try {
		var namespaceURI = "http://www.newattr.com";
		var qualifiedName = "emp:newAttr";
		var doc;
		var newElement;
		var newAttr;
		var elementList;
		var testAddr;
		var appendedChild;
		var setAttr1;
		var setAttr2;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("emp:address");
		testAddr = elementList.item(0);
		if (testAddr == null) {
			return "setAttributeNodeNS01: #empAddrNotNull 'testAddr' is null";
		}
		newElement = doc.createElement("newElement");
		appendedChild = testAddr.appendChild(newElement);
		newAttr = doc.createAttributeNS(namespaceURI, qualifiedName);
		setAttr1 = newElement.setAttributeNodeNS(newAttr);
		success = false;
		try {
			setAttr2 = testAddr.setAttributeNodeNS(newAttr);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 10;
			}
		}
		if (!success) {
			return "setAttributeNodeNS01: Exception INUSE_ATTRIBUTE_ERR expected";
		}
		return "setAttributeNodeNS01: OK";
	} catch (e) {
		return "setAttributeNodeNS01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var namespaceURI = "http://www.newattr.com";
		var qualifiedName = "emp:newAttr";
		var doc;
		var newElement;
		var newAttr;
		var elementList;
		var testAddr;
		var appendedChild;
		var setAttr1;
		var setAttr2;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("emp:address");
		testAddr = elementList.item(0);
		if (testAddr == null) {
			return "setAttributeNodeNS01: #empAddrNotNull 'testAddr' is null";
		}
		newElement = doc.createElement("newElement");
		appendedChild = testAddr.appendChild(newElement);
		newAttr = doc.createAttributeNS(namespaceURI, qualifiedName);
		setAttr1 = newElement.setAttributeNodeNS(newAttr);
		success = false;
		try {
			setAttr2 = testAddr.setAttributeNodeNS(newAttr);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 10;
			}
		}
		if (!success) {
			return "setAttributeNodeNS01: Exception INUSE_ATTRIBUTE_ERR expected";
		}
		return "setAttributeNodeNS01: OK";
	} catch (e) {
		return "setAttributeNodeNS01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="setAttributeNodeNS02.xml" fleur="setAttributeNodeNS02" native="setAttributeNodeNS02"><Fleur>(function(){
	var success;
	try {
		var doc;
		var genderList;
		var gender;
		var genList;
		var gen;
		var gList;
		var genElement;
		var newAttr;
		var setAttr1;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		if ((getImplementationAttribute("expandEntityReferences") === false)) {
			genderList = doc.getElementsByTagName("gender");
			gender = genderList.item(2);
			genList = gender.childNodes;
			gen = genList.item(0);
		} else {
			gen = doc.createEntityReference("ent4");
		}
		gList = gen.childNodes;
		genElement = gList.item(0);
		if (genElement == null) {
			return "setAttributeNodeNS01: #notnull 'genElement' is null";
		}
		newAttr = doc.createAttributeNS("www.xyz.com", "emp:local1");
		success = false;
		try {
			setAttr1 = genElement.setAttributeNodeNS(newAttr);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "setAttributeNodeNS01: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "setAttributeNodeNS01: OK";
	} catch (e) {
		return "setAttributeNodeNS01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var genderList;
		var gender;
		var genList;
		var gen;
		var gList;
		var genElement;
		var newAttr;
		var setAttr1;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		if ((getImplementationAttribute("expandEntityReferences") === false)) {
			genderList = doc.getElementsByTagName("gender");
			gender = genderList.item(2);
			genList = gender.childNodes;
			gen = genList.item(0);
		} else {
			gen = doc.createEntityReference("ent4");
		}
		gList = gen.childNodes;
		genElement = gList.item(0);
		if (genElement == null) {
			return "setAttributeNodeNS01: #notnull 'genElement' is null";
		}
		newAttr = doc.createAttributeNS("www.xyz.com", "emp:local1");
		success = false;
		try {
			setAttr1 = genElement.setAttributeNodeNS(newAttr);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "setAttributeNodeNS01: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "setAttributeNodeNS01: OK";
	} catch (e) {
		return "setAttributeNodeNS01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="setAttributeNodeNS03.xml" fleur="setAttributeNodeNS03" native="setAttributeNodeNS03"><Fleur>(function(){
	var success;
	try {
		var namespaceURI = "http://www.newattr.com";
		var qualifiedName = "emp:newAttr";
		var doc;
		var elementList;
		var testAddr;
		var newAttr;
		var newAddrAttr;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("emp:address");
		testAddr = elementList.item(0);
		if (testAddr == null) {
			return "setAttributeNodeNS03: #empAddrNotNull 'testAddr' is null";
		}
		newAttr = doc.createAttributeNS(namespaceURI, qualifiedName);
		newAddrAttr = testAddr.setAttributeNodeNS(newAttr);
		if (newAddrAttr != null) {
			return "setAttributeNodeNS03: #throw_Null 'newAddrAttr' equals '" + newAddrAttr + "' not null";
		}
		return "setAttributeNodeNS03: OK";
	} catch (e) {
		return "setAttributeNodeNS03: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var namespaceURI = "http://www.newattr.com";
		var qualifiedName = "emp:newAttr";
		var doc;
		var elementList;
		var testAddr;
		var newAttr;
		var newAddrAttr;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("emp:address");
		testAddr = elementList.item(0);
		if (testAddr == null) {
			return "setAttributeNodeNS03: #empAddrNotNull 'testAddr' is null";
		}
		newAttr = doc.createAttributeNS(namespaceURI, qualifiedName);
		newAddrAttr = testAddr.setAttributeNodeNS(newAttr);
		if (newAddrAttr != null) {
			return "setAttributeNodeNS03: #throw_Null 'newAddrAttr' equals '" + newAddrAttr + "' not null";
		}
		return "setAttributeNodeNS03: OK";
	} catch (e) {
		return "setAttributeNodeNS03: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="setAttributeNodeNS04.xml" fleur="setAttributeNodeNS04" native="setAttributeNodeNS04"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testAddr;
		var newAttr;
		var newAddrAttr;
		var newName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("emp:address");
		testAddr = elementList.item(0);
		if (testAddr == null) {
			return "setAttributeNodeNS04: #empAddrNotNull 'testAddr' is null";
		}
		newAttr = doc.createAttributeNS("http://www.nist.gov", "xxx:domestic");
		newAddrAttr = testAddr.setAttributeNodeNS(newAttr);
		newName = newAddrAttr.nodeName;
		if ("emp:domestic" !== newName) {
			return "setAttributeNodeNS04: #nodeName 'newName' equals '" + newName + "' not '" + "emp:domestic" + "'";
		}
		return "setAttributeNodeNS04: OK";
	} catch (e) {
		return "setAttributeNodeNS04: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var testAddr;
		var newAttr;
		var newAddrAttr;
		var newName;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("emp:address");
		testAddr = elementList.item(0);
		if (testAddr == null) {
			return "setAttributeNodeNS04: #empAddrNotNull 'testAddr' is null";
		}
		newAttr = doc.createAttributeNS("http://www.nist.gov", "xxx:domestic");
		newAddrAttr = testAddr.setAttributeNodeNS(newAttr);
		newName = newAddrAttr.nodeName;
		if ("emp:domestic" !== newName) {
			return "setAttributeNodeNS04: #nodeName 'newName' equals '" + newName + "' not '" + "emp:domestic" + "'";
		}
		return "setAttributeNodeNS04: OK";
	} catch (e) {
		return "setAttributeNodeNS04: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="setAttributeNodeNS05.xml" fleur="setAttributeNodeNS05" native="setAttributeNodeNS05"><Fleur>(function(){
	var success;
	try {
		var namespaceURI = "http://www.newattr.com";
		var qualifiedName = "emp:newAttr";
		var doc1;
		var doc2;
		var newAttr;
		var elementList;
		var testAddr;
		var setAttr1;
		var doc1Req = new XMLHttpRequest();
		doc1Req.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		doc1Req.send();
		doc1 = new Fleur.DOMParser().parseFromString(doc1Req.responseText, "text/xml");
		var doc2Req = new XMLHttpRequest();
		doc2Req.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		doc2Req.send();
		doc2 = new Fleur.DOMParser().parseFromString(doc2Req.responseText, "text/xml");
		newAttr = doc2.createAttributeNS(namespaceURI, qualifiedName);
		elementList = doc1.getElementsByTagName("emp:address");
		testAddr = elementList.item(0);
		success = false;
		try {
			setAttr1 = testAddr.setAttributeNodeNS(newAttr);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 4;
			}
		}
		if (!success) {
			return "setAttributeNodeNS05: Exception WRONG_DOCUMENT_ERR expected";
		}
		return "setAttributeNodeNS05: OK";
	} catch (e) {
		return "setAttributeNodeNS05: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var namespaceURI = "http://www.newattr.com";
		var qualifiedName = "emp:newAttr";
		var doc1;
		var doc2;
		var newAttr;
		var elementList;
		var testAddr;
		var setAttr1;
		var doc1Req = new XMLHttpRequest();
		doc1Req.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		doc1Req.send();
		doc1 = new DOMParser().parseFromString(doc1Req.responseText, "text/xml");
		var doc2Req = new XMLHttpRequest();
		doc2Req.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		doc2Req.send();
		doc2 = new DOMParser().parseFromString(doc2Req.responseText, "text/xml");
		newAttr = doc2.createAttributeNS(namespaceURI, qualifiedName);
		elementList = doc1.getElementsByTagName("emp:address");
		testAddr = elementList.item(0);
		success = false;
		try {
			setAttr1 = testAddr.setAttributeNodeNS(newAttr);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 4;
			}
		}
		if (!success) {
			return "setAttributeNodeNS05: Exception WRONG_DOCUMENT_ERR expected";
		}
		return "setAttributeNodeNS05: OK";
	} catch (e) {
		return "setAttributeNodeNS05: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="setNamedItemNS01.xml" fleur="setNamedItemNS01" native="setNamedItemNS01"><Fleur>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var anotherElement;
		var anotherMap;
		var arg;
		var testAddress;
		var map;
		var setNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		anotherElement = elementList.item(2);
		anotherMap = anotherElement.attributes;
		arg = anotherMap.getNamedItemNS("http://www.netzero.com", "domestic");
		testAddress = elementList.item(0);
		map = testAddress.attributes;
		success = false;
		try {
			setNode = map.setNamedItemNS(arg);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 10;
			}
		}
		if (!success) {
			return "setNamedItemNS01: Exception INUSE_ATTRIBUTE_ERR expected";
		}
		return "setNamedItemNS01: OK";
	} catch (e) {
		return "setNamedItemNS01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var elementList;
		var anotherElement;
		var anotherMap;
		var arg;
		var testAddress;
		var map;
		var setNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("address");
		anotherElement = elementList.item(2);
		anotherMap = anotherElement.attributes;
		arg = anotherMap.getNamedItemNS("http://www.netzero.com", "domestic");
		testAddress = elementList.item(0);
		map = testAddress.attributes;
		success = false;
		try {
			setNode = map.setNamedItemNS(arg);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 10;
			}
		}
		if (!success) {
			return "setNamedItemNS01: Exception INUSE_ATTRIBUTE_ERR expected";
		}
		return "setNamedItemNS01: OK";
	} catch (e) {
		return "setNamedItemNS01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="setNamedItemNS02.xml" fleur="setNamedItemNS02" native="setNamedItemNS02"><Fleur>(function(){
	var success;
	try {
		var namespaceURI = "http://www.usa.com";
		var qualifiedName = "dmstc:domestic";
		var doc;
		var anotherDoc;
		var arg;
		var elementList;
		var testAddress;
		var attributes;
		var setNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		var anotherDocReq = new XMLHttpRequest();
		anotherDocReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		anotherDocReq.send();
		anotherDoc = new Fleur.DOMParser().parseFromString(anotherDocReq.responseText, "text/xml");
		arg = anotherDoc.createAttributeNS(namespaceURI, qualifiedName);
		arg.nodeValue = "Maybe";
		elementList = doc.getElementsByTagName("address");
		testAddress = elementList.item(0);
		attributes = testAddress.attributes;
		success = false;
		try {
			setNode = attributes.setNamedItemNS(arg);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 4;
			}
		}
		if (!success) {
			return "setNamedItemNS02: Exception WRONG_DOCUMENT_ERR expected";
		}
		return "setNamedItemNS02: OK";
	} catch (e) {
		return "setNamedItemNS02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var namespaceURI = "http://www.usa.com";
		var qualifiedName = "dmstc:domestic";
		var doc;
		var anotherDoc;
		var arg;
		var elementList;
		var testAddress;
		var attributes;
		var setNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		var anotherDocReq = new XMLHttpRequest();
		anotherDocReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		anotherDocReq.send();
		anotherDoc = new DOMParser().parseFromString(anotherDocReq.responseText, "text/xml");
		arg = anotherDoc.createAttributeNS(namespaceURI, qualifiedName);
		arg.nodeValue = "Maybe";
		elementList = doc.getElementsByTagName("address");
		testAddress = elementList.item(0);
		attributes = testAddress.attributes;
		success = false;
		try {
			setNode = attributes.setNamedItemNS(arg);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 4;
			}
		}
		if (!success) {
			return "setNamedItemNS02: Exception WRONG_DOCUMENT_ERR expected";
		}
		return "setNamedItemNS02: OK";
	} catch (e) {
		return "setNamedItemNS02: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="setNamedItemNS03.xml" fleur="setNamedItemNS03" native="setNamedItemNS03"><Fleur>(function(){
	var success;
	try {
		var namespaceURI = "http://www.nist.gov";
		var qualifiedName = "prefix:newAttr";
		var doc;
		var arg;
		var elementList;
		var testAddress;
		var attributes;
		var retnode;
		var value;
		var setNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		arg = doc.createAttributeNS(namespaceURI, qualifiedName);
		arg.nodeValue = "newValue";
		elementList = doc.getElementsByTagName("address");
		testAddress = elementList.item(0);
		attributes = testAddress.attributes;
		setNode = attributes.setNamedItemNS(arg);
		retnode = attributes.getNamedItemNS(namespaceURI, "newAttr");
		value = retnode.nodeValue;
		if ("newValue" !== value) {
			return "setNamedItemNS03: #throw_Equals 'value' equals '" + value + "' not '" + "newValue" + "'";
		}
		return "setNamedItemNS03: OK";
	} catch (e) {
		return "setNamedItemNS03: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var namespaceURI = "http://www.nist.gov";
		var qualifiedName = "prefix:newAttr";
		var doc;
		var arg;
		var elementList;
		var testAddress;
		var attributes;
		var retnode;
		var value;
		var setNode;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		arg = doc.createAttributeNS(namespaceURI, qualifiedName);
		arg.nodeValue = "newValue";
		elementList = doc.getElementsByTagName("address");
		testAddress = elementList.item(0);
		attributes = testAddress.attributes;
		setNode = attributes.setNamedItemNS(arg);
		retnode = attributes.getNamedItemNS(namespaceURI, "newAttr");
		value = retnode.nodeValue;
		if ("newValue" !== value) {
			return "setNamedItemNS03: #throw_Equals 'value' equals '" + value + "' not '" + "newValue" + "'";
		}
		return "setNamedItemNS03: OK";
	} catch (e) {
		return "setNamedItemNS03: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="setNamedItemNS04.xml" fleur="setNamedItemNS04" native="setNamedItemNS04"><Fleur>(function(){
	var success;
	try {
		var namespaceURI = "http://www.w3.org/2000/xmlns/";
		var localName = "local1";
		var doc;
		var elementList;
		var testAddress;
		var nList;
		var child;
		var n2List;
		var child2;
		var attributes;
		var arg;
		var setNode;
		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("gender");
		testAddress = elementList.item(2);
		nList = testAddress.childNodes;
		child = nList.item(0);
		nodeType = child.nodeType;
		if ((1 == nodeType)) {
			child = doc.createEntityReference("ent4");
			if (child == null) {
				return "setNamedItemNS04: #createdEntRefNotNull 'child' is null";
			}
		}
		n2List = child.childNodes;
		child2 = n2List.item(0);
		if (child2 == null) {
			return "setNamedItemNS04: #notnull 'child2' is null";
		}
		attributes = child2.attributes;
		arg = attributes.getNamedItemNS(namespaceURI, localName);
		success = false;
		try {
			setNode = attributes.setNamedItemNS(arg);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "setNamedItemNS04: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "setNamedItemNS04: OK";
	} catch (e) {
		return "setNamedItemNS04: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var namespaceURI = "http://www.w3.org/2000/xmlns/";
		var localName = "local1";
		var doc;
		var elementList;
		var testAddress;
		var nList;
		var child;
		var n2List;
		var child2;
		var attributes;
		var arg;
		var setNode;
		var nodeType;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		elementList = doc.getElementsByTagName("gender");
		testAddress = elementList.item(2);
		nList = testAddress.childNodes;
		child = nList.item(0);
		nodeType = child.nodeType;
		if ((1 == nodeType)) {
			child = doc.createEntityReference("ent4");
			if (child == null) {
				return "setNamedItemNS04: #createdEntRefNotNull 'child' is null";
			}
		}
		n2List = child.childNodes;
		child2 = n2List.item(0);
		if (child2 == null) {
			return "setNamedItemNS04: #notnull 'child2' is null";
		}
		attributes = child2.attributes;
		arg = attributes.getNamedItemNS(namespaceURI, localName);
		success = false;
		try {
			setNode = attributes.setNamedItemNS(arg);
		} catch (ex) {
			if (typeof ex.code != 'undefined') {
				success = ex.code === 7;
			}
		}
		if (!success) {
			return "setNamedItemNS04: Exception NO_MODIFICATION_ALLOWED_ERR expected";
		}
		return "setNamedItemNS04: OK";
	} catch (e) {
		return "setNamedItemNS04: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="setNamedItemNS05.xml" fleur="setNamedItemNS05" native="setNamedItemNS05"><Fleur>(function(){
	var success;
	try {
		var namespaceURI = "http://www.usa.com";
		var qualifiedName = "dmstc:domestic";
		var doc;
		var arg;
		var elementList;
		var testAddress;
		var attributes;
		var retnode;
		var value;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		arg = doc.createAttributeNS(namespaceURI, qualifiedName);
		arg.nodeValue = "newValue";
		elementList = doc.getElementsByTagName("address");
		testAddress = elementList.item(0);
		attributes = testAddress.attributes;
		retnode = attributes.setNamedItemNS(arg);
		value = retnode.nodeValue;
		if ("Yes" !== value) {
			return "setNamedItemNS05: #throw_Equals 'value' equals '" + value + "' not '" + "Yes" + "'";
		}
		return "setNamedItemNS05: OK";
	} catch (e) {
		return "setNamedItemNS05: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var namespaceURI = "http://www.usa.com";
		var qualifiedName = "dmstc:domestic";
		var doc;
		var arg;
		var elementList;
		var testAddress;
		var attributes;
		var retnode;
		var value;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		arg = doc.createAttributeNS(namespaceURI, qualifiedName);
		arg.nodeValue = "newValue";
		elementList = doc.getElementsByTagName("address");
		testAddress = elementList.item(0);
		attributes = testAddress.attributes;
		retnode = attributes.setNamedItemNS(arg);
		value = retnode.nodeValue;
		if ("Yes" !== value) {
			return "setNamedItemNS05: #throw_Equals 'value' equals '" + value + "' not '" + "Yes" + "'";
		}
		return "setNamedItemNS05: OK";
	} catch (e) {
		return "setNamedItemNS05: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
     <suite.member href="systemId01.xml" fleur="systemId01" native="systemId01"><Fleur>(function(){
	var success;
	try {
		var doc;
		var docType;
		var systemId;
		var index;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new Fleur.DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		systemId = docType.systemId;
		assertURIEquals("systemId",null,null,null,"staffNS.dtd",null,null,null,null,systemId);
		return "systemId01: OK";
	} catch (e) {
		return "systemId01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Fleur><Native>(function(){
	var success;
	try {
		var doc;
		var docType;
		var systemId;
		var index;
		var docReq = new XMLHttpRequest();
		docReq.open("GET", "W3CTestSuite/level2/core/files/staffNS.xml", false);
		docReq.send();
		doc = new DOMParser().parseFromString(docReq.responseText, "text/xml");
		docType = doc.doctype;
		systemId = docType.systemId;
		assertURIEquals("systemId",null,null,null,"staffNS.dtd",null,null,null,null,systemId);
		return "systemId01: OK";
	} catch (e) {
		return "systemId01: Unexpected exception " + (e.stack ? "\n" + e.stack : e);
	}
})();</Native></suite.member>
</suite>